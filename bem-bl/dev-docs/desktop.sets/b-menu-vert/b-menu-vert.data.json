{"name":"b-menu-vert","description":[{"content":"<h2 id=\"-\">Описание</h2>\n<p>Блок, создает разметку для вертикального меню. Построен на основе блока-хелпера <strong>i-menu</strong>.</p>\n<h2 id=\"-\">Варианты использования</h2>\n<ul>\n<li><strong>Простое вертикальное меню:</strong> в качестве контента элементов <code>item</code> в простых случаях используются ссылки.</li>\n<li><strong>Вертикальное js-меню с псевдоссылками:</strong> в качестве контента элементов <code>item</code> используются не ссылки, уводящие пользователя на другую страницу, а псевдоссылки для клиентского JavaScript-приложения. Для этого в BEMJSON-декларации доопределяем обычные ссылки до псевдо-ссылок, используя модификатор `{ pseudo: &#39;yes&#39; }.</li>\n<li><strong>Вертикальное js-меню со сложным контентом:</strong> Пункты меню могут содержать не один, а несколько блоков. </li>\n<li><strong>Раскрывающееся вертикальное js-меню:</strong> Если нужно сразу показать вложенное меню раскрытым, эти модификаторы следует явно задать в <strong>BEMJSON</strong>-описании блока.</li>\n<li><strong>Вложенные меню:</strong> <strong>BEMJSON</strong> позволяет вкладывать одни блоки в другие. Содержанием пункта меню может быть другое меню, и тогда естественным образом образуется вложенность.\nТакое использование меню создаст в <strong>DOM</strong>-дереве два блока (и два узла <code>ul</code>), которые будут вести себя соответственно.</li>\n</ul>\n<h2 id=\"-\">Объявление блока на странице</h2>\n<p>В простейшем случае в <strong>BEMJSON</strong> достаточно объявить блок и перечислить его элементы <code>item</code> в свойстве <code>content</code>:</p>\n<pre><code class=\"lang-js\">{\n  block: &#39;b-menu-vert&#39;,\n  content: [\n    {\n      elem: &#39;item&#39;,\n      content: &#39;Index&#39;\n    },\n    {\n      elem: &#39;item&#39;,\n      content: &#39;Contacts&#39;\n    },\n    //...\n  ]\n}\n</code></pre>\n<p>HTML-представление:</p>\n<pre><code>    &lt;div class=&quot;b-menu-vert&quot;&gt;\n        &lt;ul class=&quot;b-menu-vert__layout&quot;&gt;\n            &lt;li class=&quot;b-menu-vert__layout-unit b-menu-vert__layout-unit_position_first&quot;&gt;\n                &lt;div class=&quot;b-menu-vert__item&quot;&gt;Index&lt;/div&gt;\n            &lt;/li&gt;\n            &lt;li class=&quot;b-menu-vert__layout-unit b-menu-vert__layout-unit_position_last&quot;&gt;\n                &lt;div class=&quot;b-menu-vert__item&quot;&gt;Contacts&lt;/div&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n</code></pre><p>В получившемся <strong>HTML</strong> появляются не только узлы для блока и явно заданных элементов <code>item</code>, но и разметка для элементов <code>layout</code> и <code>layout-unit</code>, которые отвечают за геометрическую отрисовку блока.</p>\n<p>Описанные ниже варианты деклараций блока в BEMJSON-файле представлены в разделе &quot;Примеры&quot;.</p>\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"__item\">__item</h3>\n<p>Элемент меню<br><code>{ elem: &#39;item&#39; }</code>\nСодержанием элементов меню может быть что угодно: ссылки на страницы, псевдоссылки, иконки и вообще любые блоки.</p>\n<h3 id=\"__title\">__title</h3>\n<p>Элемент служит для отображения заголовка меню. \n<code>{ elem: &#39;title&#39; }</code>\nВ <strong>BEMJSON</strong> необходимо указать свойство <code>title</code>.</p>\n<pre><code class=\"lang-js\">{\n  block: &#39;b-menu-vert&#39;,\n  title: {\n    elem: &#39;title&#39;,\n    content: &#39;Menu title&#39;\n  },\n  content: { ... }\n}\n</code></pre>\n<h3 id=\"__separator\">__separator</h3>\n<p>Специальный символ, который разделяет пункты меню\n<code>{ elem: &#39;separator&#39; }</code>\nПредусмотрена возможность создания пустого элемента списка для визуального разделения одних пунктов от других.<br>Для этого на уровне переопределения проекта нужно задать <strong>CSS</strong>-правила для него.\nЧаще всего <code>separator</code> представляют в виде горизонтальной черты.</p>\n<h3 id=\"__item-selector\">__item-selector</h3>\n<p><code>{ elem: &#39;item-selector&#39; }</code>\n<strong>Вертикальное js-меню с псевдоссылками</strong>\nКроме внешнего вида, <strong>js</strong>-меню отличается и клиентской функциональностью: оно способно по клику левой кнопкой мыши переключать соответствующий пункт меню в состояние <code>{ state: &#39;current&#39; }</code> и генерировать на <code>js</code>-объекте, соответствующем блоку, событие о факте переключения пункта меню.</p>\n<p>Для использования этой функциональности необходимо определить элемент <code>item-selector</code>. Эти элементы специально не совпадают с элементами <code>item</code>, потому что чаще всего сам пункт меню больше по размеру, чем его активная область.</p>\n<p>Элемент <code>item-selector</code> можно использовать как сам по себе, так и примешивая его к другим элементам или блокам. В данном случае можно сделать <code>mix</code> с псевдоссылками.</p>\n<p><strong>Вертикальное js-меню со сложным контентом</strong>\nПункты меню могут содержать не один, а несколько блоков.</p>\n<p>Поскольку реакция на клик необходима для всего содержания пункта меню, элемент <code>item-selector</code> используется в таком случае в явном виде, являясь контейнером для содержания пункта меню.\nВ этом случае он представлен в <strong>DOM</strong>-дереве узлом <code>span</code>.</p>\n<h3 id=\"__item-content\">__item-content</h3>\n<p><code>{ elem: &#39;item-conten&#39; }</code>\nЭлемент <code>item-content</code> с содержанием показывается или скрывается в зависимости от кликов по элементу <code>item-selector</code>. Описывается свойством <code>item-content</code>.</p>\n<p>Элемент <code>item-content</code> не видим, в случае, если элемент <code>trigger</code> не содержит модификатора <code>state</code>, а элемент <code>item-content</code> не содержит модификатора <code>visibility</code>.</p>\n<h3 id=\"__trigger\">__trigger</h3>\n<p><code>{ elem: &#39;trigger&#39; }</code>\nПри клике на элементе <code>trigger</code> левой кнопкой мыши он приобретает модификатор <code>{ state: &#39;opened&#39; }</code>. Элемент <code>item-content</code> в это же время приобретает модификатор <code>{ visibility: &#39;visible&#39; }</code> и становится виден на странице.</p>\n<p>По умолчанию не содержит модификатора <code>state</code>.</p>\n<h3 id=\"__submenu\">__submenu</h3>\n<p><code>{ elem: &#39;submenu&#39; }</code>\nЭлемент <code>submenu</code> дает возможность визуально представить меню как вложенное, но функционально — как один блок (например, со сквозным поведением активного пункта меню).</p>\n<p>Элемент <code>submenu</code> должен содержаться в элементе <code>item-content</code> и включать в себя описание элементов <code>item</code> для вложеннего меню.</p>\n<h2 id=\"-\">Модификаторы элементов</h2>\n<h3 id=\"_state_current\">_state_current</h3>\n<p><code>{ ElemMods: { state: &#39;current&#39; } }</code>\nУ одного из элементов <code>item</code> может быть модификатор <code>{ state: &#39;current&#39; }</code>, отмечающий выделенный пункт меню. \nМодификатор используется как для визуального выделения пункта при помощи <strong>CSS</strong>-правил для этого модификатора, так и для описания функционального поведения.</p>\n<p>Элемент вертикального меню, может содержать любой контент, чаще всего это ссылки или псевдо-ссылки.</p>\n<p>Имеет состояния: <code>[ current, disabled ]</code></p>\n<p>﻿Не используется без элемента <code>item-selector</code>. По умолчанию невидим.</p>\n<p>﻿Добавление этого модификатора делает видимым элемент <strong>item-content</strong>.</p>\n<p>Этот элемент появляется в меню, когда требуется реакция на клик по пункту меню.</p>\n<p>Реакция на клик может понадобиться, если при выборе пункта меню нужно что-то сделать на клиенте. Например, загрузить контент по <strong>AJAX</strong>.</p>\n<p>Реакция есть только на клик левой кнопкой мыши. В результате клика соответствующий пункт меню (элемент <code>item</code>) приобретает модификатор <code>{ state: &#39;current&#39; }</code>, то есть пункт меню становится «выделенным» (текущим). Предыдущий выделенный пункт меню в то же время теряет модификатор <code>state</code>.</p>\n<p>В базовой <strong>CSS</strong>-реализации блока не предоставляется код для визуального выделения текущего пункта меню. Такой код можно реализовать на собственном уровне переопределения.</p>\n<p>Элемент может быть представлен в <strong>DOM</strong> отдельным узлом (<code>span</code>) или быть смиксованным с другим блоком, чаще всего с псевдо-ссылкой.</p>\n<p>Используется в случае, когда необходимо представить вложенное меню частью списка «меню-родителя».</p>\n<p>Опциональный элемент. В <strong>HTML</strong> представлен тегом <code>h3</code>, выводится перед списком (<code>ul</code>).</p>\n<p>Может содержать внутри себя опциональный элемент <code>trigger-icon</code>, который используется для отображения иконок.</p>\n"}],"examples":[{"url":"b-menu-vert.examples/10-b-menu-vert-simple/_10-b-menu-vert-simple"},{"url":"b-menu-vert.examples/20-b-menu-vert-js/_20-b-menu-vert-js"},{"url":"b-menu-vert.examples/30-b-menu-vert-js-complex/_30-b-menu-vert-js-complex"},{"url":"b-menu-vert.examples/40-b-menu-vert-trigger/_40-b-menu-vert-trigger"},{"url":"b-menu-vert.examples/50-b-menu-vert-trigger-deep/_50-b-menu-vert-trigger-deep"},{"url":"b-menu-vert.examples/60-b-menu-vert-submenu/_60-b-menu-vert-submenu"},{"url":"b-menu-vert.examples/70-b-menu-vert-submenu-trigger/_70-b-menu-vert-submenu-trigger"}]}