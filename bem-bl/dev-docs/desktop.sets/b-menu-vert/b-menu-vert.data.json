{"name":"b-menu-vert","description":[{"content":"<p>﻿Блок, создает разметку для вертикального меню. Построен на основе блока-хелпера ##i-menu##.</p>\n<p>==== Простое вертикальное меню\nВ простейшем случае в ##BEMJSON## достаточно объявить блок и перечислить его элементы ##item## в свойстве ##content##:</p>\n<p>%%hl js\n{\n  block: &#39;b-menu-vert&#39;,\n  content: [\n    {\n      elem: &#39;item&#39;,\n      content: &#39;Index&#39;\n    },\n    {\n      elem: &#39;item&#39;,\n      content: &#39;Contacts&#39;\n    },\n    ...\n  ]\n}\n%%</p>\n<p>В получившемся ##HTML## появляются не только узлы для блока и явно заданных элементов ##item##, но и\nразметка для элементов ##layout## и ##layout-unit##, которые отвечают за геометрическую отрисовку блока.</p>\n<p>В качестве контента элементов ##item## в простых случаях используются ссылки:</p>\n<p>%%hl js\n{\n  block: &#39;b-menu-vert&#39;,\n  content: [\n    {\n      elem: &#39;item&#39;,\n      content: {\n        block: &#39;b-link&#39;,\n        url: &#39;<a href=\"http://yandex.com\">http://yandex.com</a>&#39;,\n        content: &#39;Index&#39;\n      }\n    },\n    ...\n  ]\n}\n%%</p>\n<p>У одного из элементов ##item## может быть модификатор ##{ state: &#39;current&#39; }##,\nотмечающий выделенный пункт меню. Модификатор используется как для визуального выделения\nпункта при помощи ##CSS##-правил для этого модификатора, так и для описания функционального\nповедения.</p>\n<p>%%hl js\n{\n  block: &#39;b-menu-vert&#39;,\n  content: [\n    {\n      elem: &#39;item&#39;,\n      elemMods: { state: &#39;current&#39; },\n      content: {\n        block: &#39;b-link&#39;,\n        url: &#39;<a href=\"http://yandex.com\">http://yandex.com</a>&#39;,\n        content: &#39;Index&#39;\n      }\n    },\n    {\n      elem: &#39;item&#39;,\n      content: { ... }\n  ]\n}\n%%</p>\n<p>Для отображения заголовка меню (элемент ##title##), в ##BEMJSON## необходимо указать свойство ##title##:</p>\n<p>%%hl js\n{\n  block: &#39;b-menu-vert&#39;,\n  title: {\n    elem: &#39;title&#39;,\n    content: &#39;Menu title&#39;\n  },\n  content: [\n    {\n      elem: &#39;item&#39;,\n      elemMods: { state: &#39;current&#39; },\n      content: {\n        block: &#39;b-link&#39;,\n        url: &#39;<a href=\"http://yandex.com\">http://yandex.com</a>&#39;,\n        content: &#39;Index&#39;\n      }\n    },\n    {\n      elem: &#39;item&#39;,\n      content: { ... }\n  ]\n}\n%%</p>\n<p>Предусмотрена возможность создания пустого элемента списка для визуального\nразделения одних пунктов от других. За это отвечает элемент ##separator##.\nДля этого на уровне переопределения проекта нужно задать ##CSS##-правила для него.\nЧаще всего ##separator## представляют в виде горизонтальной черты.</p>\n<p>%%hl js\n{\n  block: &#39;b-menu-vert&#39;,\n  content: [\n    {\n      elem: &#39;item&#39;,\n      content: { ... }\n    },\n    {\n      elem: &#39;separator&#39;\n    },\n    {\n      elem: &#39;item&#39;,\n      content: { ... }\n    }\n  ]\n}\n%%</p>\n<p>==== Вертикальное js-меню с псевдоссылками</p>\n<p>В ##BEMJSON## доопределяем обычные ссылки до псевдо-ссылок, используя модификатор ##{ pseudo: &#39;yes&#39; }##:</p>\n<p>%%hl js\n{\n  block: &#39;b-menu-vert&#39;,\n  content: [\n    {\n      elem: &#39;item&#39;,\n      elemMods: { &#39;state&#39;: &#39;current&#39; },\n      content: {\n        block: &#39;b-link&#39;,\n        mods: { &#39;pseudo&#39;: &#39;yes&#39; },\n        content: &#39;First point&#39;\n      }\n    },\n    ...\n  ]\n}\n%%</p>\n<p>Кроме внешнего вида, ##js##-меню отличается и клиентской функциональностью: оно\nспособно по клику левой кнопкой мыши переключать соответствующий пункт меню\nв состояние ##{ state: &#39;current&#39; }## и генерировать на ##js##-объекте, соответствующем блоку,\nсобытие о факте переключения пункта меню.</p>\n<p>Для использования этой функциональности необходимо определить ((#__item-selector элементы ##item-selector##)). Эти элементы специально не совпадают\nс элементами ##item##, потому что чаще всего сам пункт меню больше по размеру, чем его активная область.</p>\n<p>Элемент ##item-selector## можно использовать как сам по себе, так и примешивая его\nк другим элементам или блокам. В данном случае можно сделать ##mix## с псевдоссылками:</p>\n<p>%%hl js\n{\n  block: &#39;b-menu-vert&#39;,\n  content: [\n    {\n      elem: &#39;item&#39;,\n      elemMods: { &#39;state&#39;: &#39;current&#39; },\n      content: {\n        block: &#39;b-link&#39;,\n        mods: { &#39;pseudo&#39;: &#39;yes&#39; },\n        mix: [{ block: &#39;b-menu-vert&#39;, elem: &#39;item-selector&#39; }],\n        url: &#39;/&#39;,\n        content: &#39;First point&#39;\n      }\n    },\n    ...\n  ]\n}\n%%</p>\n<p>==== Вертикальное js-меню со сложным контентом</p>\n<p>Пункты меню могут содержать не один, а несколько блоков.</p>\n<p>Поскольку реакция на клик необходима для всего содержания пункта меню, элемент ##item-selector##\nиспользуется в таком случае в явном виде, являясь контейнером для содержания пункта меню.\nВ этом случае он представлен в ##DOM##-дереве узлом ##span##:</p>\n<p>%%hl js\n{\n  elem: &#39;item&#39;,\n  content: {\n    elem: &#39;item-selector&#39;,\n    content: [\n      {\n        block: &#39;b-link&#39;,\n        mods: { &#39;pseudo&#39;: &#39;yes&#39;, &#39;inner&#39;: &#39;yes&#39; },\n        mix: [{ block: &#39;b-menu-vert&#39;, elem: &#39;item-selector&#39; }],\n        url: &#39;/&#39;,\n        content: [\n          {\n            block: &#39;b-icon&#39;,\n            url: &#39;/&#39;,\n            alt: &#39;Yandex favicon&#39;\n          },\n          {\n            elem: &#39;inner&#39;,\n            content: &#39;Second point&#39;\n          }\n        ]\n      },\n      &#39; One more element here&#39;\n    ]\n  }\n}\n%%</p>\n<p>==== Раскрывающееся вертикальное js-меню</p>\n<p>Переключение активного пункта меню — не единственная реализованная\nдинамическая функциональность. Пункты меню также могут содержать элементы</p>\n<h2 id=\"trigger-\">trigger##, клик по которым открывает или скрывает дочерний контент. С помощью</h2>\n<p>таких элементов можно реализовать скрывающиеся вложенные меню.</p>\n<p>Так же, как и элемент ##item-selector##, элемент ##trigger## может использоваться\nне явно, а через ##mix##.</p>\n<p>%%hl js\n{\n  block: &#39;b-menu-vert&#39;,\n  content: [\n    {\n      elem: &#39;item&#39;,\n      elemMods: { state: &#39;current&#39; },\n      content: &#39;Videos&#39;\n    },\n    {\n      elem: &#39;item&#39;,\n      content: {\n        block: &#39;b-link&#39;,\n        mods: { pseudo: &#39;yes&#39;, inner: &#39;yes&#39; },\n        mix: [{ block: &#39;b-menu-vert&#39;, elem: &#39;trigger&#39; }],\n        content: [\n          {\n            block: &#39;b-icon&#39;,\n            mix: [{ block: &#39;b-menu-vert&#39;, elem: &#39;trigger-icon&#39; }],\n            alt: &#39;trigger&#39;\n          },\n          {\n            elem: &#39;inner&#39;,\n            content: &#39;Images&#39;\n          }\n        ]\n      },\n      &#39;item-content&#39;: {\n        elem: &#39;item-content&#39;,\n        content: {\n          block: &#39;b-menu-vert&#39;,\n          mods: { &#39;type&#39;: &#39;submenu&#39; },\n          content: [\n            {\n              elem: &#39;item&#39;,\n              content: &#39;Any size&#39;\n            },\n            {\n              elem: &#39;item&#39;,\n              content: &#39;Large&#39;\n            },\n            {\n              elem: &#39;item&#39;,\n              content: &#39;Medium&#39;\n            }\n          ]\n        }\n      }\n    },\n    ...\n  ]\n}\n%%</p>\n<p>Кроме элемента ##item-selector## здесь используется свойство ##item-content##, описывающее\nэлемент ##item-content## с содержанием, которое показывается или скрывается в зависимости\nот кликов по элементу ##item-selector##.</p>\n<p>Элемент ##trigger-icon## используется только для обозначения иконки. Не является обязательным элементом.</p>\n<p>По умолчанию элемент ##trigger## не содержит модификатора ##state##, а элемент ##item-content##\nне содержит модификатора ##visibility##. В этом состоянии содержание элемента ##item-content## не видно.\\\nПри клике на элементе ##trigger## левой кнопкой мыши он приобретает модификатор</p>\n<h2 id=\"-state-opened-item-content-\">{ state: &#39;opened&#39; }##. Элемент ##item-content## в это же время приобретает</h2>\n<p>модификатор ##{ visibility: &#39;visible&#39; }## и становится виден на странице.</p>\n<p>Если нужно сразу показать вложенное меню раскрытым, эти модификаторы\nследует явно задать в ##BEMJSON##-описании блока:</p>\n<p>%%hl js\n{\n  block: &#39;b-link&#39;,\n  mods: { pseudo: &#39;yes&#39;, inner: &#39;yes&#39; },\n  mix: [{ block: &#39;b-menu-vert&#39;, elem: &#39;trigger&#39;, elemMods: { state: &#39;opened&#39; } }],\n  content: { ... }\n}\n%%</p>\n<p>%%hl js\n&#39;item-content&#39;: {\n  elem: &#39;item-content&#39;,\n  elemMods: { visibility: &#39;visible&#39; },\n  content: [ ... ]\n%%</p>\n<p>==== Вложенные меню</p>\n<h2 id=\"bemjson-\">BEMJSON## позволяет вкладывать одни блоки в другие. Содержанием пункта меню может быть</h2>\n<p>другое меню, и тогда естественным образом образуется вложенность.\\\nТакое использование меню создаст в ##DOM##-дереве два блока (и два узла ##ul##), которые\nбудут вести себя соответственно.</p>\n<p>Если есть необходимость визуально представить меню как вложенное, но функционально —\nкак один блок (например, со сквозным поведением активного пункта меню), нужно\nвоспользоваться элементом ##submenu##.</p>\n<p>Элемент ##submenu## должен содержаться в элементе ##item-content## и включать в\nсебя описание элементов ##item## для вложеннего меню.</p>\n<p>Элемент вертикального меню, может содержать любой контент, чаще всего это ссылки или псевдо-ссылки.\\\nИмеет состояния: ##[ current, disabled ]##</p>\n<p>﻿Не используется без элемента ##item-selector##. По умолчанию невидим.\n﻿Добавление этого модификатора делает видимым элемент ##item-content##.</p>\n<p>﻿Этот элемент появляется в меню, когда требуется реакция на клик по\nпункту меню.\\\nРеакция на клик может понадобиться, если при выборе пункта меню нужно\nчто-то сделать на клиенте. Например, загрузить контент по ##AJAX##.</p>\n<p>Реакция есть только на клик левой кнопкой мыши. В результате клика соответствующий\nпункт меню (элемент ##item##) приобретает модификатор ##{ state: &#39;current&#39; }##, то\nесть пункт меню становится «выделенным» (текущим). Предыдущий выделенный пункт меню в то же время\nтеряет модификатор ##state##.\\\nВ базовой ##CSS##-реализации блока не предоставляется код для визуального\nвыделения текущего пункта меню. Такой код можно реализовать на собственном уровне\nпереопределения.</p>\n<p>Элемент может быть представлен в ##DOM## отдельным узлом (##span##) или быть\nсмиксованным с другим блоком, чаще всего с псевдо-ссылкой.</p>\n<p>Используется в случае, когда необходимо представить вложенное меню\nчастью списка «меню-родителя».</p>\n<p>Опциональный элемент. В ##HTML## представлен тегом ##h3##, выводится перед списком (##ul##).\nМожет содержать внутри себя опциональный элемент ##trigger-icon##, который используется для отображения иконок.</p>\n"}],"examples":[{"url":"b-menu-vert.examples/10-b-menu-vert_simple/_10-b-menu-vert_simple"},{"url":"b-menu-vert.examples/20-b-menu-vert_js/_20-b-menu-vert_js"},{"url":"b-menu-vert.examples/30-b-menu-vert_js-complex/_30-b-menu-vert_js-complex"},{"url":"b-menu-vert.examples/40-b-menu-vert_trigger/_40-b-menu-vert_trigger"},{"url":"b-menu-vert.examples/50-b-menu-vert_trigger-deep/_50-b-menu-vert_trigger-deep"},{"url":"b-menu-vert.examples/60-b-menu-vert_submenu/_60-b-menu-vert_submenu"},{"url":"b-menu-vert.examples/70-b-menu-vert_submenu-trigger/_70-b-menu-vert_submenu-trigger"}]}