{"en":{"name":"model","description":[{"content":""}],"examples":[{"content":[]}]},"ru":{"name":"model","description":[{"content":"<h2 id=\"__constructor-modelparams-modelparams-name-modelparams-id-modelparams-parentname-modelparams-parentpath-modelparams-parentmodel-data-\">__constructor(modelParams, modelParams.name, [modelParams.id], [modelParams.parentName], [modelParams.parentPath], [modelParams.parentModel], [data])</h2>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  параметры модели</p>\n<p><strong>modelParams.name</strong>:  <em>String</em>,  имя модели</p>\n<p><strong>[modelParams.id]</strong>:  <em>String|Number</em>,  идентификатор модели</p>\n<p><strong>[modelParams.parentName]</strong>:  <em>String</em>,  имя родительской модели</p>\n<p><strong>[modelParams.parentPath]</strong>:  <em>String</em>,  путь родительской модели</p>\n<p><strong>[modelParams.parentModel]</strong>:  <em>Object</em>,  экземпляр родительской модели</p>\n<p><strong>[data]</strong>:  <em>Object</em>,  данные для инициализации полей модели</p>\n<h2 id=\"path-\">path()</h2>\n<p>Возвращает путь модели</p>\n<h2 id=\"_initfields-data-\">_initFields(data)</h2>\n<p>Инициализирует поля модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>data</strong>:  <em>Object</em>,  данные для инициализации полей модели</p>\n<h2 id=\"_calcdependsto-name-opts-\">_calcDependsTo(name, opts)</h2>\n<p>Вычиляет заначения зависимых полей</p>\n<p><strong>Parameters</strong></p>\n<p><strong>name</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>opts</strong>:  <em>Object</em>,  дополнительные парметры доступные в обработчиках событий</p>\n<h2 id=\"get-name-type-\">get(name, [type])</h2>\n<p>Возвращает значение поля</p>\n<p><strong>Parameters</strong></p>\n<p><strong>name</strong>:  <em>String</em>,  </p>\n<p><strong>[type]</strong>:  <em>String</em>,  формат предтавления значения. по умолчанию вызывается get, либо raw/formatted</p>\n<h2 id=\"set-name-value-opts-\">set(name, value, [opts])</h2>\n<p>Задает значение полю модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>name</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>value</strong>:  <em>*</em>,  значение</p>\n<p><strong>[opts]</strong>:  <em>Object</em>,  дополнительные парметры доступные в обработчиках событий change</p>\n<h2 id=\"clear-name-opts-\">clear([name], [opts])</h2>\n<p>Очищает поля модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[name]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>[opts]</strong>:  <em>Object</em>,  дополнительные парметры доступные в обработчиках событий change</p>\n<h2 id=\"update-data-opts-\">update(data, [opts])</h2>\n<p>Задает поля модели по данным из объекта, генерирует событие update на модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>data</strong>:  <em>Object</em>,  данные устанавливаемые в модели</p>\n<p><strong>[opts]</strong>:  <em>Object</em>,  доп. параметры</p>\n<h2 id=\"hasfield-name-\">hasField(name)</h2>\n<p>Проверяет наличие поля у модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>name</strong>:  <em>String</em>,  имя поля</p>\n<h2 id=\"isempty-name-\">isEmpty([name])</h2>\n<p>Проверяет поле или всю модель на пустоту</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[name]</strong>:  <em>String</em>,  </p>\n<h2 id=\"ischanged-name-\">isChanged([name])</h2>\n<p>Проверяет, изменилось ли значение поля или любого из полей с момента последней фиксации</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[name]</strong>:  <em>String</em>,  имя поля</p>\n<h2 id=\"gettype-name-\">getType(name)</h2>\n<p>Возвращает тип поля</p>\n<p><strong>Parameters</strong></p>\n<p><strong>name</strong>:  <em>String</em>,  имя поля</p>\n<h2 id=\"fix-opts-\">fix([opts])</h2>\n<p>Кеширует значения полей модели, генерирует событие fix на модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[opts]</strong>:  <em>Object</em>,  доп. параметры</p>\n<h2 id=\"rollback-opts-\">rollback([opts])</h2>\n<p>Восстанавливает значения полей модели из кеша, генерирует событие update на модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[opts]</strong>:  <em>Object</em>,  доп. параметры</p>\n<h2 id=\"tojson-\">toJSON()</h2>\n<p>Возвращает объект с данными модели</p>\n<h2 id=\"on-field-e-data-fn-ctx-\">on([field], e, [data], fn, ctx)</h2>\n<p>Назначает обработчик события на модель или поле модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[field]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>e</strong>:  <em>String</em>,  имя события</p>\n<p><strong>[data]</strong>:  <em>Object</em>,  дополнительные данные события</p>\n<p><strong>fn</strong>:  <em>Function</em>,  обработчик события</p>\n<p><strong>ctx</strong>:  <em>Object</em>,  контекст вызова обработчика</p>\n<h2 id=\"un-field-e-fn-ctx-\">un([field], e, fn, ctx)</h2>\n<p>Удаляет обработчик события с модели или поля модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[field]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>e</strong>:  <em>String</em>,  имя события</p>\n<p><strong>fn</strong>:  <em>Function</em>,  обработчик события</p>\n<p><strong>ctx</strong>:  <em>Object</em>,  контекст вызова обработчика</p>\n<h2 id=\"trigger-field-e-data-\">trigger([field], e, [data])</h2>\n<p>Тригерит обработчик события на модели или поле модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[field]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>e</strong>:  <em>String</em>,  имя события</p>\n<p><strong>[data]</strong>,  данные доступные в обработчике события</p>\n<h2 id=\"_onfieldchange-name-opts-\">_onFieldChange(name, opts)</h2>\n<p>Тригерит (с декоратором $.throttle) событие change на модели при изменении полей</p>\n<p><strong>Parameters</strong></p>\n<p><strong>name</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>opts</strong>:  <em>Object</em>,  доп. параметры</p>\n<h2 id=\"_firechange-opts-\">_fireChange(opts)</h2>\n<p>Сгенерировать событие change на модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>opts</strong>:  <em>Object</em>,  </p>\n<h2 id=\"destruct-\">destruct()</h2>\n<p>Удаляет модель из хранилища</p>\n<h2 id=\"isvalid-\">isValid()</h2>\n<p>Возвращает результат проверки модели на валидность</p>\n<h2 id=\"validate-name-\">validate([name])</h2>\n<p>Проверяет модель на валидность, генерирует событие error с описанием ошибки(ок)</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[name]</strong>:  <em>String</em>,  - имя поля</p>\n<h2 id=\"decl-decl-decl-model-decl-name-decl-basemodel-staticprops-\">decl(decl, decl.model|decl.name, [decl.baseModel], {{, staticProps)</h2>\n<p>Декларирует описание модели\nXXX: {String|Number},\nXXX: {\n{String} [type] тип поля\n{Boolean} [internal] внутреннее поле\n{<em>|Function} [default] дефолтное значение\n{</em>|Function} [value] начанольное значение\n{Object|Function} [validation] ф-ия конструктор объекта валидации или он сам\n{Function} [format] ф-ия форматирования\n{Function} [preprocess] ф-ия вызываемая до записи значения\n{Function} [calculate] ф-ия вычисления значения, вызывается, если изменилось одно из связанных полей\n{String|Array} [dependsFrom] массив от которых зависит значение поля\n}\n}} fields где ключ имя поля, значение строка с типом или объект вида</p>\n<p><strong>Parameters</strong></p>\n<p><strong>decl</strong>:  <em>String|Object</em>,  </p>\n<p><strong>decl.model|decl.name</strong>:  <em>String</em>,  </p>\n<p><strong>[decl.baseModel]</strong>:  <em>String</em>,  </p>\n<p><strong>{{</strong>,  </p>\n<p><strong>staticProps</strong>:  <em>Object</em>,  Статические методы и поля</p>\n<h2 id=\"_builddeps-fielddecl-modelname-\">_buildDeps(fieldDecl, modelName)</h2>\n<p>Устанавливает связи между зависимыми полями</p>\n<p><strong>Parameters</strong></p>\n<p><strong>fieldDecl</strong>:  <em>Object</em>,  декларация полей</p>\n<p><strong>modelName</strong>:  <em>String</em>,  имя модели</p>\n<h2 id=\"create-modelparams-modelparams-name-modelparams-id-modelparams-parentname-modelparams-parentid-modelparams-parentpath-modelparams-parentmodel-data-\">create(modelParams, modelParams.name, [modelParams.id], [modelParams.parentName], [modelParams.parentId], [modelParams.parentPath], [modelParams.parentModel], [data])</h2>\n<p>Создает экземпляр модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  имя модели или параметры модели</p>\n<p><strong>modelParams.name</strong>:  <em>String</em>,  имя модели</p>\n<p><strong>[modelParams.id]</strong>:  <em>String|Number</em>,  идентификатор, если не указан, создается автоматически</p>\n<p><strong>[modelParams.parentName]</strong>:  <em>String</em>,  имя родительской модели</p>\n<p><strong>[modelParams.parentId]</strong>:  <em>String|Number</em>,  идентификатор родительской модели</p>\n<p><strong>[modelParams.parentPath]</strong>:  <em>String</em>,  путь родительской модели</p>\n<p><strong>[modelParams.parentModel]</strong>:  <em>Object</em>,  экземпляр родительской модели</p>\n<p><strong>[data]</strong>:  <em>Object</em>,  данные, которыми будет проинициализирована модель</p>\n<h2 id=\"get-modelparams-modelparams-name-modelparams-id-modelparams-path-modelparams-parentname-modelparams-parentid-modelparams-parentpath-modelparams-parentmodel-dropcache-\">get(modelParams, modelParams.name, [modelParams.id], [modelParams.path], [modelParams.parentName], [modelParams.parentId], [modelParams.parentPath], [modelParams.parentModel], [dropCache])</h2>\n<p>Возвращает экземляр или массив экземпляров моделей по имени и пути</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  имя модели или параметры модели</p>\n<p><strong>modelParams.name</strong>:  <em>String</em>,  имя модели</p>\n<p><strong>[modelParams.id]</strong>:  <em>String|Number</em>,  идентификатор, если не указан, создается автоматически</p>\n<p><strong>[modelParams.path]</strong>:  <em>String</em>,  путь модели</p>\n<p><strong>[modelParams.parentName]</strong>:  <em>String</em>,  имя родительской модели</p>\n<p><strong>[modelParams.parentId]</strong>:  <em>String|Number</em>,  идентификатор родительской модели</p>\n<p><strong>[modelParams.parentPath]</strong>:  <em>String</em>,  путь родительской модели</p>\n<p><strong>[modelParams.parentModel]</strong>:  <em>Object</em>,  экземпляр родительской модели</p>\n<p><strong>[dropCache]</strong>:  <em>Boolean</em>,  Не брать значения из кеша</p>\n<h2 id=\"getone-modelparams-dropcache-\">getOne(modelParams, dropCache)</h2>\n<p>Возвращает экземпляр модели по имени или пути</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>Object|String</em>,  @see get.modelParams</p>\n<p><strong>dropCache</strong>:  <em>Boolean</em>,  @see get.dropCache</p>\n<h2 id=\"on-modelparams-field-e-fn-ctx-\">on(modelParams, [field], e, fn, [ctx])</h2>\n<p>Назначает глобальный обработчик событий на экземпляры моделей по пути</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  Имя модели или параметры описываеющие path модели</p>\n<p><strong>[field]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>e</strong>:  <em>String</em>,  имя события</p>\n<p><strong>fn</strong>:  <em>Function</em>,  обработчик события</p>\n<p><strong>[ctx]</strong>:  <em>Object</em>,  контекст выполнения обработчика</p>\n<h2 id=\"un-modelparams-field-e-fn-ctx-\">un(modelParams, [field], e, fn, [ctx])</h2>\n<p>Удаляет глобальный обработчик событий на экземпляры моделей по пути</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  Имя модели или параметры описываеющие path модели</p>\n<p><strong>[field]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>e</strong>:  <em>String</em>,  имя события</p>\n<p><strong>fn</strong>:  <em>Function</em>,  обработчик события</p>\n<p><strong>[ctx]</strong>:  <em>Object</em>,  контекст выполнения обработчика</p>\n<h2 id=\"trigger-modelparams-field-e-data-\">trigger(modelParams, [field], e, [data])</h2>\n<p>Тригерит событие на моделях по имени и пути</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  Имя модели или параметры описываеющие path модели</p>\n<p><strong>[field]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>e</strong>:  <em>String</em>,  имя события</p>\n<p><strong>[data]</strong>:  <em>Object</em>,  данные передаваемые в обработчик события</p>\n<h2 id=\"_bindtomodel-model-\">_bindToModel(model)</h2>\n<p>Назначает глобальные обработчики событий на экземпляр модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>model</strong>:  <em>BEM.MODEL</em>,  экземпляр модели</p>\n<h2 id=\"_bindtofields-model-\">_bindToFields(model)</h2>\n<p>Назначает глобальные обработчики событий на поля экземпляра модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>model</strong>:  <em>BEM.MODEL</em>,  экземпляр модели</p>\n<h2 id=\"_bindtoevents-model-events-\">_bindToEvents(model, events)</h2>\n<p>Хелпер навешивания событий на экземпляр модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>model</strong>:  <em>BEM.MODEL</em>,  экземпляр модели</p>\n<p><strong>events</strong>:  <em>Object</em>,  события</p>\n<h2 id=\"_addmodel-model-\">_addModel(model)</h2>\n<p>Добавляет модель в хранилище</p>\n<p><strong>Parameters</strong></p>\n<p><strong>model</strong>:  <em>BEM.MODEL</em>,  экземпляр модели</p>\n<h2 id=\"destruct-modelparams-\">destruct(modelParams)</h2>\n<p>Уничтожает экземпляр модели, удаляет его из хранилища</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>BEM.MODEL|String|Object</em>,  Модель, имя модели или параметры описываеющие path модели</p>\n<h2 id=\"buildpath-pathparts-pathparts-name-pathparts-id-pathparts-parentname-pathparts-parentid-pathparts-parentpath-pathparts-parentmodel-pathparts-childname-pathparts-childid-pathparts-childpath-pathparts-childmodel-\">buildPath(pathParts, pathParts.name, [pathParts.id], [pathParts.parentName], [pathParts.parentId], [pathParts.parentPath], [pathParts.parentModel], [pathParts.childName], [pathParts.childId], [pathParts.childPath], [pathParts.childModel])</h2>\n<p>Возвращает путь к модели по заданным параметрам</p>\n<p><strong>Parameters</strong></p>\n<p><strong>pathParts</strong>:  <em>Object|Array</em>,  параметры пути</p>\n<p><strong>pathParts.name</strong>:  <em>String</em>,  имя модели</p>\n<p><strong>[pathParts.id]</strong>:  <em>String|Number</em>,  идентификатор модели</p>\n<p><strong>[pathParts.parentName]</strong>:  <em>String</em>,  имя родитеской модели</p>\n<p><strong>[pathParts.parentId]</strong>:  <em>String|Number</em>,  идентификатор родительской модели</p>\n<p><strong>[pathParts.parentPath]</strong>:  <em>String|Object</em>,  путь родительской модели</p>\n<p><strong>[pathParts.parentModel]</strong>:  <em>BEM.MODEL</em>,  экземпляр родительской модели</p>\n<p><strong>[pathParts.childName]</strong>:  <em>String</em>,  имя дочерней модели</p>\n<p><strong>[pathParts.childId]</strong>:  <em>String|Number</em>,  идентификатор дочерней модели</p>\n<p><strong>[pathParts.childPath]</strong>:  <em>String|Object</em>,  путь дочерней модели</p>\n<p><strong>[pathParts.childModel]</strong>:  <em>BEM.MODEL</em>,  экземпляр дочерней модели</p>\n<h2 id=\"_getpathregexp-path-\">_getPathRegexp(path)</h2>\n<p>Возвращает строку для построения регулярного выражения проверки пути</p>\n<p><strong>Parameters</strong></p>\n<p><strong>path</strong>:  <em>String</em>,  </p>\n<h2 id=\"foreachmodel-callback-modelparams-dropcache-\">forEachModel(callback, modelParams, [dropCache])</h2>\n<p>Выполняет callback для каждой модели найденной по заданному пути. Если callback вернул false, то\nитерация остановливается</p>\n<p><strong>Parameters</strong></p>\n<p><strong>callback</strong>:  <em>Function</em>,  ф-ия выполняемая для каждой модели</p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  параметры модели</p>\n<p><strong>[dropCache]</strong>:  <em>Boolean</em>,  Не брать значения из кеша</p>\n<h2 id=\"class-\">class Конструктор модели</h2>\n"}],"examples":[{"content":[]}]}}