{
    "repo": "bem-mvc",
    "ref": "v2",
    "enb": true,
    "url": "http://github.com/bem/bem-mvc",
    "custom": [],
    "docs": {
        "changelog": {
            "title": {
                "en": "Сhangelog",
                "ru": "История изменений"
            },
            "content": {
                "en": "<h1 id=\"Changelog\">Changelog</h1>\n<h2 id=\"v-0-1\">v 0.1</h2>\n<ul>\n<li>Models&#39; API</li>\n<li>i-glue block to bind models to DOM</li>\n<li>Tests</li>\n<li>Documentation</li>\n</ul>\n",
                "ru": "<h1 id=\"История-изменений\">История изменений</h1>\n<h2 id=\"v-0-1\">v 0.1</h2>\n<ul>\n<li>API моделей</li>\n<li>Блок i-glue для провязки моделей и DOM</li>\n<li>Тесты</li>\n<li>Документация</li>\n</ul>\n"
            }
        },
        "readme": {
            "title": {
                "en": "Readme",
                "ru": "Readme"
            },
            "content": {
                "en": "<h1 id=\"BEM-blocks-library-for-MVC\">BEM blocks library for MVC</h1>\n<p>bem-mvc library contains of <code>i-bem</code> blocks to enable you to realize MVC-pattern. Gives you an API to work with models and blocks for automated binding of models with the interface.</p>\n<p><strong>Due to active development of <code>bem-core</code> and <code>bem-components</code> libraries some functionalities may work incorrect!\nWe work hard to stabilize it and welcome any efforts from you.</strong></p>\n<p>Models&#39; requirements:</p>\n<ul>\n<li>Declarative style of models&#39; description;</li>\n<li>Access to created samples of models by names and id;</li>\n<li>Automated adjustment of fields&#39; values to given types;</li>\n<li>Models&#39; validation.</li>\n</ul>\n<p>Bindings&#39; requirements:</p>\n<ul>\n<li><code>i-bem</code> oriented;</li>\n<li>Inheritance of own functionality in used <code>i-bem</code> blocks;</li>\n<li>Bindings with controls from <a href=\"https://github.com/bem/bem-components\">bem-components</a>.</li>\n</ul>\n<p>Dependancies:</p>\n<ul>\n<li><a href=\"https://github.com/bem/bem-core\">bem-core</a></li>\n<li><a href=\"https://github.com/bem/bem-components\">bem-components</a></li>\n</ul>\n<h2 id=\"Models\">Models</h2>\n<p>To use model it is necessary to declare it by seting up a name and fields&#39; description.</p>\n<pre><code class=\"lang-javascript\">BEM.MODEL.decl(&#39;model&#39;, {\n    name: &#39;string&#39;,\n    birth: {\n        type: &#39;string&#39;,\n        preprocess: function(value) {\n            return value.year + &#39;.&#39; + value.month + &#39;.&#39; + value.day;\n        }\n    },\n    height: &#39;number&#39;,\n    weight: &#39;number&#39;\n});\n</code></pre>\n<p>While declaring it is possible as well to set up model&#39;s methods (redefinition of basic methods of a model will cause an error).</p>\n<pre><code class=\"lang-javascript\">BEM.MODEL.decl(&#39;model&#39;, {\n    name: &#39;string&#39;,\n    hasBoyfriend: {\n        type: &#39;boolean&#39;,\n        default: false\n    }\n}, {\n    toggleStatus: function() {\n        this.set(&#39;hasBoyfriend&#39;, !this.get(&#39;hasBoyfriend&#39;));\n\n        return this;\n    }\n});\n\nvar model = BEM.MODEL.create(&#39;model&#39;, { name: &#39;Claudia Schiffer&#39;, hasBoyfriend: true });\nmodel.toggleStatus();\nmodel.get(&#39;hasBoyfriend&#39;); // false\n</code></pre>\n<p>Types of fields:</p>\n<ul>\n<li><code>string</code></li>\n<li><code>number</code></li>\n<li><code>boolean</code></li>\n<li><code>model</code></li>\n<li><code>array</code></li>\n<li><code>models-list</code> – a list of same type&#39;s models</li>\n</ul>\n<p>To create a model it is necessary to declare model&#39;s name and to pass initialized parameters if needed.</p>\n<pre><code class=\"lang-javascript\">var model = BEM.MODEL.create(&#39;model&#39;, {\n    name: &#39;Claudia Schiffer&#39;,\n    birth: {\n        year: 1970,\n        year: 1970,\n        month: 8,\n        day: 25\n    },\n    weight: 75,\n    height: 180.5\n});\n</code></pre>\n<p>In case of sample model&#39;s link absence it is possible to call it from an internal storage by name.</p>\n<pre><code class=\"lang-javascript\">var model = BEM.MODEL.get(&#39;model&#39;)[0];\n</code></pre>\n<p>Now we can set models&#39; fields:</p>\n<pre><code class=\"lang-javascript\">model\n    .set(&#39;weight&#39;, &#39;80&#39;) // will be converted to number\n    .set(&#39;height&#39;, 180)\n    .update({\n        weight: 80,\n        height: 180\n    });\n</code></pre>\n<p>And receive their values:</p>\n<pre><code class=\"lang-javascript\">model.get(&#39;weight&#39;); // 80\nmodel.get(&#39;birth&#39;); // &#39;1970.8.25&#39;\n\nmodel.toJSON(); // all fields of a model\n</code></pre>\n<p>Events help us to find out about changes.</p>\n<pre><code class=\"lang-javascript\">model.on(&#39;weight&#39;, &#39;change&#39;, function() {\n    alert(&#39;Time to loose some weight!&#39;);\n});\n</code></pre>\n<p>To validate a model you need to set up validations rules:</p>\n<pre><code class=\"lang-javascript\">BEM.MODEL.decl(&#39;model-with-validation&#39;, {\n    name: &#39;string&#39;,\n    birth: {\n        type: &#39;string&#39;,\n        preprocess: function(value) {\n            return value.year + &#39;.&#39; + value.month + &#39;.&#39; + value.day;\n        }\n    },\n    height: {\n        type: &#39;number&#39;,\n        validation: {             // to declare a validation function\n            validate: function(value) {\n                if (value &lt; 170) return false;\n            }\n        }\n    },\n    weight: {\n        type: &#39;number&#39;,\n        validation: {\n            rules: {               // or validation rules:\n                required: true,      // standard\n                toFat: {             // custom\n                    needToValidate: function() {        // to check whether needs to be validated\n                        if (this.get(&#39;height&#39;) &gt; 170) return true;\n                    },\n                    validate: function(value) {\n                        if (value &gt; 90) return false;\n                    }\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>And check for validity:</p>\n<pre><code class=\"lang-javascript\">model.isValid();\n</code></pre>\n<h2 id=\"Bindings\">Bindings</h2>\n<p>To bind a model with a DOM we use <code>glue</code> block. This block will &quot;glue&quot; model with DOM.\nTo bind a model to any control it is necessary to mix to parent&#39;s block a <code>glue</code> block and\nto control — model-field element of <code>glue</code> block, and to give them model&#39;s parameters.</p>\n<p>BEMJSON is such cases will look like the following:</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;b-model&#39;,\n    mix: [{\n        block: &#39;glue&#39;,                   // mix in `glue` block\n        js: {\n            modelName: &#39;model&#39;,            // set up a model&#39;s name\n            modelData: {\n                name: &#39;Claudia Schiffer&#39;,  // and data\n                weight: 75,\n                height: 180.5\n            }\n        }\n    }],\n    content: [\n        ...\n\n        {\n            block: &#39;input&#39;,\n            mix: [{                        // on enter field we mix in model-field element\n                block: &#39;glue&#39;,\n                elem: &#39;model-field&#39;,\n                js: {\n                    name: &#39;weight&#39;,         // give it a field to bind\n                    type: &#39;input&#39;\n                }\n            }],\n            name: &#39;weight&#39;,\n            value: &#39;75&#39;,\n            mods: { size: &#39;s&#39; },\n            content: { elem: &#39;control&#39; }\n        }\n\n        ...\n    ]\n}\n</code></pre>\n<p>A model with given parameters will be created after initialization. And changes withing the enter field will automatically appear in the model and vice versa.</p>\n<p>Bindings types (model-field modifiers):</p>\n<ul>\n<li>input – bind to <code>input</code> block;</li>\n<li>select – bind to <code>select</code> block;</li>\n<li>checkbox – bind to <code>checkbox</code> block;</li>\n<li>inline – field value paste into html;</li>\n<li>mod – block&#39;s modifier change.</li>\n</ul>\n<h2 id=\"Models--aggregation\">Models&#39; aggregation</h2>\n<p>Unfortunately, not always setting up models with a help of <code>glue</code> block can be handy.\nIf model&#39;s data is generated during templating you can use <code>model</code> block.</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;model&#39;,\n    modelName: &#39;super-model&#39;,\n    modelData: {\n        name: &#39;Claudia Schiffer&#39;,\n        weight: 75,\n        height: 180.5\n    }\n}\n// or\n{\n    block: &#39;model&#39;,\n    modelParams: {\n        name: &#39;super-model&#39;,\n        data: {\n            name: &#39;Claudia Schiffer&#39;,\n            weight: 75,\n            height: 180.5\n        }\n    }\n}\n</code></pre>\n<p>In this case DOM will have as many elements as the end bemjson of <code>model</code> block will have.\nTo avoid clogging of DOM by auxiliaries we can wrap any content in <code>model-aggregator</code> block.</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;model-aggregator&#39;,\n    content: [\n        { block: &#39;model&#39;, modelName: &#39;model1&#39; },\n        {\n            block: &#39;view-block&#39;,\n            content: [\n                { block: &#39;model&#39;, modelName: &#39;model2&#39; }\n            ]\n        },\n        { block: &#39;model&#39;, modelName: &#39;model3&#39; }\n    ]\n}\n</code></pre>\n<p>As a result all <code>model</code> blocks inside the aggregator will be bild into one, and all models will be initialized before other blocks&#39; initialization.</p>\n<h2 id=\"Testing\">Testing</h2>\n<p>Launch <code>bem server</code> in root folder.</p>\n<p>Open <code>localhost:8080/desktop.bundles/all-tests/all-tests.html</code> page.</p>\n<p>TodoMVC example <code>localhost:8080/desktop.bundles/todos/todos.html</code>.</p>\n",
                "ru": "<h1 id=\"Библиотека-БЭМ-блоков-для-реализации-MVC-паттерна\">Библиотека БЭМ-блоков для реализации MVC-паттерна</h1>\n<p>Набор <code>i-bem</code>-блоков для реализации MVC-паттерна. Предоставляет API для работы с моделями и блоки для автоматического провязывания моделей с интерфейсом.</p>\n<p><strong>В связи с активной разработкой в библиотеках <code>bem-core</code> и <code>bem-components</code> некоторая функциональность может работать некорретно! Мы работаем над стабилизацией и не откажемся от любой помощи в этом.</strong></p>\n<p>Требования к моделям:</p>\n<ul>\n<li>Декларативный стиль описания моделей;</li>\n<li>Доступ к созданным экземплярам моделей по имени и id;</li>\n<li>Автоматическое приведение значений полей к заданному типу;</li>\n<li>Валидация моделей.</li>\n</ul>\n<p>Требование к биндингам:</p>\n<ul>\n<li><code>i-bem</code>-ориентированость;</li>\n<li>Наследование собственной функциональсти в использующих <code>i-bem</code>-блоках;</li>\n<li>Провязка с контролами из <a href=\"https://github.com/bem/bem-components\">bem-components</a>.</li>\n</ul>\n<p>Зависимости:</p>\n<ul>\n<li><a href=\"https://github.com/bem/bem-core\">bem-core</a></li>\n<li><a href=\"https://github.com/bem/bem-components\">bem-components</a></li>\n</ul>\n<h2 id=\"Модели\">Модели</h2>\n<p>Для использования модели необходимо задекларировать её, указав имя модели и описав поля.</p>\n<pre><code class=\"lang-javascript\">BEM.MODEL.decl(&#39;model&#39;, {\n    name: &#39;string&#39;,\n    birth: {\n        type: &#39;string&#39;,\n        preprocess: function(value) {\n            return value.year + &#39;.&#39; + value.month + &#39;.&#39; + value.day;\n        }\n    },\n    height: &#39;number&#39;,\n    weight: &#39;number&#39;\n});\n</code></pre>\n<p>Также при декларации можно указать методы модели (переопределение базовых методов модели породит ошибку).</p>\n<pre><code class=\"lang-javascript\">BEM.MODEL.decl(&#39;model&#39;, {\n    name: &#39;string&#39;,\n    hasBoyfriend: {\n        type: &#39;boolean&#39;,\n        default: false\n    }\n}, {\n    toggleStatus: function() {\n        this.set(&#39;hasBoyfriend&#39;, !this.get(&#39;hasBoyfriend&#39;));\n\n        return this;\n    }\n});\n\nvar model = BEM.MODEL.create(&#39;model&#39;, { name: &#39;Claudia Schiffer&#39;, hasBoyfriend: true });\nmodel.toggleStatus();\nmodel.get(&#39;hasBoyfriend&#39;); // false\n</code></pre>\n<p>Типы полей:</p>\n<ul>\n<li><code>string</code> – строка;</li>\n<li><code>number</code> – число;</li>\n<li><code>boolean</code> – булеан;</li>\n<li><code>model</code> – модель;</li>\n<li><code>array</code> – массив произвольных данных;</li>\n<li><code>models-list</code> – список моделей одного типа.</li>\n</ul>\n<p>Чтобы создать модель, нужно указать имя модели и, если нужно, передать инициализационные параметры.</p>\n<pre><code class=\"lang-javascript\">var model = BEM.MODEL.create(&#39;model&#39;, {\n    name: &#39;Claudia Schiffer&#39;,\n    birth: {\n        year: 1970,\n        year: 1970,\n        month: 8,\n        day: 25\n    },\n    weight: 75,\n    height: 180.5\n});\n</code></pre>\n<p>В случае, когда отсутствует ссылка на экземпляр модели, ее можно запросить из хранилища, например, по имени:</p>\n<pre><code class=\"lang-javascript\">var model = BEM.MODEL.get(&#39;model&#39;)[0];\n</code></pre>\n<p>Теперь можно устанавливать поля модели:</p>\n<pre><code class=\"lang-javascript\">model\n    .set(&#39;weight&#39;, &#39;80&#39;) // будет приведено к number\n    .set(&#39;height&#39;, 180)\n    .update({\n        weight: 80,\n        height: 180\n    });\n</code></pre>\n<p>И получать их значения:</p>\n<pre><code class=\"lang-javascript\">model.get(&#39;weight&#39;); // 80\nmodel.get(&#39;birth&#39;); // &#39;1970.8.25&#39;\n\nmodel.toJSON(); // все поля модели\n</code></pre>\n<p>Об изменениях можно узнавать с помощью событий:</p>\n<pre><code class=\"lang-javascript\">model.on(&#39;weight&#39;, &#39;change&#39;, function() {\n    alert(&#39;Пора худеть!&#39;);\n});\n</code></pre>\n<p>Чтобы валидировать модель, нужно задать правила валидации:</p>\n<pre><code class=\"lang-javascript\">BEM.MODEL.decl(&#39;model-with-validation&#39;, {\n    name: &#39;string&#39;,\n    birth: {\n        type: &#39;string&#39;,\n        preprocess: function(value) {\n            return value.year + &#39;.&#39; + value.month + &#39;.&#39; + value.day;\n        }\n    },\n    height: {\n        type: &#39;number&#39;,\n        validation: {             // задать функцию валидации\n            validate: function(value) {\n                if (value &lt; 170) return false;\n            }\n        }\n    },\n    weight: {\n        type: &#39;number&#39;,\n        validation: {\n            rules: {               // или правила валидации:\n                required: true,      // стандартное\n                toFat: {             // и кастомное\n                    needToValidate: function() {        // проверить нужно ли выполнять валидацию\n                        if (this.get(&#39;height&#39;) &gt; 170) return true;\n                    },\n                    validate: function(value) {\n                        if (value &gt; 90) return false;\n                    }\n                }\n            }\n        }\n    }\n});\n</code></pre>\n<p>И проверить на валидность:</p>\n<pre><code class=\"lang-javascript\">model.isValid();\n</code></pre>\n<h2 id=\"Биндинги\">Биндинги</h2>\n<p>Для провязывания модели с DOM-представлением используется блок <code>glue</code>. Это блок, которой «проклеивает» модель и DOM.\nДля того, чтобы провязать модель с каким либо контролом, необходимо на родительский блок примешать блок <code>glue</code>, а на контрол — элемент <code>model-field</code> блока <code>glue</code>, и указать им параметры модели.</p>\n<p>BEMJSON в таком случае будет выглядеть так:</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;b-model&#39;,\n    mix: [{\n        block: &#39;glue&#39;,                   // примешиваем блок `glue`\n        js: {\n            modelName: &#39;model&#39;,            // указываем имя модели\n            modelData: {\n                name: &#39;Claudia Schiffer&#39;,  // и данные\n                weight: 75,\n                height: 180.5\n            }\n        }\n    }],\n    content: [\n        ...\n\n        {\n            block: &#39;input&#39;,\n            mix: [{                        // на поле ввода примешиваем элемент model-field\n                block: &#39;glue&#39;,\n                elem: &#39;model-field&#39;,\n                js: {\n                    name: &#39;weight&#39;,         // указываем ему, с каким полем провязыватсья\n                    type: &#39;input&#39;\n                }\n            }],\n            name: &#39;weight&#39;,\n            value: &#39;75&#39;,\n            mods: { size: &#39;s&#39; },\n            content: { elem: &#39;control&#39; }\n        }\n\n        ...\n    ]\n}\n</code></pre>\n<p>После инициализации будет создана модель с указанными данным. И изменения в поле ввода будут автоматически отражаться в модели и наоборот.</p>\n<p>Типы биндингов (модификаторы <code>model-field</code>):</p>\n<ul>\n<li><code>input</code> – провязка с блоком input;</li>\n<li><code>select</code> – провязка с блоком select;</li>\n<li><code>checkbox</code> – провязка с блоком checkbox;</li>\n<li><code>inline</code> – вставка значения поля в html;</li>\n<li><code>mod</code> – изменение модификатора блока.</li>\n</ul>\n<h2 id=\"Агрегация-моделей\">Агрегация моделей</h2>\n<p>Иногда создание моделей с помощью блока <code>glue</code> может быть неудобным. Для случая, когда данные для модели генерируются во время шаблонизации, можно использовать блок <code>model</code>.</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;model&#39;,\n    modelName: &#39;super-model&#39;,\n    modelData: {\n        name: &#39;Claudia Schiffer&#39;,\n        weight: 75,\n        height: 180.5\n    }\n}\n// или\n{\n    block: &#39;model&#39;,\n    modelParams: {\n        name: &#39;super-model&#39;,\n        data: {\n            name: &#39;Claudia Schiffer&#39;,\n            weight: 75,\n            height: 180.5\n        }\n    }\n}\n</code></pre>\n<p>В таком случае в DOM&#39;е появится столько элементов, сколько в конечном bemjson&#39;е блоков <code>model</code>. Чтобы избежать засорения DOM&#39;а вспомогательными объектами, можно любой контент обернуть в блок <code>model-aggregator</code>.</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;model-aggregator&#39;,\n    content: [\n        { block: &#39;model&#39;, modelName: &#39;model1&#39; },\n        {\n            block: &#39;view-block&#39;,\n            content: [\n                { block: &#39;model&#39;, modelName: &#39;model2&#39; }\n            ]\n        },\n        { block: &#39;model&#39;, modelName: &#39;model3&#39; }\n    ]\n}\n</code></pre>\n<p>В итоге все блоки <code>model</code> внутри агрегатора будут объеденены в один, и модели будут проинициализированы до инииализации других блоков.</p>\n<h2 id=\"Тестирование\">Тестирование</h2>\n<p>Запустить в корне <code>bem server</code>.</p>\n<p>Открыть страницу <code>localhost:8080/desktop.bundles/all-tests/all-tests.html</code>.</p>\n<p>Пример TodoMVC <code>localhost:8080/desktop.bundles/todos/todos.html</code>.</p>\n"
            }
        }
    },
    "deps": {
        "bem-components": "git://github.com/bem/bem-components.git#v2",
        "bem-pr": "git://github.com/narqo/bem-pr.git#v0.4"
    },
    "levels": [
        {
            "name": "desktop.sets",
            "blocks": [
                {
                    "name": "glue",
                    "data": {
                        "en": {
                            "name": "glue",
                            "description": [
                                {
                                    "content": ""
                                }
                            ],
                            "examples": [
                                {
                                    "content": []
                                }
                            ]
                        },
                        "ru": {
                            "name": "glue",
                            "description": [
                                {
                                    "content": "<h2 id=\"glue-\">glue()</h2>\n<p>Проклеить BEM-блоки полей с полями модели</p>\n<h2 id=\"_initmodel-modelparams-modeldata-\">_initModel([modelParams], [modelData])</h2>\n<p>Инициализирует модель, соответствующую данному блоку</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[modelParams]</strong>:  <em>Object</em>,  Парметры модели</p>\n<p><strong>[modelData]</strong>:  <em>Object</em>,  Данные для инициализации модили</p>\n<h2 id=\"_initfields-\">_initFields()</h2>\n<p>Инициализирует поля и провязывает их с моделью</p>\n<h2 id=\"initfieldblock-elem-\">initFieldBlock(elem)</h2>\n<p>Инициализируем блок glue-field (или его потомка) на BEM-блоке</p>\n<p><strong>Parameters</strong></p>\n<p><strong>elem</strong>:  <em>jQuery</em>,</p>\n<h2 id=\"getfieldblock-name-\">getFieldBlock(name)</h2>\n<p>Возвращает BEM-блок по имени поля из модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>name</strong>,  Имя поля</p>\n<h2 id=\"getmodelparams-\">getModelParams()</h2>\n<p>Возвращает параметры модели</p>\n<h2 id=\"getmodelpath-\">getModelPath()</h2>\n<p>Возвращает путь к модели, соответствующей данному блоку</p>\n<h2 id=\"getmodelname-\">getModelName()</h2>\n<p>Возвращает имя модели, соответствующей данному блоку</p>\n"
                                }
                            ],
                            "examples": [
                                {
                                    "content": []
                                }
                            ]
                        }
                    },
                    "jsdoc": ""
                },
                {
                    "name": "glue-field",
                    "data": null,
                    "jsdoc": ""
                },
                {
                    "name": "i-bem",
                    "data": null,
                    "jsdoc": ""
                },
                {
                    "name": "model",
                    "data": {
                        "en": {
                            "name": "model",
                            "description": [
                                {
                                    "content": ""
                                }
                            ],
                            "examples": [
                                {
                                    "content": []
                                }
                            ]
                        },
                        "ru": {
                            "name": "model",
                            "description": [
                                {
                                    "content": "<h2 id=\"__constructor-modelparams-modelparams-name-modelparams-id-modelparams-parentname-modelparams-parentpath-modelparams-parentmodel-data-\">__constructor(modelParams, modelParams.name, [modelParams.id], [modelParams.parentName], [modelParams.parentPath], [modelParams.parentModel], [data])</h2>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  параметры модели</p>\n<p><strong>modelParams.name</strong>:  <em>String</em>,  имя модели</p>\n<p><strong>[modelParams.id]</strong>:  <em>String|Number</em>,  идентификатор модели</p>\n<p><strong>[modelParams.parentName]</strong>:  <em>String</em>,  имя родительской модели</p>\n<p><strong>[modelParams.parentPath]</strong>:  <em>String</em>,  путь родительской модели</p>\n<p><strong>[modelParams.parentModel]</strong>:  <em>Object</em>,  экземпляр родительской модели</p>\n<p><strong>[data]</strong>:  <em>Object</em>,  данные для инициализации полей модели</p>\n<h2 id=\"path-\">path()</h2>\n<p>Возвращает путь модели</p>\n<h2 id=\"_initfields-data-\">_initFields(data)</h2>\n<p>Инициализирует поля модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>data</strong>:  <em>Object</em>,  данные для инициализации полей модели</p>\n<h2 id=\"_calcdependsto-name-opts-\">_calcDependsTo(name, opts)</h2>\n<p>Вычиляет заначения зависимых полей</p>\n<p><strong>Parameters</strong></p>\n<p><strong>name</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>opts</strong>:  <em>Object</em>,  дополнительные парметры доступные в обработчиках событий</p>\n<h2 id=\"get-name-type-\">get(name, [type])</h2>\n<p>Возвращает значение поля</p>\n<p><strong>Parameters</strong></p>\n<p><strong>name</strong>:  <em>String</em>,  </p>\n<p><strong>[type]</strong>:  <em>String</em>,  формат предтавления значения. по умолчанию вызывается get, либо raw/formatted</p>\n<h2 id=\"set-name-value-opts-\">set(name, value, [opts])</h2>\n<p>Задает значение полю модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>name</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>value</strong>:  <em>*</em>,  значение</p>\n<p><strong>[opts]</strong>:  <em>Object</em>,  дополнительные парметры доступные в обработчиках событий change</p>\n<h2 id=\"clear-name-opts-\">clear([name], [opts])</h2>\n<p>Очищает поля модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[name]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>[opts]</strong>:  <em>Object</em>,  дополнительные парметры доступные в обработчиках событий change</p>\n<h2 id=\"update-data-opts-\">update(data, [opts])</h2>\n<p>Задает поля модели по данным из объекта, генерирует событие update на модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>data</strong>:  <em>Object</em>,  данные устанавливаемые в модели</p>\n<p><strong>[opts]</strong>:  <em>Object</em>,  доп. параметры</p>\n<h2 id=\"hasfield-name-\">hasField(name)</h2>\n<p>Проверяет наличие поля у модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>name</strong>:  <em>String</em>,  имя поля</p>\n<h2 id=\"isempty-name-\">isEmpty([name])</h2>\n<p>Проверяет поле или всю модель на пустоту</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[name]</strong>:  <em>String</em>,  </p>\n<h2 id=\"ischanged-name-\">isChanged([name])</h2>\n<p>Проверяет, изменилось ли значение поля или любого из полей с момента последней фиксации</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[name]</strong>:  <em>String</em>,  имя поля</p>\n<h2 id=\"gettype-name-\">getType(name)</h2>\n<p>Возвращает тип поля</p>\n<p><strong>Parameters</strong></p>\n<p><strong>name</strong>:  <em>String</em>,  имя поля</p>\n<h2 id=\"fix-opts-\">fix([opts])</h2>\n<p>Кеширует значения полей модели, генерирует событие fix на модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[opts]</strong>:  <em>Object</em>,  доп. параметры</p>\n<h2 id=\"rollback-opts-\">rollback([opts])</h2>\n<p>Восстанавливает значения полей модели из кеша, генерирует событие update на модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[opts]</strong>:  <em>Object</em>,  доп. параметры</p>\n<h2 id=\"tojson-\">toJSON()</h2>\n<p>Возвращает объект с данными модели</p>\n<h2 id=\"on-field-e-data-fn-ctx-\">on([field], e, [data], fn, ctx)</h2>\n<p>Назначает обработчик события на модель или поле модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[field]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>e</strong>:  <em>String</em>,  имя события</p>\n<p><strong>[data]</strong>:  <em>Object</em>,  дополнительные данные события</p>\n<p><strong>fn</strong>:  <em>Function</em>,  обработчик события</p>\n<p><strong>ctx</strong>:  <em>Object</em>,  контекст вызова обработчика</p>\n<h2 id=\"un-field-e-fn-ctx-\">un([field], e, fn, ctx)</h2>\n<p>Удаляет обработчик события с модели или поля модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[field]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>e</strong>:  <em>String</em>,  имя события</p>\n<p><strong>fn</strong>:  <em>Function</em>,  обработчик события</p>\n<p><strong>ctx</strong>:  <em>Object</em>,  контекст вызова обработчика</p>\n<h2 id=\"trigger-field-e-data-\">trigger([field], e, [data])</h2>\n<p>Тригерит обработчик события на модели или поле модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[field]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>e</strong>:  <em>String</em>,  имя события</p>\n<p><strong>[data]</strong>,  данные доступные в обработчике события</p>\n<h2 id=\"_onfieldchange-name-opts-\">_onFieldChange(name, opts)</h2>\n<p>Тригерит (с декоратором $.throttle) событие change на модели при изменении полей</p>\n<p><strong>Parameters</strong></p>\n<p><strong>name</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>opts</strong>:  <em>Object</em>,  доп. параметры</p>\n<h2 id=\"_firechange-opts-\">_fireChange(opts)</h2>\n<p>Сгенерировать событие change на модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>opts</strong>:  <em>Object</em>,  </p>\n<h2 id=\"destruct-\">destruct()</h2>\n<p>Удаляет модель из хранилища</p>\n<h2 id=\"isvalid-\">isValid()</h2>\n<p>Возвращает результат проверки модели на валидность</p>\n<h2 id=\"validate-name-\">validate([name])</h2>\n<p>Проверяет модель на валидность, генерирует событие error с описанием ошибки(ок)</p>\n<p><strong>Parameters</strong></p>\n<p><strong>[name]</strong>:  <em>String</em>,  - имя поля</p>\n<h2 id=\"decl-decl-decl-model-decl-name-decl-basemodel-staticprops-\">decl(decl, decl.model|decl.name, [decl.baseModel], {{, staticProps)</h2>\n<p>Декларирует описание модели\nXXX: {String|Number},\nXXX: {\n{String} [type] тип поля\n{Boolean} [internal] внутреннее поле\n{<em>|Function} [default] дефолтное значение\n{</em>|Function} [value] начанольное значение\n{Object|Function} [validation] ф-ия конструктор объекта валидации или он сам\n{Function} [format] ф-ия форматирования\n{Function} [preprocess] ф-ия вызываемая до записи значения\n{Function} [calculate] ф-ия вычисления значения, вызывается, если изменилось одно из связанных полей\n{String|Array} [dependsFrom] массив от которых зависит значение поля\n}\n}} fields где ключ имя поля, значение строка с типом или объект вида</p>\n<p><strong>Parameters</strong></p>\n<p><strong>decl</strong>:  <em>String|Object</em>,  </p>\n<p><strong>decl.model|decl.name</strong>:  <em>String</em>,  </p>\n<p><strong>[decl.baseModel]</strong>:  <em>String</em>,  </p>\n<p><strong>{{</strong>,  </p>\n<p><strong>staticProps</strong>:  <em>Object</em>,  Статические методы и поля</p>\n<h2 id=\"_builddeps-fielddecl-modelname-\">_buildDeps(fieldDecl, modelName)</h2>\n<p>Устанавливает связи между зависимыми полями</p>\n<p><strong>Parameters</strong></p>\n<p><strong>fieldDecl</strong>:  <em>Object</em>,  декларация полей</p>\n<p><strong>modelName</strong>:  <em>String</em>,  имя модели</p>\n<h2 id=\"create-modelparams-modelparams-name-modelparams-id-modelparams-parentname-modelparams-parentid-modelparams-parentpath-modelparams-parentmodel-data-\">create(modelParams, modelParams.name, [modelParams.id], [modelParams.parentName], [modelParams.parentId], [modelParams.parentPath], [modelParams.parentModel], [data])</h2>\n<p>Создает экземпляр модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  имя модели или параметры модели</p>\n<p><strong>modelParams.name</strong>:  <em>String</em>,  имя модели</p>\n<p><strong>[modelParams.id]</strong>:  <em>String|Number</em>,  идентификатор, если не указан, создается автоматически</p>\n<p><strong>[modelParams.parentName]</strong>:  <em>String</em>,  имя родительской модели</p>\n<p><strong>[modelParams.parentId]</strong>:  <em>String|Number</em>,  идентификатор родительской модели</p>\n<p><strong>[modelParams.parentPath]</strong>:  <em>String</em>,  путь родительской модели</p>\n<p><strong>[modelParams.parentModel]</strong>:  <em>Object</em>,  экземпляр родительской модели</p>\n<p><strong>[data]</strong>:  <em>Object</em>,  данные, которыми будет проинициализирована модель</p>\n<h2 id=\"get-modelparams-modelparams-name-modelparams-id-modelparams-path-modelparams-parentname-modelparams-parentid-modelparams-parentpath-modelparams-parentmodel-dropcache-\">get(modelParams, modelParams.name, [modelParams.id], [modelParams.path], [modelParams.parentName], [modelParams.parentId], [modelParams.parentPath], [modelParams.parentModel], [dropCache])</h2>\n<p>Возвращает экземляр или массив экземпляров моделей по имени и пути</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  имя модели или параметры модели</p>\n<p><strong>modelParams.name</strong>:  <em>String</em>,  имя модели</p>\n<p><strong>[modelParams.id]</strong>:  <em>String|Number</em>,  идентификатор, если не указан, создается автоматически</p>\n<p><strong>[modelParams.path]</strong>:  <em>String</em>,  путь модели</p>\n<p><strong>[modelParams.parentName]</strong>:  <em>String</em>,  имя родительской модели</p>\n<p><strong>[modelParams.parentId]</strong>:  <em>String|Number</em>,  идентификатор родительской модели</p>\n<p><strong>[modelParams.parentPath]</strong>:  <em>String</em>,  путь родительской модели</p>\n<p><strong>[modelParams.parentModel]</strong>:  <em>Object</em>,  экземпляр родительской модели</p>\n<p><strong>[dropCache]</strong>:  <em>Boolean</em>,  Не брать значения из кеша</p>\n<h2 id=\"getone-modelparams-dropcache-\">getOne(modelParams, dropCache)</h2>\n<p>Возвращает экземпляр модели по имени или пути</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>Object|String</em>,  @see get.modelParams</p>\n<p><strong>dropCache</strong>:  <em>Boolean</em>,  @see get.dropCache</p>\n<h2 id=\"on-modelparams-field-e-fn-ctx-\">on(modelParams, [field], e, fn, [ctx])</h2>\n<p>Назначает глобальный обработчик событий на экземпляры моделей по пути</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  Имя модели или параметры описываеющие path модели</p>\n<p><strong>[field]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>e</strong>:  <em>String</em>,  имя события</p>\n<p><strong>fn</strong>:  <em>Function</em>,  обработчик события</p>\n<p><strong>[ctx]</strong>:  <em>Object</em>,  контекст выполнения обработчика</p>\n<h2 id=\"un-modelparams-field-e-fn-ctx-\">un(modelParams, [field], e, fn, [ctx])</h2>\n<p>Удаляет глобальный обработчик событий на экземпляры моделей по пути</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  Имя модели или параметры описываеющие path модели</p>\n<p><strong>[field]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>e</strong>:  <em>String</em>,  имя события</p>\n<p><strong>fn</strong>:  <em>Function</em>,  обработчик события</p>\n<p><strong>[ctx]</strong>:  <em>Object</em>,  контекст выполнения обработчика</p>\n<h2 id=\"trigger-modelparams-field-e-data-\">trigger(modelParams, [field], e, [data])</h2>\n<p>Тригерит событие на моделях по имени и пути</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  Имя модели или параметры описываеющие path модели</p>\n<p><strong>[field]</strong>:  <em>String</em>,  имя поля</p>\n<p><strong>e</strong>:  <em>String</em>,  имя события</p>\n<p><strong>[data]</strong>:  <em>Object</em>,  данные передаваемые в обработчик события</p>\n<h2 id=\"_bindtomodel-model-\">_bindToModel(model)</h2>\n<p>Назначает глобальные обработчики событий на экземпляр модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>model</strong>:  <em>BEM.MODEL</em>,  экземпляр модели</p>\n<h2 id=\"_bindtofields-model-\">_bindToFields(model)</h2>\n<p>Назначает глобальные обработчики событий на поля экземпляра модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>model</strong>:  <em>BEM.MODEL</em>,  экземпляр модели</p>\n<h2 id=\"_bindtoevents-model-events-\">_bindToEvents(model, events)</h2>\n<p>Хелпер навешивания событий на экземпляр модели</p>\n<p><strong>Parameters</strong></p>\n<p><strong>model</strong>:  <em>BEM.MODEL</em>,  экземпляр модели</p>\n<p><strong>events</strong>:  <em>Object</em>,  события</p>\n<h2 id=\"_addmodel-model-\">_addModel(model)</h2>\n<p>Добавляет модель в хранилище</p>\n<p><strong>Parameters</strong></p>\n<p><strong>model</strong>:  <em>BEM.MODEL</em>,  экземпляр модели</p>\n<h2 id=\"destruct-modelparams-\">destruct(modelParams)</h2>\n<p>Уничтожает экземпляр модели, удаляет его из хранилища</p>\n<p><strong>Parameters</strong></p>\n<p><strong>modelParams</strong>:  <em>BEM.MODEL|String|Object</em>,  Модель, имя модели или параметры описываеющие path модели</p>\n<h2 id=\"buildpath-pathparts-pathparts-name-pathparts-id-pathparts-parentname-pathparts-parentid-pathparts-parentpath-pathparts-parentmodel-pathparts-childname-pathparts-childid-pathparts-childpath-pathparts-childmodel-\">buildPath(pathParts, pathParts.name, [pathParts.id], [pathParts.parentName], [pathParts.parentId], [pathParts.parentPath], [pathParts.parentModel], [pathParts.childName], [pathParts.childId], [pathParts.childPath], [pathParts.childModel])</h2>\n<p>Возвращает путь к модели по заданным параметрам</p>\n<p><strong>Parameters</strong></p>\n<p><strong>pathParts</strong>:  <em>Object|Array</em>,  параметры пути</p>\n<p><strong>pathParts.name</strong>:  <em>String</em>,  имя модели</p>\n<p><strong>[pathParts.id]</strong>:  <em>String|Number</em>,  идентификатор модели</p>\n<p><strong>[pathParts.parentName]</strong>:  <em>String</em>,  имя родитеской модели</p>\n<p><strong>[pathParts.parentId]</strong>:  <em>String|Number</em>,  идентификатор родительской модели</p>\n<p><strong>[pathParts.parentPath]</strong>:  <em>String|Object</em>,  путь родительской модели</p>\n<p><strong>[pathParts.parentModel]</strong>:  <em>BEM.MODEL</em>,  экземпляр родительской модели</p>\n<p><strong>[pathParts.childName]</strong>:  <em>String</em>,  имя дочерней модели</p>\n<p><strong>[pathParts.childId]</strong>:  <em>String|Number</em>,  идентификатор дочерней модели</p>\n<p><strong>[pathParts.childPath]</strong>:  <em>String|Object</em>,  путь дочерней модели</p>\n<p><strong>[pathParts.childModel]</strong>:  <em>BEM.MODEL</em>,  экземпляр дочерней модели</p>\n<h2 id=\"_getpathregexp-path-\">_getPathRegexp(path)</h2>\n<p>Возвращает строку для построения регулярного выражения проверки пути</p>\n<p><strong>Parameters</strong></p>\n<p><strong>path</strong>:  <em>String</em>,  </p>\n<h2 id=\"foreachmodel-callback-modelparams-dropcache-\">forEachModel(callback, modelParams, [dropCache])</h2>\n<p>Выполняет callback для каждой модели найденной по заданному пути. Если callback вернул false, то\nитерация остановливается</p>\n<p><strong>Parameters</strong></p>\n<p><strong>callback</strong>:  <em>Function</em>,  ф-ия выполняемая для каждой модели</p>\n<p><strong>modelParams</strong>:  <em>String|Object</em>,  параметры модели</p>\n<p><strong>[dropCache]</strong>:  <em>Boolean</em>,  Не брать значения из кеша</p>\n<h2 id=\"class-\">class Конструктор модели</h2>\n"
                                }
                            ],
                            "examples": [
                                {
                                    "content": []
                                }
                            ]
                        }
                    },
                    "jsdoc": ""
                }
            ]
        }
    ]
}