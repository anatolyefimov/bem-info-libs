{"repo":"bem-core","ref":"v2.5.0","enb":true,"url":"http://github.com/bem/bem-core","custom":[{"title":{"en":"Documentation","ru":"Документация"},"url":"/tags/bem-core-v2.3.0"}],"docs":{"readme":{"title":{"en":"Readme","ru":"Readme"},"content":{"en":"<h1 id=\"bem-core-Library--!-Build-Status--https:--travis-ci-org-bem-bem-core-svg-branch=v2---https:--travis-ci-org-bem-bem-core---!-GitHub-Release--http:--img-shields-io-github-release-bem-bem-core-svg---https:--github-com-bem-bem-core-releases-\">bem-core Library <a href=\"https://travis-ci.org/bem/bem-core\"><img src=\"https://travis-ci.org/bem/bem-core.svg?branch=v2\" alt=\"Build Status\"></a> <a href=\"https://github.com/bem/bem-core/releases\"><img src=\"http://img.shields.io/github/release/bem/bem-core.svg\" alt=\"GitHub Release\"></a></h1>\n<p>This README is also available <a href=\"http://ru.bem.info/libs/bem-core/\">in Russian</a>.</p>\n<h2 id=\"What-is-this-\">What is this?</h2>\n<p><code>bem-core</code> is a base library for web interface development.\nIt provides the minimal stack for coding client-side JavaScript and templating.</p>\n<h2 id=\"Use\">Use</h2>\n<p>The easiest way to run a project with <code>bem-core</code> is to use\nthe <a href=\"https://github.com/bem/project-stub\">project-stub</a>.</p>\n<p>You can use any other way you are familiar with to include the library into\nthe project.</p>\n<h2 id=\"Inside\">Inside</h2>\n<h3 id=\"Levels\">Levels</h3>\n<ul>\n<li><code>common.blocks</code> — suited for any devices and browsers</li>\n<li><code>desktop.blocks</code> — should be used for desktop browsers</li>\n<li><code>touch.blocks</code> — implement some touch-platforms specifics</li>\n</ul>\n<h3 id=\"Blocks\">Blocks</h3>\n<ul>\n<li><code>i-bem</code> — base block with helpers for JS and HTML</li>\n<li><code>strings</code> — helpers for JS-strings</li>\n<li><code>objects</code> — helpers for JS-objects</li>\n<li><code>functions</code> — helpers for JS-functions</li>\n<li><code>events</code> — JS-events</li>\n<li><code>querystring</code> — helpers for work with querystring</li>\n<li><code>tick</code> — global timer</li>\n<li><code>idle</code> — IDLE event</li>\n<li><code>next-tick</code> — polyfill for <code>nextTick</code>/<code>setTimeout(0, ...)</code></li>\n<li><code>inherit</code> — OOP helpers</li>\n<li><code>jquery</code> — jQuery</li>\n<li><code>clearfix</code> — CSS clearfix trick</li>\n<li><code>identify</code> — identify JS-objects</li>\n<li><code>cookie</code> — helpers for work with browser cookies</li>\n<li><code>vow</code> — Promises/A+ implementation</li>\n<li><code>dom</code> — helpers for work with DOM</li>\n<li><code>loader</code> — loader for JS files</li>\n<li><code>ua</code> — browser features detection</li>\n<li><code>keyboard</code> — keyboard helpers</li>\n<li><code>page</code> — html/head/body scaffold</li>\n</ul>\n<h3 id=\"Technologies\">Technologies</h3>\n<ul>\n<li>vanilla.js + browser.js</li>\n<li>bemhtml</li>\n<li>bemtree</li>\n</ul>\n<h2 id=\"API\">API</h2>\n<p>The autogenerated JSDoc API can be found on the separate branch <a href=\"http://github.com/bem/bem-core/tree/v2-jsdoc\">v2-jsdoc</a>.</p>\n<p>Please note that &quot;v2-jsdoc&quot;&#39;s content is updated automatically. Any fixes should go to the &quot;v2&quot; branch to the concrete\nblock&#39;s source code, as described in the &quot;Contribution&quot; section below.</p>\n<h2 id=\"Changelog\">Changelog</h2>\n<p>You can check the changelog at the <a href=\"http://bem.info/libs/bem-core/changelog/\">changelog page</a>.</p>\n<h2 id=\"Migration\">Migration</h2>\n<p>If you used BEM before, check the <a href=\"http://bem.info/libs/bem-core/migration/\">migration instructions</a>.</p>\n<h2 id=\"Development\">Development</h2>\n<h3 id=\"Working-copy\">Working copy</h3>\n<ol>\n<li><p>Get the needed version code (e.g., <code>v2</code>):</p>\n<pre><code class=\"lang-shell\">$ git clone -b v2 git://github.com/bem/bem-core.git\n$ cd bem-core\n</code></pre>\n</li>\n<li><p>Install the dependencies:</p>\n<pre><code class=\"lang-shell\">$ npm install\n</code></pre>\n<p>You need <code>export PATH=./node_modules/.bin:$PATH</code>\nor an alternative way to run locally-installed <a href=\"https://github.com/bem/bem-tools\">bem-tools</a> and other npm-dependencies.</p>\n</li>\n<li><p>Install all necessary libraries:</p>\n<pre><code class=\"lang-shell\">$ bower-npm-install\n</code></pre>\n</li>\n<li><p>Build and run tests (specs):</p>\n<pre><code class=\"lang-shell\">$ bem make desktop.specs touch.specs\n</code></pre>\n</li>\n<li><p>Run development server:</p>\n<pre><code class=\"lang-shell\">$ bem server\n</code></pre>\n</li>\n</ol>\n<h3 id=\"How-to-contribute\">How to contribute</h3>\n<ol>\n<li><a href=\"https://github.com/bem/bem-core/issues/new\">Create an issue</a> with a proper description.</li>\n<li>Decide which version needs your changes.</li>\n<li>Create a feature-branch with an issue number and a version (<code>issues/&lt;issue_number&gt;@v&lt;version_number&gt;</code>) based on a version branch.\nFor example, for an issue #42 and a version #1: <code>git checkout -b issues/42@v1 v1</code>.\nIf you need changes for several versions, each of them has to have a feature branch.</li>\n<li>Commit changes and <code>push</code>. Rebase your branch on a corresponding version branch if it&#39;s needed.</li>\n<li>Create a pull-request from your feature branch; or several pull-requests if you changed several versions.</li>\n<li>Link your pull request with an issue number any way you like. A comment will work perfectly.</li>\n<li>Wait for your pull request and the issue to be closed ;-)</li>\n</ol>\n<h3 id=\"Modular-testing\">Modular testing</h3>\n<p>A default test bundle for <code>functions__debounce</code>:</p>\n<pre><code class=\"lang-shell\">$ bem make desktop.specs/functions__debounce\n</code></pre>\n<p>You can see the results of the tests in the terminal after the building process finishes.</p>\n<p>You can also watch them in a browser loading <code>desktop.specs/functions__debounce/spec-js+browser-js+bemhtml/spec-js+browser-js+bemhtml.html</code>.</p>\n<p>Run tests for other BEM entities in the same way. This will work for those which are equipped with <code>.spec.js</code> file.</p>\n<h3 id=\"Code-coverage\">Code coverage</h3>\n<p>To build code coverage report add <code>ISTANBUL_COVERAGE=yes</code> environment variable to the tests run command:</p>\n<pre><code class=\"lang-shell\">$ ISTANBUL_COVERAGE=yes bem make desktop.specs &amp;&amp; istanbul report html\n</code></pre>\n<p>You can run modular testing with coverage as well by using more concrete build target as was described above.</p>\n<pre><code>$ ISTANBUL_COVERAGE=yes bem make desktop.specs/functions__debounce &amp;&amp; istanbul report html\n</code></pre><p>After tests finish, you can view coverage HTML report by opening <code>coverage/index.html</code> in your favorite\nbrowser.</p>\n<p>The whole code coverage statistics can be found on the <a href=\"https://coveralls.io/r/bem/bem-core\">bem-core profile page</a> on\n<a href=\"https://coveralls.io\">Coveralls</a>.</p>\n<p>Tests are built with a <a href=\"https://github.com/narqo/bem-pr\">bem-pr</a> library.\nCheck the <a href=\"https://github.com/narqo/bem-pr/blob/master/docs/tests.ru.md\">details</a> about testing infrastructure of the bem-pr.</p>\n<h2 id=\"Supported-browsers\">Supported browsers</h2>\n<p>Our browser support policy is based on statistics we get from <a href=\"http://company.yandex.com\">Yandex</a> services.</p>\n<p>Browsers with more than 2% users get full compliant support, more than 0.5% — partially compliant\n(which means that data is accessible but not necessary 100% functional). New features testing\nis not provided by us for  browsers with less than 0.5% users.</p>\n<h3 id=\"Desktop\">Desktop</h3>\n<h4 id=\"Fully-compliant\">Fully compliant</h4>\n<ul>\n<li>Google Chrome 29+</li>\n<li>Firefox 24+</li>\n<li>Yandex 1.7+</li>\n<li>Opera 12.16</li>\n<li>MSIE 10.0</li>\n<li>MSIE 9.0</li>\n<li>MSIE 8.0</li>\n<li>Opera 12.15</li>\n</ul>\n<h4 id=\"Partially-compliant\">Partially compliant</h4>\n<ul>\n<li>Opera 17.0</li>\n<li>Opera 16.0</li>\n<li>Opera 12.14</li>\n<li>Opera 12.2</li>\n<li>Firefox 23</li>\n</ul>\n<h3 id=\"Touch\">Touch</h3>\n<h4 id=\"Fully-compliant\">Fully compliant</h4>\n<ul>\n<li>iOS 6+</li>\n<li>Android 2.3+</li>\n<li>Opera Mobile 12+</li>\n<li>Windows Phone 7+</li>\n</ul>\n<h4 id=\"Partially-compliant\">Partially compliant</h4>\n<ul>\n<li>iOS 5</li>\n<li>Android 2.2</li>\n</ul>\n<h2 id=\"License\">License</h2>\n<p>Code and documentation copyright 2012 YANDEX LLC. Code released under the <a href=\"LICENSE.txt\">Mozilla Public License 2.0</a>.</p>\n","ru":"<h1 id=\"bem-core-Library--!-Build-Status--https:--travis-ci-org-bem-bem-core-svg-branch=v2---https:--travis-ci-org-bem-bem-core---!-GitHub-Release--http:--img-shields-io-github-release-bem-bem-core-svg---https:--github-com-bem-bem-core-releases-\">bem-core Library <a href=\"https://travis-ci.org/bem/bem-core\"><img src=\"https://travis-ci.org/bem/bem-core.svg?branch=v2\" alt=\"Build Status\"></a> <a href=\"https://github.com/bem/bem-core/releases\"><img src=\"http://img.shields.io/github/release/bem/bem-core.svg\" alt=\"GitHub Release\"></a></h1>\n<p>This README is also available <a href=\"http://bem.info/libs/bem-core/\">in English</a>.</p>\n<h2 id=\"Что-это-\">Что это?</h2>\n<p>Базовая библиотека блоков для разработки веб-интерфейсов.\nСодержит только необходимый минимум для разработки клиентского JS и HTML-шаблонов.</p>\n<h2 id=\"Использование\">Использование</h2>\n<p>Наиболее простым способом начать проект с использованием <code>bem-core</code> является\n<a href=\"https://github.com/bem/project-stub\">project-stub</a>.</p>\n<p>Вы также можете добавить библиотеку к себе в проект любым известным вам способом.</p>\n<h2 id=\"Состав\">Состав</h2>\n<h3 id=\"Уровни\">Уровни</h3>\n<ul>\n<li><code>common.blocks</code> — предназначен для любых устройств и браузеров</li>\n<li><code>desktop.blocks</code> — следует использовать для всех десктопных браузеров</li>\n<li><code>touch.blocks</code> — реализует некоторую специфику для тач-платформ</li>\n</ul>\n<h3 id=\"Блоки\">Блоки</h3>\n<ul>\n<li><code>i-bem</code> — базовый блок с хелперами для JS и HTML</li>\n<li><code>strings</code> — хелперы для JS-строк</li>\n<li><code>objects</code> — хелперы для JS-объектов</li>\n<li><code>functions</code> — хелперы для JS-функций</li>\n<li><code>events</code> — JS-события</li>\n<li><code>querystring</code> — работа со строкой запроса</li>\n<li><code>tick</code> — глобальный таймер</li>\n<li><code>idle</code> — IDLE-событие</li>\n<li><code>next-tick</code> — полифил для <code>nextTick</code>/<code>setTimeout(0, ...)</code></li>\n<li><code>inherit</code> — ООП-хелперы</li>\n<li><code>jquery</code> — jQuery</li>\n<li><code>clearfix</code> — CSS-трюк clearfix</li>\n<li><code>identify</code> — идентификация JS-объектов</li>\n<li><code>cookie</code> — хелперы для работы с браузерными куками</li>\n<li><code>vow</code> — реализация Promises/A+</li>\n<li><code>dom</code> — хелперы для работы с DOM</li>\n<li><code>loader</code> — загрузчик для JS-файлов</li>\n<li><code>ua</code> — определение возможностей браузера</li>\n<li><code>keyboard</code> — хелперы для работы с клавиатурой</li>\n<li><code>page</code> — скелет для html/head/body</li>\n</ul>\n<h3 id=\"Технологии\">Технологии</h3>\n<ul>\n<li>vanilla.js + browser.js</li>\n<li>bemhtml</li>\n<li>bemtree</li>\n</ul>\n<h2 id=\"API\">API</h2>\n<p>Автосгенерированная документация на JavaScript API блоков (JSDoc) можно посмотреть в отдельной ветке <a href=\"http://github.com/bem/bem-core/tree/v2-jsdoc\">v2-jsdoc</a>.</p>\n<p>Обратите внимание, содержимое ветки «v2-jsdoc» обновляется автоматически. Любые изменения необходимо отправлять\nв код соответствующих блоков в ветке «v2», как описано в разделе «Внесение изменений» ниже.</p>\n<h2 id=\"История-изменений\">История изменений</h2>\n<p>История изменений доступна на <a href=\"http://ru.bem.info/libs/bem-core/changelog/\">отдельной странице</a>.</p>\n<h2 id=\"Миграция\">Миграция</h2>\n<p>Миграция описана на <a href=\"http://ru.bem.info/libs/bem-core/migration/\">отдельной странице</a>.</p>\n<h2 id=\"Разработка\">Разработка</h2>\n<h3 id=\"Рабочая-копия\">Рабочая копия</h3>\n<ol>\n<li><p>Получаем исходники нужной версии (например, <code>v1</code>):</p>\n<pre><code class=\"lang-shell\">$ git clone -b v1 git://github.com/bem/bem-core.git\n$ cd bem-core\n</code></pre>\n</li>\n<li><p>Устанавливаем зависимости:</p>\n<pre><code class=\"lang-shell\">$ npm install\n</code></pre>\n<p>Для последующего запуска локально установленных <a href=\"https://github.com/bem/bem-tools\">bem-tools</a> нам потребуется\n<code>export PATH=./node_modules/.bin:$PATH</code> или любой альтернативный способ.</p>\n</li>\n<li><p>Устанавливаем зависимые библиотеки:</p>\n<pre><code class=\"lang-shell\">$ bower-npm-install\n</code></pre>\n</li>\n<li><p>Собираем примеры и тесты:</p>\n<pre><code class=\"lang-shell\">$ bem make sets\n</code></pre>\n</li>\n<li><p>Запускаем разработческий сервер:</p>\n<pre><code>$ bem server\n</code></pre></li>\n</ol>\n<h3 id=\"Внесение-изменений\">Внесение изменений</h3>\n<ol>\n<li><a href=\"https://github.com/bem/bem-core/issues/new\">Создать issue</a> с описанием сути изменений.</li>\n<li>Определить в какую версию необходимо внести изменения.</li>\n<li>Сделать feature-branch с указанием номера issue и версии (<code>issues/&lt;номер_issue&gt;@v&lt;номер_версии&gt;</code>) на основе ветки версии.\nНапример, для issue с номером 42 и версией 1: <code>git checkout -b issues/42@v1 v1</code>. Если изменения нужно внести в несколько версий,\nто для каждой из версий создаётся отдельная ветка.</li>\n<li>Сделать изменения, закоммитить и сделать push. Если это необходимо, то нужно сделать rebase от базовой ветки версии.</li>\n<li>Создать pull-request на основе созданной ветки (или несколько pull-request-ов для случая изменений в нескольких версиях).</li>\n<li>Любым способом связать pull-request и issue (например, c помощью комментария).</li>\n<li>Ждать закрытия pull-request и issue ;-)</li>\n</ol>\n<h3 id=\"Модульное-тестирование\">Модульное тестирование</h3>\n<p>Сборка дефолтного тестового бандла для <code>functions__debounce</code>:</p>\n<pre><code class=\"lang-shell\">$ bem make desktop.specs/functions__debounce\n</code></pre>\n<p>После сборки тестового бандла вы увидите результаты выполнения тестов в консоли.\nИх также можно посмотреть в браузере, открыв <code>desktop.specs/functions__debounce/spec-js+browser-js+bemhtml/spec-js+browser-js+bemhtml.html</code>.</p>\n<p>По аналогии можно запустить тесты для других БЭМ-сущностей, имеющих реализацию в технологии <code>spec.js</code>.</p>\n<h3 id=\"Покрытие-кода-тестами\">Покрытие кода тестами</h3>\n<p>Чтобы собрать статистику покрытия кода тестами, необходимо добавить переменную окружения <code>ISTANBUL_COVERAGE=yes</code>\nв сборке тестового бандла:</p>\n<pre><code class=\"lang-shell\">$ ISTANBUL_COVERAGE=yes bem make desktop.specs &amp;&amp; istanbul report html\n</code></pre>\n<p>Сбор статиски покрытия тестами так же работает для запуска тестов конкретной БЭМ-сущности.\nПример для <code>functions__debounce</code></p>\n<pre><code>$ ISTANBUL_COVERAGE=yes bem make desktop.specs/functions__debounce &amp;&amp; istanbul report html\n</code></pre><p>После завершения выполнения тестов, можно посмотреть отчет о покрытии кода тестами, открыв в браузере страницу\n<code>coverage/index.html</code>.</p>\n<p>Полный отчет и статистику покрытия кода библиотеки тестами можно посмотреть\n<a href=\"https://coveralls.io/r/bem/bem-core\">на странице профиля bem-core</a> в проекте <a href=\"https://coveralls.io\">Coveralls</a>.</p>\n<p>Для сборки и запуска тестов используется библиотека <a href=\"https://github.com/narqo/bem-pr\">bem-pr</a>.\nСм. <a href=\"https://github.com/narqo/bem-pr/blob/master/docs/tests.ru.md\">подробную информацию</a> про инфраструктуру\nтестирования в bem-pr.</p>\n<h2 id=\"Поддерживаемые-браузеры\">Поддерживаемые браузеры</h2>\n<p>Мы поддерживаем браузеры на основе статистики, получаемой на сервисах <a href=\"http://company.yandex.ru\">Яндекса</a>.</p>\n<p>Браузеры с долей более 2% пользователей попадают в полную совместимость, с более 0.5% — в частичную,\nчто означает, что данные будут доступны, но возможна деградация. В браузерах с долей менее 0.5% мы прекращаем\nтестирование.</p>\n<h3 id=\"Десктопы\">Десктопы</h3>\n<h4 id=\"Полная-совместимость\">Полная совместимость</h4>\n<ul>\n<li>Google Chrome 29+</li>\n<li>Firefox 24+</li>\n<li>Yandex 1.7+</li>\n<li>Opera 12.16</li>\n<li>MSIE 10.0</li>\n<li>MSIE 9.0</li>\n<li>MSIE 8.0</li>\n<li>Opera 12.15</li>\n</ul>\n<h4 id=\"Частичная-совместимость\">Частичная совместимость</h4>\n<ul>\n<li>Opera 17.0</li>\n<li>Opera 16.0</li>\n<li>Opera 12.14</li>\n<li>Opera 12.2</li>\n<li>Firefox 23</li>\n</ul>\n<h3 id=\"Тач-браузеры\">Тач-браузеры</h3>\n<h4 id=\"Полная-совместимость\">Полная совместимость</h4>\n<ul>\n<li>iOS 6+</li>\n<li>Android 2.3+</li>\n<li>Opera Mobile 12+</li>\n<li>Windows Phone 7+</li>\n</ul>\n<h4 id=\"Частичная-совместимость\">Частичная совместимость</h4>\n<ul>\n<li>iOS 5</li>\n<li>Android 2.2</li>\n</ul>\n<h2 id=\"Лицензия\">Лицензия</h2>\n<p>© 2012 YANDEX LLC. Код лицензирован <a href=\"LICENSE.txt\">Mozilla Public License 2.0</a>.</p>\n"}},"migration":{"title":{"en":"Migration","ru":"Миграция"},"content":{"en":"<h1 id=\"Migration\">Migration</h1>\n<h2 id=\"1-0-0\">1.0.0</h2>\n<p>For 1.0.0 version we assume migration from <a href=\"https://github.com/bem/bem-bl/\">bem-bl</a> to <a href=\"https://github.com/bem/bem-core/\">bem-core</a>.</p>\n<h3 id=\"Modules\">Modules</h3>\n<p>From now everything should be under the <a href=\"https://github.com/ymaps/modules\">ym modular system</a>.\nAll the dependencies have to be mentioned in the code, using global variables\nhave to be minimized to 0 if possible.</p>\n<p>Example</p>\n<pre><code class=\"lang-js\">modules.define(\n    &#39;my-module&#39;, // Module name\n    [&#39;module-from-library&#39;, &#39;my-another-module&#39;], // Module&#39;s dependencies\n    function(provide, moduleFromLibrary, myAnotherModule) { // Module declaration, runs when all the dependencies are resolved\n\n//Module providing\nprovide({\n    myModuleMethod : function() {}\n});\n\n});\n</code></pre>\n<p>TODO: add information about changes in build process (usage of special techs for js and instructions for custom builders).</p>\n<h3 id=\"jQuery-and-plugins\">jQuery and plugins</h3>\n<p>jQuery is represented with a wrapping module <code>jquery</code> which uses the <code>jQuery</code>\nglobal object if it is available or loads jQuery additionally.\nFrom now jQuery is used only for operations on DOM such as selecting nodes,\nbinding listeners to events, getting and setting attribute values and so on.</p>\n<p>For other operations there are special modules non-dependable on jQuery.</p>\n<ul>\n<li>the <code>objects</code> module to operate on objects (with <code>extend</code>, <code>isEmpty</code> and <code>each</code> methods)\n*the <code>functions</code> module to operate on functions (with <code>isFunction</code> and <code>noop</code> methods)</li>\n</ul>\n<p>All the jQuery plugins which are not fo DOM operation became modules:</p>\n<ul>\n<li>the <code>events</code> module used to be the <code>$.observable</code> jQuery plugin<br/>\nIt works with events, provides &quot;classes&quot; <code>EventsEmitter</code> and <code>Event</code></li>\n<li>the <code>inherit</code> module used to be the <code>$.inherit</code> plugin<br/>\nIt provides an inherit module with classes.</li>\n<li>the <code>cookie</code> module used to be the <code>$.cookie</code> plugin</li>\n<li>the <code>identify</code> module used to be <code>$.identify</code> plugin</li>\n<li>the <code>functions__throttle</code> and <code>functions__debounce</code> used to be the\n<code>$.throttle</code> and the <code>$.debounce</code> plugins</li>\n</ul>\n<p>Before:</p>\n<pre><code class=\"lang-js\">// block code\n$.throttle(...\n// block code\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">module.define(&#39;my-module&#39;, [&#39;functions__throttle&#39;], function(provide, throttle) {\n// module code\nthrottle(...\n// module code\n</code></pre>\n<h3 id=\"BEM-DOM-blocks\">BEM.DOM blocks</h3>\n<h4 id=\"Declaration\">Declaration</h4>\n<p>Blocks represented in DOM were declared with BEM.DOM.decl. Now they must use\n<code>i-bem__dom</code> module and extend it.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, ...);\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, ...);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<h4 id=\"Constructor\">Constructor</h4>\n<p>You have to use full notation for the callback for the <code>js</code> modifier in its\n<code>inited</code> value.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : function() {\n        // constructor code\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : {\n        inited : function() {\n            // constructor code\n</code></pre>\n<h4 id=\"Destructor\">Destructor</h4>\n<p>Instead of <code>destruct</code> method the destructive callback has to be applyed to the\nempty value of <code>js</code> modifier, which corresponds removing a modifier from a\nblock.\nAlso you do not need to call <code>__base</code> to run a descructor from the basic\n<code>i-bem__dom</code> module.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">destruct : function() {\n    this.__base.apply(this, arguments);\n    // destructor code\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : {\n        &#39;&#39; : function() {\n            // destructor code\n</code></pre>\n<h4 id=\"The-`changeThis`-method\">The <code>changeThis</code> method</h4>\n<p>Instead of <code>changeThis</code> method you have to use native <code>bind</code>.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">// block code\nobj.on(&#39;event&#39;, this.changeThis(this._method);\n// block code\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">obj.on(&#39;event&#39;, this._method.bind(this));\n// or better\nobj.on(&#39;event&#39;, this._method, this);\n</code></pre>\n<h4 id=\"The-`afterCurrentEvent`-method\">The <code>afterCurrentEvent</code> method</h4>\n<p>Use the <code>nextTick</code> method instead of <code>afterCurrentEvent</code>. The <code>nextTick</code> assures\nthat the block exists at the time of running a callback. If the block is already\ndestructed, the callback will not be run.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        this.afterCurrentEvent(function() { ...\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, DOM) {\n\nDOM.decl(&#39;block&#39;, {\n    method : function() {\n        this.nextTick(function() { ...\n</code></pre>\n<h4 id=\"Access-to-a-DOM-element-from-an-event-handler-callback\">Access to a DOM element from an event handler callback</h4>\n<p>The callback binded to a DOM element as an event handler is now provided with\nthe link to this DOM element as <code>$(e.currentTarget)</code> instead of <code>e.data.domElem</code>.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">onClick : function(e) {\n    e.data.domElem.attr(...\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">onClick : function(e) {\n    $(e.currentTarget).attr(...\n</code></pre>\n<p>Note: Remember that jQuery is unavailable in global scope and you must use <code>jquery</code> module for access to it.</p>\n<h4 id=\"Channels\">Channels</h4>\n<p>Channels are not embedded into BEM any more. Now they are the separate\n<code>events__channels</code> module.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;channel-name&#39;).on(....\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;events__channels&#39;], function(provide, channels, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        channels(&#39;channel-name&#39;).on(....\n</code></pre>\n<h4 id=\"The-`i-system`-block,-the-`sys`-channel-and-the-`tick`,-`idle`-and-`wakeup`-events\">The <code>i-system</code> block, the <code>sys</code> channel and the <code>tick</code>, <code>idle</code> and <code>wakeup</code> events</h4>\n<p>The is no <code>i-system</code> block any more. Instead you can use special modules:\n<code>tick</code> with the tick event and <code>idle</code> with the events idle and wakeup.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;sys&#39;).on(&#39;tick&#39;, ...\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;tick&#39;], function(provide, tick, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        tick.on(&#39;tick&#39;, ...\n</code></pre>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;sys&#39;).on(&#39;wakeup&#39;, ...\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;idle&#39;], function(provide, idle, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        idle.on(&#39;wakeup&#39;, ...\n</code></pre>\n<h3 id=\"The-BEM-blocks\">The BEM blocks</h3>\n<p>If you have BEM blocks just containing some modules without using BEM\nmethodology in them, you can now rewrite them as modules.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;i-router&#39;, {\n    route : function() { ... }\n});\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;router&#39;, function(provide) {\n\nprovide({\n    route : function() { ... }\n});\n\n});\n</code></pre>\n<p>If you need BEM blocks (not BEM.DOM blocks) anyway, you can extend the <code>i-bem</code>\nmodule.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;my-block&#39;, { ... });\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem&#39;, function(provide, BEM) {\n\nBEM.decl(&#39;my-block&#39;, { ... });\n\nprovide(BEM);\n\n});\n</code></pre>\n<h4 id=\"The-example-of-migration-refactoring-for-the-`b-spin`-block\">The example of migration refactoring for the <code>b-spin</code> block</h4>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;b-spin&#39;, {\n\n    onSetMod : {\n\n        &#39;js&#39; : function() {\n\n            this._size = this.getMod(&#39;size&#39;) || /[\\d]+/.exec(this.getMod(&#39;theme&#39;))[0];\n\n            this._bgProp = &#39;background-position&#39;;\n            this._posPrefix = &#39;0 -&#39;;\n\n            if (this.elem(&#39;icon&#39;).css(&#39;background-position-y&#39;)) { /* A dirty hack for IE which cannot get a background-position property but packground-position-y only */\n                this._bgProp = &#39;background-position-y&#39;;\n                this._posPrefix = &#39;-&#39;;\n            }\n\n            this._curFrame = 0;\n\n            this.hasMod(&#39;progress&#39;) &amp;&amp; this.channel(&#39;sys&#39;).on(&#39;tick&#39;, this._onTick, this);\n\n        },\n\n        &#39;progress&#39; : {\n\n            &#39;yes&#39; : function() {\n\n                this.channel(&#39;sys&#39;).on(&#39;tick&#39;, this._onTick, this);\n\n            },\n\n            &#39;&#39; : function() {\n\n                this.channel(&#39;sys&#39;).un(&#39;tick&#39;, this._onTick, this);\n\n            }\n\n        }\n    },\n\n    _onTick: function(){\n\n        var y = ++this._curFrame * this._size;\n\n        (y &gt;= this._size * 36) &amp;&amp; (this._curFrame = y = 0);\n\n        this.elem(&#39;icon&#39;).css(this._bgProp, this._posPrefix + y +&#39;px&#39;);\n\n    },\n\n    destruct : function() {\n\n        this.channel(&#39;sys&#39;).un(&#39;tick&#39;, this._onTick, this);\n        this.__base.apply(this, arguments);\n\n    }\n\n});\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(\n    &#39;i-bem__dom&#39;,\n    [&#39;tick&#39;],\n    function(provide, tick, BEMDOM) {\n\nvar FRAME_COUNT = 36;\n\nBEMDOM.decl(&#39;b-spin&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39; : function() { // constructor\n                var hasBackgroundPositionY = !!this.elem(&#39;icon&#39;).css(&#39;background-position-y&#39;));\n\n                this._bgProp = hasBackgroundPositionY? &#39;background-position-y&#39; : &#39;background-position&#39;;\n                this._posPrefix = hasBackgroundPositionY? &#39;-&#39; : &#39;0 -&#39;;\n                this._curFrame = 0;\n                this._size = Number(this.getMod(&#39;size&#39;) || /[\\d]+/.exec(this.getMod(&#39;theme&#39;))[0]);\n\n                this.hasMod(&#39;progress&#39;) &amp;&amp; this._bindToTick();\n            },\n\n            &#39;&#39; : function() { // destructor\n                this._unbindFromTick();\n            }\n        },\n\n        &#39;progress&#39; : {\n            &#39;yes&#39; : function() {\n                this._bindToTick();\n            },\n\n            &#39;&#39; : function() {\n                this._unbindFromTick();\n            }\n        }\n    },\n\n    _bindToTick : function() {\n        tick.on(&#39;tick&#39;, this._onTick, this);\n    },\n\n    _unbindFromTick : function() {\n        tick.un(&#39;tick&#39;, this._onTick, this);\n    },\n\n    _onTick : function() {\n        var offset;\n        this._curFrame++ &gt;= FRAME_COUNT?\n            offset = this._curFrame * this._size :\n            this._curFrame = offset = 0;\n\n        this.elem(&#39;icon&#39;).css(this._bgProp, this._posPrefix + offset + &#39;px&#39;);\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n","ru":"<h1 id=\"Миграция\">Миграция</h1>\n<h2 id=\"1-0-0\">1.0.0</h2>\n<p>Для версии 1.0.0 миграция подразумевается с использования <a href=\"https://github.com/bem/bem-bl/\">bem-bl</a> на использование <a href=\"https://github.com/bem/bem-core/\">bem-core</a>.</p>\n<h3 id=\"Модули\">Модули</h3>\n<p>Весь код теперь пишется в терминах модульной системы <a href=\"https://github.com/ymaps/modules\">https://github.com/ymaps/modules</a>.\nВсе зависимости должны явно указываться в коде, обращения к глобальным объектом необходимо минимизировать, а, по возможности, и полностью исключить.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-javascript\">modules.define(\n    &#39;my-module&#39;, // имя модуля\n    [&#39;module-from-library&#39;, &#39;my-another-module&#39;], // зависимости модуля\n    function(provide, moduleFromLibrary, myAnotherModule) { // декларация модуля, вызывается когда все зависимости &quot;разрезолвлены&quot;\n\n// предоставление модуля\nprovide({\n    myModuleMethod : function() {}\n});\n\n});\n</code></pre>\n<p>TODO: дописать про изменение сборки (использование специальных технологий для js и как быть с кастомными сборщиками)</p>\n<h3 id=\"jQuery-и-jQuery-плагины\">jQuery и jQuery-плагины</h3>\n<p>jQuery представлен модулем-оберткой <code>jquery</code>, который использует глобальный объект jQuery,\nв случае если он уже присутствует на странице, в противном случае загружая его самостоятельно.\njQuery теперь используется только для операций, связанных непосредственно с DOM\n(поиск элементов, подписка на события, установка/получение атрибутов элементов, и т.д.).</p>\n<p>Для всех остальных операций написаны соответствующие модули,\nпредоставляющие аналогичный функционал, но, при этом, не зависящие от jQuery:</p>\n<ul>\n<li>модуль <code>objects</code> для работы с объектами (с методами <code>extend</code>, <code>isEmpty</code>, <code>each</code>)</li>\n<li>модуль <code>functions</code> для работы с функциями (с методами <code>isFunction</code> и <code>noop</code>)</li>\n</ul>\n<p>Также, все jQuery-плагины, не связанные непосредственно с jQuery\n(<code>$.observable</code>, <code>$.inherit</code>, <code>$.cookie</code>, <code>$.identify</code>, <code>$.throttle</code>) стали модулями:</p>\n<ul>\n<li>модуль <code>events</code> вместо <code>$.observable</code> для работы с событиями, предоставляющий &quot;классы&quot; <code>EventsEmitter</code> и <code>Event</code>)</li>\n<li>модуль <code>inherit</code> вместо <code>$.inherit</code> для работы с &quot;классами&quot; и наследованием</li>\n<li>модуль <code>cookie</code> вместо <code>$.cookie</code></li>\n<li>модуль <code>identify</code> вместо <code>$.identify</code></li>\n<li>модули <code>functions__throttle</code>, <code>functions__debounce</code> вместо <code>$.throttle</code> и <code>$.debounce</code>, соответственно</li>\n</ul>\n<p>Было:</p>\n<pre><code class=\"lang-js\">// код блока\n$.throttle(...\n// код блока\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">module.define(&#39;my-module&#39;, [&#39;functions__throttle&#39;], function(provide, throttle) {\n// код модуля\nthrottle(...\n// код модуля\n</code></pre>\n<h3 id=\"BEM-DOM-блоки\">BEM.DOM-блоки</h3>\n<h4 id=\"Декларация\">Декларация</h4>\n<p>Вместо декларации через BEM.DOM.decl необходимо доопределять модуль <code>i-bem__dom</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, ...);\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, ...);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<h4 id=\"Конструктор\">Конструктор</h4>\n<p>Необходимо использовать полную нотацию для обработчика установки модификатора <code>js</code> в значение <code>inited</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : function() {\n        // код конструктора\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    &#39;js&#39; : {\n        &#39;inited&#39; : function() {\n            // код конструктора\n</code></pre>\n<h4 id=\"Деструктор\">Деструктор</h4>\n<p>Вместо метода <code>destruct</code> необходимо использовать обработчик установки модификатора <code>js</code> в пустое значение (удаление модификатора).\nВызывать <code>__base</code> для того, чтобы у блоков работал базовый деструктор, определенный в <code>i-bem__dom</code>, больше не нужно.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">destruct : function() {\n    this.__base.apply(this, arguments);\n    // код деструктора\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : {\n        &#39;&#39; : function() {\n            // код деструктора\n</code></pre>\n<h4 id=\"Метод-`changeThis`\">Метод <code>changeThis</code></h4>\n<p>Вместо метода <code>changeThis</code> необходимо использовать либо соответствующий параметр, либо нативный метод <code>bind</code>, если такой параметр отсутствует.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">// код блока\nobj.on(&#39;event&#39;, this.changeThis(this._method);\n// код блока\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">obj.on(&#39;event&#39;, this._method.bind(this));\n// или лучше\nobj.on(&#39;event&#39;, this._method, this);\n</code></pre>\n<h4 id=\"Метод-`afterCurrentEvent`\">Метод <code>afterCurrentEvent</code></h4>\n<p>Вместо метода <code>afterCurrentEvent</code> необходимо использовать метод <code>nextTick</code>,\nкоторый гарантирует, что блок еще существует в момент исполнения колбэка\n(если блок уже уничтожен к этому моменту, то колбэк не исполняется).</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        this.afterCurrentEvent(function() { ...\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        this.nextTick(function() { ...\n</code></pre>\n<h4 id=\"Доступ-до-DOM-элемента-в-обработчике-события\">Доступ до DOM-элемента в обработчике события</h4>\n<p>DOM-элемент, к которому был подвешен обработчик события теперь доступен\nкак <code>$(e.currentTarget)</code>вместо <code>e.data.domElem</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">onClick : function(e) {\n    e.data.domElem.attr(...\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">onClick : function(e) {\n    $(e.currentTarget).attr(...\n</code></pre>\n<h4 id=\"Каналы--channels-\">Каналы (channels)</h4>\n<p>Каналы больше не являются встроенными в BEM, теперь они являются самостоятельным модулем <code>events__channels</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;channel-name&#39;).on(....\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;events__channels&#39;], function(provide, channels, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        channels(&#39;channel-name&#39;).on(....\n</code></pre>\n<h4 id=\"Блок-`i-system`-и-канал-`sys`-событий-`tick`,-`idle`,-`wakeup`\">Блок <code>i-system</code> и канал <code>sys</code> событий <code>tick</code>, <code>idle</code>, <code>wakeup</code></h4>\n<p>Этот блок и канал перестали существовать, вместо них появились отдельные модули: <code>tick</code> с событием tick  и <code>idle</code> с событиями idle и wakeup.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;sys&#39;).on(&#39;tick&#39;, ...\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;tick&#39;], function(provide, tick, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        tick.on(&#39;tick&#39;, ...\n</code></pre>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;sys&#39;).on(&#39;wakeup&#39;, ...\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;idle&#39;], function(provide, idle, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        idle.on(&#39;wakeup&#39;, ...\n</code></pre>\n<h3 id=\"BEM-блоки\">BEM-блоки</h3>\n<p>Те BEM-блоки, которые использовались как хранилище для каких-то методов, при этом никак не использующие BEM-методологию, теперь\nмогут быть написаны как модули.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;i-router&#39;, {\n    route : function() { ... }\n});\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;router&#39;, function(provide) {\n\nprovide({\n    route : function() { ... }\n});\n\n});\n</code></pre>\n<p>Если же, по каким-то причинам, нужны именно BEM-блоки (не BEM.DOM-блоки), то их можно объявлять, доопределяя модуль <code>i-bem</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;my-block&#39;, { ... });\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem&#39;, function(provide, BEM) {\n\nBEM.decl(&#39;my-block&#39;, { ... });\n\nprovide(BEM);\n\n});\n</code></pre>\n<h4 id=\"Рефакторинг-на-примере-блока-`b-spin`\">Рефакторинг на примере блока <code>b-spin</code></h4>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;b-spin&#39;, {\n\n    onSetMod : {\n\n        &#39;js&#39; : function() {\n\n            this._size = this.getMod(&#39;size&#39;) || /[\\d]+/.exec(this.getMod(&#39;theme&#39;))[0];\n\n            this._bgProp = &#39;background-position&#39;;\n            this._posPrefix = &#39;0 -&#39;;\n\n            if (this.elem(&#39;icon&#39;).css(&#39;background-position-y&#39;)) { /* В IE нельзя получить свойство background-position, только background-position-y, поэтому костыляем */\n                this._bgProp = &#39;background-position-y&#39;;\n                this._posPrefix = &#39;-&#39;;\n            }\n\n            this._curFrame = 0;\n\n            this.hasMod(&#39;progress&#39;) &amp;&amp; this.channel(&#39;sys&#39;).on(&#39;tick&#39;, this._onTick, this);\n\n        },\n\n        &#39;progress&#39; : {\n\n            &#39;yes&#39; : function() {\n\n                this.channel(&#39;sys&#39;).on(&#39;tick&#39;, this._onTick, this);\n\n            },\n\n            &#39;&#39; : function() {\n\n                this.channel(&#39;sys&#39;).un(&#39;tick&#39;, this._onTick, this);\n\n            }\n\n        }\n    },\n\n    _onTick: function(){\n\n        var y = ++this._curFrame * this._size;\n\n        (y &gt;= this._size * 36) &amp;&amp; (this._curFrame = y = 0);\n\n        this.elem(&#39;icon&#39;).css(this._bgProp, this._posPrefix + y +&#39;px&#39;);\n\n    },\n\n    destruct : function() {\n\n        this.channel(&#39;sys&#39;).un(&#39;tick&#39;, this._onTick, this);\n        this.__base.apply(this, arguments);\n\n    }\n\n});\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(\n    &#39;i-bem__dom&#39;,\n    [&#39;tick&#39;],\n    function(provide, tick, BEMDOM) {\n\nvar FRAME_COUNT = 36;\n\nBEMDOM.decl(&#39;b-spin&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39; : function() { // конструктор\n                var hasBackgroundPositionY = !!this.elem(&#39;icon&#39;).css(&#39;background-position-y&#39;)); /* В IE нельзя получить свойство background-position, только background-position-y */\n\n                this._bgProp = hasBackgroundPositionY? &#39;background-position-y&#39; : &#39;background-position&#39;;\n                this._posPrefix = hasBackgroundPositionY? &#39;-&#39; : &#39;0 -&#39;;\n                this._curFrame = 0;\n                this._size = Number(this.getMod(&#39;size&#39;) || /[\\d]+/.exec(this.getMod(&#39;theme&#39;))[0]);\n\n                this.hasMod(&#39;progress&#39;) &amp;&amp; this._bindToTick();\n            },\n\n            &#39;&#39; : function() { // деструктор\n                this._unbindFromTick();\n            }\n        },\n\n        &#39;progress&#39; : {\n            &#39;true&#39; : function() {\n                this._bindToTick();\n            },\n\n            &#39;&#39; : function() {\n                this._unbindFromTick();\n            }\n        }\n    },\n\n    _bindToTick : function() {\n        tick.on(&#39;tick&#39;, this._onTick, this);\n    },\n\n    _unbindFromTick : function() {\n        tick.un(&#39;tick&#39;, this._onTick, this);\n    },\n\n    _onTick : function() {\n        var offset;\n        this._curFrame++ &gt;= FRAME_COUNT?\n            offset = this._curFrame * this._size :\n            this._curFrame = offset = 0;\n\n        this.elem(&#39;icon&#39;).css(this._bgProp, this._posPrefix + offset + &#39;px&#39;);\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n"}},"changelog":{"title":{"en":"Сhangelog","ru":"История изменений"},"content":{"en":"<h1 id=\"Changelog\">Changelog</h1>\n<h2 id=\"2-5-0\">2.5.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>bem-core in now published under the <a href=\"https://www.mozilla.org/MPL/2.0/\">MPL 2.0</a> license (<a href=\"https://github.com/bem/bem-core/issues/443\">#443</a>).</li>\n<li>An ability to specify error handler was added to <code>loader_type_js</code> (<a href=\"https://github.com/bem/bem-core/issues/672\">#672</a>).</li>\n<li><code>BEMContext</code> class was added to <code>oninit</code> export context in <code>i-bem.bemtree</code> (<a href=\"https://github.com/bem/bem-core/issues/602\">#602</a>).</li>\n<li><code>reapply</code> static method was added to BEMContext class of BEMTREE (<a href=\"https://github.com/bem/bem-core/pull/706\">#706</a>).</li>\n<li>bh templates for block <code>page</code> were added to touch level (<a href=\"https://github.com/bem/bem-core/pull/689\">#689</a>).</li>\n<li><a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a> was updated to 0.9.0 (<a href=\"https://github.com/bem/bem-core/pull/709\">#709</a>).</li>\n</ul>\n<h3 id=\"Bug-fixes\">Bug fixes</h3>\n<ul>\n<li>An issue in <code>i-bem__dom</code> was fixed. <code>findBlocksInside</code> could return blocks which weren&#39;t inited  (<a href=\"https://github.com/bem/bem-core/issues/699\">#699</a>).</li>\n<li>An issue in <code>tick</code> was fixed. Timer was not removed by <code>Tick#stop()</code> (<a href=\"https://github.com/bem/bem-core/issues/694\">#694</a>).</li>\n<li>An issue in <code>i-bem.bemhtml</code> was fixed. <code>i-bem</code> CSS class was added to elements by mistake (<a href=\"https://github.com/bem/bem-core/issues/633\">#633</a>).</li>\n<li><code>html-from-bemtree</code> tech was fixed to expose <code>vow</code>, <code>console</code>, <code>setTimeout</code> inside BEMTREE template context  (<a href=\"https://github.com/bem/bem-core/commit/438ebb8f828e26977592e26511e8aad15176d7a4\">#438ebb8</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li>English guide to BEMJSON was added.</li>\n<li>Russian documentation for <code>querystring</code> module was added.</li>\n<li>Russian documentation for <code>i-bem.js</code> was fixed to satisfy current API.</li>\n<li>Documentation for BEMHML/BEMTREE for both languages was updated.</li>\n</ul>\n<h2 id=\"2-4-0\">2.4.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li><a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a> was updated to 0.8.0; <a href=\"https://github.com/bem/bemhtml-compat\">bemhtml-compat</a> was updated to 0.0.11.</li>\n</ul>\n<h3 id=\"Bug-fixes\">Bug fixes</h3>\n<ul>\n<li>An issue in <code>jquery__event_type_pointerpressrelease</code> was fixed. <code>pointerpress</code>/<code>pointerrelease</code> events fired for any press/release\nof mouse button (<a href=\"https://github.com/bem/bem-core/issues/607\">#607</a>).</li>\n<li>An issue in <code>i-bem__dom.js</code> was fixed. Base <code>live</code> method was not properly called in some edge cases (<a href=\"https://github.com/bem/bem-core/issues/608\">#608</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li>English documentation for JS-syntax of BEMHTML was added.</li>\n</ul>\n<h2 id=\"2-3-0\">2.3.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>New implementation of pointer events was added. Based on pointer events polyfills from <a href=\"http://www.polymer-project.org/\">Polymer</a> (<a href=\"https://github.com/bem/bem-core/pull/567\">#567</a>).</li>\n<li>Ability to specify additional data for event was added to <code>bindTo*</code> methods of <code>i-bem__dom.js</code> (<a href=\"https://github.com/bem/bem-core/issues/568\">#568</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li>An issue in <code>i-bem.bemhtml</code> was fixed. There was an error when mix was used as an object (not an array) in BEMJSON and BEMHTML simultaneously (<a href=\"https://github.com/bem/bem-core/issues/555\">#555</a>).</li>\n<li>An issue in <code>page</code> was fixed. There was no possibility to apply standard modes to <code>page</code> in BEMHTML template and touch template was broken (<a href=\"https://github.com/bem/bem-core/issues/516\">516</a>).</li>\n</ul>\n<h2 id=\"2-2-4\">2.2.4</h2>\n<h3 id=\"Bug-fixes\">Bug fixes</h3>\n<ul>\n<li>An issue in <code>i-bem.js</code> was fixed. Modifier change event has been emitted even if <code>beforeSetMod</code> handler\nhad prevented change (<a href=\"https://github.com/bem/bem-core/pull/546\">#546</a>).</li>\n<li>String decoding process of <code>querystring__uri</code> module was fixed to return original string\nif decode failed (<a href=\"https://github.com/bem/bem-core/pull/554\">#554</a>).</li>\n</ul>\n<h2 id=\"2-2-3\">2.2.3</h2>\n<h3 id=\"Bug-fixes\">Bug fixes</h3>\n<ul>\n<li>Destruction process of blocks was fixed to prevent unexpected block reinitialization (<a href=\"https://github.com/bem/bem-core/issues/540\">#540</a>).</li>\n<li>An issue in <code>jquery__event_type_pointer</code> was fixed. Native mouse events were replaced with pointer events\nin unexpected cases (<a href=\"https://github.com/bem/bem-core/issues/534\">#534</a>).</li>\n<li><code>unbindFrom*</code> methods of <code>i-bem__dom</code> now support multiple events to be passed in arguments (<a href=\"https://github.com/bem/bem-core/issues/533\">#533</a>).</li>\n<li>Lost <code>functions</code> dependency in <code>events</code> module was restored (<a href=\"https://github.com/bem/bem-core/issues/532\">#532</a>).</li>\n</ul>\n<h2 id=\"2-2-2\">2.2.2</h2>\n<h3 id=\"Bug-fixes\">Bug fixes</h3>\n<ul>\n<li>An issue with block reinitialization on the DOM node, that has been processed with destructor, was fixed\nin <code>i-bem__dom</code> (<a href=\"https://github.com/bem/bem-core/issues/518\">#518</a>).</li>\n<li>An issue in mod events subscription was fixed in <code>i-bem</code>. <code>false</code> could be used as <code>modVal</code> (<a href=\"https://github.com/bem/bem-core/issues/529\">#529</a>).</li>\n<li><code>jquery</code> was updated to the latest minor releases 2.1.1 and 1.11.1 (<a href=\"https://github.com/bem/bem-core/issues/515\">#515</a>).</li>\n</ul>\n<h2 id=\"2-2-1\">2.2.1</h2>\n<ul>\n<li>An issue in <code>jquery__event_type_pointerpressrelease</code> was fixed. <code>pointerpress</code> event has been triggered twice on each mousedown\nin IE10 (<a href=\"https://github.com/bem/bem-core/issues/505\">#505</a>).</li>\n</ul>\n<h2 id=\"2-2-0\">2.2.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>New <code>keyboard__codes</code> module has been added (<a href=\"https://github.com/bem/bem-core/issues/431\">#431</a>).</li>\n<li><code>BEMContext</code> class was added to oninit&#39;s export context in <code>i-bem.bemhtml</code> (<a href=\"https://github.com/bem/bem-core/pull/485\">#485</a>).</li>\n<li>Ability to declare elements with block class has been added (<a href=\"https://github.com/bem/bem-core/issues/481\">#481</a>).</li>\n<li>Behaviour of <code>isSimple</code> method of <code>BEMContext</code> was fixed in <code>i-bem.bemhtml</code> (<a href=\"https://github.com/bem/bem-core/pull/432\">#432</a>).</li>\n<li>An issue with <code>liveUnbindFrom</code> method of <code>BEMDOM</code> was fixed in <code>i-bem__dom</code> (<a href=\"https://github.com/bem/bem-core/pull/476\">#476</a>).</li>\n<li>An issue with <code>isFocusable</code> method of <code>dom</code> module was fixed for cases where <code>domElem</code> is a link with <code>tabindex</code> attribute,\nbut without <code>href</code> (<a href=\"https://github.com/bem/bem-core/issues/501\">#501</a>).</li>\n<li>Short way of module declaration was fixed for <code>i-bem__dom_elem-instances</code> (<a href=\"https://github.com/bem/bem-core/issues/479\">#479</a>).</li>\n<li>A workaround for rendering performance of blocks initialisation in Chrome-based browsers was added\nto <code>i-bem__dom_init_auto</code> (<a href=\"https://github.com/bem/bem-core/issues/486\">#486</a>).</li>\n<li><code>vow.js</code> module has been moved to <code>vow.vanilla.js</code> (<a href=\"https://github.com/bem/bem-core/issues/412\">#412</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li><code>vow</code> module has been updated to 0.4.3 (<a href=\"https://github.com/bem/bem-core/pull/504\">#504</a>).</li>\n<li>Russian documentation about BEMTREE technology was added (<a href=\"https://github.com/bem/bem-core/pull/500\">#500</a>).</li>\n<li>Russian documentation for JS-syntax of BEMHTML was updated (<a href=\"https://github.com/bem/bem-core/pull/471\">#471</a>).</li>\n<li>API references for JS-modules has been added as a separate branch <code>v2-jsdoc</code> (<a href=\"https://github.com/bem/bem-core/pull/478\">#478</a>).</li>\n</ul>\n<h2 id=\"2-1-0\">2.1.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>An issue in <code>i-bem.js</code> when modifiers change event had been emitted before <code>onSetMod</code> handlers have been called was fixed (<a href=\"https://github.com/bem/bem-core/issues/454\">#454</a>).</li>\n<li>An issue in <code>i-bem.bemhtml</code> was fixed. Since now <code>this.mods</code> and <code>this.ctx.mods</code> use the same object (<a href=\"https://github.com/bem/bem-core/issues/441\">#441</a>).</li>\n<li>Error in modular declaration of element&#39;s modifiers was fixed in <code>i-bem__dom_elem-instances</code> (<a href=\"https://github.com/bem/bem-core/issues/447\">#447</a>).</li>\n<li><a href=\"https://github.com/dfilatov/inherit\">inherit</a> module was updated to 2.2.1 (<a href=\"https://github.com/bem/bem-core/issues/466\">#466</a>).</li>\n<li>An order of tags in <code>head</code> section of <code>page.bemhtml</code> was fixed (<a href=\"https://github.com/bem/bem-core/pull/465\">#465</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li><code>baseMix</code> field description of <code>i-bem.js</code> was added to russian docs (<a href=\"https://github.com/bem/bem-core/pull/461\">#461</a>).</li>\n<li>CDN host was changed to <code>yastatic.net</code> (<a href=\"https://github.com/bem/bem-core/issues/444\">#444</a>).\nPrevious CDN host <code>yandex.st</code> is still accessible. Physically they both are the same web servers. DNS records is the only difference.</li>\n<li>BEMHTML template for <code>bem create</code> command was added (<a href=\"https://github.com/bem/bem-core/issues/277\">#277</a>).</li>\n<li>We do not support autobuilding of our tests with Node.js 0.8 in <a href=\"http://travis-ci.com\">Travis CI</a> any longer (<a href=\"https://github.com/bem/bem-core/issues/455\">#455</a>).</li>\n<li>Travis&#39;s build status badge <a href=\"http://blog.travis-ci.com/2014-03-20-build-status-badges-support-svg/\">was changed to SVG version</a> :)</li>\n</ul>\n<h2 id=\"2-0-0\">2.0.0</h2>\n<h3 id=\"Breaking-changes\">Breaking changes</h3>\n<ul>\n<li><p>All deprecated methods have been removed from <code>i-bem.js</code> and <code>i-bem__dom.js</code> (<a href=\"https://github.com/bem/bem-core/issues/318\">#318</a>).\nThe following methods were removed:</p>\n<ul>\n<li><code>destruct</code>, use <code>onSetMod js &#39;&#39;</code>;</li>\n<li><code>extractParams</code>, use <code>elemParams</code>;</li>\n<li><code>trigger</code>, use <code>emit</code>;</li>\n<li><code>afterCurrentEvent</code>, use <code>next-tick</code> module;</li>\n<li><code>channel</code>, use <code>events__channels</code> module;</li>\n<li><code>changeThis</code>, use native <code>Function.prototype.bind</code>.</li>\n</ul>\n</li>\n<li><p><code>init</code> and <code>destruct</code> events have been removed from <code>i-bem.js</code> in favor of modifiers changes events (see &quot;Major changes&quot; section below).</p>\n</li>\n<li><code>ecma</code> was moved to <a href=\"http://github.com/bem/es5-shims\">separate repo</a>; ES5-shims should be used\nfor IE &lt; 9 (<a href=\"https://github.com/bem/bem-core/issues/230\">#230</a>).</li>\n<li><code>vow</code> module has been updated to 0.4.1 (<a href=\"https://github.com/bem/bem-core/issues/350\">#350</a>).\nSee <a href=\"https://github.com/dfilatov/vow/blob/0.4.1/CHANGELOG.md\">Vow&#39;s changelog</a> for changes.</li>\n<li>Support for vow@0.4 has been added to <code>i-bem.bemhtml</code> (<a href=\"https://github.com/bem/bem-core/issues/385\">#385</a>).</li>\n</ul>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>Support for defining BEMDOM-blocks as <a href=\"https://github.com/ymaps/modules\">ym</a> modules has been added (<a href=\"https://github.com/bem/bem-core/issues/382\">#382</a>).</li>\n<li>Events for modifiers changes have been added to <code>i-bem.js</code> (<a href=\"https://github.com/bem/bem-core/issues/357\">#357</a>).</li>\n<li>Support for passing string values has been added to <code>BEMDOM.init</code>\n(<a href=\"https://github.com/bem/bem-core/issues/419\">#419</a>).\nand <code>BEMDOM.update</code> methods (<a href=\"https://github.com/bem/bem-core/issues/420\">#420</a>).</li>\n<li>DOM helpers from <code>i-bem__dom.js</code> <code>replace</code>, <code>append</code>, <code>prepend</code>, <code>before</code>, <code>after</code> now return new context and <code>update</code> returns\nupdated context as a jQuery object (<a href=\"https://github.com/bem/bem-core/issues/410\">#410</a>).</li>\n<li>New <code>loader_type_bundle</code> has been added (<a href=\"https://github.com/bem/bem-core/issues/358\">#358</a>).</li>\n<li>Default jQuery versions were updated to 2.1.0 and to 1.11.0, for IE &lt; 9 (<a href=\"https://github.com/bem/bem-core/issues/356\">#356</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li><code>i-bem.bemhtml</code> now uses strings concatination instead of pushing to buffer in it&#39;s internals (<a href=\"https://github.com/bem/bem-core/issues/401\">#401</a>).</li>\n<li>jQuery no longer removes itself from global scope if it exists (<a href=\"https://github.com/bem/bem-core/issues/349\">#349</a>).</li>\n<li><code>jquery__event_type_pointerclick.js</code> has been moved from touch level to common (<a href=\"https://github.com/bem/bem-core/issues/393\">#393</a>).</li>\n<li>Modifiers <code>i-bem_elem-instances_yes</code> and <code>i-bem__dom_elem-instances_yes</code> were renamed to boolean style (<a href=\"https://github.com/bem/bem-core/issues/352\">#352</a>).</li>\n<li>Runtime error in <code>page</code> template in development mode has been fixed (<a href=\"https://github.com/bem/bem-core/issues/417\">#417</a>).</li>\n<li>Usage of <code>Function.prototype.bind</code> has been droped from <code>i-bem.js</code> internals in favor of support\nfor Android 2.3 (<a href=\"https://github.com/bem/bem-core/issues/404\">#404</a>).</li>\n<li>Some bugs in <code>browser-js+bemhtml</code> tech have been fixed (<a href=\"https://github.com/bem/bem-core/issues/392\">#392</a>).</li>\n<li>Up to <a href=\"https://github.com/ymaps/modules/releases\">ym@0.0.15</a> (<a href=\"https://github.com/bem/bem-core/issues/414\">#414</a>).</li>\n</ul>\n<h2 id=\"1-2-0\">1.2.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>BEM-blocks are emit <code>destruct</code> event on destructing (<a href=\"https://github.com/bem/bem-core/issues/370\">#370</a>).</li>\n<li>Improvements of <code>pointerevents</code> polyfills (<a href=\"https://github.com/bem/bem-core/pull/354\">#354</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li>All JSDocs were fixed so <a href=\"github.com/bem/bem-jsd\">bem-jsd</a> could parse them (<a href=\"https://github.com/bem/bem-core/issues/335\">#335</a>).</li>\n<li>Russian version of BEMHTML reference was actualized to JavaScript syntax (<a href=\"https://github.com/bem/bem-core/pull/355\">#355</a>).</li>\n<li>Use <a href=\"http://bower.io\">bower</a> for dependency management (<a href=\"https://github.com/bem/bem-core/issues/367\">#367</a>).</li>\n</ul>\n<h2 id=\"1-1-0\">1.1.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li><code>jquery__config</code> uses jQuery 2.x by default for modern browsers (<a href=\"https://github.com/bem/bem-core/issues/319\">#319</a>).</li>\n<li>Add ability to use any BEMJSON as value of attributes in BEMHTML templates (<a href=\"https://github.com/bem/bem-core/issues/290\">#290</a>).</li>\n<li>Fix dependencies in <code>i-bem__collection</code> (<a href=\"https://github.com/bem/bem-core/issues/292\">#292</a>).</li>\n<li>Remove <code>page</code> block&#39;s touch styles (<a href=\"https://github.com/bem/bem-core/issues/306\">#306</a>).</li>\n<li>Fix <code>page</code> BEMHTML wrapping in production mode (<a href=\"https://github.com/bem/bem-core/issues/309\">#309</a>).</li>\n<li>Fix possible JavaScript error in script injection in IE&lt;9 in <code>next-tick</code> (<a href=\"https://github.com/bem/bem-core/issues/324\">#324</a>).</li>\n<li>Fix <code>FastClick</code> initialisation in <code>jquery__event_type_pointerclick</code> of <code>touch.blocks</code> (<a href=\"https://github.com/bem/bem-core/issues/332\">#332</a>).</li>\n<li>Fix <code>node.js</code> tech bug on Windows systems (<a href=\"https://github.com/bem/bem-core/issues/274\">#274</a>).</li>\n<li>Fix <code>i-bem__dom_elem-instances</code> bug with <code>onElemSetMod</code> (<a href=\"https://github.com/bem/bem-core/issues/340\">#340</a>).</li>\n<li>Use bemhtml from <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a> (<a href=\"https://github.com/bem/bem-core/issues/329\">#329</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li><a href=\"https://github.com/ymaps/modules\">ym</a> was updated to 0.0.12 (<a href=\"https://github.com/bem/bem-core/issues/326\">#326</a>).</li>\n<li>Do not flood <code>console</code> with messages if <code>i-bem__i18n</code> is not in debug mode (<a href=\"https://github.com/bem/bem-core/issues/285\">#285</a>).</li>\n<li>Fix jsdoc for <code>dropElemCache()</code> method of <code>i-bem__dom</code> module (<a href=\"https://github.com/bem/bem-core/issues/296\">#296</a>).</li>\n<li>Development infrastructure was updated to\n<a href=\"https://github.com/narqo/bem-pr/blob/0.5.3/HISTORY.md\">bem-pr@v0.5.x</a> (<a href=\"https://github.com/bem/bem-core/issues/323\">#323</a>).</li>\n<li>Russian documentation for <code>i-bem.js</code> was updated.</li>\n<li><a href=\"https://github.com/bem/bem-core/blob/v1/README.md#supported-browsers\">List of supported browsers</a>\nwas specified in project&#39;s README.</li>\n</ul>\n<h2 id=\"1-0-0\">1.0.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>Starts using modular system <a href=\"https://github.com/ymaps/modules\">ym</a>.</li>\n<li>Removes all deprecated methods from <code>i-bem</code> and <code>i-bem__dom</code>.</li>\n<li><code>i-bem</code> now has no dependency on jQuery. <code>i-bem__dom</code> still depends on jQuery.</li>\n<li>BEMHTML-template can be written with <a href=\"https://gist.github.com/veged/6150760\">JS-syntax</a>.</li>\n<li>Introduces new tech <code>bemtree</code> (based on <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a>)\nfor describing dynamic generation of BEM-tree.</li>\n<li>Introduces new tech <code>vanilla.js</code> for JS-implementations that does not depend on particular JS-engine.</li>\n<li>Introduces new techs <code>browser.js</code> and <code>node.js</code> for JS-implementations targeted corresponding engines.\nFor backward compatibility we assume that <code>.js</code>-files contains <code>browser.js</code> implementation.</li>\n<li>Introduces polyfill (<code>jquery__event_type_pointer</code> and <code>jquery__event_type_pointerclick</code> as a jQuery-plugins)\nfor universalize desktop and touch pointer events.</li>\n<li>Introduces system for unit testing and blocks examples generation.</li>\n<li>Introduces &quot;simple&quot; modifiers (modifiers without value) support in <code>i-bem</code> and BEMHTML.</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li>Gets rid of prefixes in all block names (except <code>i-bem</code>).</li>\n<li>Block <code>i-bem__dom</code> becomes a module (in terms of <a href=\"https://github.com/ymaps/modules\">ym</a>)\nand all <code>BEM.DOM</code>-block must define additions to <code>i-bem__dom</code> (<a href=\"https://github.com/bem/bem-core/blob/v1/common.bundles/index/blocks/b-square/b-square.js\">example</a>).</li>\n<li>Method for blocks declaration (<code>.decl()</code>) does not accept object with <code>name</code> field as first parameter.\nRequired form with <code>block</code> field: <code>BEM.decl({ block: &#39;b1&#39;, modName: &#39;m&#39;, modVal: &#39;v&#39; }, ...)</code>.</li>\n<li>Introduces <code>nextTick</code> method as replacement for <code>afterCurrentEvent</code> method\nfor ensure of block existence in callback invocation time.\n<code>BEM.afterCurrentEvent</code> is <strong>deprecated</strong>.</li>\n<li>Introduces new <code>channels</code> module instead of <code>BEM.channel</code>. <code>BEM.channel</code> is <strong>deprecated</strong>.</li>\n<li><code>changeThis</code> is <strong>deprecated</strong>. Use native <code>bind</code> instead.</li>\n<li>Removes <code>del</code> method from <code>i-bem</code> block.</li>\n<li>Removes <code>getWindowSize</code> method from <code>i-bem__dom</code> block. Use <code>BEMDOM.win.width()</code> and <code>BEMDOM.win.height()</code>.</li>\n<li>Introduces <code>jquery</code> module-wrapper for providing jQuery.\nIf jQuery already included into the page module-wrapper provides it. Otherwise it loads jQuery (version 1.10.1) on its own.</li>\n<li><code>$.observable</code> becomes <code>events</code> module and not longer depends on jQuery.</li>\n<li><code>$.inherit</code> becomes <code>inherit</code> module and not longer depends on jQuery.</li>\n<li><code>$.identify</code> becomes <code>identify</code> module and not longer depends on jQuery.</li>\n<li><code>$.throttle</code> splits into two modules: <code>functions__throttle</code> and <code>functions__debounce</code>, they both not longer depend on jQuery.</li>\n<li><code>$.decodeURI</code>, <code>$.decodeURIComponent</code> moves to <code>querystring__uri</code> module and not longer depends on jQuery.</li>\n<li><code>$.cookie</code> becomes <code>cookie</code> module and not longer depends on jQuery.</li>\n<li>Introduces <code>ua</code> module instead of <code>$.browser</code> (with same interface).</li>\n<li>Use <code>pointerclick</code> instead of <code>leftclick</code>. It provides by <code>jquery__event_type_pointerclick</code> polyfill.</li>\n<li><code>i-system</code> block splits into two modules: <code>idle</code> and <code>tick</code>.</li>\n<li>Triggers for modifiers changes now splitted into two groups:\nbefore setting new value (<code>beforeSetMod</code> and <code>beforeElemSetMod</code>)\nand after the value has been set (<code>onSetMod</code> and <code>onElemSetMod</code>).\nCancellation of modifiers change is possible only from <code>before*</code>-triggers.</li>\n<li>Using of <code>{ onSetMod : { js : function() { ... } } }</code> is <strong>deprecated</strong>, use <code>onSetMod: { js : { inited : ... } } }</code>.</li>\n<li><code>destruct</code> method from <code>i-bem</code> block is <strong>deprecated</strong>.\nUse supplementary trigger for <code>_js</code> modifiers:\n<code>onSetMod: { js : { inited : ... } } }</code> — <code>{ onSetMod : { js : { &#39;&#39; : ... } } }</code>.</li>\n<li><code>exractParams</code> method from <code>i-bem__dom</code> block is <strong>deprecated</strong>.\nUse <code>elemParams</code> method for access to elements params.</li>\n<li><code>trigger</code> method from <code>i-bem</code> block is <strong>deprecated</strong> in flavor of <code>emit</code> method.</li>\n<li><code>onFirst</code> method from <code>i-bem</code> block is <strong>deprecated</strong> in flavor of <code>once</code> method.</li>\n<li><strong>Deprecated</strong> field <code>e.block</code> that provided block-target of BEM-events was removed. Use <code>e.target</code> field instead.</li>\n<li>Field <code>e.data.domElem</code> that provided DOM-element of block in DOM-events was removed. Use <code>$(e.currentTarget)</code> (provided by jQuery).</li>\n<li>Introduces parameter for <code>findElem</code> method that allows to search elements\nof particular block instance (in case of nested blocks with same name).</li>\n<li>Introduces possibility to point particular function in <code>unbindFrom*</code> methods.</li>\n<li>Introduces <code>objects</code> module for work with JS-objects. It contains methods: <code>extend</code>, <code>isEmpty</code>, <code>each</code>.</li>\n<li>Introduces <code>functions</code> module for work with JS-functions. It contains methods: <code>isFunction</code>, <code>noop</code>.</li>\n<li>Introduces <code>dom</code> module for work with DOM-tree.</li>\n<li>Introduces <code>querystring</code> module for work with URL-based strings.</li>\n<li>Introduces <code>loader_type_js</code> module for JS loading.</li>\n<li>Introduces <code>vow</code> module for Promises/A+.</li>\n<li>Introduces <code>next-tick</code> module as polyfill for <code>nextTick</code>, <code>setImmediate</code>, <code>setTimeout(0, ...</code> and etc.</li>\n<li>Introduces <code>strings__escape</code> module for XML, HTML and attributes escaping.</li>\n<li><code>inherit</code> module now supports mixins.</li>\n<li>Introduces <code>invokeAsap</code> parameter for <code>functions__throttle</code> module that allows to delay first invocation.</li>\n</ul>\n","ru":"<h1 id=\"История-изменений\">История изменений</h1>\n<h2 id=\"2-5-0\">2.5.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Код библиотеки переведен на использование лицензии <a href=\"https://www.mozilla.org/MPL/2.0/\">MPL 2.0</a> (<a href=\"https://github.com/bem/bem-core/issues/443\">#443</a>).</li>\n<li>В модуль <code>loader_type_js</code> добавлена возможность указывать функцию-обработчик ошибок (<a href=\"https://github.com/bem/bem-core/issues/672\">#672</a>).</li>\n<li>Класс <code>BEMContext</code> добавлен в export-параметры функции <code>oninit</code> в базовых шаблонах <code>i-bem.bemtree</code> (<a href=\"https://github.com/bem/bem-core/issues/602\">#602</a>).</li>\n<li>В <code>BEMContext</code> BEMTREE добавлен статический метод <code>reapply</code> по аналогии с BEMHTML (<a href=\"https://github.com/bem/bem-core/pull/706\">#706</a>).</li>\n<li>Добавлены bh-шаблоны блока <code>page</code> для уровней touch (<a href=\"https://github.com/bem/bem-core/pull/689\">#689</a>).</li>\n<li>npm-модуль <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a> обновлен до версии 0.9.0 (<a href=\"https://github.com/bem/bem-core/pull/709\">#709</a>).</li>\n</ul>\n<h3 id=\"В-релиз-вошли-следующие-исправления-ошибок\">В релиз вошли следующие исправления ошибок</h3>\n<ul>\n<li>Исправлена ошибка в <code>i-bem__dom</code>, из-за которой метод <code>findBlocksInside</code> мог возвращать блоки, которые еще не были\nинициализированы (<a href=\"https://github.com/bem/bem-core/issues/699\">#699</a>).</li>\n<li>Исправлена ошибка в <code>tick</code>, позволявшая вызвать метод <code>stop</code> без освобождения внутреннего таймера (<a href=\"https://github.com/bem/bem-core/issues/694\">#694</a>).</li>\n<li>Исправлена ошибка в <code>i-bem.bemhtml</code>, из-за которой на элементы блока добавлялся CSS-класс <code>i-bem</code> (<a href=\"https://github.com/bem/bem-core/issues/633\">#633</a>).</li>\n<li>Исправлена ошибка в технологии <code>html-from-bemtree</code>, из-за которой в контексте BEMTREE-шаблонов не было глобальных объектов\n<code>vow</code>, <code>console</code>, <code>setTimeout</code> (<a href=\"https://github.com/bem/bem-core/commit/438ebb8f828e26977592e26511e8aad15176d7a4\">#438ebb8</a>).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>Добавлено английское руководство по технологии BEMJSON.</li>\n<li>Обновлена русская документация для i-bem.js. Теперь документация соответсвует текущему API библиотеки.</li>\n<li>Обновлена документация для технологий BEMHTML/BEMTREE.</li>\n</ul>\n<h2 id=\"2-4-0\">2.4.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>npm-модуль <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a> обновлен до версии 0.8.0; <a href=\"https://github.com/bem/bemhtml-compat\">bemhtml-compat</a>\nобновлен до 0.0.11.</li>\n</ul>\n<h3 id=\"В-релиз-вошли-следующие-исправления-ошибок\">В релиз вошли следующие исправления ошибок</h3>\n<ul>\n<li>Исправлена ошибка в <code>jquery__event_type_pointerpressrelease</code>, из-за которой события <code>pointerpress</code> / <code>pointerrelease</code> генерировались\nна нажатие любой кнопки мыши (<a href=\"https://github.com/bem/bem-core/issues/607\">#607</a>).</li>\n<li>Исправлена ошибка в <code>i-bem__dom.js</code>, из-за которой в некоторых случаях не происходил вызов базового метода\n<code>live</code> (<a href=\"https://github.com/bem/bem-core/issues/608\">#608</a>).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>Добавлена английская документация на JS-синтаксис BEMHTML.</li>\n</ul>\n<h2 id=\"2-3-0\">2.3.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Добавлена новая реализация pointer-событий на основе полифилов из <a href=\"http://www.polymer-project.org/\">Polymer</a> (<a href=\"https://github.com/bem/bem-core/pull/567\">#567</a>).</li>\n<li>Добавлена возможность в <code>i-bem__dom.js</code> указывать дополнительные данные о событии в методах <code>bindTo*</code> (<a href=\"https://github.com/bem/bem-core/issues/568\">#568</a>).</li>\n</ul>\n<h3 id=\"В-релиз-вошли-следующие-исправления-ошибок\">В релиз вошли следующие исправления ошибок</h3>\n<ul>\n<li>Исправлена ошибка в <code>i-bem.bemhtml</code>, из-за которой было невозможно использовать микс в виде одного объекта (не массива) одновременно в BEMJSON и BEMHTML (<a href=\"https://github.com/bem/bem-core/issues/555\">#555</a>).</li>\n<li>Исправлена ошибка в BEMHTML-шаблоне блока <code>page</code>, из-за которой не выполнялись стандартные моды, и исправлена регрессия в шаблоне на touch-уровне (<a href=\"https://github.com/bem/bem-core/issues/516\">516</a>).</li>\n</ul>\n<h2 id=\"2-2-4\">2.2.4</h2>\n<h3 id=\"В-релиз-вошли-следующие-исправления-ошибок\">В релиз вошли следующие исправления ошибок</h3>\n<ul>\n<li>Исправлена ошибка в <code>i-bem.js</code>, из-за которой событие об изменении модификатора генерировалось,\nдаже если обработчик <code>beforeSetMod</code> предотвращал изменение (<a href=\"https://github.com/bem/bem-core/pull/546\">#546</a>).</li>\n<li>В случае возникновения ошибки в процессе декодирования строки, модуль <code>querystring__uri</code> теперь возвращает\nоригинальную строку (<a href=\"https://github.com/bem/bem-core/pull/554\">#554</a>).</li>\n</ul>\n<h2 id=\"2-2-3\">2.2.3</h2>\n<h3 id=\"В-релиз-вошли-следующие-исправления-ошибок\">В релиз вошли следующие исправления ошибок</h3>\n<ul>\n<li>В модуле <code>i-bem__dom</code> был исправлен процесс удаления блока для предотвращения нежелательной повторной\nинициализации блока (<a href=\"https://github.com/bem/bem-core/issues/540\">#540</a>).</li>\n<li>Исправлена ошибка в модуле <code>jquery__event_type_pointer</code>, из-за которой нативные события мыши ошибочно замещались\nна pointer-события (<a href=\"https://github.com/bem/bem-core/issues/534\">#534</a>).</li>\n<li><code>unbindFrom*</code>-методы в модуле <code>i-bem__dom</code> теперь поддерживают отписывание от нескольких событий\nза вызов (<a href=\"https://github.com/bem/bem-core/issues/533\">#533</a>).</li>\n<li>Добавлена недостающая зависимость от модуля <code>functions</code> в модуле <code>events</code> (<a href=\"https://github.com/bem/bem-core/issues/532\">#532</a>).</li>\n</ul>\n<h2 id=\"2-2-2\">2.2.2</h2>\n<h3 id=\"В-релиз-вошли-следующие-исправления-ошибок\">В релиз вошли следующие исправления ошибок</h3>\n<ul>\n<li>Исправлена ошибка в модуле <code>i-bem__dom</code> приводящая к повторной инициализации блока на DOM-узле, отмеченном как\nудаленный (<a href=\"https://github.com/bem/bem-core/issues/518\">#518</a>).</li>\n<li>Исправлена ошибка в модуле <code>i-bem</code>, из-за которой невозможно было подписаться на событие о выставлении модификатора в\nзначение <code>false</code> (<a href=\"https://github.com/bem/bem-core/issues/529\">#529</a>).</li>\n<li>Модуль <code>jquery</code> обновлен до версий 2.1.1 и 1.11.1 (<a href=\"https://github.com/bem/bem-core/issues/515\">#515</a>).</li>\n</ul>\n<h2 id=\"2-2-1\">2.2.1</h2>\n<ul>\n<li>Исправлена ошибка в модуле <code>jquery__event_type_pointerpressrelease</code>, из-за которой событие <code>pointerpress</code> генерировалось\nдважды на каждое событие <code>mousedown</code> в IE10 (<a href=\"https://github.com/bem/bem-core/issues/505\">#505</a>).</li>\n</ul>\n<h2 id=\"2-2-0\">2.2.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Добавлен новый модуль <code>keyboard__codes</code> (<a href=\"https://github.com/bem/bem-core/issues/431\">#431</a>).</li>\n<li>Класс <code>BEMContext</code> добавлен в export-параметры функции <code>oninit</code> в базовых шаблонах <code>i-bem.bemhtml</code> (<a href=\"https://github.com/bem/bem-core/pull/485\">#485</a>).</li>\n<li>Добавлена возможность декларировать инстанс элемента используя класс блока (<a href=\"https://github.com/bem/bem-core/issues/481\">#481</a>).</li>\n<li>Исправлено поведение метода <code>isSimple</code> класса BEMContext в  в базовых шаблонах <code>i-bem.bemhtml</code> (<a href=\"https://github.com/bem/bem-core/pull/432\">#432</a>).</li>\n<li>Исправлена ошибка в методе <code>liveUnbindFrom</code> модуля <code>BEMDOM</code> (<a href=\"https://github.com/bem/bem-core/pull/476\">#476</a>).</li>\n<li>Исправлена ошибка в методе <code>isFocusable</code> модуля <code>dom</code>, возникающая если переданный <code>domElem</code> является сслыкой\nс атрибутом <code>tabindex</code>, но без атрибута <code>href</code> (<a href=\"https://github.com/bem/bem-core/issues/501\">#501</a>).</li>\n<li>Исправлена ошибка возникающая в процессе декларации БЭМ-блока как модуля, если был подключен\nмодуль <code>i-bem__dom_elem-instances</code> (<a href=\"https://github.com/bem/bem-core/issues/479\">#479</a>).</li>\n<li>В модуле <code>i-bem__dom_init_auto</code> добавлено временное решение для проблем с производительностью ренедеринга при инициализции блоков\nв Chrome-браузерах (<a href=\"https://github.com/bem/bem-core/issues/486\">#486</a>).</li>\n<li>Модуль <code>vow.js</code> перенесен в <code>vow.vanilla.js</code> (<a href=\"https://github.com/bem/bem-core/issues/412\">#412</a>).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>Модуль <code>vow</code> обновлен до версии 0.4.3 (<a href=\"https://github.com/bem/bem-core/pull/504\">#504</a>).</li>\n<li>Добавлена русская документация на технологию BEMTREE (<a href=\"https://github.com/bem/bem-core/pull/500\">#500</a>).</li>\n<li>Обновлена русская документация на JavaScript-синтаксис BEMHTML (<a href=\"https://github.com/bem/bem-core/pull/471\">#471</a>).</li>\n<li>Добавлен референс на API JavaScript-модулей. См. ветку <code>v2-jsdoc</code> (<a href=\"https://github.com/bem/bem-core/pull/478\">#478</a>).</li>\n</ul>\n<h2 id=\"2-1-0\">2.1.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Исправлена ошибка в <code>i-bem.js</code>, из-за которой событие об изменении модификатора происходило до того, как будет\nвызван обработчик реакции на изменение этого модификатора в <code>onSetMod</code> (<a href=\"https://github.com/bem/bem-core/issues/454\">#454</a>).</li>\n<li>Свойства <code>this.mods</code> и <code>this.ctx.mods</code> базового шаблона <code>i-bem.bemhtml</code> теперь используют\nодин и тот же объект (<a href=\"https://github.com/bem/bem-core/issues/441\">#441</a>).</li>\n<li>Модуль <a href=\"https://github.com/dfilatov/inherit\">inherit</a> обновлен до версии 2.2.1 (<a href=\"https://github.com/bem/bem-core/issues/466\">#466</a>).</li>\n<li>Исправлен порядок тегов секции <code>head</code> в шаблоне <code>page.bemhtml</code> (<a href=\"https://github.com/bem/bem-core/pull/465\">#465</a>).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>В русскую документацию к <code>i-bem.js</code> добавлено описание поля <code>baseMix</code> (<a href=\"https://github.com/bem/bem-core/pull/461\">#461</a>).</li>\n<li>CDN-хост внешних ресурсов изменен на <code>yastatic.net</code> (<a href=\"https://github.com/bem/bem-core/issues/444\">#444</a>).\nВсе ресурсы все так же доступны с хоста <code>yandex.st</code>. Физически <code>yandex.st</code> и <code>yastatic.net</code> находятся на\nодних и тех же серверах. Различие только в DNS-записях.</li>\n<li>Добавлен базовый BEMHTML-шаблон для команды <code>bem create</code> технологии <code>bemhtml</code> (<a href=\"https://github.com/bem/bem-core/issues/277\">#277</a>).</li>\n<li>Прекращен автоматический запуск тестов под Node.js 0.8 в <a href=\"http://travis-ci.com\">Travis CI</a> (<a href=\"https://github.com/bem/bem-core/issues/455\">#455</a>).</li>\n<li>Иконка статуса автосборки Travis <a href=\"http://blog.travis-ci.com/2014-03-20-build-status-badges-support-svg/\">заменена на SVG</a> :)</li>\n</ul>\n<h2 id=\"2-0-0\">2.0.0</h2>\n<h3 id=\"Изменения,-ломающие-обратную-совместимость\">Изменения, ломающие обратную совместимость</h3>\n<ul>\n<li><p>Из <code>i-bem.js</code> и <code>i-bem__dom.js</code> удалены все <strong>deprecated</strong> методы (<a href=\"https://github.com/bem/bem-core/issues/318\">#318</a>):</p>\n<ul>\n<li><code>destruct</code>, используйте <code>onSetMod js &#39;&#39;</code>;</li>\n<li><code>extractParams</code>, используйте <code>elemParams</code>;</li>\n<li><code>trigger</code>, используйте <code>emit</code>;</li>\n<li><code>afterCurrentEvent</code>, используйте модуль <code>next-tick</code>;</li>\n<li><code>channel</code>, используйте модуль <code>events__channels</code>;</li>\n<li><code>changeThis</code>, используйте нативный <code>Function.prototype.bind</code>.</li>\n</ul>\n</li>\n<li><p>Из <code>i-bem.js</code> убраны события <code>init</code> и <code>destruct</code>. Вместо них следует использовать события об изменении модификатора\n(см. «Крупные изменения»).</p>\n</li>\n<li>Блок <code>ecma</code> перенесен <a href=\"http://github.com/bem/es5-shims\">в отдельный репозиторий</a>; ES5-shims следует использовать\nдля IE &lt; 9 (<a href=\"https://github.com/bem/bem-core/issues/230\">#230</a>).</li>\n<li>Модуль <code>vow</code> обновлен до мажорной версии 0.4.1 (<a href=\"https://github.com/bem/bem-core/issues/350\">#350</a>).\nСм. <a href=\"https://github.com/dfilatov/vow/blob/0.4.1/CHANGELOG.md\">изменения в Vow</a>.</li>\n<li>В <code>i-bem.bemhtml</code> добавлена поддержка vow@0.4 (<a href=\"https://github.com/bem/bem-core/issues/385\">#385</a>).</li>\n</ul>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Добавлена возможность декларировать BEMDOM-блоки как модули <a href=\"https://github.com/ymaps/modules\">ym</a> (<a href=\"https://github.com/bem/bem-core/issues/382\">#382</a>).</li>\n<li>В <code>i-bem.js</code> добавлены события об изменении модификатора (<a href=\"https://github.com/bem/bem-core/issues/357\">#357</a>).</li>\n<li>Добавлена поддержка использования строковых значений в качестве аргумента в методах <code>BEMDOM.init</code> (<a href=\"https://github.com/bem/bem-core/issues/419\">#419</a>)\nи <code>BEMDOM.update</code> (<a href=\"https://github.com/bem/bem-core/issues/420\">#420</a>).</li>\n<li>Методы <code>i-bem__dom.js</code> <code>replace</code>, <code>append</code>, <code>prepend</code>, <code>before</code>, <code>after</code> теперь возвращают новый контекст,\nа <code>update</code> – изменённый (<a href=\"https://github.com/bem/bem-core/issues/410\">#410</a>).</li>\n<li>В <code>loader</code> добавлен модификатор <code>_type_bundle</code> (<a href=\"https://github.com/bem/bem-core/issues/358\">#358</a>).</li>\n<li>jQuery обновлен до версии 2.1.0. Для IE &lt; 9 — до версии 1.11.0 (<a href=\"https://github.com/bem/bem-core/issues/356\">#356</a>).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>Базовые шаблоны в <code>i-bem.bemhtml</code> используют конкатенацию строк вместо наполнения внутреннего буфера (<a href=\"https://github.com/bem/bem-core/issues/401\">#401</a>).</li>\n<li>jQuery больше не удаляет себя из глобавльной области видимости, если присутствует на странице (<a href=\"https://github.com/bem/bem-core/issues/349\">#349</a>).</li>\n<li><code>jquery__event_type_pointerclick.js</code> перемещен с уровня <code>touch.blocks</code> на уровень <code>common.blocks</code> (<a href=\"https://github.com/bem/bem-core/issues/393\">#393</a>).</li>\n<li>Модификаторы <code>i-bem_elem-instances_yes</code> и <code>i-bem__dom_elem-instances_yes</code> приведены к булевому стилю (<a href=\"https://github.com/bem/bem-core/issues/352\">#352</a>).</li>\n<li>Исправлена ошибка в шаблоне блока <code>page</code>, возникающая при использовании development-режима BEMHTML (<a href=\"https://github.com/bem/bem-core/issues/417\">#417</a>).</li>\n<li>Для поддержки Android 2.3 внутри <code>i-bem.js</code> отказались от использований <code>Function.prototype.bind</code> (<a href=\"https://github.com/bem/bem-core/issues/404\">#404</a>).</li>\n<li>Исправлены ошибки в модуле технологии <code>browser-js+bemhtml</code> (<a href=\"https://github.com/bem/bem-core/issues/392\">#392</a>).</li>\n<li>NPM-модуль <code>ym</code> обновлен до версии <a href=\"https://github.com/ymaps/modules/releases\">0.0.15</a> (<a href=\"https://github.com/bem/bem-core/issues/414\">#414</a>).</li>\n</ul>\n<h2 id=\"1-2-0\">1.2.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>BEM-блоки инициируют событие <code>destruct</code> в процессе удаления (<a href=\"https://github.com/bem/bem-core/issues/370\">#370</a>).</li>\n<li>Исправлены полифилы для <code>pointerevents</code> (<a href=\"https://github.com/bem/bem-core/pull/354\">#354</a>).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>JSDoc блоков исправлен в соответствии с поддержкой <a href=\"github.com/bem/bem-jsd\">bem-jsd</a> (<a href=\"https://github.com/bem/bem-core/issues/335\">#335</a>).</li>\n<li>Референс на BEMHTML обновлен для соответствия JavaScript-синтаксису шаблонизатора (<a href=\"https://github.com/bem/bem-core/pull/355\">#355</a>).</li>\n<li>Переход на менеджер зависимостей <a href=\"http://bower.io\">bower</a> (<a href=\"https://github.com/bem/bem-core/issues/367\">#367</a>).</li>\n</ul>\n<h2 id=\"1-1-0\">1.1.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Для современных браузеров <code>jquery__config</code> подключает jQuery 2.x (<a href=\"https://github.com/bem/bem-core/issues/319\">#319</a>).</li>\n<li>Добавлена возможность использовать произвольный BEMJSON в качестве значения атрибутов в BEMHTML (<a href=\"https://github.com/bem/bem-core/issues/290\">#290</a>).</li>\n<li>Исправлены зависимости в <code>i-bem__collection</code> (<a href=\"https://github.com/bem/bem-core/issues/292\">#292</a>).</li>\n<li>Удалены CSS-стили блока <code>page</code> из уровня <code>touch.blocks</code> (<a href=\"https://github.com/bem/bem-core/issues/306\">#306</a>).</li>\n<li>Исправлена ошибка в BEMHTML-шаблоне блока <code>page</code>, приводящая к зацикливанию шаблонизатора\nв production-режиме (<a href=\"https://github.com/bem/bem-core/issues/309\">#309</a>).</li>\n<li>Исправлена возможная ошибка в <code>next-tick</code>, возникающая при вставке скрипта в DOM в IE&lt;9 (<a href=\"https://github.com/bem/bem-core/issues/324\">#324</a>).</li>\n<li>Исправлена ошибка в инициализации плагина <code>FastClick</code> в модуле <code>jquery__event_type_pointerclick</code>\nна уровне <code>touch.blocks</code> (<a href=\"https://github.com/bem/bem-core/issues/332\">#332</a>).</li>\n<li>Исправлена ошибка в технологии <code>node.js</code> в Windows (<a href=\"https://github.com/bem/bem-core/issues/274\">#274</a>).</li>\n<li>Исправлена ошибка в <code>onElemSetMod</code> в <code>i-bem__dom_elem-instances</code> (<a href=\"https://github.com/bem/bem-core/issues/340\">#340</a>).</li>\n<li>В технологии <code>bemhtml</code> используется <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a> (<a href=\"https://github.com/bem/bem-core/issues/329\">#329</a>).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>Модуль <a href=\"https://github.com/ymaps/modules\">ym</a> обновлен до версии 0.0.12 (<a href=\"https://github.com/bem/bem-core/issues/326\">#326</a>).</li>\n<li>В ядре локализации <code>i-bem__i18n</code> отключен вывод сообщений о неизвестных ключах, если не включен\ndebug-режим (<a href=\"https://github.com/bem/bem-core/issues/285\">#285</a>).</li>\n<li>Инфраструктура сборки тестов и примеров переведена\nна <a href=\"https://github.com/narqo/bem-pr/blob/0.5.3/HISTORY.md\">bem-pr@v0.5.x</a> (<a href=\"https://github.com/bem/bem-core/issues/323\">#323</a>).</li>\n<li>Исправлен jsdoc для метода <code>dropElemCache()</code> в <code>i-bem__dom</code> (<a href=\"https://github.com/bem/bem-core/issues/296\">#296</a>).</li>\n<li>Доработана документация для блока <code>i-bem.js</code> на русском языке.</li>\n<li>В README проекта добавлен <a href=\"https://github.com/bem/bem-core/blob/v1/README.ru.md#%D0%9F%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%B8%D0%B2%D0%B0%D0%B5%D0%BC%D1%8B%D0%B5-%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80%D1%8B\">список поддерживаемых браузеров</a>.</li>\n</ul>\n<h2 id=\"1-0-0\">1.0.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Переход на модульную систему <a href=\"https://github.com/ymaps/modules\">ym</a>.</li>\n<li>Из <code>i-bem</code>, <code>i-bem__dom</code> убраны все deprecated-методы.</li>\n<li><code>i-bem</code> больше не зависит от jQuery. <code>i-bem__dom</code> продолжает зависеть от jQuery.</li>\n<li>BEMHTML-шаблоны можно писать с использованием <a href=\"https://gist.github.com/veged/6150760\">JS-синтаксиса</a>.</li>\n<li>Новая технология <code>bemtree</code> (на базе <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a>) для описания процесса\nдинамического построения БЭМ-дерева.</li>\n<li>Новая технология <code>vanilla.js</code> для описания JS-реализации модулей, не зависящей от конкретного JavaScript движка.</li>\n<li>Новые технологии <code>browser.js</code> и <code>node.js</code> для описания JS-реализаций модулей (блоков) в соответствующих движках.\nДля совместимости с существующим кодом считаем, что файлы с расширением <code>.js</code> содержат реализацию блоков\nв технологии <code>browser.js</code>.</li>\n<li>Система модульного тестирования и примеров для блоков в библиотеке.</li>\n<li>Появились полифилы (<code>jquery__event_type_pointer</code> и <code>jquery__event_type_pointerclick</code> как jQuery-плагины),\nпозволяющие использовать универсальные события для десктопных и тач-интерфейсов.</li>\n<li>Плагин для jQuery, позволяющий навешивать обработчик события на нажатие левой кнопки мыши, становится модулем <code>jquery__pointerclick</code>.</li>\n<li>В <code>i-bem</code> и BEMHTML добавлена поддержка простых модификаторов (модификаторов без значений).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>Все блоки-модули, кроме <code>i-bem</code>, избавились от префиксов.</li>\n<li>Блок <code>i-bem__dom</code> становится модулем <code>i-bem__dom</code>. Все BEM.DOM-блоки должны теперь доопределять\nэтот модуль (<a href=\"https://github.com/bem/bem-core/blob/v1/common.bundles/index/blocks/b-square/b-square.js\">пример</a>).</li>\n<li>Метод для декларации блоков (<code>.decl()</code>) больше не принимает первым параметром объект с полем <code>name</code>.\nТеперь обязательная форма записи с полем <code>block</code>: <code>BEM.decl({ block: &#39;b1&#39;, modName: &#39;m&#39;, modVal: &#39;v&#39; }, ...)</code>.</li>\n<li>Вместо метода <code>afterCurrentEvent</code> у блоков появился метод <code>nextTick</code>, который проверят существование блока в момент исполнения колбэка. <code>BEM.afterCurrentEvent</code> теперь <strong>deprecated</strong>.</li>\n<li>Вместо <code>BEM.channel</code> появился отдельный модуль <code>channels</code>. <code>BEM.channel</code> теперь <strong>deprecated</strong>.</li>\n<li>Метод <code>changeThis</code> помечен как <strong>deprecated</strong>. Используйте нативный <code>bind</code>.</li>\n<li>Метод <code>del</code> удален из блока <code>i-bem</code>.</li>\n<li>Метод <code>getWindowSize</code> удален из блока <code>i-bem__dom</code>. Используйте <code>BEMDOM.win.width()</code> и <code>BEMDOM.win.height()</code>.</li>\n<li>Добавлен модуль-обертка <code>jquery</code>, предоставляющий jQuery. Модуль либо предоставляет jQuery, уже присутствующий на странице, либо сам его загружает (версию 1.10.1).</li>\n<li><code>$.observable</code> становится модулем <code>events</code> и больше не зависит от jQuery.</li>\n<li><code>$.inherit</code> становится модулем <code>inherit</code> и больше не зависит от jQuery.</li>\n<li><code>$.identify</code> становится модулем <code>identify</code> и больше не зависит от jQuery.</li>\n<li><code>$.throttle</code> разбивается на два модуля: <code>functions__throttle</code> и <code>functions__debounce</code>, которые больше не зависят от jQuery.</li>\n<li><code>$.decodeURI</code>, <code>$.decodeURIComponent</code> переезжают в модуль <code>querystring__uri</code> и больше не зависят от jQuery.</li>\n<li><code>$.cookie</code> становится модулем <code>cookie</code> и больше не зависит от jQuery.</li>\n<li>Вместо <code>$.browser</code> появился модуль <code>ua</code> с аналогичным интерфейсом.</li>\n<li>Блок <code>i-system</code> разбит на 2 модуля: <code>idle</code> и <code>tick</code>.</li>\n<li>Вместо события <code>leftclick</code> следует использовать <code>pointerclick</code> (предоставляемый полифилом <code>jquery__event_type_pointerclick</code>).</li>\n<li>Триггеры на установку модификаторов теперь разделены на две группы: до установки модификатора (<code>beforeSetMod</code> и <code>beforeElemSetMod</code>) и после (<code>onSetMod</code> и <code>onElemSetMod</code>). Отмена установки модификатора теперь возможна только из триггеров первой группы.</li>\n<li>Использовать конструкцию <code>{ onSetMod : { js : function() { ... } } }</code> в качестве конструктора теперь <strong>deprecated</strong>, необходимо использовать <code>onSetMod: { js : { inited : ... } } }</code>.</li>\n<li>Вместо метода <code>destruct</code> в <code>i-bem</code> появился зеркальный метод\nдля <code>onSetMod: { js : { inited : ... } } }</code> — <code>{ onSetMod : { js : { &#39;&#39; : ... } } }</code>.\nМетод <code>destruct</code> теперь <strong>deprecated</strong>.</li>\n<li>Метод <code>exractParams</code> в <code>i-bem__dom</code> теперь <strong>deprecated</strong>, для доступа к параметрам элементов нужно использовать метод <code>elemParams</code>.</li>\n<li>Метод <code>trigger</code> в <code>i-bem</code> теперь <strong>deprecated</strong>, нужно использовать <code>emit</code>.</li>\n<li>Метод <code>onFirst</code> в <code>i-bem</code> теперь <strong>deprecated</strong>, нужно использовать <code>once</code>.</li>\n<li>Удалено <strong>deprecated</strong> поле <code>e.block</code>, представляющее блок-источник события для BEM-событий. Вместо него следует использовать поле <code>e.target</code>.</li>\n<li>Для доступа к DOM-элементу блока в обработчике DOM-событий теперь нужно использовать поле <code>currentTarget</code>, предоставляемое jQuery. Вместо <code>e.data.domElem</code>нужно писать <code>$(e.currentTarget)</code>.</li>\n<li>В методе <code>findElem</code> добавлен параметр, позволяющий находить элемента блока с учетом вложенных блоков.</li>\n<li>Добавлена возможность указывать конкретную функцию для отписки от событий в методах <code>unbindFrom*</code>.</li>\n<li>Добавлен модуль <code>objects</code> для работы с JS-объектами (содержит методы <code>extend</code>, <code>isEmpty</code>, <code>each</code>).</li>\n<li>Добавлен модуль <code>functions</code> для работы с JS-функциями (содержит методы <code>isFunction</code>, <code>noop</code>).</li>\n<li>Добавлен модуль <code>dom</code> для хелперов при работе с DOM.</li>\n<li>Добавлен модуль <code>querystring</code> для работы с урлами.</li>\n<li>Добавлен модуль <code>loader_type_js</code> для загрузки JS.</li>\n<li>Добавлен модуль <code>vow</code> для работы с промисами.</li>\n<li>Добавлен модуль <code>next-tick</code> для полифила <code>nextTick</code>, <code>setImmediate</code>, <code>setTimeout(0, ...</code> и т.п..</li>\n<li>Добавлен модуль <code>strings__escape</code>, содержащий методы для эскейпинга XML, HTML и атрибутов.</li>\n<li>Модуль <code>inherit</code> теперь поддерживает миксины.</li>\n<li>В модуле <code>functions__throttle</code> добавлен параметр <code>invokeAsap</code>, позволяющий отложить первое исполнение.</li>\n</ul>\n"}}},"levels":[{"name":"desktop.docs","blocks":[{"name":"clearfix","data":{"ru":{"name":"clearfix","examples":[],"description":"<div class=\"shmakowiki\"><p>Для использования блока необходимо подмешать его к нужному html-элементу, например:</p><pre><code class=\"xml\">    &lt;div style=&quot;background: #ada;&quot;&gt;\n        top\n    &lt;/div&gt;\n\n    &lt;div class=&quot;clearfix&quot; style=&quot;background: #eda;&quot;&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item1&lt;/div&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item2&lt;/div&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item3&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div style=&quot;background: #ada;&quot;&gt;\n        bottom\n    &lt;/div&gt;</code></pre></div>"},"en":{"name":"clearfix","examples":[],"description":""}},"jsdoc":""},{"name":"cookie","data":{"ru":{"name":"cookie","examples":[],"description":""},"en":{"name":"cookie","examples":[],"description":""}},"jsdoc":"<h1 id=\"cookie\"><a href=\"#cookie\" class=\"anchor\"></a>cookie</h1>\n<p>inspired from $.cookie plugin by Klaus Hartl (stilbuero.de) Module</p>\n<h2 id=\"get---name---→--String---null-\"><a href=\"#get---name---→--String---null-\" class=\"anchor\"></a>get ( name ) → {String | null}</h2>\n<p>Returns cookie by given name</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>name {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String | null}</p>\n<h2 id=\"set---name,-val,-options---→--cookie-\"><a href=\"#set---name,-val,-options---→--cookie-\" class=\"anchor\"></a>set ( name, val, options ) → {cookie}</h2>\n<p>Sets cookie by given name</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>name {String}</li>\n<li>val {String}</li>\n<li>options {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{cookie}</p>\n<p>this</p>\n"},{"name":"dom","data":{"ru":{"name":"dom","examples":[],"description":""},"en":{"name":"dom","examples":[],"description":""}},"jsdoc":"<h1 id=\"dom-Module\"><a href=\"#dom-Module\" class=\"anchor\"></a>dom Module</h1>\n<p>some DOM utils</p>\n<h2 id=\"contains---ctx,-domElem---→--Boolean-\"><a href=\"#contains---ctx,-domElem---→--Boolean-\" class=\"anchor\"></a>contains ( ctx, domElem ) → {Boolean}</h2>\n<p>Checks whether a DOM elem is in a context</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>ctx {jQuery}<br/>\nDOM elem where check is being performed</li>\n<li>domElem {jQuery}<br/>\nDOM elem to check</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"getFocused----→--jQuery-\"><a href=\"#getFocused----→--jQuery-\" class=\"anchor\"></a>getFocused () → {jQuery}</h2>\n<p>Returns current focused DOM elem in document</p>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{jQuery}</p>\n<h2 id=\"containsFocus---domElem---→--Boolean-\"><a href=\"#containsFocus---domElem---→--Boolean-\" class=\"anchor\"></a>containsFocus ( domElem ) → {Boolean}</h2>\n<p>Checks whether a DOM element contains focus</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>domElem {jQuery}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"isFocusable---domElem---→--Boolean-\"><a href=\"#isFocusable---domElem---→--Boolean-\" class=\"anchor\"></a>isFocusable ( domElem ) → {Boolean}</h2>\n<p>Checks whether a browser currently can set focus on DOM elem</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>domElem {jQuery}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"isEditable---domElem---→--Boolean-\"><a href=\"#isEditable---domElem---→--Boolean-\" class=\"anchor\"></a>isEditable ( domElem ) → {Boolean}</h2>\n<p>Checks whether a domElem is intended to edit text</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>domElem {jQuery}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n"},{"name":"events","data":{"ru":{"name":"events","examples":[],"description":""},"en":{"name":"events","examples":[],"description":""}},"jsdoc":"<h1 id=\"events-Module\"><a href=\"#events-Module\" class=\"anchor\"></a>events Module</h1>\n<h2 id=\"Event-Class\"><a href=\"#Event-Class\" class=\"anchor\"></a>Event Class</h2>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Event---type,-target--\"><a href=\"#Event---type,-target--\" class=\"anchor\"></a>Event ( type, target )</h4>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>type {String}</li>\n<li>target {Object}</li>\n</ul>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"type--String-\"><a href=\"#type--String-\" class=\"anchor\"></a>type {String}</h4>\n<p>Type</p>\n<h4 id=\"target--String-\"><a href=\"#target--String-\" class=\"anchor\"></a>target {String}</h4>\n<p>Target</p>\n<h4 id=\"result----\"><a href=\"#result----\" class=\"anchor\"></a>result {*}</h4>\n<p>Result</p>\n<h4 id=\"data----\"><a href=\"#data----\" class=\"anchor\"></a>data {*}</h4>\n<p>Data</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"preventDefault---\"><a href=\"#preventDefault---\" class=\"anchor\"></a>preventDefault ()</h4>\n<p>Prevents default action</p>\n<h4 id=\"isDefaultPrevented----→--Boolean-\"><a href=\"#isDefaultPrevented----→--Boolean-\" class=\"anchor\"></a>isDefaultPrevented () → {Boolean}</h4>\n<p>Returns whether is default action prevented</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"stopPropagation---\"><a href=\"#stopPropagation---\" class=\"anchor\"></a>stopPropagation ()</h4>\n<p>Stops propagation</p>\n<h4 id=\"isPropagationStopped----→--Boolean-\"><a href=\"#isPropagationStopped----→--Boolean-\" class=\"anchor\"></a>isPropagationStopped () → {Boolean}</h4>\n<p>Returns whether is propagation stopped</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h2 id=\"Emitter-Class\"><a href=\"#Emitter-Class\" class=\"anchor\"></a>Emitter Class</h2>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--Emitter-\"><a href=\"#on---e,--data-,-fn,--ctx----→--Emitter-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {Emitter}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"once---e,--data-,-fn,--ctx----→--Emitter-\"><a href=\"#once---e,--data-,-fn,--ctx----→--Emitter-\" class=\"anchor\"></a>once ( e, [data], fn, [ctx] ) → {Emitter}</h4>\n<p>Adds a one time handler for the event.\nHandler is executed only the next time the event is fired, after which it is removed.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--Emitter-\"><a href=\"#un----e-,--fn-,--ctx----→--Emitter-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {Emitter}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"emit---e,--data----→--Emitter-\"><a href=\"#emit---e,--data----→--Emitter-\" class=\"anchor\"></a>emit ( e, [data] ) → {Emitter}</h4>\n<p>Fires event handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | events:Event}<br/>\nEvent</li>\n<li>[data] {Object}<br/>\nAdditional data</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--Emitter-\"><a href=\"#on---e,--data-,-fn,--ctx----→--Emitter-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {Emitter}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"once---e,--data-,-fn,--ctx----→--Emitter-\"><a href=\"#once---e,--data-,-fn,--ctx----→--Emitter-\" class=\"anchor\"></a>once ( e, [data], fn, [ctx] ) → {Emitter}</h4>\n<p>Adds a one time handler for the event.\nHandler is executed only the next time the event is fired, after which it is removed.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--Emitter-\"><a href=\"#un----e-,--fn-,--ctx----→--Emitter-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {Emitter}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"emit---e,--data----→--Emitter-\"><a href=\"#emit---e,--data----→--Emitter-\" class=\"anchor\"></a>emit ( e, [data] ) → {Emitter}</h4>\n<p>Fires event handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | events:Event}<br/>\nEvent</li>\n<li>[data] {Object}<br/>\nAdditional data</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h1 id=\"events__channels-Module\"><a href=\"#events__channels-Module\" class=\"anchor\"></a>events__channels Module</h1>\n<h2 id=\"-function-----id=-default--,--drop=false----→--events:Emitter---undefined-\"><a href=\"#-function-----id=-default--,--drop=false----→--events:Emitter---undefined-\" class=\"anchor\"></a><em>function</em> ( [id=&#39;default&#39;], [drop=false] ) → {events:Emitter | undefined}</h2>\n<p>Returns/destroys a named communication channel</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>[id=&#39;default&#39;] {String}<br/>\nChannel ID</li>\n<li>[drop=false] {Boolean}<br/>\nDestroy the channel</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{events:Emitter | undefined}</p>\n<p>Communication channel</p>\n"},{"name":"functions","data":{"ru":{"name":"functions","examples":[],"description":""},"en":{"name":"functions","examples":[],"description":""}},"jsdoc":"<h1 id=\"functions-Module\"><a href=\"#functions-Module\" class=\"anchor\"></a>functions Module</h1>\n<p>A set of helpers to work with JavaScript functions</p>\n<h2 id=\"isFunction---obj---→--Boolean-\"><a href=\"#isFunction---obj---→--Boolean-\" class=\"anchor\"></a>isFunction ( obj ) → {Boolean}</h2>\n<p>Checks whether a given object is function</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"noop---\"><a href=\"#noop---\" class=\"anchor\"></a>noop ()</h2>\n<p>Empty function</p>\n<h1 id=\"functions__debounce-Module\"><a href=\"#functions__debounce-Module\" class=\"anchor\"></a>functions__debounce Module</h1>\n<h2 id=\"-function----fn,-timeout,--invokeAsap=false-,--ctx----→--Function-\"><a href=\"#-function----fn,-timeout,--invokeAsap=false-,--ctx----→--Function-\" class=\"anchor\"></a><em>function</em> ( fn, timeout, [invokeAsap=false], [ctx] ) → {Function}</h2>\n<p>Debounces given function</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>fn {Function}<br/>\nfunction to debounce</li>\n<li>timeout {Number}<br/>\ndebounce interval</li>\n<li>[invokeAsap=false] {Boolean}<br/>\ninvoke before first interval</li>\n<li>[ctx] {Object}<br/>\ncontext of function invocation</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Function}</p>\n<p>debounced function</p>\n<h1 id=\"functions__throttle-Module\"><a href=\"#functions__throttle-Module\" class=\"anchor\"></a>functions__throttle Module</h1>\n<h2 id=\"-function----fn,-timeout,--invokeAsap=true-,--ctx----→--Function-\"><a href=\"#-function----fn,-timeout,--invokeAsap=true-,--ctx----→--Function-\" class=\"anchor\"></a><em>function</em> ( fn, timeout, [invokeAsap=true], [ctx] ) → {Function}</h2>\n<p>Throttle given function</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>fn {Function}<br/>\nfunction to throttle</li>\n<li>timeout {Number}<br/>\nthrottle interval</li>\n<li>[invokeAsap=true] {Boolean}<br/>\ninvoke before first interval</li>\n<li>[ctx] {Object}<br/>\ncontext of function invocation</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Function}</p>\n<p>throttled function</p>\n"},{"name":"i-bem","data":{"ru":{"name":"i-bem","examples":[],"description":"<h1 id=\"i-bem-js:-руководство-пользователя\"><a href=\"#i-bem-js:-руководство-пользователя\" class=\"anchor\"></a>i-bem.js: руководство пользователя</h1>\n<h2 id=\"i-bem-js:-JavaScript-фреймворк-для-БЭМ\"><a href=\"#i-bem-js:-JavaScript-фреймворк-для-БЭМ\" class=\"anchor\"></a>i-bem.js: JavaScript-фреймворк для БЭМ</h2>\n<p><code>i-bem.js</code> — специализированный JavaScript-фреймворк для веб-разработки\nв рамках <a href=\"https://ru.bem.info/method/\">БЭМ-методологии</a>.</p>\n<p><code>i-bem.js</code> позволяет:</p>\n<ul>\n<li>разрабатывать веб-интерфейс в терминах блоков, элементов, модификаторов;</li>\n<li>описывать логику работы блока в декларативном стиле — как набор состояний;</li>\n<li>легко интегрировать JavaScript-код с BEMHTML-шаблонами и CSS в стиле БЭМ;</li>\n<li>гибко переопределять поведение библиотечных блоков.</li>\n</ul>\n<p><code>i-bem.js</code> не предназначен:</p>\n<ul>\n<li>для замены фреймворка общего назначения, подобного jQuery.</li>\n</ul>\n<p><strong>Краткий обзор содержания документа</strong>:</p>\n<ul>\n<li><a href=\"#intro\">Общие сведения</a> о фреймворке: связь с понятиями предметной области БЭМ, краткое описание модульной структуры\nфреймворка, шаблонного проекта и инструментов для сборки кода,\nнаписанного с использованием <code>i-bem.js</code>.</li>\n<li><a href=\"#html\">Привязка JS-блоков к HTML</a> — синтаксис указания JS-блоков на\nHTML-странице, типы соотношения HTML-элементов и JS-блоков.</li>\n<li><a href=\"#decl\">Декларация блока</a> — синтаксис описания JS-блоков.</li>\n<li><a href=\"#dom\">Работа с DOM-деревом</a> — API для работы с DOM-узлами блоков:\nэлементы, динамическое изменение DOM-дерева (AJAX).</li>\n<li><a href=\"#events\">События</a> — событийная модель <code>i-bem.js</code>: DOM-события,\nБЭМ-события, делегирование событий.</li>\n<li><a href=\"#states\">Состояния блока</a> — модификаторы, триггеры на смену\nсостояний (установку модификаторов), инициализация экземпляров\nблоков.</li>\n<li><a href=\"#ibc\">Взаимодействие блоков</a> — API для обращения из блока к другим блокам.</li>\n<li><a href=\"#docs\">Что дальше?</a> — ссылки на документацию и дополнительные материалы.</li>\n</ul>\n<p><a name=\"intro\"></a></p>\n<h2 id=\"Общие-сведения\"><a href=\"#Общие-сведения\" class=\"anchor\"></a>Общие сведения</h2>\n<p><a name=\"intro-bem\"></a></p>\n<h3 id=\"БЭМ-методология-и-JavaScript\"><a href=\"#БЭМ-методология-и-JavaScript\" class=\"anchor\"></a>БЭМ-методология и JavaScript</h3>\n<p>С точки зрения БЭМ-методологии веб-интерфейс строится из независимых\n<strong>блоков</strong> (внутри которых могут быть выделены <strong>элементы</strong>). И блоки,\nи элементы могут иметь состояния, описываемые <strong>модификаторами</strong>.</p>\n<p>Работа веб-интерфейса обеспечивается несколькими <strong>технологиями</strong>\n(HTML, CSS, JS и т.д.). При использовании БЭМ-методологии вся реализация\nвеб-интерфейса разбита на компоненты по блокам. Описание блока в этой\nсхеме складывается из нескольких файлов — по одному на каждую технологию:</p>\n<ul>\n<li><code>my-block.css</code> — описывает внешний вид блока;</li>\n<li><code>my-block.bemhtml</code> — шаблоны для генерации HTML-представления блока;</li>\n<li><code>my-block.js</code> — описывает <strong>динамическое поведение</strong> блока в браузере.</li>\n</ul>\n<p>Фреймворк <code>i-bem.js</code> позволяет разложить клиентский JavaScript на компоненты в терминах БЭМ:</p>\n<ul>\n<li><strong>Блок</strong> — JS-компонент, описывающий логику работы однотипных\nэлементов интерфейса. Например, все кнопки могут быть реализованы\nв виде блока <code>button</code>. В этом случае, в соответствии с БЭМ-методологией,\n<code>button.css</code> определяет внешний вид всех кнопок, а <code>button.js</code> —\nлогику их работы.<br/>\nНа каждой странице может размещаться более одного <strong>экземпляра\nблока</strong> (например, кнопки). Каждому экземпляру блока соответствует\nJS-объект, динамически создаваемый в памяти браузера и хранящий\nсостояние данного экземпляра. JS-объект хранит ссылку на DOM-узел,\nк которому привязан данный экземпляр блока.</li>\n<li><strong>Элементы</strong> — DOM-узлы, вложенные в DOM-узел блока и имеющие атрибут\n<code>class</code>, указывающий на их роль в БЭМ-предметной области (имя блока\nи элемента). Элементы блока доступны через <a href=\"#elem-api\">JS-API</a>\nэкземпляра блока.</li>\n<li><strong>Модификаторы</strong> — хранят информацию о состоянии блока и его\nэлементов. Состояние модификаторов записывается в атрибуте <code>class</code>\nна DOM-узлах блока и элементов. Управление модификаторами\nпроизводится через <a href=\"#mods-api\">JS-API</a> экземпляра блока.</li>\n</ul>\n<p><a name=\"intro-use\"></a></p>\n<h3 id=\"Как-использовать-i-bem-js\"><a href=\"#Как-использовать-i-bem-js\" class=\"anchor\"></a>Как использовать i-bem.js</h3>\n<p>Фреймворк <code>i-bem.js</code> входит в состав библиотеки <a href=\"https://ru.bem.info/libs/bem-core/\">bem-core</a>.</p>\n<p>Реализация <code>i-bem.js</code> состоит из двух модулей:</p>\n<ul>\n<li><strong>Модуль <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/i-bem.vanilla.js\">i-bem</a></strong>.<br/>\nБазовая реализация JS-блока <code>i-bem</code>, от которой наследуются все блоки в\n<code>i-bem.js</code>. Блок <code>i-bem</code> написан с расчетом на использование в любом\nJS-окружении: как на клиенте, так и на сервере например, в\nNode.js).</li>\n<li><strong>Модуль <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a></strong>.<br/>\nБазовая реализация блока, привязанного к DOM-узлу.\nРассчитан на использование на клиенте, опирается на работу браузеров с DOM. Зависит от <code>jQuery</code>.</li>\n</ul>\n<p>Зависимости:</p>\n<ul>\n<li>jQuery (только для модуля <code>i-bem__dom</code>). При использовании <code>bem-core</code> отдельная установка\njQuery не требуется.</li>\n<li>Модульная система <a href=\"https://github.com/ymaps/modules\">ymaps/modules</a>. При использовании\n<a href=\"https://ru.bem.info/tools/bem/\">bem-tools</a> с технологией <code>.browser.js</code> (и производных от нее)\nэта зависимость удовлетворяется автоматически.</li>\n</ul>\n<p>Можно использовать <code>i-bem.js</code> как часть полного стека\nБЭМ-инструментов. В этом случае свой проект удобно создавать на основе\nшаблонного репозитория <a href=\"https://github.com/bem/project-stub/\">project-stub</a>, в котором настроена автоматическая установка зависимых библиотек.</p>\n<p>Если не планируется использование других технологий БЭМ-платформы,\nдостаточно скопировать код библиотеки <code>bem-core</code> в существующий проект.</p>\n<p><a name=\"intro-build\"></a></p>\n<h3 id=\"Сборка\"><a href=\"#Сборка\" class=\"anchor\"></a>Сборка</h3>\n<p>Разработка в рамках БЭМ-методологии ведется модульно — каждый блок\nпрограммируется отдельно. Финальный исходный код веб-страниц\nформируется из кода отдельных блоков с помощью процедур <strong>сборки</strong>.</p>\n<p>В файловой системе блок удобно представлять в виде каталога, а реализацию блока в каждой из технологий — в виде отдельного файла:</p>\n<pre><code class=\"lang-html\">    desktop.blocks/\n        my-block/\n            my-block.css\n            my-block.js\n            my-block.bemhtml\n            ...\n\n    desktop.blocks/\n        other-block/\n            other-block.css\n            other-block.js\n            other-block.bemhtml\n            ...\n</code></pre>\n<p>Для каждой веб-страницы код использованных на ней блоков может быть собран в единые файлы:</p>\n<pre><code class=\"lang-html\">    desktop.bundles/\n        index/\n            index.html\n            index.css\n            index.js\n            ...\n</code></pre>\n<p>Для сборки кода результирующих веб-страниц из отдельных\nописаний блоков существует два инструмента:</p>\n<ul>\n<li><a href=\"https://ru.bem.info/tools/bem/bem-tools/\">bem-tools</a>;</li>\n<li><a href=\"https://github.com/enb-make/enb\">enb</a> совместно с <a href=\"https://github.com/enb-make/enb-modules\">enb-modules</a>.</li>\n</ul>\n<p><a name=\"intro-name\"></a></p>\n<h3 id=\"Почему-i-bem-js-так-называется\"><a href=\"#Почему-i-bem-js-так-называется\" class=\"anchor\"></a>Почему i-bem.js так называется</h3>\n<p>В соответствии с БЭМ-методологией, базовая JS-библиотека БЭМ-платформы изначально разрабатывалась\nкак особый служебный блок. Такой подход позволяет работать с базовыми библиотеками так же, как\nи с обычными блоками. В частности, структурировать код в терминах элементов и модификаторов и\nгибко настраивать поведение библиотеки на разных уровнях переопределения.</p>\n<p>Служебным блокам в БЭМ было принято давать имена с префиксом <code>i-</code>. Таким образом, имя <code>i-bem.js</code>\nчитается как <em>реализация блока <code>i-bem</code> в технологии <code>JS</code></em>.</p>\n<p><a name=\"html\"></a></p>\n<h2 id=\"Привязка-JS-блоков-к-HTML\"><a href=\"#Привязка-JS-блоков-к-HTML\" class=\"anchor\"></a>Привязка JS-блоков к HTML</h2>\n<p>JavaScript-компоненты в <code>i-bem.js</code> служат для «оживления» HTML-элементов\nстраницы. Типовая задача JS-блока — привязать обработку определенных событий к\nуказанному HTML-фрагменту.</p>\n<p>При разработке веб-интерфейса в <code>i-bem.js</code> первичным «каркасом»\nявляется HTML-дерево документа. В HTML-дереве размечаются точки, к\nкоторым привязаны интерактивные элементы интерфейса — JS-блоки.\nТочка привязки JS-блока — HTML-элемент, в атрибуте <code>class</code> которого\nуказано имя блока, а в атрибуте <code>data-bem</code> — <a href=\"#html-syntax\">параметры блока</a>.</p>\n<p>При загрузке страницы в браузере выполняется\n<a href=\"#init\">инициализация блоков</a>. В процессе инициализации создаются\nэкземпляры блоков — JS-объекты для всех блоков, упомянутых в\nHTML-элементах на странице. JS-объект, привязанный к HTML-элементу,\nобрабатывает происходящие на нем <a href=\"#dom-events\">DOM-события</a> и хранит\nсостояние данного экземпляра блока.</p>\n<p><code>i-bem.js</code> дает возможность реализовать JS-компонент, не привязанный к\nHTML, — <a href=\"#i-blocks\">блок без DOM-представления</a>. Такой блок предоставляет API, аналогичное обычным JS-блокам.</p>\n<p>Описанный подход привязки JavaScript-компонентов к HTML имеет следующие преимущества:</p>\n<ul>\n<li>естественная деградация интерфейса на клиентах с отключенным JavaScript;</li>\n<li>прогрессивный рендеринг — возможность начинать отрисовку элементов интерфейса\nдо окончания загрузки всех данных страницы (например, изображений).</li>\n</ul>\n<p><a name=\"html-syntax\"></a></p>\n<h3 id=\"Синтаксис-привязки-блоков\"><a href=\"#Синтаксис-привязки-блоков\" class=\"anchor\"></a>Синтаксис привязки блоков</h3>\n<p>Чтобы привязать блок к HTML-элементу (например, <code>&lt;div&gt;...&lt;/div&gt;</code>), необходимо:</p>\n<ul>\n<li><strong>Отметить блок в HTML-дереве</strong>.<br/>\nВключить имя блока в список классов HTML-элемента (атрибут <code>class</code>).</li>\n</ul>\n<pre><code class=\"lang-html\"> &lt;div class=&quot;my-block&quot;&gt;...&lt;/div&gt;\n</code></pre>\n<ul>\n<li><strong>Инициализировать экземпляр блока</strong>.<br/>\nВключить класс <code>i-bem</code> в список классов HTML-элемента. Наличие этого класса позволит фреймворку инициализировать блок.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem&quot;&gt;...&lt;/div&gt;\n</code></pre>\n<ul>\n<li><strong>Передать параметры экземпляру блока</strong>.<br/>\nПоместить параметры блока в атрибут <code>data-bem</code>. Параметры блока записываются в формате\nJSON и представляют собой хэш вида: <code>имя блока</code> - <code>хэш параметров</code>. Параметры\nпередаются экземпляру блока <a href=\"#data-bem\">в момент инициализации</a>.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem&quot; data-bem=&#39;{ &quot;my-block&quot;: { &quot;name&quot;: &quot;ya&quot; } }&#39;&gt;...&lt;/div&gt;\n</code></pre>\n<p>Одному HTML-элементу не обязательно должен соответствовать один\nэкземпляр блока. Возможны следующие типы связи между блоками и HTML-элементами:</p>\n<ul>\n<li><a href=\"#html-simple\">Один HTML-элемент — один JS-блок</a>;</li>\n<li><a href=\"#html-mixes\">Один HTML-элемент — несколько JS-блоков</a>;</li>\n<li><a href=\"#distrib-block\">Один JS-блок на нескольких HTML-элементах</a>;</li>\n<li><a href=\"#i-blocks\">Блоки без DOM-представления</a>.</li>\n</ul>\n<p><a name=\"html-simple\"></a></p>\n<h4 id=\"Один-HTML-элемент-—-один-JS-блок\"><a href=\"#Один-HTML-элемент-—-один-JS-блок\" class=\"anchor\"></a>Один HTML-элемент — один JS-блок</h4>\n<p>Самый простой и распространенный способ привязки блоков к HTML.</p>\n<p><strong>Пример:</strong> HTML-элемент <code>div</code>, на котором размещен блок <code>my-block</code>.\nПараметры блока: пустой список <code>{}</code>.</p>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem&quot; data-bem=&#39;{ &quot;my-block&quot;: {} }&#39;&gt;\n    ...\n&lt;/div&gt;\n</code></pre>\n<p><a name=\"html-mixes\"></a></p>\n<h4 id=\"Один-HTML-элемент-—-несколько-JS-блоков\"><a href=\"#Один-HTML-элемент-—-несколько-JS-блоков\" class=\"anchor\"></a>Один HTML-элемент — несколько JS-блоков</h4>\n<p>Техника размещения нескольких блоков на одном HTML-элементе в БЭМ-методологии называется <strong>микс</strong>.</p>\n<p><strong>Пример:</strong> HTML-элемент <code>div</code>, на котором размещены:</p>\n<ul>\n<li>блок <code>user</code> с параметром <code>name</code>: <code>pushkin</code>;</li>\n<li>блок <code>avatar</code> с параметром <code>img</code>: <code>http://...</code>.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;user avatar i-bem&quot;\n    data-bem=&#39;{\n        &quot;user&quot;: { &quot;name&quot;: &quot;pushkin&quot; },\n        &quot;avatar&quot;: { &quot;img&quot;: &quot;http://...&quot; }\n     }&#39;&gt;\n     ...\n&lt;/div&gt;\n</code></pre>\n<p><a name=\"distrib-block\"></a></p>\n<h4 id=\"Один-JS-блок-на-нескольких-HTML-элементах\"><a href=\"#Один-JS-блок-на-нескольких-HTML-элементах\" class=\"anchor\"></a>Один JS-блок на нескольких HTML-элементах</h4>\n<p>Такой дизайн позволяет прозрачно реализовывать блоки, состоящие из\nнескольких компонентов, состояние которых должно быть согласовано. Например, виджет «вкладки»,\nгде клик по заголовку вкладки (первый HTML-элемент), меняет содержимое вкладки (второй HTML-элемент).\nДругой пример: маркер, обозначающий точку на карте (первый элемент),\nи связанное с ним описание точки в списке рядом с картой (второй элемент).</p>\n<p>Чтобы привязать экземпляр блока к нескольким HTML-элементам, в параметрах блока необходимо\nуказать одинаковое значение <code>id</code> для всех связанных с блоком HTML-элементов.\nВ качестве значения <code>id</code> может выступать произвольная строка.</p>\n<p><strong>Пример:</strong> Экземпляр блока <code>notebook</code> привязан к HTML-элементам <code>div</code> и <code>span</code>.\nВ параметрах блока указан общий <code>id</code> — <code>maintab</code>.</p>\n<pre><code class=\"lang-html\">&lt;div class=&quot;notebook i-bem&quot; data-bem=&#39;{ &quot;notebook&quot;: { &quot;id&quot;: &quot;maintab&quot; }}&#39;&gt;\n&lt;/div&gt;\n...\n&lt;span class=&quot;notebook i-bem&quot; data-bem=&#39;{ &quot;notebook&quot;: { &quot;id&quot;: &quot;maintab&quot; }}&#39;&gt;\n&lt;/span&gt;\n</code></pre>\n<p>В результате при инициализации блоков создается один JS-объект, поле\n<a href=\"#domElem\"><code>{jQuery} domElem</code></a> которого содержит ссылки на оба DOM-узла.</p>\n<p>Идентификатор <code>id</code> используется <em>только в момент инициализации</em>\nэкземпляра блока. Значение <code>id</code> должно быть уникальным в пределах\nэкземпляров одного блока, в рамках одной <a href=\"#init-wave\">волны инициализации</a>.</p>\n<p><a name=\"i-blocks\"></a></p>\n<h4 id=\"Блоки-без-DOM-представления\"><a href=\"#Блоки-без-DOM-представления\" class=\"anchor\"></a>Блоки без DOM-представления</h4>\n<p>Инфраструктурный код, решающий общие задачи интерфейса (связь с\nбэкэндом, общие вычисления и т.п.), при работе с <code>i-bem.js</code> можно\nоформлять в виде блока, как и весь прочий JS-код. Чтобы не приходилось привязывать\nтакие блоки к HTML-дереву искусственно, <code>i-bem.js</code> предоставляет\nвозможность создавать блоки без DOM-представления.</p>\n<p>Блоки без DOM-представления:</p>\n<ul>\n<li>не указываются в HTML-коде страницы;</li>\n<li>декларируются как <a href=\"#bem-decl\">доопределение модуля <code>i-bem</code></a>, а не <code>i-bem__dom</code>\n(как блоки с DOM-представлением);</li>\n<li>должны быть <a href=\"#init-bem\">инициализированы явно</a>.</li>\n</ul>\n<p><a name=\"data-bem\"></a></p>\n<h3 id=\"Синтаксис-передачи-параметров\"><a href=\"#Синтаксис-передачи-параметров\" class=\"anchor\"></a>Синтаксис передачи параметров</h3>\n<p>Параметры блока хранятся в атрибуте <code>data-bem</code> HTML-элемента\nи передаются блоку в момент инициализации. Параметры позволяют\nмодифицировать поведение экземпляра блока, привязанного к данному\nHTML-элементу.</p>\n<p>В значении атрибута <code>data-bem</code> указываются параметры <em>всех JS-блоков, размещенных на данном узле</em>.\nПараметры передаются в формате JSON в виде хэша:</p>\n<ul>\n<li>ключ — <code>{String}</code>, имя блока;</li>\n<li>значение — <code>{Object}</code>, параметры данного блока. Если данному экземпляру блока не требуются\nпараметры, указывается пустой хэш <code>{}</code>.</li>\n</ul>\n<p>Значение атрибута <code>data-bem</code> должно содержать валидный JSON.</p>\n<p>Такой формат параметров продиктован следующими соображениями:</p>\n<ul>\n<li>Указание имени блока в параметрах позволяет избежать необходимости\nпарсить значение атрибута <code>class</code>, что упрощает и ускоряет\nинициализацию блоков.</li>\n<li>Это же решение позволяет размещать несколько блоков на одном\nHTML-элементе без необходимости множить атрибуты элемента.</li>\n</ul>\n<p><a name=\"decl\"></a></p>\n<h2 id=\"Декларация-блока\"><a href=\"#Декларация-блока\" class=\"anchor\"></a>Декларация блока</h2>\n<p>JS-реализация блока описывает поведение определенного класса элементов веб-интерфейса. В конкретных\nинтерфейсах каждый блок может быть представлен несколькими экземплярами. Каждый экземпляр блока реализует\nфункциональность всего класса и имеет собственное состояние, независимое от остальных.</p>\n<p>В терминах парадигмы объектно-ориентированного программирования:</p>\n<ul>\n<li>блок — класс;</li>\n<li>экземпляр блока — экземпляр класса.</li>\n</ul>\n<p>В соответствии с ООП, вся функциональность блока реализуется модульно в методах класса <em>(=блока)</em>.</p>\n<p>Методы блока подразделяются на:</p>\n<ul>\n<li>методы экземпляра блока;</li>\n<li>статические методы.</li>\n</ul>\n<p>Код блока в <code>i-bem.js</code> принято называть <strong>декларацией</strong>, чтобы подчеркнуть принятый\nв БЭМ декларативный стиль программирования. Поведение блока программируется\nв декларативном стиле в виде утверждений: <code>набор условий</code> — <code>реакция блока</code>.</p>\n<p><a name=\"decl-syntax\"></a></p>\n<h3 id=\"Синтаксис-декларации\"><a href=\"#Синтаксис-декларации\" class=\"anchor\"></a>Синтаксис декларации</h3>\n<p>Чтобы задекларировать новый JS-блок <strong>с DOM-представлением</strong> (привязанный к HTML-элементу), необходимо доопределить <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуль <code>i-bem__dom</code>.</p>\n<p>Блоки декларируются с помощью метода <code>decl</code>, принимающего три\nпараметра:</p>\n<ol>\n<li>Имя блока <code>{String}</code> или <a href=\"#decl-selector\">описание блока</a> <code>{Object}</code>.</li>\n<li>Методы экземпляра блока — <code>{Object}</code>.</li>\n<li>Статические методы — <code>{Object}</code>.</li>\n</ol>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(/* имя или описание блока */,\n    {\n        /* методы экземпляра */\n    },\n    {\n        /* статические методы */\n    }\n);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p><strong>NB</strong> С точки зрения модульной системы <a href=\"https://github.com/ymaps/modules\">ymaps</a>, декларации разных\nблоков представляют собой переопределение одного и того же модуля\n<code>i-bem__dom</code>. Однако, с точки зрения <code>i-bem.js</code>, таким образом создаются\n<em>разные объекты</em> для построения экземпляров блоков.</p>\n<p><a name=\"bem-decl\"></a>\nБлоки, не имеющие DOM-представления, декларируются как доопределение <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуля <code>i-bem</code>.\nДля декларации используется метод <code>decl</code>, принимающий те же параметры,\nчто и метод <code>decl</code> модуля <code>i-bem__dom</code>:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem&#39;, function(provide, BEM) {\n\nBEM.decl(/* имя или описание блока */,\n    {\n        /* методы экземпляра */\n    },\n    {\n        /* статические методы */\n    }\n);\n\nprovide(BEM);\n\n});\n</code></pre>\n<hr>\n<p><strong>NB</strong> Оформлять инфраструктурный код в виде блока без\nDOM-представления удобно, если в нем планируется использовать API\nБЭМ-блоков (состояния, выражаемые модификаторами, БЭМ-события и\nт. п.). Если использовать БЭМ-предметную область не планируется,\nинфраструктурный код можно оформлять в виде <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуля.</p>\n<p><strong>Пример:</strong></p>\n<pre><code class=\"lang-js\">modules.define(&#39;router&#39;, function(provide) {\n\nprovide({\n    route : function() { /* ... */ }\n});\n\n});\n</code></pre>\n<hr>\n<p><a name=\"decl-selector\"></a></p>\n<h3 id=\"Описание-блока-в-декларации\"><a href=\"#Описание-блока-в-декларации\" class=\"anchor\"></a>Описание блока в декларации</h3>\n<p>Первый параметр метода <code>decl</code> представляет собой описание блока, в\nкотором будут применяться объявленные в декларации методы. Описание\nобязательно содержит имя блока и может дополнительно содержать:</p>\n<ul>\n<li>ограничение сферы действия декларации определенной модификацией\nблока;</li>\n<li>список родительских блоков, методы которых должен наследовать данный\nблок.</li>\n</ul>\n<p>Описание может быть задано в одной из двух форм:</p>\n<ul>\n<li><p><strong>Имя блока — строка</strong>.<br/>\n Объявленные методы будут применяться во всех экземплярах блока независимо от их состояний (модификаторов).<br/>\n<strong>Пример:</strong> Декларация методов для блока <code>button</code>.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;button&#39;,\n  { /* методы экземпляра */ },\n  { /* статические методы */ }\n);\n</code></pre>\n</li>\n<li><p><strong>Описание блока — хэш</strong>.<br/>\nСодержит имя (и значение) модификатора. Объявленные методы будут применяться только к тем\nэкземплярам блока, у которых присутствует данный модификатор (с\nуказанным значением).<br/>\n<strong>Пример:</strong> Декларация методов для блока <code>button</code> с модификатором\n<code>type</code> в значении <code>link</code> (описывает поведение псевдокнопок):</p>\n<pre><code class=\"lang-js\">BEMDOM.decl({ block: &#39;button&#39;, modName: &#39;type&#39;, modVal: &#39;link&#39; },\n  { /* методы экземпляра */ },\n  { /* статические методы */ }\n);\n</code></pre>\n</li>\n</ul>\n<p><strong>NB</strong> Cтатические методы блока будут доступны всем его экземплярам <em>вне зависимости от значений модификаторов</em>.\nМодификаторы являются свойствами экземпляров блоков, а статические методы принадлежат классу\nблока и не учитывают состояния модификаторов.</p>\n<p><a name=\"inher\"></a></p>\n<h3 id=\"Наследование-блока\"><a href=\"#Наследование-блока\" class=\"anchor\"></a>Наследование блока</h3>\n<p>Одна и та же функциональность может быть востребована в нескольких блоках проекта.\nНапример, разные блоки могут обращаться за данными к бэкенду, используя AJAX,\nили совершать однотипные операции с DOM-деревом и т.д. Чтобы избежать ненужных повторов в коде,\nобщую функциональность можно инкапсулировать в виде модулей, а затем добавлять к блокам.</p>\n<p>Наследование позволяет повторно использовать функциональность блока, расширяя ее новой логикой.\nВ <code>i-bem.js</code> доступно несколько механизмов наследования. Выбор конкретного механизма зависит от специфики создаваемого блока.</p>\n<p><a name=\"inher-simple\"></a></p>\n<h4 id=\"Простое-наследование\"><a href=\"#Простое-наследование\" class=\"anchor\"></a>Простое наследование</h4>\n<p>В случае простого наследования создаваемый блок объявляется как наследник существующего. Для этого нужно:</p>\n<ol>\n<li>Указать базовый блок в зависимостях модульной системы.</li>\n<li>Передать ссылку на базовый блок в специальном поле декларации <code>baseBlock</code>.</li>\n</ol>\n<pre><code class=\"lang-js\">modules.define(&#39;ablock&#39;, [&#39;i-bem__dom&#39;], function(provide, BEMDOM) {\n\nprovide(BEMDOM.decl(this.name, {}));\n\n});\n\nmodules.define(&#39;bblock&#39;, [&#39;i-bem__dom&#39;, &#39;ablock&#39;], function(provide, BEMDOM, ABlock) {\n\nprovide(BEMDOM.decl({ block : this.name, baseBlock : ABlock ));\n\n});\n</code></pre>\n<p>Такой механизм позволяет использовать методы родительского блока внутри производного.\nДля доступа к методам родителя служит специальное поле контекста <code>this.__base</code>.</p>\n<p><strong>NB</strong> В <code>i-bem</code> можно создавать цепочки наследования – блок наследуется от другого,\nкоторый, в свою очередь, наследуется от третьего и т.д.</p>\n<p><a name=\"inher-over\"></a></p>\n<h4 id=\"Доопределение-существующего-блока\"><a href=\"#Доопределение-существующего-блока\" class=\"anchor\"></a>Доопределение существующего блока</h4>\n<p>При наследовании можно сохранить основную функциональность базового блока.\nДля этого можно <strong>доопределить</strong> базовый блок новым на уровне переопределения проекта.\nСоздаваемый в проекте блок реализует собственную логику, дополняющую или переопределяющую логику базового.\nТакая схема наследования часто используется при работе с библиотечными блоками.</p>\n<p>Чтобы доопределить существующий блок нужно создать новый блок с тем же именем.\nПересекающиеся методы и модификаторы будут определены в соответствие с декларацией нового блока.</p>\n<pre><code class=\"lang-js\">modules.define(&#39;ablock&#39;, [&#39;i-bem__dom&#39;], function(provide, BEMDOM) {\n\nprovide(BEMDOM.decl(this.name, {})); // Объявляем базовый блок\n\n});\n\nmodules.define(&#39;ablock&#39;, function(provide, ABlock) {\n\nprovide(ABlock.decl({})); // Доопределяем базовый блок\n\n});\n</code></pre>\n<p><a name=\"inher-over-modifier\"></a></p>\n<h5 id=\"Добавление-модификатора-к-существующему-блоку\"><a href=\"#Добавление-модификатора-к-существующему-блоку\" class=\"anchor\"></a>Добавление модификатора к существующему блоку</h5>\n<p>В соответствии с БЭМ-методологией состояния блока должны описываться <a href=\"#modifiers\">модификаторами</a>.\nПоэтому расширение функциональности блока часто предполагает реализацию поддержки новых модификаторов.</p>\n<p>Для добавления модификатора необходимо передать методу <code>decl</code> доопределяемого блока:</p>\n<ul>\n<li>хеш с ключами <code>modName</code> и <code>modVal</code>. Значением для <code>modName</code> служит строка – имя модификатора. Значением <code>modVal</code> – строка со значением модификатора.</li>\n<li>хеш с реализацией методов, которые будут доступны для блока с соответствующим модификатором. Пересекающиеся методы будут переопределены методами из хеша.</li>\n</ul>\n<pre><code class=\"lang-js\">modules.define(&#39;ablock&#39;, [&#39;i-bem__dom&#39;], function(provide, BEMDOM) {\n\nprovide(BEMDOM.decl(this.name, {})); // Объявляем базовый блок\n\n});\n\nmodules.define(&#39;ablock&#39;, function(provide, ABlock) {\n\nprovide(ABlock.decl({ modName : &#39;m1&#39;, modVal : &#39;v1&#39; }, {})); // Доопределяем базовый блок с модификтором _m1_v1\n\n});\n</code></pre>\n<p><a name=\"inher-mixins\"></a></p>\n<h4 id=\"Блоки-миксы\"><a href=\"#Блоки-миксы\" class=\"anchor\"></a>Блоки-миксы</h4>\n<p>В <code>i-bem.js</code> для добавления востребованной функциональности к блокам, используется специальный\nтип блоков – <strong>блоки-миксы</strong>. Главная особенность блоков-миксов состоит в том, что они не участвуют\nв цепочке наследования. Это позволяет примешивать реализованную в них функциональность к другим блокам\nбез риска нарушения их связей с родительскими блоками (вызов базовых методов (<code>this.__base</code>) и т.д.).</p>\n<p><a name=\"inher-mixins-declwithmix\"></a></p>\n<h5 id=\"Описание-блока-микса-в-декларации\"><a href=\"#Описание-блока-микса-в-декларации\" class=\"anchor\"></a>Описание блока-микса в декларации</h5>\n<p>Чтобы подмешать к блоку один или несколько блоков-миксов, необходимо в декларации блока присвоить\nзначение опциональному полю <code>baseMix</code>.  Значением служит массив имен примешиваемых блоков-миксов:</p>\n<pre><code class=\"lang-js\">BEM.decl({ block: &#39;myblock&#39;, baseMix: [&#39;foo&#39;, &#39;bar&#39;]},\n    { /* методы экземпляра */ },\n    { /* статические методы */ }\n);\n</code></pre>\n<p><a name=\"inher-mixins-mixindecl\"></a></p>\n<h5 id=\"Декларация-блока-микса\"><a href=\"#Декларация-блока-микса\" class=\"anchor\"></a>Декларация блока-микса</h5>\n<p>В качестве блоков-миксов можно использовать только блоки, созданные с помощью <code>declMix</code>.\nЭтот метод принимает декларацию блока в формате, аналогичном методу <code>decl</code>:</p>\n<pre><code class=\"lang-js\">BEMDOM.declMix(&#39;mymix&#39;,\n    { /* свойства и методы экземпляра */ },\n    { /* статические свойства и методы */ }\n);\n</code></pre>\n<p><strong>NB</strong> Первым аргументом в декларации блока-микса всегда выступает строка – имя блока.\nЭто связано с тем, что для блоков-миксов не предполагаются возможности использования модификаторов или примешивания блоков.</p>\n<p><a name=\"context\"></a></p>\n<h3 id=\"Контекст\"><a href=\"#Контекст\" class=\"anchor\"></a>Контекст</h3>\n<p><strong>Методы экземпляра блока</strong> исполняются в контексте JS-объекта\nэкземпляра блока. Соответственно, ключевое слово <code>this</code> в методах\nэкземпляра блока ссылается на JS-объект <strong>экземпляра блока</strong>.</p>\n<p><strong>Статические методы</strong> исполняются в контексте JS-объекта,\nсоответствующего классу блока. Соответственно, ключевое слово <code>this</code>\nв статических методах блока ссылается на <strong>класс блока</strong>, а не на\nэкземпляр.</p>\n<p>Контекст содержит зарезервированные поля:</p>\n<ul>\n<li><code>this.__self</code>: cсылается на статические методы класса, к которому\nпринадлежит экземпляр. Определен в методах экземпляра блока. Для\nстатических методов не имеет смысла и не определен.<br/>\n<strong>Пример:</strong> Вызов статического метода <code>staticMethod</code> в методе\n<code>onEvent</code> экземпляра блока <code>my-block</code>.</li>\n</ul>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;my-block&#39;, {\n    onEvent: function() {\n        this.__self.staticMethod(); // вызов статического метода\n        this.doMore();\n    },\n    {\n        staticMethod: function() { /* ... */ }; // определение статического метода\n    }\n});\n</code></pre>\n<ul>\n<li><code>this.__base</code>: cсылается на реализацию метода в базовом классе, от которого наследуется данный.\nПозволяет выполнить <code>super call</code>. Определен в методах экземпляра\nблока и в статических методах блока.<br/>\n<strong>Пример:</strong> вызов (и модификация) метода <code>_onClick</code> родительского класса (базовой реализации метода в классе <code>button</code>).</li>\n</ul>\n<pre><code class=\"lang-js\">BEMDOM.decl({ block: &#39;my-button&#39;, baseBlock: &#39;button&#39; }, {\n    _onClick: function() {\n        this.__base();\n        this.doMore();\n    }\n);\n</code></pre>\n<hr>\n<p><strong>NB</strong> Так как блоки-миксы не участвуют в цепочке наследования, внутри них нельзя использовать <code>__base</code> для обращения к родительскому блоку.</p>\n<hr>\n<p><strong>NB</strong> При разработке блоков с использованием <code>i-bem.js</code> внутренним\nметодам блока, не предназначенным для использования извне, принято\nдавать имена, начинающиеся с символа подчеркивания. Например,\n<code>_onClick</code>.</p>\n<hr>\n<p><a name=\"dom\"></a></p>\n<h2 id=\"Работа-с-DOM-деревом\"><a href=\"#Работа-с-DOM-деревом\" class=\"anchor\"></a>Работа с DOM-деревом</h2>\n<p><a name=\"domElem\"></a></p>\n<h3 id=\"DOM-узел-экземпляра-блока\"><a href=\"#DOM-узел-экземпляра-блока\" class=\"anchor\"></a>DOM-узел экземпляра блока</h3>\n<p>Все экземпляры блоков, привязанные к DOM-дереву, содержат в поле\n<code>{jQuery} this.domElem</code> jQuery-объект, ссылающийся на один или\nнесколько DOM-узлов, с которыми связан данный экземпляр блока.</p>\n<p><a name=\"elem-api\"></a></p>\n<h3 id=\"Элементы\"><a href=\"#Элементы\" class=\"anchor\"></a>Элементы</h3>\n<p>БЭМ-элементы блоков представлены в <code>i-bem.js</code> как DOM-узлы, вложенные\nв DOM-узел экземпляра блока. Для обращения к DOM-узлам элементов и\nработы с их модификаторами, следует использовать API, предоставляемый\nэкземпляром блока.</p>\n<p>Экземпляр блока предоставляет два метода для обращения к элементам данного экземпляра:</p>\n<ul>\n<li>Кэширующий доступ: <code>elem(elems, [modName], [modVal])</code>. Элемент,\nполученный таким образом, не требуется сохранять в переменную.</li>\n</ul>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;link&#39;, {\n    setInnerText: function() {\n        this.elem(&#39;inner&#39;).text(&#39;Текст ссылки&#39;);\n        /* ... */\n        this.elem(&#39;inner&#39;).text(&#39;Другой текст&#39;);\n    }\n);\n</code></pre>\n<ul>\n<li>Некэширующий доступ: <code>findElem(elems, [modName], [modVal])</code>.</li>\n</ul>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;link&#39;, {\n    setInnerText: function() {\n        var inner = this.findElem(&#39;inner&#39;);\n        inner.text(&#39;Текст ссылки&#39;);\n        /* ... */\n        inner.text(&#39;Другой текст&#39;);\n    }\n});\n</code></pre>\n<p>При <a href=\"#dynamic\">динамическом добавлении и удалении элементов блока</a> может\nвозникнуть необходимость сброса кэша элементов. Для этого предназначен\nметод <code>dropElemCache(&#39;elements&#39;)</code>. В качестве параметра указывается\nразделенный пробелами список имен элементов, кэш которых нужно сбросить:</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;attach&#39;, {\n    clear: function() {\n        BEMDOM.destruct(this.elem(&#39;control&#39;));\n        BEMDOM.destruct(this.elem(&#39;file&#39;));\n        return this.dropElemCache(&#39;control file&#39;);\n    }\n});\n</code></pre>\n<p>Полное описание API для работы с элементами содержится в\nисходном коде модуля <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><a name=\"dynamic\"></a></p>\n<h3 id=\"Динамическое-обновление-блоков-и-элементов-в-DOM-дереве\"><a href=\"#Динамическое-обновление-блоков-и-элементов-в-DOM-дереве\" class=\"anchor\"></a>Динамическое обновление блоков и элементов в DOM-дереве</h3>\n<p>В современных интерфейсах зачастую необходимо создавать новые\nфрагменты DOM-дерева и заменять старые в процессе работы (AJAX). В\n<code>i-bem.js</code> предусмотрены следующие функции для добавления и замены\nфрагментов DOM-дерева.</p>\n<ul>\n<li><p>Добавить DOM-фрагмент:</p>\n<ul>\n<li><code>append</code> —  в конец указанного контекста;</li>\n<li><code>prepend</code> — в начало указанного контекста;</li>\n<li><code>before</code> — перед указанным контекстом;</li>\n<li><code>after</code> — после указанного контекста;</li>\n</ul>\n</li>\n<li><p>Заместить DOM-фрагмент:</p>\n<ul>\n<li><code>update</code> —  внутри указанного контекста;</li>\n<li><code>replace</code> — заменить указанный контекст новым DOM-фрагментом.</li>\n</ul>\n</li>\n</ul>\n<p>Все функции автоматически выполняют <a href=\"#init-ajax\">инициализацию блоков на обновленном фрагменте DOM-дерева</a>.</p>\n<p>Чтобы упростить создание БЭМ-сущностей на обновляемых фрагментах\nDOM-дерева, можно использовать шаблонизатор\n<a href=\"https://ru.bem.info/technology/bemhtml/current/intro/\">BEMHTML</a>, подключив\nего в качестве <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуля. БЭМ-сущности описываются в формате\n<a href=\"https://ru.bem.info/technology/bemjson/current/bemjson/\">BEMJSON</a>\nнепосредственно в коде блока. Функция <code>BEMHTML.apply</code> генерирует\nHTML-элементы по BEMJSON-описанию в соответствии с правилами\nименования БЭМ.</p>\n<p><strong>Пример:</strong> В методе <code>_updateFileElem</code> блока <code>attach</code> выполняются\nудаление элемента <code>file</code>, если он существовал, и генерация нового\nэлемента с помощью функции <code>BEMHTML.apply</code>:</p>\n<pre><code class=\"lang-js\">modules.define(\n    &#39;i-bem__dom&#39;,\n    [&#39;BEMHTML&#39;, &#39;strings__escape&#39;],\n    function(provide, BEMHTML, escape, BEMDOM) {\n\nprovide(BEMDOM.decl(&#39;attach&#39;, {\n    _updateFileElem : function() {\n        var fileName = extractFileNameFromPath(this.getVal());\n        this.elem(&#39;file&#39;).length &amp;&amp; BEMDOM.destruct(this.elem(&#39;file&#39;));\n        BEMDOM.append(\n            this.domElem,\n            BEMHTML.apply({\n                block : &#39;attach&#39;,\n                elem : &#39;file&#39;,\n                content : [\n                    {\n                        elem : &#39;icon&#39;,\n                        mods : { file : extractExtensionFromFileName(fileName) }\n                    },\n                    { elem : &#39;text&#39;, content : escape.html(fileName) },\n                    { elem : &#39;clear&#39; }\n                ]\n            }));\n        return this.dropElemCache(&#39;file&#39;);\n    }\n}));\n\n});\n</code></pre>\n<p><a name=\"events\"></a></p>\n<h2 id=\"События\"><a href=\"#События\" class=\"anchor\"></a>События</h2>\n<p>В <code>i-bem.js</code> поддерживается два вида событий:</p>\n<p><a name=\"dom-events\"></a></p>\n<ul>\n<li><strong>DOM-событие</strong> — JavaScript-событие на DOM-узле, связанном с\nблоком. Отражает взаимодействие пользователя с интерфейсом (клик,\nнаведение мыши, ввод текста и т.п.). DOM-событие обычно обрабатывает\nтот экземпляр блока, на DOM-узле которого оно возникло.</li>\n<li><strong>БЭМ-событие</strong> — собственное событие, генерируемое\nблоком. Позволяет организовать API для\n<a href=\"#ibc\">взаимодействия с блоком</a>. БЭМ-событие обычно обрабатывает\nэкземпляр блока, отслеживающий состояние других блоков, на которых\nгенерируются события.</li>\n</ul>\n<p>Планируя архитектуру интерфейса, нужно учитывать, что DOM-события\nследует использовать только во <em>внутренних</em> процедурах блока. Для\nвзаимодействия блока с <em>внешней</em> средой (другими блоками),\nпредназначены БЭМ-события.</p>\n<p><strong>NB</strong> Работа с DOM-событиями полностью реализована средствами\nфреймворка jQuery.</p>\n<p><a name=\"delegated-events\"></a></p>\n<h3 id=\"Делегирование-событий\"><a href=\"#Делегирование-событий\" class=\"anchor\"></a>Делегирование событий</h3>\n<p>Обработка БЭМ- и DOM-событий может быть <strong>делегирована</strong> контейнеру\n(всему документу или конкретному DOM-узлу). В этом случае контейнер\nслужит точкой обработки событий, возникающих на любом из\nдочерних узлов контейнера, даже если в момент подписки на события\nнекоторые из дочерних узлов еще не существовали.</p>\n<p>Блок меню может содержать вложенные блоки (или элементы, в\nзависимости от конкретной реализации блока): например, пункты меню. Обработку\nкликов на пунктах меню имеет смысл делегировать самому блоку\nменю. Это, во-первых, позволяет сэкономить затраты ресурсов на\nподписку на события (дешевле подписаться на одно событие контейнера,\nчем на много событий элементов). Во-вторых, дает возможность более\nгибко изменять состав меню: добавлять и удалять пункты, не выполняя\nпри этом подписку на события добавленных пунктов меню и отмену\nподписки на события удаленных.</p>\n<ul>\n<li><a href=\"#dom-events-delegated\">Делегирование DOM-событий</a> можно\nиспользовать для обработки DOM-событий, происходящих на DOM-узле\nэкземпляра блока или на DOM-узлах его элементов. Делегирование\nDOM-событий может выполняться либо для всех экземпляров блоков\nданного типа в пределах документа, либо только для экземпляров\nблоков внутри указанного контекста (фрагмента HTML-дерева).</li>\n</ul>\n<p>Контейнером, которому делегируется обработка DOM-событий, всегда\nвыступает <code>window.document</code>.</p>\n<ul>\n<li><a href=\"#bem-events-delegated\">Делегирование БЭМ-событий</a> следует\nиспользовать для обработки событий на <em>экземплярах блоков</em>,\nсодержащихся внутри указанного DOM-узла.</li>\n</ul>\n<p>Контейнером, которому делегируется обработка БЭМ-событий, может\nслужить <strong>произвольный DOM-узел</strong>. По умолчанию в качестве\nконтейнера выступает весь документ (<code>window.document</code>). Часто блок\nобрабатывает БЭМ-события вложенных блоков, тогда в качестве\nконтейнера следует указать DOM-узел блока-обработчика\n<a href=\"#domElem\"><code>this.domElem</code></a>.</p>\n<p>Полный список хелперов для подписки на делегированные события\nможно найти в исходном коде модуля <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<h3 id=\"DOM-события\"><a href=\"#DOM-события\" class=\"anchor\"></a>DOM-события</h3>\n<p>Для подписки на DOM-события на узлах, связанных с блоком или\nэлементом, используется метод экземпляра блока <code>bindTo([elem], event, handler)</code>.</p>\n<p><strong>Пример:</strong> В момент <a href=\"#init\">инициализации экземпляра блока</a>\n<code>my-block</code> выполняется подписка на событие <code>click</code>, при наступлении\nкоторого блок выставляет себе <a href=\"#modifier\">модификатор</a> <code>size</code> в\nзначение <code>big</code>.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;my-block&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39;: function() {\n                this.bindTo(&#39;click&#39;, function(e) {\n                    var domElem = $(e.currentTarget); // DOM-элемент, на котором слушается событие\n                                                      // в данном случае то же, что this.domElem\n                    this.setMod(&#39;size&#39;, &#39;big&#39;);\n                });\n            }\n        }\n    }\n});\n</code></pre>\n<p><strong>Пример:</strong> При <a href=\"#init\">инициализации экземпляра блока</a> <code>my-form</code> выполняется\nподписка на событие <code>click</code> элемента <code>submit</code>, при наступлении\nкоторого будет вызван метод экземпляра блока <code>_onSubmit</code>.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;my-block&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39;: function() {\n                this.bindTo(&#39;submit&#39;, &#39;click&#39;, function(e) {\n                    var domElem = $(e.currentTarget); // DOM-элемент, на котором слушается событие\n                                                      // в данном случае то же, что this.elem(&#39;submit&#39;)\n                    this._onSubmit();\n                });\n            }\n        }\n    },\n\n    _onSubmit : function() { /* ... */ }\n});\n</code></pre>\n<p><strong>NB</strong> Функция-обработчик выполняется в контексте того экземпляра\nблока, в котором возникло событие.</p>\n<p><strong>Удаление подписки</strong> на DOM-события выполняется автоматически при\nуничтожении экземпляра блока. Если необходимо удалить подписку вручную\nв процессе работы блока, следует использовать метод\n<code>unbindFrom([elem], event, handler)</code>.</p>\n<p><a name=\"dom-events-delegated\"></a></p>\n<h4 id=\"Делегирование-DOM-событий\"><a href=\"#Делегирование-DOM-событий\" class=\"anchor\"></a>Делегирование DOM-событий</h4>\n<p>Делегирование обработки DOM-событий выполняется с помощью метода\n<code>liveBindTo([elem], event, handler)</code>. В декларации блока точкой,\nзарезервированной для подписки на делегированные DOM-события, служит\nсвойство <code>live</code> в разделе статических методов блока.</p>\n<p><strong>Пример:</strong> Все экземпляры блока <code>menu</code> подписываются на\nделегированное DOM-событие <code>click</code> своих элементов <code>item</code>. Метод\n<code>_onItemClick</code> экземпляра блока <code>menu</code> будет выполняться при клике\nна любой пункт (элемент <code>item</code>) в этом меню. Не имеет значения,\nсуществовал ли этот пункт в момент инициализации экземпляра блока.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;menu&#39;, {\n    _onItemClick : function(e) {\n        var clickedItem = $(e.currentTarget); // элемент &#39;item&#39; блока &#39;menu&#39;, на котором слушается DOM-событие &#39;click&#39;\n    }\n}, {\n    live : function() {\n        this.liveBindTo(&#39;item&#39;, &#39;click&#39;, function() {\n            this._onItemClick();\n        });\n        return false; // если инициализация блока не может быть отложена\n    }\n});\n</code></pre>\n<p>По умолчанию, при наличии в декларации блока свойства <code>live</code>\nинициализация экземпляров блока будет <em>отложена</em> до момента, когда\nэкземпляр блока потребуется в работе\n(<a href=\"#init-live\">ленивая инициализация</a>). Таким моментом может стать\nDOM-событие на экземпляре блока, на которое выполнена делегированная\nподписка, или обращение к экземпляру блока <a href=\"#ibc\">из другого блока</a>.\nЕсли инициализация блока не может быть отложена (требуется\n<a href=\"#init-auto\">автоматическая инициализация</a>), следует вернуть <code>false</code>\nв результате выполнения функции в значении свойства <code>live</code>.</p>\n<p><strong>NB</strong> Функция-обработчик выполняется в контексте ближайшего блока\nданного типа на пути распространения DOM-события (снизу вверх\nпо DOM-дереву).</p>\n<p><strong>Удаление подписки</strong> на делегированные DOM-события никогда не\nвыполняется автоматически. Если подписку необходимо удалить, следует\nвоспользоваться методом <code>liveUnbindFrom([elem], event, [handler])</code>.</p>\n<h4 id=\"Объект-DOM-события\"><a href=\"#Объект-DOM-события\" class=\"anchor\"></a>Объект DOM-события</h4>\n<p>В качестве параметра функции-обработчику передается jQuery-объект,\nописывающий DOM-событие — <a href=\"https://api.jquery.com/category/events/event-object/\"><code>{jQuery.Event}</code></a>.</p>\n<p>Если DOM-событие было сгенерировано вручную, все параметры, переданные\nфункции <code>trigger</code> при создании события, будут переданы\nфункции-обработчику в том же порядке после объекта события.</p>\n<p><a name=\"bem-events\"></a></p>\n<h3 id=\"БЭМ-события\"><a href=\"#БЭМ-события\" class=\"anchor\"></a>БЭМ-события</h3>\n<p>В отличие от DOM-событий, БЭМ-события генерируются не на\nDOM-элементах, а на <strong>экземплярах блоков</strong>. Элементы блоков не могут\nгенерировать БЭМ-события.</p>\n<p>Чтобы сгенерировать БЭМ-событие, используется метод экземпляра блока\n<code>emit(event)</code>.</p>\n<p><strong>Пример:</strong> Взаимодействие пользователя с элементом управления блока\n(DOM-событие) можно преобразовать в БЭМ-событие на блоке. В\nприведенном ниже примере при клике пользователя по кнопке <code>submit</code>\n(DOM-событие <code>click</code>) <strong>БЭМ-событие</strong> <code>click</code> генерируется только в\nтом случае, если у блока в этот момент не выставлен модификатор\n<code>disabled</code>:</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;submit&#39;, {\n    onSetMod: {\n        &#39;js&#39;: {\n            &#39;inited&#39;: function() {\n                this.bindTo(&#39;click&#39;, this._onClick); // подписка на DOM-событие &quot;click&quot;\n            }\n        }\n    },\n\n    _onClick: function() {\n        if(!this.hasMod(&#39;disabled&#39;)) {\n            this.emit(&#39;click&#39;); // создание БЭМ-события &quot;click&quot;\n        }\n    }\n});\n</code></pre>\n<p>Для подписки на БЭМ-события экземпляров блоков используются методы\nэкземпляра блока <code>on(event, [data], handler, [handlerCtx])</code>.</p>\n<p><strong>Пример:</strong> В момент инициализации HTML-формы (экземпляра блока <code>my-form</code>)\nвыполняется поиск вложенной в форму кнопки <code>submit</code> и подписка на\nБЭМ-событие <code>click</code> этой кнопки. В результате при нажатии на кнопку\n(экземпляр блока <code>submit</code>) будет выполнен метод <code>_onSubmit</code> формы\n(экземпляр блока <code>my-form</code>).</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;my-form&#39;, {\n    onSetMod: {\n        &#39;js&#39;: {\n            &#39;inited&#39;: function() {\n                this.findBlockInside(&#39;submit&#39;).on(\n                    &#39;click&#39;, // имя БЭМ-события\n                    this._onSubmit, // метод экземпляра блока my-form\n                    this); // контекст для выполнения _onSubmit — блок my-form\n            }\n        }\n    },\n\n    _onSubmit: function() { /* ... */ }\n});\n</code></pre>\n<p><strong>NB</strong> Если не указывать последний параметр метода <code>on</code> —\n<code>[handlerCtx]</code>, контекстом для выполнения функции-обработчика будет\nтот блок, в котором возникло БЭМ-событие (в примере выше это блок\n<code>submit</code>).</p>\n<p><strong>Удаление подписки</strong> на БЭМ-события выполняется автоматически при\nуничтожении экземпляра блока. Если требуется удалить подписку вручную\nв процессе работы блока, следует использовать метод экземпляра блока\n<code>un(event, [handler], [handlerCtx])</code>.</p>\n<h4 id=\"События-при-изменении-модификаторов\"><a href=\"#События-при-изменении-модификаторов\" class=\"anchor\"></a>События при изменении модификаторов</h4>\n<p>Для подписки на БЭМ-события при изменении модификатора блока или элемента используется метод экземпляра блока <code>on</code>. Метод принимает аргументами:</p>\n<ul>\n<li>объект, описывающий модификатор, на который производится подписка;</li>\n<li>функцию обратного вызова, выполняющуюся при установке соответствующего модификатора.</li>\n</ul>\n<p>Объект, описывающий модификатор, может содержать следующие зарезервированные свойства:</p>\n<ul>\n<li><code>modName</code> <code>{String}</code> – имя модификатора. Обязательное свойство.</li>\n<li><code>modVal</code> <code>{String}</code> – значение модификатора. Обязательное свойство. Со значением <code>*</code> производится\nподписка на установку модификатора в <strong>любое</strong> значение. Со значением <code>&#39;&#39;</code> – на <strong>удаление</strong> модификатора.\nПодробнее смотрите в разделе <a href=\"#mods-api-trigger\">триггеры на установку модификаторов</a>.</li>\n<li><code>elem</code> <code>{String}</code> – имя элемента (для модификаторов элементов).</li>\n</ul>\n<p><strong>Пример:</strong> В момент инициализации блока <code>monitor</code> выполнятся подписка на:</p>\n<ul>\n<li><p>установку модификатора <code>m1</code> в любое значение;</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;monitor&#39;, {\n  onSetMod: {\n      &#39;js&#39;: {\n          &#39;inited&#39;: function() {\n            block1.on({ modName : &#39;m1&#39;, modVal : &#39;*&#39; }, function() {});\n          }\n      }\n  },\n});\n</code></pre>\n</li>\n<li><p>установку модификатора <code>m1</code> в значение <code>v1</code>;</p>\n<pre><code class=\"lang-js\">block1.on({ modName : &#39;m1&#39;, modVal : &#39;v1&#39; }, function() {});\n</code></pre>\n</li>\n<li><p>удаление модификатора <code>m1</code>;</p>\n<pre><code class=\"lang-js\">block1.on({ modName : &#39;m1&#39;, modVal : &#39;&#39; }, function() {});\n</code></pre>\n</li>\n<li><p>удаление модификатора <code>m1</code> у элемента <code>e1</code>;</p>\n<pre><code class=\"lang-js\">block1.on({ elem : &#39;e1&#39;, modName : &#39;m1&#39;, modVal : &#39;&#39; }, function() {});\n</code></pre>\n</li>\n</ul>\n<p><strong>NB</strong> В целях оптимизации производительности БЭМ-события при изменении модификаторов генерируются только в случае, если для них есть подписчики.</p>\n<p><a name=\"bem-events-delegated\"></a></p>\n<h4 id=\"Делегирование-БЭМ-событий\"><a href=\"#Делегирование-БЭМ-событий\" class=\"anchor\"></a>Делегирование БЭМ-событий</h4>\n<p>Делегирование БЭМ-событий означает, что блок подписывается на\nопределенное БЭМ-событие <strong>всех экземпляров</strong> блока с заданным именем\n<strong>в пределах заданного контекста</strong>. Подписка на делегированные\nБЭМ-события выполняется с помощью статического метода <em>класса блока</em>\n<code>on([ctx], event, [data], handler, [handlerCtx])</code>.</p>\n<p>Параметры:</p>\n<ul>\n<li><code>{jQuery} [ctx]</code> — DOM-узел, в пределах которого отслеживаются\nБЭМ-события (контейнер). Если не указан, в качестве контейнера\nиспользуется весь документ.</li>\n<li><code>{String} event</code> — имя БЭМ-события.</li>\n<li><code>{Object} [data]</code> — произвольные данные, передаваемые функции-обработчику.</li>\n<li><code>{Function} handler</code> — функция-обработчик события.</li>\n<li><code>{Object} [handlerCtx]</code> — контекст функции-обработчика\nсобытия. Обычно в качестве контекста должен выступать тот экземпляр\nблока, который подписывается на БЭМ-событие, а не тот, в котором БЭМ-событие\nпроизошло.</li>\n</ul>\n<p><strong>Пример:</strong> При инициализации экземпляров блока <code>menu</code> выполняется\nподписка на БЭМ-событие <code>click</code> всех ссылок (экземпляров блока\n<code>link</code>) в пределах DOM-узла, к которому привязано меню\n(<code>this.domElem</code>). В качестве контекста функции-обработчика\nпередается экземпляр блока, в котором событие будет обрабатываться\n(<code>this</code>).\nПри <a href=\"#destruct\">уничтожении экземпляров блока</a> <code>menu</code> <strong>удаление подписки</strong> на делегированные\nБЭМ-события никогда не происходит автоматически. Всегда следует явно удалять подписку\nпри помощи статического метода блока <code>un([ctx], event, [handler], [handlerCtx])</code>.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;menu&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39; : function() {\n                BEMDOM.blocks[&#39;link&#39;].on( // подписка на БЭМ-событие\n                    this.domElem, // контейнер — DOM-узел экземпляра блока menu\n                    &#39;click&#39;, // БЭМ-событие\n                    this._onLinkClick, // обработчик\n                    this); // контекст обработчика — экземпляр блока menu\n            },\n\n            &#39;&#39; : function() {\n                BEMDOM.blocks[&#39;link&#39;].un( // удаление подписки на БЭМ-событие\n                    this.domElem,\n                    &#39;click&#39;,\n                    this._onLinkClick,\n                    this);\n            }\n        }\n    },\n\n    _onLinkClick : function(e) {\n        var clickedLink = e.target; // экземпляр блока &#39;link&#39;, на котором произошло БЭМ-событие &#39;click&#39;\n    }\n});\n</code></pre>\n<p><strong>NB</strong> Если не указывать параметр <code>[handlerCtx]</code> метода <code>on</code>,\nконтекстом для функции-обработчика будет тот блок, в котором\n<em>возникло</em> БЭМ-событие.</p>\n<p><strong>Удаление подписки</strong> на делегированные БЭМ-события никогда не\nпроисходит автоматически. Всегда следует явно удалять подписку при\nпомощи статического метода блока <code>un([ctx], event, [handler], [handlerCtx])</code>.</p>\n<p>Полное описание API для работы с БЭМ-событиями содержится в исходном\nкоде модулей <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/i-bem.vanilla.js\">i-bem</a> и <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><a name=\"api\"></a></p>\n<h3 id=\"Объект-БЭМ-события\"><a href=\"#Объект-БЭМ-события\" class=\"anchor\"></a>Объект БЭМ-события</h3>\n<p>В качестве параметра функции-обработчику передается объект,\nописывающий БЭМ-событие. Объект БЭМ-события <code>events.Event</code> определен\nв <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуле\n<a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/events/events.vanilla.js\"><code>events</code></a> библиотеки bem-core. Содержит поля:</p>\n<ul>\n<li><code>target</code> — экземпляр блока, в котором произошло БЭМ-событие.</li>\n<li><code>data</code> — произвольные дополнительные данные. Передается в качестве\nпараметра <code>data</code> в момент подписки на БЭМ-событие или при создании\nБЭМ-события блоком.</li>\n<li><code>result</code> — последнее значение, возвращенное обработчиком данного\nсобытия. Аналогично <a href=\"https://api.jquery.com/event.result/\">jQuery.Event.result</a>.</li>\n<li><code>type</code> — тип события. Аналогично\n<a href=\"https://api.jquery.com/event.type/\">jQuery.Event.type</a>.</li>\n</ul>\n<p><a name=\"states\"></a></p>\n<h2 id=\"Состояния-блока\"><a href=\"#Состояния-блока\" class=\"anchor\"></a>Состояния блока</h2>\n<p>Проектируя динамический блок в стиле БЭМ, нужно представить всю логику\nизменений, происходящих в нем, как набор <strong>состояний</strong> блока. Тогда\nповедение блока определяется <strong>триггерами</strong> — callback-функциями, которые\nвыполняются при переходе блока из одного состояния в другое.</p>\n<p>Такой подход позволяет писать код блока в декларативном стиле как\nнабор утверждений вида: <code>описание состояния</code> — <code>действия, выполняемые\nпри переходе в данное состояние</code>.</p>\n<p><a name=\"modifiers\"></a></p>\n<h3 id=\"Модификаторы\"><a href=\"#Модификаторы\" class=\"anchor\"></a>Модификаторы</h3>\n<p>Согласно БЭМ-методологии, состояние блока и его элементов описывается\n<strong>модификаторами</strong>.</p>\n<p>Модификатор описывает, в каком из возможных состояний находится\nблок. Модификатор представляет собой пару строк: <strong>имя</strong> и\n<strong>значение</strong>. Список допустимых значений модификатора описывает\nнабор состояний блока. Например, для описания размеров блока\nможно использовать модификатор <code>size</code> с допустимыми значениями <code>s</code>, <code>m</code> и\n<code>l</code>.</p>\n<p><strong>Простой модификатор</strong> — частный случай, когда важно только наличие\nили отсутствие данного модификатора у блока, а его значение\nнесущественно. Например, модификатор описывающий состояние «отключен»:\n<code>disabled</code>. В <code>i-bem.js</code> представлены как модификаторы с булевым\nзначением. При выставлении модификатора с неуказанным значением\n<code>i-bem.js</code> автоматически присваивает ему значение <code>true</code>.</p>\n<p>Каждому блоку можно установить один или несколько модификаторов. Блок\nможет не иметь модификаторов. Список допустимых модификаторов и их\nзначений определяет разработчик блока.</p>\n<p>В <code>i-bem.js</code> модификаторы устанавливаются при\n<a href=\"#init\">инициализации экземпляра блока</a> (если модификаторы и их\nзначения указаны в атрибуте <code>class</code> соответствующего HTML-элемента).</p>\n<p><strong>NB</strong> Если модификаторы блока указаны в HTML-элементе, при\nинициализации блока триггеры на установку данных модификаторов <em>не\nвыполняются</em>. Экземпляр блока в этом случае получает начальное\nсостояние, а не меняет его.</p>\n<p>Модификаторы могут добавляться, удаляться и менять значения:</p>\n<ul>\n<li>в ходе выполнения кода блока (например, в качестве реакции на <a href=\"#dom-events\">DOM-события</a>);</li>\n<li>по запросу из другого блока (см. раздел <a href=\"#ibc\">Взаимодействие блоков</a>).</li>\n</ul>\n<p>При добавлении, удалении и изменении значений модификаторов выполняются триггеры.</p>\n<p><a name=\"mods-api\"></a></p>\n<h4 id=\"Управление-модификаторами\"><a href=\"#Управление-модификаторами\" class=\"anchor\"></a>Управление модификаторами</h4>\n<p>Экземпляр блока предоставляет методы для установки, проверки значений\nи удаления модификаторов данного экземпляра.</p>\n<p><strong>NB</strong> Модификаторы нельзя устанавливать, напрямую меняя CSS-классы на\nсоответствующем DOM-узле. Для изменения значений модификаторов следует\nиспользовать описанный ниже API, предоставляемый <code>i-bem.js</code>.</p>\n<p><strong>Пример:</strong> Экземпляр блока <code>square</code> может по клику на DOM-элементе\nблока переключаться между значениями <code>green</code> и <code>red</code> модификатора\n<code>color</code>, если не выставлен модификатор <code>disabled</code>:</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;square&#39;, {\n    onSquareClick: function(e) {\n        if(!this.hasMod(&#39;disabled&#39;)) {\n            this.toggleMod(&#39;color&#39;, &#39;green&#39;, &#39;red&#39;);\n        }\n    }\n});\n</code></pre>\n<p>Эти же методы используются для управления модификаторами элементов\nблока. Для этого в качестве первого (необязательного) параметра\nуказывается ссылка на объект элемента (а не имя элемента).</p>\n<p><strong>Пример:</strong> Блок <code>searchbox</code> по клику может выставлять своему элементу\n<code>input</code> простой модификатор <code>clean</code> (подразумеваемое значение —\n<code>true</code>):</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;searchbox&#39;, {\n    _onClick: function() {\n        this.setMod(this.elem(&#39;input&#39;), &#39;clean&#39;);\n    }\n});\n</code></pre>\n<p><strong>NB</strong> При управлении модификаторами элементов в качестве первого\nпараметра необходимо указывать ссылку на <strong>DOM-узел элемента</strong>, а не\nимя элемента. В противном случае возникла бы неоднозначность:\nимеется в виду установка блоку <em>модификатора</em> <code>input</code> со значением\n<code>clean</code> или установка элементу <code>input</code> <em>простого модификатора</em> <code>clean</code>.</p>\n<p>Полное описание API для управления модификаторами приведено в\nисходном коде модулей <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/i-bem.vanilla.js\">i-bem</a> и <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><a name=\"mods-api-trigger\"></a></p>\n<h3 id=\"Триггеры-на-установку-модификаторов\"><a href=\"#Триггеры-на-установку-модификаторов\" class=\"anchor\"></a>Триггеры на установку модификаторов</h3>\n<p>Выполнение триггеров на установку модификаторов разбито на две фазы:</p>\n<ol>\n<li><strong>До установки модификатора</strong>. Эта фаза зарезервирована для\nвозможности <strong>отменить</strong> установку модификатора. Если хотя бы один\nиз триггеров, выполняемых в этой фазе, вернет <code>false</code>,\nустановки модификатора не произойдет.</li>\n<li><strong>После установки модификатора</strong>. Триггеры, выполняемые в этой\nфазе, уже не могут отменить установку модификаторов.</li>\n</ol>\n<p>Триггеры могут быть привязаны к следующим типам изменений значений модификаторов:</p>\n<ol>\n<li>установка <em>любого</em> модификатора в <em>любое</em> значение;</li>\n<li>установка <em>конкретного</em> модификатора <code>modName</code> в <em>любое</em> значение (в том числе\nустановка простого модификатора в значение <code>true</code>);</li>\n<li>установка <em>конкретного</em> модификатора <code>modName</code> в <em>конкретное</em> значение <code>modVal</code>;</li>\n<li>установка модификатора в значение <code>&#39;&#39;</code> (пустая строка), что\nэквивалентно удалению модификатора или установке простого\nмодификатора в значение <code>false</code>.</li>\n</ol>\n<p>При установке модификатора <code>modName</code> в значение <code>modVal</code> триггеры\nкаждой фазы (если они определены) вызываются в том порядке, в котором они\nперечислены в приведенном выше списке событий (от общего к частному).</p>\n<p>Таким образом, при определении триггера пользователь указывает:</p>\n<ul>\n<li>фазу выполнения (до или после установки модификатора);</li>\n<li>тип события (имя и устанавливаемое значение модификатора).</li>\n</ul>\n<p><a name=\"mods-api-trigger-phase\"></a></p>\n<h4 id=\"Фазы-выполнения\"><a href=\"#Фазы-выполнения\" class=\"anchor\"></a>Фазы выполнения</h4>\n<p>Наличие дополнительной фазы, предшествующей установке модификатора, позволяет\nпроизвести некоторые проверки без риска повлиять на логику, связанную с установкой модификатора. Например, если существуют взаимоисключающие модификаторы, перед установкой одного из них логично проверить не установлен ли другой.</p>\n<p>В блоке <code>checkbox-group</code> библиотеки <code>bem-components</code> перед установкой модификатора <code>focused</code> производится проверка на наличие модификатора <code>disabled</code>:</p>\n<pre><code class=\"lang-js\">provide(BEMDOM.decl(this.name, /** @lends checkbox-group.prototype */{\n    beforeSetMod : {\n        &#39;focused&#39; : {\n            &#39;true&#39; : function() {\n                return !this.hasMod(&#39;disabled&#39;);\n            }\n        }\n    },\n\n    onSetMod : {\n        &#39;focused&#39; : { /* ... */}\n    }\n}));\n</code></pre>\n<p>Если триггер для фазы, предшествующей установке (<code>beforeSetMod</code>), возвращает <code>false</code>, установка модификатора не производится.</p>\n<p><a name=\"mods-api-trigger-decl\"></a></p>\n<h4 id=\"Декларация-триггеров\"><a href=\"#Декларация-триггеров\" class=\"anchor\"></a>Декларация триггеров</h4>\n<p>Триггеры, выполняемые при установке модификаторов, описываются в\nдекларации блока. Для этого в хэше методов экземпляра блока\nзарезервированы свойства:</p>\n<ul>\n<li><code>beforeSetMod</code> — триггеры, вызываемые до установки\n<strong>модификаторов блока</strong>;</li>\n<li><code>beforeElemSetMod</code> — триггеры, вызываемые до установки\n<strong>модификаторов элементов</strong>;</li>\n<li><code>onSetMod</code> — триггеры, вызываемые после установки\n<strong>модификаторов блока</strong>;</li>\n<li><code>onElemSetMod</code> — триггеры, вызываемые после установки\n<strong>модификаторов элементов</strong> блока.</li>\n</ul>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nprovide(BEMDOM.decl(/* селектор блока */,\n    {\n        /* методы экземпляра */\n        beforeSetMod: { /* триггеры до установки модификаторов блока*/}\n        beforeElemSetMod: { /* триггеры до установки модификаторов элементов*/}\n        onSetMod: { /* триггеры после установки модификаторов блока */ }\n        onElemSetMod: { /* триггеры после установки модификаторов элементов */ }\n    },\n    {\n        /* статические методы */\n    }\n));\n});\n</code></pre>\n<p>Значение свойств <code>beforeSetMod</code> и <code>onSetMod</code> — хэш, связывающий\nизменения модификаторов с триггерами. В качестве параметров триггерам\nпередаются:</p>\n<ul>\n<li>имя модификатора;</li>\n<li>выставляемое значение модификатора;</li>\n<li>предшествующее (для <code>beforeElemSetMod</code>) или текущее (для <code>onElemSetMod</code>) значение модификатора.</li>\n</ul>\n<pre><code class=\"lang-js\">{\n    &#39;mod1&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // установка mod1 в любое значение\n    &#39;mod2&#39;: {\n        &#39;val1&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 в значение val1\n        &#39;val2&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 в значение val2\n        &#39;&#39;: function(modName, modVal, prevModVal) { /* ... */ } // триггер на удаление модификатора mod2\n    &#39;mod3&#39;: {\n        &#39;true&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку простого модификатора mod3\n        &#39;&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // триггер на удаление простого модификатора mod3\n    },\n    &#39;*&#39;: function(modName, modVal, prevModVal) { /* ... */ } // триггер на установку любого модификатора в любое значение\n}\n</code></pre>\n<p>Для триггера на установку любого модификатора блока в любое значение\nсуществует сокращенная форма записи:</p>\n<pre><code class=\"lang-js\">beforeSetMod: function(modName, modVal, prevModVal) { /* ... */ }\nonSetMod: function(modName, modVal, prevModVal) { /* ... */ }\n</code></pre>\n<p>Для свойств <code>beforeElemSetMod</code> и <code>onElemSetMod</code> в хэш значений\nдобавляется дополнительный уровень вложенности — <strong>элемент</strong>. В этих\nсвойствах описываются триггеры на установку модификаторов элементов.\nВ качестве параметров триггеру передаются:</p>\n<ul>\n<li>имя элемента;</li>\n<li>имя модификатора;</li>\n<li>выставляемое значение модификатора;</li>\n<li>предшествующее (для <code>beforeElemSetMod</code>) или текущее (для <code>onElemSetMod</code>) значение модификатора.</li>\n</ul>\n<pre><code class=\"lang-js\">{\n    &#39;elem1&#39;: {\n        &#39;mod1&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod1 элемента elem 1 в любое значение\n        &#39;mod2&#39;: {\n            &#39;val1&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 элемента elem1 в значение val1\n            &#39;val2&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ } // триггер на установку mod2 элемента elem1 в значение val2\n            }\n        },\n    &#39;elem2&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ } // триггер на установку любого модификатора элемента elem2 в любое значение\n}\n</code></pre>\n<p>Сокращенная запись для триггера на установку любого модификатора элемента <code>elem1</code> в любое значение:</p>\n<pre><code class=\"lang-js\">beforeElemSetMod: { &#39;elem1&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ } }\nonElemSetMod: { &#39;elem1&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ } }\n</code></pre>\n<h4 id=\"Примеры-триггеров\"><a href=\"#Примеры-триггеров\" class=\"anchor\"></a>Примеры триггеров</h4>\n<p>Типовая задача триггеров, вызываемых после установки модификатора или\nизменения его значения (свойство <code>onSetMod</code>) — выполнить операции над\nDOM-узлом блока, необходимые для перехода в новое состояние.</p>\n<p><strong>Пример:</strong> Экземпляр блока <code>input</code> при установке простого\nмодификатора <code>focused</code> (в значение <code>true</code>) очищает поле ввода —\nзаменяет пустой строкой текст DOM-узла блока.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;input&#39;, {\n    onSetMod : {\n        &#39;focused&#39; : {\n            &#39;true&#39; : function() {\n                this.domElem.val(&#39;&#39;); // очистить поле ввода\n            }\n        }\n    }\n});\n</code></pre>\n<p>Триггеры, выполняемые перед установкой модификатора (свойство\n<code>beforeSetMod</code>), необходимы для проверки текущего состояния экземпляра\nблока и возможности отменить переход в другое состояние.</p>\n<p><strong>Пример:</strong> Экземпляр блока <code>input</code> перед установкой простого\nмодификатора <code>focused</code> проверяет, не выставлен ли у него модификатор\n<code>disabled</code>. Если <code>disabled</code> выставлен, будет возвращено значение <code>false</code> и\nустановки модификатора <code>focused</code> не произойдет.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;input&#39;, {\n    beforeSetMod : {\n        &#39;focused&#39; : {\n            &#39;true&#39; : function() {\n                return !this.hasMod(&#39;disabled&#39;); // вернет false, если disabled\n            }\n        }\n    }\n});\n</code></pre>\n<p><a name=\"init\"></a></p>\n<h3 id=\"Инициализация\"><a href=\"#Инициализация\" class=\"anchor\"></a>Инициализация</h3>\n<p>Инициализация блока — это создание в памяти браузера JS-объекта,\nсоответствующего экземпляру блока. Инициализация экземпляров блоков выполняется\nметодом <code>init()</code> модуля <code>i-bem__dom</code> на заданном фрагменте DOM-дерева.</p>\n<p>Каждому экземпляру блока можно приписать три состояния:</p>\n<ul>\n<li>экземпляр блока не инициализирован (JS-объект не создан);</li>\n<li>экземпляр блока инициализирован (JS-объект создан в памяти браузера);</li>\n<li>экземпляр блока уничтожен (удалены все ссылки на JS-объект экземпляра\nблока, и он может быть удален сборщиком мусора).</li>\n</ul>\n<p>В <code>i-bem.js</code> эти состояния экземпляра блока описываются с помощью служебного\nмодификатора <code>js</code>.</p>\n<ul>\n<li>До инициализации экземпляр блока не имеет модификатора <code>js</code>.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem&quot; data-bem=&quot;...&quot; &gt;...&lt;/div&gt;\n</code></pre>\n<ul>\n<li>В момент инициализации экземпляру блока устанавливается модификатор\n<code>js</code> в значении <code>inited</code>.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem my-block_js_inited&quot; data-bem=&quot;...&quot;&gt;...&lt;/div&gt;\n</code></pre>\n<ul>\n<li>Если в процессе работы удаляется фрагмент DOM-дерева (при помощи\nметода <code>destruct</code> модуля <code>i-bem__dom</code>), то вместе с\nним удаляются экземпляры блоков, все HTML-элементы которых находятся\nв этом фрагменте. Перед удалением экземпляра блока модификатор <code>js</code>\nудаляется.</li>\n</ul>\n<p><strong>NB</strong> Если экземпляр блока был\n<a href=\"#distrib-block\">привязан к нескольким HTML-элементам</a>, блок будет существовать,\nпока в HTML-дереве сохраняется хотя бы один элемент, с которым он\nсвязан.</p>\n<p>Если на HTML-элементе размещено несколько экземпляров других блоков, то\nинициализация одного из них (появление модификатора <code>my-block_js_inited</code>)\nне влияет на инициализацию остальных.</p>\n<p><strong>Пример:</strong> На HTML-элементе инициализирован только экземпляр блока <code>my-block</code>.\nЭкземпляр блока <code>lazy-block</code> не инициализирован:</p>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block my-block_js_inited lazy-block i-bem&quot;\n    data-bem=&#39;{ &quot;my-block&quot;: {}, &quot;lazy-block&quot;: {} }&#39; &gt;\n    ...\n&lt;/div&gt;\n</code></pre>\n<p><strong>NB</strong> Наличие модификатора <code>js</code> позволяет писать разные CSS-стили для\nблока в зависимости от того, инициализирован он или нет.</p>\n<h4 id=\"Конструктор-экземпляра-блока\"><a href=\"#Конструктор-экземпляра-блока\" class=\"anchor\"></a>Конструктор экземпляра блока</h4>\n<p>На изменение значений модификатора <code>js</code> можно назначать триггеры так\nже, как и для любых других модификаторов блока.</p>\n<p>Триггер на установку модификатора <code>js</code> в значение <code>inited</code> выполняется\nпри создании блока. Этот триггер можно считать <strong>конструктором\nэкземпляра блока</strong>:</p>\n<pre><code class=\"lang-js\">onSetMod: {\n    &#39;js&#39;: {\n        &#39;inited&#39;: function() { /* ... */ } // конструктор экземпляра блока\n    }\n}\n</code></pre>\n<p><a name=\"destruct\"></a></p>\n<h4 id=\"Деструктор-экземпляра-блока\"><a href=\"#Деструктор-экземпляра-блока\" class=\"anchor\"></a>Деструктор экземпляра блока</h4>\n<p>Моментом удаления блока является момент уничтожения всех ссылок на\nJS-объект блока, после чего он может быть удален из памяти браузера\nсборщиком мусора.</p>\n<p>Триггер на удаление модификатора <code>js</code> (установку в пустое значение\n<code>&#39;&#39;</code>) выполняется перед удалением блока. Такой триггер можно считать\n<strong>деструктором экземпляра блока</strong>.</p>\n<pre><code class=\"lang-js\">onSetMod: {\n    &#39;js&#39;: {\n        &#39;&#39;: function() { /* ... */ } // деструктор экземпляра блока\n    }\n}\n</code></pre>\n<p><a name=\"init-wave\"></a></p>\n<h4 id=\"Волны-инициализации\"><a href=\"#Волны-инициализации\" class=\"anchor\"></a>Волны инициализации</h4>\n<p>Инициализация экземпляров блоков, присутствующих на странице, не\nобязательно происходит одновременно. Блоки могут добавляться в ходе\nработы (например, за счет динамической генерации HTML на основе\nданных, полученных от сервера) или инициализироваться только по запросу.\nИнициализация очередной группы блоков называется <strong>волной\nинициализации</strong>.</p>\n<p>Новая волна инициализации создается в следующих случаях:</p>\n<ul>\n<li><a href=\"#init-auto\">Автоматическая инициализация всех блоков в документе по событию <code>domReady</code></a>;</li>\n<li><a href=\"#init-live\">Инициализация блока по событию на DOM-узле</a> (ленивая инициализация);</li>\n<li><a href=\"#init-ajax\">Явный вызов инициализации блоков на указанном фрагменте DOM-дерева</a>.</li>\n</ul>\n<p><a name=\"init-auto\"></a></p>\n<h4 id=\"Автоматическая-инициализация\"><a href=\"#Автоматическая-инициализация\" class=\"anchor\"></a>Автоматическая инициализация</h4>\n<p>Фреймворк <em>i-bem.js</em> позволяет автоматически инициализировать все\nблоки, имеющие DOM-представление (привязанные к DOM-элементам на\nстранице) в момент наступления DOM-события <code>domReady</code>. Чтобы включить\nавтоматическую инициализацию, необходимо задекларировать на странице\nблок <code>i-bem</code> с модификатором <code>init</code> в значении <code>auto</code>.</p>\n<p><strong>Пример файла</strong> <code>.deps.js</code>:</p>\n<!-- bem-example: desktop.examples/i-bem/6BCJYSf_Nz1N5D2VXV76OeXM0kY -->\n\n<p>При автоматической инициализации в памяти браузера будут созданы\nJS-объекты для всех DOM-узлов, в атрибуте <code>class</code> которых указан\n<code>i-bem</code>. Инициализация выполняется функцией <code>init</code> модуля\n<a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><a name=\"init-live\"></a></p>\n<h4 id=\"Инициализация-по-событию--ленивая-инициализация-\"><a href=\"#Инициализация-по-событию--ленивая-инициализация-\" class=\"anchor\"></a>Инициализация по событию (ленивая инициализация)</h4>\n<p>Если на странице размещено много экземпляров блоков, автоматическая инициализация\nвсех блоков в момент загрузки страницы нежелательна, так как она\nувеличивает время загрузки и объем памяти, затрачиваемой браузером.</p>\n<p>В этом случае имеет смысл инициализировать JS-объекты\nтолько в тот момент, когда их функциональность потребуется\nпользователю: например, по клику на блоке. Такая инициализация\nназывается <strong>ленивой</strong> или <strong>live-инициализацией</strong>.</p>\n<p>Для описания условий ленивой инициализации зарезервировано свойство\n<code>live</code> в разделе статических методов декларации блока. Свойство <code>live</code>\nможет принимать два типа значений:</p>\n<ul>\n<li><code>Boolean</code><br/>\nИмеет смысл только значение <code>true</code>: экземпляры\nблоков данного класса будут инициализированы только при попытке\nполучить соответствующий экземпляр (см. раздел <a href=\"#ibc\">Взаимодействие блоков</a>).</li>\n</ul>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;my-block&#39;,\n    {\n        onSetMod: {\n            &#39;js&#39;: {\n                &#39;inited&#39;: function() { /* ... */ } // этот код будет выполняться\n                                                   // при первом обращении к экземпляру блока\n            }\n        }\n    },\n    { live: &#39;true&#39; } // статические методы и свойства\n);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<ul>\n<li><code>Function</code><br/>\nФункция, которую нужно выполнить при попытке\nинициализации <strong>первого экземпляра</strong> блока заданного класса. Если\nфункция возвращает значение <code>false</code>, экземпляры блоков будут\nинициализироваться <a href=\"#init-auto\">автоматически</a>.</li>\n</ul>\n<p>Если необходимо инициализировать экземпляры блока по наступлению\nDOM- или БЭМ-событий, в теле функции следует выполнить подписку на\n<a href=\"#delegated-events\">делегированные события</a>. Возможна инициализация\nпо:</p>\n<ul>\n<li>DOM-событию на DOM-узле блока и вложенных элементах;</li>\n<li>БЭМ-событию на вложенных блоках.</li>\n</ul>\n<p><strong>Пример:</strong> Экземпляры блока <code>my-block</code> будут инициализироваться по\nDOM-событию <code>click</code> на DOM-узле блока. По каждому DOM-событию\n<code>click</code> будет вызываться метод экземпляра блока <code>_onClick</code>:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;my-block&#39;,\n    {\n        onSetMod: {\n            &#39;js&#39;: {\n                &#39;inited&#39;: function() { /* ... */ } // выполняется при первом DOM-событии &#39;click&#39;\n            }\n        },\n\n        _onClick: function() { /* ... */ } // выполняется при каждом DOM-событии &#39;click&#39;\n    },\n    {\n        live: function() {\n            this.liveBindTo(&#39;click&#39;, function() {\n                this._onClick(); // в момент клика будет создан экземпляр блока и вызван его метод _onClick\n            });\n        }\n    }\n);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p>Если необходимо воспользоваться делегированными событиями в блоке,\nно инициализацию блока нельзя отложить (экземпляры блока должны быть\nинициализированы немедленно после загрузки страницы), следует вернуть\nзначение <code>false</code>:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;my-block&#39;,\n    {\n        onSetMod: {\n            &#39;js&#39;: {\n                &#39;inited&#39;: function() { /* ... */ } // будет выполнена по наступлении domReady\n            }\n        },\n\n        _onClick: function() { /* ... */ } // будет выполняться каждый\n                                           // раз при наступлении DOM-события &#39;click&#39;\n    },\n    {\n        live: function() {\n            this.liveBindTo(&#39;click&#39;, function() { this._onClick() });\n            return false; // экземпляры блоков будут инициализированы автоматически\n        }\n    }\n);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p>Полный список хелперов для подписки на делегированные события\nприведен в исходном коде модуля <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><strong>NB</strong> Свойство <code>live</code> задает ленивую инициализацию для <em>всех\nэкземпляров</em> соответствующего блока, так как технически относится\nк статическим методам класса блока. Поэтому даже если свойство <code>live</code>\nзадекларировано для блока с определенным значением модификатора, оно\nбудет применено ко всем блокам данного класса вне зависимости от\nмодификаторов.</p>\n<p><a name=\"init-ajax\"></a></p>\n<h4 id=\"Инициализация-блоков-на-фрагменте-DOM-дерева\"><a href=\"#Инициализация-блоков-на-фрагменте-DOM-дерева\" class=\"anchor\"></a>Инициализация блоков на фрагменте DOM-дерева</h4>\n<p>Процедура инициализации JS-объектов может быть вызвана\nявно для указанного фрагмента DOM-дерева. Часто такая необходимость\nвозникает при разработке AJAX-интерфейсов, когда нужно <a href=\"#dynamic\">динамически встроить</a> в страницу новые экземпляры блоков либо обновить существующие.</p>\n<p>В <code>i-bem.js</code> следующие функции выполняют динамическую инициализацию блоков:</p>\n<ul>\n<li>Инициализация/уничтожение блоков на указанном фрагменте DOM-дерева\n(<code>init</code>);</li>\n<li>Добавление/замена фрагмента DOM-дерева с одновременной\nинициализацией блоков на обновленном фрагменте (<code>update</code>, <code>replace</code>,\n<code>append</code>, <code>prepend</code>, <code>before</code>, <code>after</code>).</li>\n</ul>\n<p><a name=\"destruct-dom\"></a></p>\n<h4 id=\"Удаление-блоков-на-фрагменте-DOM-дерева\"><a href=\"#Удаление-блоков-на-фрагменте-DOM-дерева\" class=\"anchor\"></a>Удаление блоков на фрагменте DOM-дерева</h4>\n<p>Как и процедура инициализации блоков, процедура удаления может быть вызвана явно для заданного фрагмента DOM-дерева. Например, при разработке AJAX-интерфейсов, для динамического удаления экземпляров блоков со страницы.</p>\n<p>Явный вызов процедуры гарантирует корректное удаление:</p>\n<ul>\n<li>вложенных DOM-узлов;</li>\n<li>блоков, примешанных к другим блокам.</li>\n</ul>\n<p>Для явного вызова процедуры удаления служит статичесикий метод <code>destruct</code>, реализованный в элементе <code>dom</code> блока <code>i-bem</code> библиотеки <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js#L970\">bem-core</a>.</p>\n<p>Метод принимает два аргумента:</p>\n<ul>\n<li><code>ctx</code> <code>{jQuery}</code> – корневой DOM-элемент. Удаляется со всем вложенными DOM-узлами.</li>\n<li><code>excludeSelf</code> <code>Boolean</code> – не удалять корневой DOM-элемент если значение <code>true</code>. По умолчанию <code>false</code>.</li>\n</ul>\n<p>Например, в блоке <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/popup/_target/popup_target_anchor.js\">popup_target_anchor</a> библиотеки <code>bem-components</code> <code>destruct</code> используется приватным методом <code>_onPopupAnchorDestruct</code> для удаления текущего DOM-элемента при удалении якоря попапа:</p>\n<pre><code class=\"lang-js\">_onPopupAnchorDestruct : function() {\n    BEMDOM.destruct(this.domElem);\n}\n</code></pre>\n<p><a name=\"init-bem\"></a></p>\n<h4 id=\"Инициализация-и-удаление-блоков-без-DOM-представления\"><a href=\"#Инициализация-и-удаление-блоков-без-DOM-представления\" class=\"anchor\"></a>Инициализация и удаление блоков без DOM-представления</h4>\n<p>Чтобы создать JS-объект для блока, не имеющего DOM-представления (не\nпривязанного к HTML-элементу), необходимо вызвать метод <code>create</code>,\nкоторый вернет экземпляр блока указанного класса.</p>\n<p><strong>Пример:</strong> В момент инициализации экземпляра блока с DOM-представлением\n<code>container</code> создается экземпляр блока без DOM-представления <code>router</code>. Экземпляр блока\n<code>container</code> затем будет обращаться к созданному им экземпляру блока\n<code>router</code> при вызове метода <code>onRequest</code>:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, &#39;i-bem&#39;, function(provide, BEM, BEMDOM) {\n\nBEMDOM.decl(&#39;container&#39;, {\n    onSetMod: {\n        &#39;js&#39;: {\n            &#39;inited&#39;: function() {\n                this._router = BEM.create(&#39;router&#39;); // создание экземпляра блока router\n            }\n        }\n    },\n\n    onRequest: function() {\n        this._router.route(/* ... */) // вызов метода экземпляра блока router\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p><strong>Пример:</strong> Блок без DOM-представления реализован в виде простого\n<a href=\"https://github.com/ymaps/modules\">ymaps-модуля</a>, без использования модуля <code>i-bem</code>. Такой блок\nиспользуется как обычный ymaps-модуль (нет необходимости создавать\nэкземпляр блока):</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, &#39;router&#39;, function(provide, BEMDOM, router) {\n\nBEMDOM.decl(&#39;container&#39;, {\n    onRequest: function() {\n        router.route(/* ... */); // вызов метода блока router\n    }\n});\n\nprovide(BEMDOM, router);\n\n});\n</code></pre>\n<p><strong>Удаление</strong> экземпляров блоков без DOM-представления не может быть\nвыполнено автоматически и является ответственностью\nразработчика. Блоки без DOM-представления представляют собой обычные\nJS-объекты и удаляются в момент удаления всех ссылок на объект блока.</p>\n<p><strong>Пример:</strong> При удалении экземпляра блока <code>container</code> удаляется созданный им в\nпроцессе работы экземпляр блока без DOM-представления <code>router</code>.</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, &#39;i-bem&#39;, function(provide, BEM, BEMDOM) {\n\nBEMDOM.decl(&#39;container&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;&#39; : function() {\n                delete this._router; // удаление экземпляра блока router\n            }\n        }\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p><a name=\"ibc\"></a></p>\n<h2 id=\"Взаимодействие-блоков\"><a href=\"#Взаимодействие-блоков\" class=\"anchor\"></a>Взаимодействие блоков</h2>\n<p>В рамках БЭМ-методологии блоки следует разрабатывать так,\nчтобы по возможности исключить зависимость состояний одних\nблоков от других. Однако на практике идеал полной независимости блоков\nнедостижим.</p>\n<p>Взаимодействие блоков может быть реализовано двумя способами:</p>\n<ul>\n<li>с помощью подписки на <a href=\"#bem-events\">БЭМ-события</a> других экземпляров\nблоков или подписки на <a href=\"#bem-events-delegated\">делегированные БЭМ-события</a>;</li>\n<li>с помощью непосредственного вызова методов других экземпляров\nблоков или статических методов класса другого блока.</li>\n</ul>\n<p><strong>NB</strong> Не используйте <a href=\"#dom-events\">DOM-события</a> для\nорганизации взаимодействия между блоками. DOM-события предназначены\nтолько для реализации внутренних процедур блока.</p>\n<p>Для реализации взаимодействия блоков <code>i-bem.js</code> предоставляет API:</p>\n<ul>\n<li><a href=\"#api-find\">Поиск экземпляров блоков в DOM-дереве</a>;</li>\n<li><a href=\"#api-nodom\">Доступ к экземплярам блоков без DOM-представления</a>;</li>\n<li><a href=\"#api-calss\">Доступ к классам блоков</a>.</li>\n</ul>\n<p><a name=\"api-find\"></a></p>\n<h3 id=\"Поиск-экземпляров-блоков-в-DOM-дереве\"><a href=\"#Поиск-экземпляров-блоков-в-DOM-дереве\" class=\"anchor\"></a>Поиск экземпляров блоков в DOM-дереве</h3>\n<p>Обращение к другому блоку в <code>i-bem.js</code> выполняется из текущего блока,\nразмещенного на определенном узле DOM-дерева. Поиск других блоков в\nDOM-дереве может вестись по трем направлениям (осям) относительно\nDOM-узла текущего блока:</p>\n<ul>\n<li><strong>Внутри блока</strong> — на DOM-узлах, вложенных в DOM-узел текущего блока.</li>\n<li><strong>Снаружи блока</strong> — на DOM-узлах, потомком которых является DOM-узел\nтекущего блока. Необходимость в таком поиске может свидетельствовать\nо неудачной архитектуре интерфейса.</li>\n<li><strong>На себе</strong> — на том же DOM-узле, на котором размещен текущий\nблок. Это актуально в случае <a href=\"#html-mixes\">размещения нескольких JS-блоков на одном DOM-узле</a> (микс).</li>\n</ul>\n<p><strong>Пример</strong>: При переключении модификатора <code>disabled</code> экземпляр блока\n<code>attach</code> находит вложенный в него блок <code>button</code> и переключает его\nмодификатор <code>disabled</code> в то же значение, которое получил сам:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;attach&#39;, {\n    onSetMod: {\n        &#39;disabled&#39;: function(modName, modVal) {\n            this.findBlockInside(&#39;button&#39;).setMod(modName, modVal);\n        }\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p>Полный список методов для поиска блоков приведен\nв исходном коде модуля <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><strong>NB</strong> Не используйте jQuery-селекторы для поиска блоков и элементов.\n<code>i-bem.js</code> предоставляет высокоуровневое API для доступа к DOM-узлам\nблоков и элементов. Обращение к DOM-дереву в обход этого API делает\nкод менее устойчивым к изменениям БЭМ-библиотек и может привести к\nвозникновению сложно обнаруживаемых ошибок.</p>\n<p><a name=\"api-nodom\"></a></p>\n<h3 id=\"Доступ-к-экземплярам-блоков-без-DOM-представления\"><a href=\"#Доступ-к-экземплярам-блоков-без-DOM-представления\" class=\"anchor\"></a>Доступ к экземплярам блоков без DOM-представления</h3>\n<p>При создании экземпляра блока без DOM-представления необходимо\nпозаботиться о том, чтобы ссылка на этот экземпляр была доступна\nблокам, которым потребуется взаимодействовать с ним. Подробности и\nпример см. в разделе <a href=\"#init-bem\">Инициализация и удаление блоков без DOM-представления</a>.</p>\n<p><a name=\"api-class\"></a></p>\n<h3 id=\"Доступ-к-классам-блоков\"><a href=\"#Доступ-к-классам-блоков\" class=\"anchor\"></a>Доступ к классам блоков</h3>\n<p>JS-компоненты, соответствующие всем блокам («классы» блоков), хранятся\nв структуре данных <code>BEM.blocks</code>. Классы блоков,\n<a href=\"#i-blocks\">не привязанных к DOM-дереву</a>, также размещены в этой\nструктуре данных. При необходимости доступа к таким блокам следует\nиспользовать конструкцию:</p>\n<pre><code class=\"lang-js\">BEM.blocks[&#39;name&#39;]\n</code></pre>\n<p>где <code>name</code> — имя блока.</p>\n<p>Доступ к классам блоков необходим для решения двух основных задач:</p>\n<ul>\n<li><a href=\"#bem-events-delegated\">делегирование БЭМ-событий</a>;</li>\n<li>вызов статического метода класса.</li>\n</ul>\n<p><strong>Пример:</strong> Вызов статического метода <code>close</code> блока <code>popup</code> — закрыть\nвсе попапы на странице:</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;switcher&#39;, {\n    onSetMod : {\n        &#39;popup&#39; : {\n            &#39;disabled&#39; : function() {\n                BEM.blocks[&#39;popup&#39;].close();\n            }\n        }\n    }\n});\n</code></pre>\n<p><a name=\"docs\"></a></p>\n<h2 id=\"Что-дальше-\"><a href=\"#Что-дальше-\" class=\"anchor\"></a>Что дальше?</h2>\n<p>Общую информацию о БЭМ-методологии, инструментарии, новостях в мире\nБЭМ можно найти на сайте <a href=\"https://ru.bem.info/\">bem.info</a>.</p>\n<p>Полную информацию обо всех методах API <code>i-bem.js</code> можно найти в\nисходном коде, который сопровождается структурированными комментариями\nв формате JSDoc:</p>\n<ul>\n<li><a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/i-bem.vanilla.js\">i-bem</a>;</li>\n<li><a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</li>\n</ul>\n<p>Задать вопрос опытным пользователям и разработчикам <code>i-bem.js</code> и\nследить за текущими обсуждениями можно в социальных сетях:</p>\n<ul>\n<li><a href=\"http://clubs.ya.ru/bem/\">Клуб в Я.ру</a>;</li>\n<li><a href=\"https://www.facebook.com/#!/groups/209713935765634/\">Группа в Facebook</a>;</li>\n<li><a href=\"https://twitter.com/bem_ru\">Twitter</a>.</li>\n</ul>\n<p>Прочитать о принципах работы <code>i-bem.js</code> в другом изложении, найти\nобразцы его применения и пошаговые инструкции на примере простых\nпроектов можно в статьях:</p>\n<ul>\n<li><a href=\"https://ru.bem.info/articles/bem-js-main-terms/\">JavaScript по БЭМ: основные понятия</a>;</li>\n<li><a href=\"https://github.com/varya/bem-js-tutorial\">Tutorial on JavaScript in BEM terms</a>;</li>\n<li><a href=\"http://habrahabr.ru/post/162385/\">Попробуй БЭМ на вкус!</a>;</li>\n<li><a href=\"https://ru.bem.info/articles/firm-card-story/\">БЭМ-приложение на Leaflet и API 2GIS</a>.</li>\n</ul>\n<p><strong>NB</strong> Обратите внимание, что в перечисленных статьях может\nиспользоваться устаревший синтаксис, не соответствующий текущей версии\n<code>i-bem.js</code>, включенной в <code>bem-core</code>.</p>\n\n<p>Подключение данного модификатора позволяет работать с элементами почти так же, как и с обычными блоками, т.е. любой (но не обязательно каждый) элемент может иметь свой BEM-инстанс. API инстансов элементов аналогично API блоков с некоторыми различиями, описанными ниже.</p>\n<h3 id=\"Декларация\"><a href=\"#Декларация\" class=\"anchor\"></a>Декларация</h3>\n<p>Декларация элемента</p>\n<pre><code class=\"lang-javascript\">BEMDOM.decl({ block: &#39;menu&#39;, elem: &#39;item&#39; }, { /* properties */ }, { /* static properties */ });\n</code></pre>\n<p>Декларация модификатора элемента:</p>\n<pre><code class=\"lang-javascript\">BEMDOM.decl({\n    block: &#39;menu&#39;,\n    elem: &#39;item&#39;,\n    modName: &#39;state&#39;,\n    modVal: &#39;current&#39;\n}, {\n    /* properties */\n}, {\n    /* static properties */\n});\n</code></pre>\n<p>Модификаторы элементов работают так же, как модификаторы блоков.</p>\n<h3 id=\"BEM-инстансы-элементов\"><a href=\"#BEM-инстансы-элементов\" class=\"anchor\"></a>BEM-инстансы элементов</h3>\n<p>Для доступа к BEM-инстансам элементов используется хелпер <code>findElemInstances</code>, API которого аналогично хелперу <code>findElem</code>:</p>\n<pre><code class=\"lang-javascript\">// поиск всех вложенных элементов &#39;item&#39;\nthis.findElemInstances(&#39;item&#39;);\n\n// строгий поиск всех вложенных элементов &#39;item&#39;\nthis.findElemInstances(&#39;item&#39;, true);\n\n// поиск всех вложенных модификаторов элементов &#39;item&#39;\nthis.findElemInstances(&#39;item&#39;, &#39;state&#39;, &#39;current&#39;);\n\n// строгий поиск всех вложенных модификаторов элементов &#39;item&#39;\nthis.findElemInstances(&#39;item&#39;, &#39;state&#39;, &#39;current&#39;, true);\n\n// поиск всех элементов &#39;item&#39; внутри указанного контекста\nthis.findElemInstances(ctx, &#39;item&#39;);\n\n// строгий поиск всех элементов &#39;item&#39; внутри указанного контекста\nthis.findElemInstances(ctx, &#39;item&#39;, true);\n\n// поиск всех модификаторов элементов &#39;item&#39; внутри указанного контекста\nthis.findElemInstances(ctx, &#39;item&#39;, &#39;state&#39;, &#39;current&#39;);\n\n// строгий поиск всех модификаторов элементов &#39;item&#39; внутри указанного контекста\nthis.findElemInstances(ctx, &#39;item&#39;, &#39;state&#39;, &#39;current&#39;, true);\n</code></pre>\n<p>При необходимости, инстансы найденных элементов инициализируются.</p>\n<p>Строгий поиск подразумевает фильтрацию элементов вложенных блоков с таким же именем, как у текущего блока:</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;menu&#39;,\n    content: [\n        {\n            elem: &#39;item&#39; // (1)\n        },\n        {\n            block: &#39;menu&#39;,\n            content: {\n                elem: &#39;item&#39; // (2)\n            }\n        }\n    ]\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nthis.findElemInstances(&#39;item&#39;);         // найдет инстансы (1) и (2)\nthis.findElemInstances(&#39;item&#39;, true);   // найдет только инстанс (1)\n</code></pre>\n<p>По аналогии с хелпером <code>elem</code>, кэширующим результаты своей работы, для минимизации количества операций с DOM рекомендуется использовать кэширующий поиск BEM-инстансов элементов:</p>\n<pre><code class=\"lang-javascript\">// кэширующий поиск всех вложенных элементов &#39;item&#39;\nthis.elemInstances(&#39;item&#39;);\n\n// кэширующий поиск всех вложенных модификаторов элемента &#39;item&#39;\nthis.elemInstances(&#39;item&#39;, &#39;state&#39;, &#39;current&#39;);\n</code></pre>\n<p>Также с помощью этого хелпера можно вернуть инстансы элементов, расположенных на DOM-нодах указанной jQuery-коллекции:</p>\n<pre><code class=\"lang-javascript\">this.elemInstances(domElem);\n</code></pre>\n<p>Для поиска одного (первого) BEM-инстанса элемента есть дополнительные формы этих хелперов с аналогичным API:</p>\n<pre><code class=\"lang-javascript\">// поиск одного вложенного элемента &#39;item&#39;\nthis.findElemInstance(&#39;item&#39;);\n\n// кэширующий поиск одного вложенного элемента &#39;item&#39;\nthis.elemInstance(&#39;item&#39;);\n\n// вернуть инстанс элемента, расположенного на первой DOM-ноде указанной jQuery-коллекции\nthis.elemInstance(domElem);\n</code></pre>\n<p>Если необходимо вернуть BEM-инстанс элемента, на DOM-ноде которого подмешаны другие элементы того же блока:</p>\n<pre><code class=\"lang-javascript\">this.elemInstance(this.elemify(domElem, &#39;item&#39;));\n</code></pre>\n<h3 id=\"Поиск-снаружи-контекста\"><a href=\"#Поиск-снаружи-контекста\" class=\"anchor\"></a>Поиск снаружи контекста</h3>\n<p>Существует хелпер для поиска элемента снаружи указанного контекста:</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;menu&#39;,\n    content: {\n        elem: &#39;item&#39;,\n        content: {\n            elem: &#39;link&#39;\n        }\n    }\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nthis.closestElem(this.elem(&#39;link&#39;), &#39;item&#39;);\n</code></pre>\n<p>При поиске от имени BEM-инстанса элемента можно не указывать контекст поиска, тогда поиск будет производиться относительно DOM-ноды этого элемента:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__link&#39;\nthis.closestElem(&#39;item&#39;);\n</code></pre>\n<p>По аналогии с хелперами <code>elem</code> и <code>findElem</code>, хелпер <code>closestElem</code> возвращает jQuery-коллекцию. Для доступа к BEM-инстансам элементов снаружи контекста используются хелперы <code>closestElemInstance</code> и <code>closestElemInstances</code>:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nthis.closestElemInstance(this.elem(&#39;link&#39;), &#39;item&#39;);\nthis.closestElemInstances(this.elem(&#39;link&#39;), &#39;item&#39;);\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__link&#39;\nthis.closestElemInstance(&#39;item&#39;);\n</code></pre>\n<h3 id=\"Доступ-к-родительскому-блоку\"><a href=\"#Доступ-к-родительскому-блоку\" class=\"anchor\"></a>Доступ к родительскому блоку</h3>\n<p>По аналогии с методом <code>elem</code> для получения элемента блока существует метод <code>block</code> для получения блока элемента.</p>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nthis.block() // эквивалентно this.findBlockOutside(&#39;menu&#39;) с кэшированием результата поиска\n</code></pre>\n<h3 id=\"Поиск-элементов-и-блоков\"><a href=\"#Поиск-элементов-и-блоков\" class=\"anchor\"></a>Поиск элементов и блоков</h3>\n<p>Элемент ищет только вложенные в него элементы:</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;menu&#39;,\n    content: [\n        {\n            elem: &#39;item&#39;,\n            content: {\n                elem: &#39;link&#39; // (1)\n            }\n        },\n        {\n            elem: &#39;link&#39; // (2)\n        }\n    ]\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nthis.findElem(&#39;link&#39;);  // будет найден только элемент (1).\n</code></pre>\n<p>Если нужно найти все элементы <code>&#39;link&#39;</code>, поиск нужно производить от имени блока-родителя:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nthis.block().findElem(&#39;link&#39;);    // будут найдены элементы (1) и (2).\n</code></pre>\n<p>Все это справедливо также для хелпера <code>elem</code>, хелперов поиска блоков (<code>findBlockInside</code> и др.) и описанных выше хелперов для поиска BEM-инстансов элементов.</p>\n<h3 id=\"Реакция-на-установку-модификаторов\"><a href=\"#Реакция-на-установку-модификаторов\" class=\"anchor\"></a>Реакция на установку модификаторов</h3>\n<p>Блок делегирует установку модификаторов тем элементам, у которых есть свои BEM-декларации.\nПоэтому обработчики <code>onSetMod</code> элемента выполнятся, если родительский блок установит этому элементу соответствующие модификаторы:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nonSetMod: {\n    &#39;state&#39;: {\n        &#39;current&#39;: function() {\n            // код обработчика\n        }\n    }\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nthis.setMod(this.elem(&#39;item&#39;), &#39;state&#39;, &#39;current&#39;); // выполнится задекларированный выше обработчик\n</code></pre>\n<p>Обработчики <code>onElemSetMod</code> блока выполнятся, если инстанс элемента сам установит себе соответствующие модификаторы:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nonElemSetMod: {\n    &#39;item&#39;: {\n        &#39;state&#39;: {\n            &#39;current&#39;: function() {\n                // код обработчика\n            }\n        }\n    }\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nthis.setMod(&#39;state&#39;, &#39;current&#39;); // выполнится задекларированный выше обработчик\n</code></pre>\n<p>Обработчики <code>onElemSetMod</code> в контексте инстанса элемента не используются.</p>\n<h3 id=\"Отложенная-инициализация-и-live-события\"><a href=\"#Отложенная-инициализация-и-live-события\" class=\"anchor\"></a>Отложенная инициализация и live-события</h3>\n<p>Рекомендуется по возможности всегда использовать отложенную инициализацию BEM-инстансов элементов. Они, как и обычные блоки, поддерживают все хелперы для работы с live-событиями. Кроме того, хелпер <code>liveInitOnBlockEvent</code> имеет дополнительную форму для инициализации по событию родительского блока - для этого просто опускается второй параметр (имя блока):</p>\n<pre><code class=\"lang-javascript\">this.liveInitOnBlockEvent(&#39;switch&#39;, function() { /* обработчик */ });\n</code></pre>\n"},"en":{"name":"i-bem","examples":[],"description":""}},"jsdoc":"<h1 id=\"i-bem-Module\"><a href=\"#i-bem-Module\" class=\"anchor\"></a>i-bem Module</h1>\n<h2 id=\"BEM-Class\"><a href=\"#BEM-Class\" class=\"anchor\"></a>BEM Class</h2>\n<p>Aughtments {BEM}</p>\n<p>Base block for creating BEM blocks</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"params--Object---readonly-\"><a href=\"#params--Object---readonly-\" class=\"anchor\"></a>params {Object} (readonly)</h4>\n<p>Block parameters, taking into account the defaults</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--BEM-\"><a href=\"#on---e,--data-,-fn,--ctx----→--BEM-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {BEM}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | Object}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--BEM-\"><a href=\"#un----e-,--fn-,--ctx----→--BEM-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {BEM}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String | Object}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"emit---e,--data----→--BEM---protected\"><a href=\"#emit---e,--data----→--BEM---protected\" class=\"anchor\"></a>emit ( e, [data] ) → {BEM}  protected</h4>\n<p>Executes the block&#39;s event handlers and live event handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"hasMod----elem-,-modName,--modVal----→--Boolean-\"><a href=\"#hasMod----elem-,-modName,--modVal----→--Boolean-\" class=\"anchor\"></a>hasMod ( [elem], modName, [modVal] ) → {Boolean}</h4>\n<p>Checks whether a block or nested element has a modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getMod----elem-,-modName---→--String-\"><a href=\"#getMod----elem-,-modName---→--String-\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}</h4>\n<p>Returns the value of the modifier of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,-----modNames----→--Object-\"><a href=\"#getMods----elem-,-----modNames----→--Object-\" class=\"anchor\"></a>getMods ( [elem], [...modNames] ) → {Object}</h4>\n<p>Returns values of modifiers of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>[...modNames] {String}<br/>\nModifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}</h4>\n<p>Sets the modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"_onSetMod---modName,-modVal,-oldModVal,--elem-,--elemName-----protected\"><a href=\"#_onSetMod---modName,-modVal,-oldModVal,--elem-,--elemName-----protected\" class=\"anchor\"></a>_onSetMod ( modName, modVal, oldModVal, [elem], [elemName] )  protected</h4>\n<p>Function after successfully changing the modifier of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n<li>oldModVal {String}<br/>\nOld modifier value</li>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>[elemName] {String}<br/>\nElement name</li>\n</ul>\n<h4 id=\"toggleMod----elem-,-modName,-modVal1,--modVal2-,--condition----→--BEM-\"><a href=\"#toggleMod----elem-,-modName,-modVal1,--modVal2-,--condition----→--BEM-\" class=\"anchor\"></a>toggleMod ( [elem], modName, modVal1, [modVal2], [condition] ) → {BEM}</h4>\n<p>Sets a modifier for a block/nested element, depending on conditions.\nIf the condition parameter is passed: when true, modVal1 is set; when false, modVal2 is set.\nIf the condition parameter is not passed: modVal1 is set if modVal2 was set, or vice versa.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal1 {String}<br/>\nFirst modifier value</li>\n<li>[modVal2] {String}<br/>\nSecond modifier value</li>\n<li>[condition] {Boolean}<br/>\nCondition</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"delMod----elem-,-modName---→--BEM---protected\"><a href=\"#delMod----elem-,-modName---→--BEM---protected\" class=\"anchor\"></a>delMod ( [elem], modName ) → {BEM}  protected</h4>\n<p>Removes a modifier from a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"getDefaultParams----→--Object---protected\"><a href=\"#getDefaultParams----→--Object---protected\" class=\"anchor\"></a>getDefaultParams () → {Object}  protected</h4>\n<p>Returns a block&#39;s default parameters</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<h4 id=\"nextTick---fn---→--BEM---protected\"><a href=\"#nextTick---fn---→--BEM---protected\" class=\"anchor\"></a>nextTick ( fn ) → {BEM}  protected</h4>\n<p>Executes given callback on next turn eventloop in block&#39;s context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>fn {Function}<br/>\ncallback</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"blocks--Object-\"><a href=\"#blocks--Object-\" class=\"anchor\"></a>blocks {Object}</h4>\n<p>Storage for block declarations (hash by block name)</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"decl---decl,--props-,--staticProps----→--Function-\"><a href=\"#decl---decl,--props-,--staticProps----→--Function-\" class=\"anchor\"></a>decl ( decl, [props], [staticProps] ) → {Function}</h4>\n<p>Declares blocks and creates a block class</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>decl {String | Object}<br/>\nBlock name (simple syntax) or description</li>\n<li>decl.block | decl.name {String}<br/>\nBlock name</li>\n<li>[decl.baseBlock] {String}<br/>\nName of the parent block</li>\n<li>[decl.baseMix] {Array}<br/>\nMixed block names</li>\n<li>[decl.modName] {String}<br/>\nModifier name</li>\n<li>[decl.modVal] {String | Array}<br/>\nModifier value</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"create---block,--params----→--BEM-\"><a href=\"#create---block,--params----→--BEM-\" class=\"anchor\"></a>create ( block, [params] ) → {BEM}</h4>\n<p>Factory method for creating an instance of the block named</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>block {String | Object}<br/>\nBlock name or description</li>\n<li>[params] {Object}<br/>\nBlock parameters</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"getName----→--String-\"><a href=\"#getName----→--String-\" class=\"anchor\"></a>getName () → {String}</h4>\n<p>Returns the name of the current block</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--Function-\"><a href=\"#on---e,--data-,-fn,--ctx----→--Function-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {Function}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | Object}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--Function-\"><a href=\"#un----e-,--fn-,--ctx----→--Function-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {Function}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String | Object}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"decl---decl,--props-,--staticProps----→--Function---protected\"><a href=\"#decl---decl,--props-,--staticProps----→--Function---protected\" class=\"anchor\"></a>decl ( decl, [props], [staticProps] ) → {Function}  protected</h4>\n<p>Declares elements and creates an elements class</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>decl {Object}<br/>\nElement description</li>\n<li>decl.block {String}<br/>\nBlock name</li>\n<li>decl.elem {String}<br/>\nElement name</li>\n<li>[decl.baseBlock] {String}<br/>\nName of the parent block</li>\n<li>[decl.baseMix] {Array}<br/>\nMixed block names</li>\n<li>[decl.modName] {String}<br/>\nModifier name</li>\n<li>[decl.modVal] {String | Array}<br/>\nModifier value</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"create---desc,--params----→--BEM-\"><a href=\"#create---desc,--params----→--BEM-\" class=\"anchor\"></a>create ( desc, [params] ) → {BEM}</h4>\n<p>Factory method for creating an instance of the element named</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>desc {Object}<br/>\nDescription</li>\n<li>[params] {Object}<br/>\nInstance parameters</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"getName----shortName----→--String---protected\"><a href=\"#getName----shortName----→--String---protected\" class=\"anchor\"></a>getName ( [shortName] ) → {String}  protected</h4>\n<p>Returns the name of the current instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[shortName] {Boolean}<br/>\nreturn the short name of the current instance</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__internal-Module\"><a href=\"#i-bem__internal-Module\" class=\"anchor\"></a>i-bem__internal Module</h1>\n<h2 id=\"buildClass---block,--elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass---block,--elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( block, [elem], [modName], [modVal] ) → {String}</h2>\n<p>Builds the class of a block or element with a modifier</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>block {String}<br/>\nBlock name</li>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String | Number}<br/>\nModifier value</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<p>Class</p>\n<h2 id=\"buildClasses---block,--elem-,--mods----→--String-\"><a href=\"#buildClasses---block,--elem-,--mods----→--String-\" class=\"anchor\"></a>buildClasses ( block, [elem], [mods] ) → {String}</h2>\n<p>Builds full classes for a buffer or element with modifiers</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>block {String}<br/>\nBlock name</li>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[mods] {Object}<br/>\nModifiers</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<p>Class</p>\n<h1 id=\"i-bem-Module\"><a href=\"#i-bem-Module\" class=\"anchor\"></a>i-bem Module</h1>\n<h2 id=\"BEM-Class\"><a href=\"#BEM-Class\" class=\"anchor\"></a>BEM Class</h2>\n<p>Aughtments {BEM}</p>\n<p>Base block for creating BEM blocks</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"params--Object---readonly-\"><a href=\"#params--Object---readonly-\" class=\"anchor\"></a>params {Object} (readonly)</h4>\n<p>Block parameters, taking into account the defaults</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--BEM-\"><a href=\"#on---e,--data-,-fn,--ctx----→--BEM-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {BEM}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | Object}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--BEM-\"><a href=\"#un----e-,--fn-,--ctx----→--BEM-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {BEM}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String | Object}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"emit---e,--data----→--BEM---protected\"><a href=\"#emit---e,--data----→--BEM---protected\" class=\"anchor\"></a>emit ( e, [data] ) → {BEM}  protected</h4>\n<p>Executes the block&#39;s event handlers and live event handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"hasMod----elem-,-modName,--modVal----→--Boolean-\"><a href=\"#hasMod----elem-,-modName,--modVal----→--Boolean-\" class=\"anchor\"></a>hasMod ( [elem], modName, [modVal] ) → {Boolean}</h4>\n<p>Checks whether a block or nested element has a modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getMod----elem-,-modName---→--String-\"><a href=\"#getMod----elem-,-modName---→--String-\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}</h4>\n<p>Returns the value of the modifier of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,-----modNames----→--Object-\"><a href=\"#getMods----elem-,-----modNames----→--Object-\" class=\"anchor\"></a>getMods ( [elem], [...modNames] ) → {Object}</h4>\n<p>Returns values of modifiers of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>[...modNames] {String}<br/>\nModifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}</h4>\n<p>Sets the modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"_onSetMod---modName,-modVal,-oldModVal,--elem-,--elemName-----protected\"><a href=\"#_onSetMod---modName,-modVal,-oldModVal,--elem-,--elemName-----protected\" class=\"anchor\"></a>_onSetMod ( modName, modVal, oldModVal, [elem], [elemName] )  protected</h4>\n<p>Function after successfully changing the modifier of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n<li>oldModVal {String}<br/>\nOld modifier value</li>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>[elemName] {String}<br/>\nElement name</li>\n</ul>\n<h4 id=\"toggleMod----elem-,-modName,-modVal1,--modVal2-,--condition----→--BEM-\"><a href=\"#toggleMod----elem-,-modName,-modVal1,--modVal2-,--condition----→--BEM-\" class=\"anchor\"></a>toggleMod ( [elem], modName, modVal1, [modVal2], [condition] ) → {BEM}</h4>\n<p>Sets a modifier for a block/nested element, depending on conditions.\nIf the condition parameter is passed: when true, modVal1 is set; when false, modVal2 is set.\nIf the condition parameter is not passed: modVal1 is set if modVal2 was set, or vice versa.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal1 {String}<br/>\nFirst modifier value</li>\n<li>[modVal2] {String}<br/>\nSecond modifier value</li>\n<li>[condition] {Boolean}<br/>\nCondition</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"delMod----elem-,-modName---→--BEM---protected\"><a href=\"#delMod----elem-,-modName---→--BEM---protected\" class=\"anchor\"></a>delMod ( [elem], modName ) → {BEM}  protected</h4>\n<p>Removes a modifier from a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"getDefaultParams----→--Object---protected\"><a href=\"#getDefaultParams----→--Object---protected\" class=\"anchor\"></a>getDefaultParams () → {Object}  protected</h4>\n<p>Returns a block&#39;s default parameters</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<h4 id=\"nextTick---fn---→--BEM---protected\"><a href=\"#nextTick---fn---→--BEM---protected\" class=\"anchor\"></a>nextTick ( fn ) → {BEM}  protected</h4>\n<p>Executes given callback on next turn eventloop in block&#39;s context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>fn {Function}<br/>\ncallback</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"blocks--Object-\"><a href=\"#blocks--Object-\" class=\"anchor\"></a>blocks {Object}</h4>\n<p>Storage for block declarations (hash by block name)</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"decl---decl,--props-,--staticProps----→--Function-\"><a href=\"#decl---decl,--props-,--staticProps----→--Function-\" class=\"anchor\"></a>decl ( decl, [props], [staticProps] ) → {Function}</h4>\n<p>Declares blocks and creates a block class</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>decl {String | Object}<br/>\nBlock name (simple syntax) or description</li>\n<li>decl.block | decl.name {String}<br/>\nBlock name</li>\n<li>[decl.baseBlock] {String}<br/>\nName of the parent block</li>\n<li>[decl.baseMix] {Array}<br/>\nMixed block names</li>\n<li>[decl.modName] {String}<br/>\nModifier name</li>\n<li>[decl.modVal] {String | Array}<br/>\nModifier value</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"create---block,--params----→--BEM-\"><a href=\"#create---block,--params----→--BEM-\" class=\"anchor\"></a>create ( block, [params] ) → {BEM}</h4>\n<p>Factory method for creating an instance of the block named</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>block {String | Object}<br/>\nBlock name or description</li>\n<li>[params] {Object}<br/>\nBlock parameters</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"getName----→--String-\"><a href=\"#getName----→--String-\" class=\"anchor\"></a>getName () → {String}</h4>\n<p>Returns the name of the current block</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--Function-\"><a href=\"#on---e,--data-,-fn,--ctx----→--Function-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {Function}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | Object}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--Function-\"><a href=\"#un----e-,--fn-,--ctx----→--Function-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {Function}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String | Object}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"decl---decl,--props-,--staticProps----→--Function---protected\"><a href=\"#decl---decl,--props-,--staticProps----→--Function---protected\" class=\"anchor\"></a>decl ( decl, [props], [staticProps] ) → {Function}  protected</h4>\n<p>Declares elements and creates an elements class</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>decl {Object}<br/>\nElement description</li>\n<li>decl.block {String}<br/>\nBlock name</li>\n<li>decl.elem {String}<br/>\nElement name</li>\n<li>[decl.baseBlock] {String}<br/>\nName of the parent block</li>\n<li>[decl.baseMix] {Array}<br/>\nMixed block names</li>\n<li>[decl.modName] {String}<br/>\nModifier name</li>\n<li>[decl.modVal] {String | Array}<br/>\nModifier value</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"create---desc,--params----→--BEM-\"><a href=\"#create---desc,--params----→--BEM-\" class=\"anchor\"></a>create ( desc, [params] ) → {BEM}</h4>\n<p>Factory method for creating an instance of the element named</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>desc {Object}<br/>\nDescription</li>\n<li>[params] {Object}<br/>\nInstance parameters</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"getName----shortName----→--String---protected\"><a href=\"#getName----shortName----→--String---protected\" class=\"anchor\"></a>getName ( [shortName] ) → {String}  protected</h4>\n<p>Returns the name of the current instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[shortName] {Boolean}<br/>\nreturn the short name of the current instance</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__collection-Module\"><a href=\"#i-bem__collection-Module\" class=\"anchor\"></a>i-bem__collection Module</h1>\n<h2 id=\"BEMCollection-Class\"><a href=\"#BEMCollection-Class\" class=\"anchor\"></a>BEMCollection Class</h2>\n<p>Aughtments {Array}</p>\n<p>Base class for collections. Create collection of similar objects.</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"getMethods----→--Array-\"><a href=\"#getMethods----→--Array-\" class=\"anchor\"></a>getMethods () → {Array}</h4>\n<p>Get method names that will be implemented in collection</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Array}</p>\n<h4 id=\"getBase----→--Object-\"><a href=\"#getBase----→--Object-\" class=\"anchor\"></a>getBase () → {Object}</h4>\n<p>Get base prototype for collection</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<h4 id=\"create---a---→--Object-\"><a href=\"#create---a---→--Object-\" class=\"anchor\"></a>create ( a ) → {Object}</h4>\n<p>Create collection instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>a {Array}<br/>\nlist of similar objects</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<h1 id=\"i-bem__collection_type_dom-Module\"><a href=\"#i-bem__collection_type_dom-Module\" class=\"anchor\"></a>i-bem__collection_type_dom Module</h1>\n<h2 id=\"BEMDOMCollection-Class\"><a href=\"#BEMDOMCollection-Class\" class=\"anchor\"></a>BEMDOMCollection Class</h2>\n<p>Aughtments {i-bem__collection}</p>\n<p>Collection of BEM.DOM blocks. Implementation of BEM.DOM methods for array of blocks.</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"getMethods----→--Array-\"><a href=\"#getMethods----→--Array-\" class=\"anchor\"></a>getMethods () → {Array}</h4>\n<p>Get methods that will be implemented in BEMDOMCollection</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Array}</p>\n<h1 id=\"i-bem__dom-Module\"><a href=\"#i-bem__dom-Module\" class=\"anchor\"></a>i-bem__dom Module</h1>\n<h2 id=\"BEMDOM-Class\"><a href=\"#BEMDOM-Class\" class=\"anchor\"></a>BEMDOM Class</h2>\n<p>Aughtments {BEMDOM}</p>\n<p>Base block for creating BEM blocks that have DOM representation</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"domElem--jQuery---readonly-\"><a href=\"#domElem--jQuery---readonly-\" class=\"anchor\"></a>domElem {jQuery} (readonly)</h4>\n<p>DOM elements of block</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"findBlocksInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDomElem ( domElem, event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler for any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event will be listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToDoc---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDoc---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDoc ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToWin---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToWin---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToWin ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindTo ( [elem], event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nElement</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDomElem ( domElem, event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event was being listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDoc---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDoc---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDoc ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromWin---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromWin---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromWin ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFrom ( [elem], event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nNested element</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEMDOM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEMDOM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEMDOM}</h4>\n<p>Sets a modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\"><a href=\"#findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\" class=\"anchor\"></a>findElem ( [ctx=this.domElem], names, [modName], [modVal], [strictMode=false] ) → {jQuery}</h4>\n<p>Finds elements nested in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elem---names,--modName-,--modVal----→--jQuery-\"><a href=\"#elem---names,--modName-,--modVal----→--jQuery-\" class=\"anchor\"></a>elem ( names, [modName], [modVal] ) → {jQuery}</h4>\n<p>Lazy search for elements nested in a block (caches results)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElem---ctx,-elemName---→--jQuery-\"><a href=\"#closestElem---ctx,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( ctx, elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\ncontext</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\"><a href=\"#dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\" class=\"anchor\"></a>dropElemCache ( [names], [modName], [modVal] ) → {BEMDOM}  protected</h4>\n<p>Clearing the cache for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[names] {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"elemParams---elem---→--Object-\"><a href=\"#elemParams---elem---→--Object-\" class=\"anchor\"></a>elemParams ( elem ) → {Object}</h4>\n<p>Retrieves parameters of a block element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Parameters</p>\n<h4 id=\"elemify---elem,-elemName---→--jQuery-\"><a href=\"#elemify---elem,-elemName---→--jQuery-\" class=\"anchor\"></a>elemify ( elem, elemName ) → {jQuery}</h4>\n<p>Elemify given element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {jQuery}<br/>\nElement</li>\n<li>elemName {String}<br/>\nName</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<h4 id=\"containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\"><a href=\"#containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\" class=\"anchor\"></a>containsDomElem ( [ctx=this.domElem], domElem ) → {Boolean}  protected</h4>\n<p>Checks whether a DOM element is in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where check is being performed</li>\n<li>domElem {jQuery}<br/>\nDOM element</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to a block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getMod----elem-,-modName---→--String---protected\"><a href=\"#getMod----elem-,-modName---→--String---protected\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}  protected</h4>\n<p>Delegates native getMod helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,--modName1----→--Object---protected\"><a href=\"#getMods----elem-,--modName1----→--Object---protected\" class=\"anchor\"></a>getMods ( [elem], [modName1] ) → {Object}  protected</h4>\n<p>Delegates native getMods helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>[modName1] {String}<br/>\n..., modNameN] Modifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM---protected\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM---protected\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}  protected</h4>\n<p>Delegates native setMod helper to element&#39;s instances</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"block----→--BEMDOM-\"><a href=\"#block----→--BEMDOM-\" class=\"anchor\"></a>block () → {BEMDOM}</h4>\n<p>Returns and initializes (if necessary) the own block of current element</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elemInstance---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstance---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstance ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"elemInstances---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstances---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstances ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstance ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstances ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElem----ctx=this-domElem-,-elemName---→--jQuery-\"><a href=\"#closestElem----ctx=this-domElem-,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( [ctx=this.domElem], elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstance ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instance of defined element outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstances ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"scope--jQuery-\"><a href=\"#scope--jQuery-\" class=\"anchor\"></a>scope {jQuery}</h4>\n<p>Scope, will be set on onDomReady to <code>&lt;body&gt;</code></p>\n<h4 id=\"doc--jQuery-\"><a href=\"#doc--jQuery-\" class=\"anchor\"></a>doc {jQuery}</h4>\n<p>Document shortcut</p>\n<h4 id=\"win--jQuery-\"><a href=\"#win--jQuery-\" class=\"anchor\"></a>win {jQuery}</h4>\n<p>Window shortcut</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"init----ctx=scope----→--jQuery-\"><a href=\"#init----ctx=scope----→--jQuery-\" class=\"anchor\"></a>init ( [ctx=scope] ) → {jQuery}</h4>\n<p>Initializes blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=scope] {jQuery | String}<br/>\nRoot DOM node</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>ctx Initialization context</p>\n<h4 id=\"destruct---ctx,--excludeSelf=false---\"><a href=\"#destruct---ctx,--excludeSelf=false---\" class=\"anchor\"></a>destruct ( ctx, [excludeSelf=false] )</h4>\n<p>Destroys blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>[excludeSelf=false] {Boolean}<br/>\nExclude the main domElem</li>\n</ul>\n<h4 id=\"update---ctx,-content---→--jQuery-\"><a href=\"#update---ctx,-content---→--jQuery-\" class=\"anchor\"></a>update ( ctx, content ) → {jQuery}</h4>\n<p>Replaces a fragment of the DOM tree inside the context, destroying old blocks and intializing new ones</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nNew content</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>Updated root DOM node</p>\n<h4 id=\"replace---ctx,-content---→--jQuery-\"><a href=\"#replace---ctx,-content---→--jQuery-\" class=\"anchor\"></a>replace ( ctx, content ) → {jQuery}</h4>\n<p>Changes a fragment of the DOM tree including the context and initializes blocks.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"append---ctx,-content---→--jQuery-\"><a href=\"#append---ctx,-content---→--jQuery-\" class=\"anchor\"></a>append ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the end of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"prepend---ctx,-content---→--jQuery-\"><a href=\"#prepend---ctx,-content---→--jQuery-\" class=\"anchor\"></a>prepend ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the beginning of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"before---ctx,-content---→--jQuery-\"><a href=\"#before---ctx,-content---→--jQuery-\" class=\"anchor\"></a>before ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree before the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"after---ctx,-content---→--jQuery-\"><a href=\"#after---ctx,-content---→--jQuery-\" class=\"anchor\"></a>after ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree after the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"liveInitOnEvent----elemName-,-event,--callback-----protected\"><a href=\"#liveInitOnEvent----elemName-,-event,--callback-----protected\" class=\"anchor\"></a>liveInitOnEvent ( [elemName], event, [callback] )  protected</h4>\n<p>Helper for live initialization for an event on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elemName] {String}<br/>\nElement name or names (separated by spaces)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to call after successful initialization</li>\n</ul>\n<h4 id=\"liveBindTo----to-,-event,--callback-----protected\"><a href=\"#liveBindTo----to-,-event,--callback-----protected\" class=\"anchor\"></a>liveBindTo ( [to], event, [callback] )  protected</h4>\n<p>Helper for subscribing to live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[to] {String | Object}<br/>\nDescription (object with modName, modVal, elem) or name of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveUnbindFrom----elem-,-event,--callback-----protected\"><a href=\"#liveUnbindFrom----elem-,-event,--callback-----protected\" class=\"anchor\"></a>liveUnbindFrom ( [elem], event, [callback] )  protected</h4>\n<p>Helper for unsubscribing from live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nName of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveInitOnBlockEvent---event,-blockName,-callback----protected\"><a href=\"#liveInitOnBlockEvent---event,-blockName,-callback----protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, blockName, callback )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event on the current block&#39;s DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>callback {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\"><a href=\"#liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\" class=\"anchor\"></a>liveInitOnBlockInsideEvent ( event, blockName, [callback] )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event inside the current block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"on----ctx-,-e,--data-,-fn,--fnCtx---\"><a href=\"#on----ctx-,-e,--data-,-fn,--fnCtx---\" class=\"anchor\"></a>on ( [ctx], e, [data], fn, [fnCtx] )</h4>\n<p>Adds a live event handler to a block, based on a specified element where the event will be listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event will be listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler&#39;s context</li>\n</ul>\n<h4 id=\"un----ctx-,-e,--fn-,--fnCtx---\"><a href=\"#un----ctx-,-e,--fn-,--fnCtx---\" class=\"anchor\"></a>un ( [ctx], e, [fn], [fnCtx] )</h4>\n<p>Removes the live event handler from a block, based on a specified element where the event was being listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event was being listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler context</li>\n</ul>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\"><a href=\"#decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\" class=\"anchor\"></a>decl ( name, [props], [staticProps], [_autoDecl] ) → {Function}  protected</h4>\n<p>Auto-declarator for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>name {Object}<br/>\nInstance name</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n<li>[_autoDecl] {Object}<br/>\nAuto-declaration flag</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"liveInitOnBlockEvent---event,--callback----→--Function---protected\"><a href=\"#liveInitOnBlockEvent---event,--callback----→--Function---protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, [callback] ) → {Function}  protected</h4>\n<p>Helper for live initialization for an own block&#39;s event</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new element&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__dom-Module\"><a href=\"#i-bem__dom-Module\" class=\"anchor\"></a>i-bem__dom Module</h1>\n<p>Overrides BEM.DOM.findBlocks* methods that they return i-bem__collection_type_dom</p>\n<h2 id=\"BEMDOM-Class\"><a href=\"#BEMDOM-Class\" class=\"anchor\"></a>BEMDOM Class</h2>\n<p>Aughtments {BEMDOM}</p>\n<p>Base block for creating BEM blocks that have DOM representation</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"domElem--jQuery---readonly-\"><a href=\"#domElem--jQuery---readonly-\" class=\"anchor\"></a>domElem {jQuery} (readonly)</h4>\n<p>DOM elements of block</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"findBlocksInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDomElem ( domElem, event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler for any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event will be listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToDoc---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDoc---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDoc ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToWin---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToWin---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToWin ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindTo ( [elem], event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nElement</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDomElem ( domElem, event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event was being listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDoc---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDoc---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDoc ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromWin---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromWin---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromWin ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFrom ( [elem], event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nNested element</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEMDOM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEMDOM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEMDOM}</h4>\n<p>Sets a modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\"><a href=\"#findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\" class=\"anchor\"></a>findElem ( [ctx=this.domElem], names, [modName], [modVal], [strictMode=false] ) → {jQuery}</h4>\n<p>Finds elements nested in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elem---names,--modName-,--modVal----→--jQuery-\"><a href=\"#elem---names,--modName-,--modVal----→--jQuery-\" class=\"anchor\"></a>elem ( names, [modName], [modVal] ) → {jQuery}</h4>\n<p>Lazy search for elements nested in a block (caches results)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElem---ctx,-elemName---→--jQuery-\"><a href=\"#closestElem---ctx,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( ctx, elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\ncontext</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\"><a href=\"#dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\" class=\"anchor\"></a>dropElemCache ( [names], [modName], [modVal] ) → {BEMDOM}  protected</h4>\n<p>Clearing the cache for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[names] {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"elemParams---elem---→--Object-\"><a href=\"#elemParams---elem---→--Object-\" class=\"anchor\"></a>elemParams ( elem ) → {Object}</h4>\n<p>Retrieves parameters of a block element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Parameters</p>\n<h4 id=\"elemify---elem,-elemName---→--jQuery-\"><a href=\"#elemify---elem,-elemName---→--jQuery-\" class=\"anchor\"></a>elemify ( elem, elemName ) → {jQuery}</h4>\n<p>Elemify given element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {jQuery}<br/>\nElement</li>\n<li>elemName {String}<br/>\nName</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<h4 id=\"containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\"><a href=\"#containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\" class=\"anchor\"></a>containsDomElem ( [ctx=this.domElem], domElem ) → {Boolean}  protected</h4>\n<p>Checks whether a DOM element is in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where check is being performed</li>\n<li>domElem {jQuery}<br/>\nDOM element</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to a block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getMod----elem-,-modName---→--String---protected\"><a href=\"#getMod----elem-,-modName---→--String---protected\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}  protected</h4>\n<p>Delegates native getMod helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,--modName1----→--Object---protected\"><a href=\"#getMods----elem-,--modName1----→--Object---protected\" class=\"anchor\"></a>getMods ( [elem], [modName1] ) → {Object}  protected</h4>\n<p>Delegates native getMods helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>[modName1] {String}<br/>\n..., modNameN] Modifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM---protected\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM---protected\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}  protected</h4>\n<p>Delegates native setMod helper to element&#39;s instances</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"block----→--BEMDOM-\"><a href=\"#block----→--BEMDOM-\" class=\"anchor\"></a>block () → {BEMDOM}</h4>\n<p>Returns and initializes (if necessary) the own block of current element</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elemInstance---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstance---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstance ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"elemInstances---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstances---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstances ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstance ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstances ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElem----ctx=this-domElem-,-elemName---→--jQuery-\"><a href=\"#closestElem----ctx=this-domElem-,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( [ctx=this.domElem], elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstance ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instance of defined element outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstances ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"scope--jQuery-\"><a href=\"#scope--jQuery-\" class=\"anchor\"></a>scope {jQuery}</h4>\n<p>Scope, will be set on onDomReady to <code>&lt;body&gt;</code></p>\n<h4 id=\"doc--jQuery-\"><a href=\"#doc--jQuery-\" class=\"anchor\"></a>doc {jQuery}</h4>\n<p>Document shortcut</p>\n<h4 id=\"win--jQuery-\"><a href=\"#win--jQuery-\" class=\"anchor\"></a>win {jQuery}</h4>\n<p>Window shortcut</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"init----ctx=scope----→--jQuery-\"><a href=\"#init----ctx=scope----→--jQuery-\" class=\"anchor\"></a>init ( [ctx=scope] ) → {jQuery}</h4>\n<p>Initializes blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=scope] {jQuery | String}<br/>\nRoot DOM node</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>ctx Initialization context</p>\n<h4 id=\"destruct---ctx,--excludeSelf=false---\"><a href=\"#destruct---ctx,--excludeSelf=false---\" class=\"anchor\"></a>destruct ( ctx, [excludeSelf=false] )</h4>\n<p>Destroys blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>[excludeSelf=false] {Boolean}<br/>\nExclude the main domElem</li>\n</ul>\n<h4 id=\"update---ctx,-content---→--jQuery-\"><a href=\"#update---ctx,-content---→--jQuery-\" class=\"anchor\"></a>update ( ctx, content ) → {jQuery}</h4>\n<p>Replaces a fragment of the DOM tree inside the context, destroying old blocks and intializing new ones</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nNew content</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>Updated root DOM node</p>\n<h4 id=\"replace---ctx,-content---→--jQuery-\"><a href=\"#replace---ctx,-content---→--jQuery-\" class=\"anchor\"></a>replace ( ctx, content ) → {jQuery}</h4>\n<p>Changes a fragment of the DOM tree including the context and initializes blocks.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"append---ctx,-content---→--jQuery-\"><a href=\"#append---ctx,-content---→--jQuery-\" class=\"anchor\"></a>append ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the end of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"prepend---ctx,-content---→--jQuery-\"><a href=\"#prepend---ctx,-content---→--jQuery-\" class=\"anchor\"></a>prepend ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the beginning of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"before---ctx,-content---→--jQuery-\"><a href=\"#before---ctx,-content---→--jQuery-\" class=\"anchor\"></a>before ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree before the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"after---ctx,-content---→--jQuery-\"><a href=\"#after---ctx,-content---→--jQuery-\" class=\"anchor\"></a>after ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree after the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"liveInitOnEvent----elemName-,-event,--callback-----protected\"><a href=\"#liveInitOnEvent----elemName-,-event,--callback-----protected\" class=\"anchor\"></a>liveInitOnEvent ( [elemName], event, [callback] )  protected</h4>\n<p>Helper for live initialization for an event on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elemName] {String}<br/>\nElement name or names (separated by spaces)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to call after successful initialization</li>\n</ul>\n<h4 id=\"liveBindTo----to-,-event,--callback-----protected\"><a href=\"#liveBindTo----to-,-event,--callback-----protected\" class=\"anchor\"></a>liveBindTo ( [to], event, [callback] )  protected</h4>\n<p>Helper for subscribing to live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[to] {String | Object}<br/>\nDescription (object with modName, modVal, elem) or name of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveUnbindFrom----elem-,-event,--callback-----protected\"><a href=\"#liveUnbindFrom----elem-,-event,--callback-----protected\" class=\"anchor\"></a>liveUnbindFrom ( [elem], event, [callback] )  protected</h4>\n<p>Helper for unsubscribing from live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nName of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveInitOnBlockEvent---event,-blockName,-callback----protected\"><a href=\"#liveInitOnBlockEvent---event,-blockName,-callback----protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, blockName, callback )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event on the current block&#39;s DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>callback {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\"><a href=\"#liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\" class=\"anchor\"></a>liveInitOnBlockInsideEvent ( event, blockName, [callback] )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event inside the current block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"on----ctx-,-e,--data-,-fn,--fnCtx---\"><a href=\"#on----ctx-,-e,--data-,-fn,--fnCtx---\" class=\"anchor\"></a>on ( [ctx], e, [data], fn, [fnCtx] )</h4>\n<p>Adds a live event handler to a block, based on a specified element where the event will be listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event will be listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler&#39;s context</li>\n</ul>\n<h4 id=\"un----ctx-,-e,--fn-,--fnCtx---\"><a href=\"#un----ctx-,-e,--fn-,--fnCtx---\" class=\"anchor\"></a>un ( [ctx], e, [fn], [fnCtx] )</h4>\n<p>Removes the live event handler from a block, based on a specified element where the event was being listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event was being listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler context</li>\n</ul>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\"><a href=\"#decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\" class=\"anchor\"></a>decl ( name, [props], [staticProps], [_autoDecl] ) → {Function}  protected</h4>\n<p>Auto-declarator for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>name {Object}<br/>\nInstance name</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n<li>[_autoDecl] {Object}<br/>\nAuto-declaration flag</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"liveInitOnBlockEvent---event,--callback----→--Function---protected\"><a href=\"#liveInitOnBlockEvent---event,--callback----→--Function---protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, [callback] ) → {Function}  protected</h4>\n<p>Helper for live initialization for an own block&#39;s event</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new element&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__dom-Module\"><a href=\"#i-bem__dom-Module\" class=\"anchor\"></a>i-bem__dom Module</h1>\n<h2 id=\"BEMDOM-Class\"><a href=\"#BEMDOM-Class\" class=\"anchor\"></a>BEMDOM Class</h2>\n<p>Aughtments {BEMDOM}</p>\n<p>Base block for creating BEM blocks that have DOM representation</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"domElem--jQuery---readonly-\"><a href=\"#domElem--jQuery---readonly-\" class=\"anchor\"></a>domElem {jQuery} (readonly)</h4>\n<p>DOM elements of block</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"findBlocksInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDomElem ( domElem, event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler for any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event will be listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToDoc---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDoc---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDoc ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToWin---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToWin---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToWin ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindTo ( [elem], event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nElement</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDomElem ( domElem, event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event was being listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDoc---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDoc---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDoc ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromWin---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromWin---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromWin ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFrom ( [elem], event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nNested element</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEMDOM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEMDOM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEMDOM}</h4>\n<p>Sets a modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\"><a href=\"#findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\" class=\"anchor\"></a>findElem ( [ctx=this.domElem], names, [modName], [modVal], [strictMode=false] ) → {jQuery}</h4>\n<p>Finds elements nested in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elem---names,--modName-,--modVal----→--jQuery-\"><a href=\"#elem---names,--modName-,--modVal----→--jQuery-\" class=\"anchor\"></a>elem ( names, [modName], [modVal] ) → {jQuery}</h4>\n<p>Lazy search for elements nested in a block (caches results)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElem---ctx,-elemName---→--jQuery-\"><a href=\"#closestElem---ctx,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( ctx, elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\ncontext</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\"><a href=\"#dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\" class=\"anchor\"></a>dropElemCache ( [names], [modName], [modVal] ) → {BEMDOM}  protected</h4>\n<p>Clearing the cache for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[names] {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"elemParams---elem---→--Object-\"><a href=\"#elemParams---elem---→--Object-\" class=\"anchor\"></a>elemParams ( elem ) → {Object}</h4>\n<p>Retrieves parameters of a block element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Parameters</p>\n<h4 id=\"elemify---elem,-elemName---→--jQuery-\"><a href=\"#elemify---elem,-elemName---→--jQuery-\" class=\"anchor\"></a>elemify ( elem, elemName ) → {jQuery}</h4>\n<p>Elemify given element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {jQuery}<br/>\nElement</li>\n<li>elemName {String}<br/>\nName</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<h4 id=\"containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\"><a href=\"#containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\" class=\"anchor\"></a>containsDomElem ( [ctx=this.domElem], domElem ) → {Boolean}  protected</h4>\n<p>Checks whether a DOM element is in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where check is being performed</li>\n<li>domElem {jQuery}<br/>\nDOM element</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to a block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getMod----elem-,-modName---→--String---protected\"><a href=\"#getMod----elem-,-modName---→--String---protected\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}  protected</h4>\n<p>Delegates native getMod helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,--modName1----→--Object---protected\"><a href=\"#getMods----elem-,--modName1----→--Object---protected\" class=\"anchor\"></a>getMods ( [elem], [modName1] ) → {Object}  protected</h4>\n<p>Delegates native getMods helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>[modName1] {String}<br/>\n..., modNameN] Modifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM---protected\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM---protected\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}  protected</h4>\n<p>Delegates native setMod helper to element&#39;s instances</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"block----→--BEMDOM-\"><a href=\"#block----→--BEMDOM-\" class=\"anchor\"></a>block () → {BEMDOM}</h4>\n<p>Returns and initializes (if necessary) the own block of current element</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elemInstance---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstance---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstance ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"elemInstances---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstances---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstances ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstance ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstances ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElem----ctx=this-domElem-,-elemName---→--jQuery-\"><a href=\"#closestElem----ctx=this-domElem-,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( [ctx=this.domElem], elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstance ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instance of defined element outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstances ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"scope--jQuery-\"><a href=\"#scope--jQuery-\" class=\"anchor\"></a>scope {jQuery}</h4>\n<p>Scope, will be set on onDomReady to <code>&lt;body&gt;</code></p>\n<h4 id=\"doc--jQuery-\"><a href=\"#doc--jQuery-\" class=\"anchor\"></a>doc {jQuery}</h4>\n<p>Document shortcut</p>\n<h4 id=\"win--jQuery-\"><a href=\"#win--jQuery-\" class=\"anchor\"></a>win {jQuery}</h4>\n<p>Window shortcut</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"init----ctx=scope----→--jQuery-\"><a href=\"#init----ctx=scope----→--jQuery-\" class=\"anchor\"></a>init ( [ctx=scope] ) → {jQuery}</h4>\n<p>Initializes blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=scope] {jQuery | String}<br/>\nRoot DOM node</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>ctx Initialization context</p>\n<h4 id=\"destruct---ctx,--excludeSelf=false---\"><a href=\"#destruct---ctx,--excludeSelf=false---\" class=\"anchor\"></a>destruct ( ctx, [excludeSelf=false] )</h4>\n<p>Destroys blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>[excludeSelf=false] {Boolean}<br/>\nExclude the main domElem</li>\n</ul>\n<h4 id=\"update---ctx,-content---→--jQuery-\"><a href=\"#update---ctx,-content---→--jQuery-\" class=\"anchor\"></a>update ( ctx, content ) → {jQuery}</h4>\n<p>Replaces a fragment of the DOM tree inside the context, destroying old blocks and intializing new ones</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nNew content</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>Updated root DOM node</p>\n<h4 id=\"replace---ctx,-content---→--jQuery-\"><a href=\"#replace---ctx,-content---→--jQuery-\" class=\"anchor\"></a>replace ( ctx, content ) → {jQuery}</h4>\n<p>Changes a fragment of the DOM tree including the context and initializes blocks.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"append---ctx,-content---→--jQuery-\"><a href=\"#append---ctx,-content---→--jQuery-\" class=\"anchor\"></a>append ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the end of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"prepend---ctx,-content---→--jQuery-\"><a href=\"#prepend---ctx,-content---→--jQuery-\" class=\"anchor\"></a>prepend ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the beginning of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"before---ctx,-content---→--jQuery-\"><a href=\"#before---ctx,-content---→--jQuery-\" class=\"anchor\"></a>before ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree before the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"after---ctx,-content---→--jQuery-\"><a href=\"#after---ctx,-content---→--jQuery-\" class=\"anchor\"></a>after ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree after the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"liveInitOnEvent----elemName-,-event,--callback-----protected\"><a href=\"#liveInitOnEvent----elemName-,-event,--callback-----protected\" class=\"anchor\"></a>liveInitOnEvent ( [elemName], event, [callback] )  protected</h4>\n<p>Helper for live initialization for an event on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elemName] {String}<br/>\nElement name or names (separated by spaces)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to call after successful initialization</li>\n</ul>\n<h4 id=\"liveBindTo----to-,-event,--callback-----protected\"><a href=\"#liveBindTo----to-,-event,--callback-----protected\" class=\"anchor\"></a>liveBindTo ( [to], event, [callback] )  protected</h4>\n<p>Helper for subscribing to live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[to] {String | Object}<br/>\nDescription (object with modName, modVal, elem) or name of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveUnbindFrom----elem-,-event,--callback-----protected\"><a href=\"#liveUnbindFrom----elem-,-event,--callback-----protected\" class=\"anchor\"></a>liveUnbindFrom ( [elem], event, [callback] )  protected</h4>\n<p>Helper for unsubscribing from live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nName of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveInitOnBlockEvent---event,-blockName,-callback----protected\"><a href=\"#liveInitOnBlockEvent---event,-blockName,-callback----protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, blockName, callback )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event on the current block&#39;s DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>callback {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\"><a href=\"#liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\" class=\"anchor\"></a>liveInitOnBlockInsideEvent ( event, blockName, [callback] )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event inside the current block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"on----ctx-,-e,--data-,-fn,--fnCtx---\"><a href=\"#on----ctx-,-e,--data-,-fn,--fnCtx---\" class=\"anchor\"></a>on ( [ctx], e, [data], fn, [fnCtx] )</h4>\n<p>Adds a live event handler to a block, based on a specified element where the event will be listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event will be listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler&#39;s context</li>\n</ul>\n<h4 id=\"un----ctx-,-e,--fn-,--fnCtx---\"><a href=\"#un----ctx-,-e,--fn-,--fnCtx---\" class=\"anchor\"></a>un ( [ctx], e, [fn], [fnCtx] )</h4>\n<p>Removes the live event handler from a block, based on a specified element where the event was being listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event was being listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler context</li>\n</ul>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\"><a href=\"#decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\" class=\"anchor\"></a>decl ( name, [props], [staticProps], [_autoDecl] ) → {Function}  protected</h4>\n<p>Auto-declarator for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>name {Object}<br/>\nInstance name</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n<li>[_autoDecl] {Object}<br/>\nAuto-declaration flag</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"liveInitOnBlockEvent---event,--callback----→--Function---protected\"><a href=\"#liveInitOnBlockEvent---event,--callback----→--Function---protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, [callback] ) → {Function}  protected</h4>\n<p>Helper for live initialization for an own block&#39;s event</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new element&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__dom_init-Module\"><a href=\"#i-bem__dom_init-Module\" class=\"anchor\"></a>i-bem__dom_init Module</h1>\n<h2 id=\"-function-----ctx=scope----→--jQuery-\"><a href=\"#-function-----ctx=scope----→--jQuery-\" class=\"anchor\"></a><em>function</em> ( [ctx=scope] ) → {jQuery}</h2>\n<p>Initializes blocks on a fragment of the DOM tree</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>[ctx=scope] {jQuery}<br/>\nRoot DOM node</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{jQuery}</p>\n<p>ctx Initialization context</p>\n"},{"name":"identify","data":{"ru":{"name":"identify","examples":[],"description":""},"en":{"name":"identify","examples":[],"description":""}},"jsdoc":"<h1 id=\"identify-Module\"><a href=\"#identify-Module\" class=\"anchor\"></a>identify Module</h1>\n<h2 id=\"-function----obj,--onlyGet=false----→--String-\"><a href=\"#-function----obj,--onlyGet=false----→--String-\" class=\"anchor\"></a><em>function</em> ( obj, [onlyGet=false] ) → {String}</h2>\n<p>Makes unique ID</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {Object}<br/>\nObject that needs to be identified</li>\n<li>[onlyGet=false] {Boolean}<br/>\nReturn a unique value only if it had already been assigned before</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<p>ID</p>\n"},{"name":"idle","data":{"ru":{"name":"idle","examples":[],"description":""},"en":{"name":"idle","examples":[],"description":""}},"jsdoc":"<h1 id=\"idle-Module\"><a href=\"#idle-Module\" class=\"anchor\"></a>idle Module</h1>\n<h2 id=\"Idle-Class\"><a href=\"#Idle-Class\" class=\"anchor\"></a>Idle Class</h2>\n<p>Aughtments {events:Emitter}</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Idle---\"><a href=\"#Idle---\" class=\"anchor\"></a>Idle ()</h4>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"start---\"><a href=\"#start---\" class=\"anchor\"></a>start ()</h4>\n<p>Starts monitoring of idle state</p>\n<h4 id=\"stop---\"><a href=\"#stop---\" class=\"anchor\"></a>stop ()</h4>\n<p>Stops monitoring of idle state</p>\n<h4 id=\"isIdle----→--Boolean-\"><a href=\"#isIdle----→--Boolean-\" class=\"anchor\"></a>isIdle () → {Boolean}</h4>\n<p>Returns whether state is idle</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n"},{"name":"inherit","data":{"ru":{"name":"inherit","examples":[],"description":""},"en":{"name":"inherit","examples":[],"description":""}},"jsdoc":"<h1 id=\"inherit-Module\"><a href=\"#inherit-Module\" class=\"anchor\"></a>inherit Module</h1>\n<p>This module provides some syntax sugar for &quot;class&quot; declarations, constructors, mixins, &quot;super&quot; calls and static members.</p>\n<h2 id=\"-function-----baseClass---baseClassAndMixins-,-prototypeFields,--staticFields----→--Function-\"><a href=\"#-function-----baseClass---baseClassAndMixins-,-prototypeFields,--staticFields----→--Function-\" class=\"anchor\"></a><em>function</em> ( [baseClass | baseClassAndMixins], prototypeFields, [staticFields] ) → {Function}</h2>\n<p>Creates class</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>[baseClass | baseClassAndMixins] {Function | Array}<br/>\nclass (or class and mixins) to inherit from</li>\n<li>prototypeFields {Object}</li>\n<li>[staticFields] {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Function}</p>\n<p>class</p>\n"},{"name":"jquery","data":{"ru":{"name":"jquery","examples":[],"description":"<p>Используется для поставки на страницу нужных плагинов через зависимости блоков от элементов блока ##i-jquery##.</p>\n"},"en":{"name":"jquery","examples":[],"description":""}},"jsdoc":"<h1 id=\"jquery-Module\"><a href=\"#jquery-Module\" class=\"anchor\"></a>jquery Module</h1>\n<p>Provide jQuery (load if it does not exist).</p>\n<h2 id=\"-function----\"><a href=\"#-function----\" class=\"anchor\"></a><em>function</em> ()</h2>\n<h1 id=\"jquery__config-Module\"><a href=\"#jquery__config-Module\" class=\"anchor\"></a>jquery__config Module</h1>\n<p>Configuration for jQuery</p>\n<h2 id=\"url--String-\"><a href=\"#url--String-\" class=\"anchor\"></a>url {String}</h2>\n<p>URL for loading jQuery if it does not exist</p>\n<p>Value: &quot;//yastatic.net/jquery/2.1.1/jquery.min.js&quot;</p>\n<h1 id=\"jquery__config-Module\"><a href=\"#jquery__config-Module\" class=\"anchor\"></a>jquery__config Module</h1>\n<p>Configuration for jQuery</p>\n<h1 id=\"jquery-Module\"><a href=\"#jquery-Module\" class=\"anchor\"></a>jquery Module</h1>\n"},{"name":"keyboard","data":{"ru":{"name":"keyboard","examples":[],"description":""},"en":{"name":"keyboard","examples":[],"description":""}},"jsdoc":"<h1 id=\"keyboard__codes-Module\"><a href=\"#keyboard__codes-Module\" class=\"anchor\"></a>keyboard__codes Module</h1>\n"},{"name":"loader","data":{"ru":{"name":"loader","examples":[],"description":""},"en":{"name":"loader","examples":[],"description":""}},"jsdoc":"<h1 id=\"loader_type_bundle-Module\"><a href=\"#loader_type_bundle-Module\" class=\"anchor\"></a>loader_type_bundle Module</h1>\n<p>Load BEM bundle (JS+CSS) from external URL.</p>\n<h2 id=\"-function----id,-url,-onSuccess,--onError---\"><a href=\"#-function----id,-url,-onSuccess,--onError---\" class=\"anchor\"></a><em>function</em> ( id, url, onSuccess, [onError] )</h2>\n<p>Loads bundle</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>id {String}</li>\n<li>url {String}</li>\n<li>onSuccess {Function}</li>\n<li>[onError] {Function}</li>\n</ul>\n<h1 id=\"loader_type_js-Module\"><a href=\"#loader_type_js-Module\" class=\"anchor\"></a>loader_type_js Module</h1>\n<p>Load JS from external URL.</p>\n<h2 id=\"-function----path,-success,-error--\"><a href=\"#-function----path,-success,-error--\" class=\"anchor\"></a><em>function</em> ( path, success, error )</h2>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>path {String}<br/>\nresource link</li>\n<li>success {Function}<br/>\nto be called if the script succeeds</li>\n<li>error {Function}<br/>\nto be called if the script fails</li>\n</ul>\n"},{"name":"next-tick","data":{"ru":{"name":"next-tick","examples":[],"description":""},"en":{"name":"next-tick","examples":[],"description":""}},"jsdoc":"<h1 id=\"next-tick-Module\"><a href=\"#next-tick-Module\" class=\"anchor\"></a>next-tick Module</h1>\n<h2 id=\"-function----fn--\"><a href=\"#-function----fn--\" class=\"anchor\"></a><em>function</em> ( fn )</h2>\n<p>Executes given function on next tick.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>fn {Function}</li>\n</ul>\n"},{"name":"objects","data":{"ru":{"name":"objects","examples":[],"description":""},"en":{"name":"objects","examples":[],"description":""}},"jsdoc":"<h1 id=\"objects-Module\"><a href=\"#objects-Module\" class=\"anchor\"></a>objects Module</h1>\n<p>A set of helpers to work with JavaScript objects</p>\n<h2 id=\"extend---target,-source---→--Object-\"><a href=\"#extend---target,-source---→--Object-\" class=\"anchor\"></a>extend ( target, source ) → {Object}</h2>\n<p>Extends a given target by</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>target {Object}<br/>\nobject to extend</li>\n<li>source {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Object}</p>\n<h2 id=\"isEmpty---obj---→--Boolean-\"><a href=\"#isEmpty---obj---→--Boolean-\" class=\"anchor\"></a>isEmpty ( obj ) → {Boolean}</h2>\n<p>Check whether a given object is empty (contains no enumerable properties)</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"each---obj,-fn,--ctx---\"><a href=\"#each---obj,-fn,--ctx---\" class=\"anchor\"></a>each ( obj, fn, [ctx] )</h2>\n<p>Generic iterator function over object</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {Object}<br/>\nobject to iterate</li>\n<li>fn {Function}<br/>\ncallback</li>\n<li>[ctx] {Object}<br/>\ncallbacks&#39;s context</li>\n</ul>\n"},{"name":"page","data":{"ru":{"name":"page","examples":[{"name":"10-simple","path":"desktop.examples/page/10-simple","notation":{"block":"10-simple"}},{"name":"20-doctype","path":"desktop.examples/page/20-doctype","notation":{"block":"20-doctype"}},{"name":"30-css-ie","path":"desktop.examples/page/30-css-ie","notation":{"block":"30-css-ie"}},{"name":"40-es5-shims","path":"desktop.examples/page/40-es5-shims","notation":{"block":"40-es5-shims"}}],"description":"<p>﻿Блок <code>page</code> создаёт теги верхнего уровня страницы:</p>\n<ul>\n<li><code>&lt;html&gt;</code></li>\n<li><code>&lt;head&gt;</code></li>\n<li><code>&lt;body&gt;</code></li>\n</ul>\n<p>Именно он отвечает за то, какие подключить <code>CSS</code> и <code>JS</code> файлы к странице,\nвыставление <code>meta</code> тегов, заголовка и так далее.</p>\n<p>Декларация блока в <code>BEMJSON</code> начинается объявлением блока и\nуказанием свойства <code>title</code>, которое превращается в тег <code>&lt;title&gt;</code> в <code>HTML</code>.</p>\n<pre><code class=\"lang-javascript\">({\n    block: &#39;page&#39;,\n    title: &#39;Page title&#39;,\n    content: &#39;Блок page&#39;\n})\n</code></pre>\n<p>Указание свойства <code>head</code> дополняет элемент <code>head</code>, соответствующий <code>HTML</code> тегу <code>&lt;head&gt;</code>,\nэлементами для подключения <code>CSS</code> и <code>JS</code> файлов, а также указания <code>meta</code>:</p>\n<pre><code class=\"lang-javascript\">({\n    block: &#39;page&#39;,\n    title: &#39;Page title&#39;,\n    head: [\n        { elem: &#39;css&#39;, url: &#39;example.css&#39;, ie: false },\n        { elem: &#39;css&#39;, url: &#39;example.ie.css&#39;, ie: &#39;lt IE 8&#39; },\n        { elem: &#39;js&#39;, url: &#39;example.js&#39; },\n        { elem: &#39;meta&#39;, attrs: { name: &#39;keywords&#39;, content: &#39;js, css, html&#39; } },\n        { elem: &#39;meta&#39;, attrs: { name: &#39;description&#39;, content: &#39;Yet another webdev blog&#39; } }\n    ],\n    content: &#39;Страница с подключенными CSS, JS и meta-данными&#39;\n})\n</code></pre>\n<p>Элемент <code>css</code> превращается в <code>HTML</code> в тег <code>&lt;link&gt;</code>, подключающий как <code>CSS</code> стиль тот файл,\nчто указан в свойстве <code>url</code> этого элемента. Также у такого элемента может быть свойство <code>ie</code>.\nЕсли это свойство <code>false</code>, то будут использоваться такие <code>conditional comments</code>, которые предотвратят использование этих стилей в <code>IE</code>. При строчном значении этого свойства тег <code>&lt;link&gt;</code> , будет обёрнут в соответствующий <code>conditional comment</code>, и этот стиль будет грузиться и использоваться указанных браузерах.</p>\n<p>Также есть возможность указывать свойство <code>content</code> для содержания тега <code>&lt;style&gt;</code>:</p>\n<pre><code class=\"lang-javascript\">({\n    block: &#39;page&#39;,\n    title: &#39;Page title&#39;,\n    head: [\n        {\n            elem: &#39;css&#39;,\n            content: &#39;.page { color: #f00 }&#39;\n        }\n    ],\n    content: &#39;Страница с тэгом &lt;style&gt;&#39;\n})\n</code></pre>\n<p>Элемент <code>js</code> действует аналогично, подключая к странице <code>JS</code> файлы при помощи тега <code>&lt;script&gt;</code>.</p>\n<p>Свойство <code>head</code> не описывает содержание <code>HTML</code>-тега <code>&lt;head&gt;</code> полностью, а лишь\nдополняет дефолтное, которое блок сам создаёт в своём <code>BEMHTML</code> шаблоне.</p>\n<h3 id=\"Тег-<meta>-с-указанием-кодировки\"><a href=\"#Тег-<meta>-с-указанием-кодировки\" class=\"anchor\"></a>Тег <code>meta</code> с указанием кодировки</h3>\n<p><code>BEMHTML</code>:</p>\n<pre><code class=\"lang-javascript\">content: [\n{\n    tag: &#39;meta&#39;,\n    attrs: { &#39;http-equiv&#39;: &#39;content-type&#39;, content: &#39;text/html; charset=utf-8&#39; }\n},\n// ...\n]\n</code></pre>\n<h3 id=\"Тег-<meta>-для-использования-`IE9`--и-выше--в-максимальном-`compatibility`-режиме\"><a href=\"#Тег-<meta>-для-использования-`IE9`--и-выше--в-максимальном-`compatibility`-режиме\" class=\"anchor\"></a>Тег <code>meta</code> для использования <code>IE9</code> (и выше) в максимальном <code>compatibility</code> режиме</h3>\n<p><code>BEMHTML</code>:</p>\n<pre><code class=\"lang-javascript\">content: [\n// ...\n{\n    tag: &#39;meta&#39;,\n    attrs: { &#39;http-equiv&#39;: &#39;X-UA-Compatible&#39;, content: &#39;IE=EmulateIE7, IE=edge&#39; }\n},\n// ...\n]\n</code></pre>\n<h3 id=\"Выставление-значения-тега-<title>-страницы-из-свойства\"><a href=\"#Выставление-значения-тега-<title>-страницы-из-свойства\" class=\"anchor\"></a>Выставление значения тега <code>&lt;title&gt;</code> страницы из свойства</h3>\n<pre><code class=\"lang-javascript\">content: [\n// ...\n{\n    tag: &#39;title&#39;,\n    content: this.ctx.title\n},\n// ...\n]\n</code></pre>\n<h3 id=\"Выставление-фавиконки\"><a href=\"#Выставление-фавиконки\" class=\"anchor\"></a>Выставление фавиконки</h3>\n<pre><code class=\"lang-javascript\">content: [\n// ...\nthis.ctx.favicon ? {\n    elem: &#39;favicon&#39;,\n    url: this.ctx.favicon\n} : &#39;&#39;,\n// ...\n]\n</code></pre>\n<h3 id=\"Декларация-блока-ua\"><a href=\"#Декларация-блока-ua\" class=\"anchor\"></a>Декларация блока ua</h3>\n<pre><code class=\"lang-javascript\">content: [\n// ...\n{\n    block: &#39;ua&#39;\n},\n// ...\n]\n</code></pre>\n<p>Значением свойства <code>content</code> блока <code>page</code> может быть хеш-описание содержимого\n(если речь идёт лишь об одном блоке) или массив блоков, описанных хешами:</p>\n<pre><code class=\"lang-javascript\">({\n    block: &#39;page&#39;,\n    title: &#39;Page title&#39;,\n    content: {\n        block: &#39;b-link&#39;,\n        mods: { pseudo: &#39;yes&#39;, togcolor: &#39;yes&#39;, color: &#39;green&#39; },\n        url: &#39;#&#39;,\n        target: &#39;_blank&#39;,\n        title: &#39;Кликни меня&#39;,\n        content: &#39;Псевдоссылка, меняющая цвет по клику&#39;\n    }\n})\n</code></pre>\n<p>На блоки, содержащиеся в <code>content</code>, действуют их <code>BEMHTML</code> шаблоны.</p>\n<h3 id=\"Отмена-автоматической-инициализации-блоков\"><a href=\"#Отмена-автоматической-инициализации-блоков\" class=\"anchor\"></a>Отмена автоматической инициализации блоков</h3>\n<pre><code class=\"lang-javascript\">noDeps: [\n    { block: &#39;i-bem&#39;, elem: &#39;dom&#39;, mods: { init: &#39;auto&#39; } }\n]\n</code></pre>\n"},"en":{"name":"page","examples":[{"name":"10-simple","path":"desktop.examples/page/10-simple","notation":{"block":"10-simple"}},{"name":"20-doctype","path":"desktop.examples/page/20-doctype","notation":{"block":"20-doctype"}},{"name":"30-css-ie","path":"desktop.examples/page/30-css-ie","notation":{"block":"30-css-ie"}},{"name":"40-es5-shims","path":"desktop.examples/page/40-es5-shims","notation":{"block":"40-es5-shims"}}],"description":""}},"jsdoc":""},{"name":"querystring","data":{"ru":{"name":"querystring","examples":[],"description":"<h1 id=\"querystring\"><a href=\"#querystring\" class=\"anchor\"></a>querystring</h1>\n<p>Блок <code>querystring</code> служит для работы с адресной строкой браузера – обработки и формирования запросов.</p>\n<p>Блок реализован в технологии <code>vanilla.js</code> и подходит для использования в серверных и клиентских приложениях.</p>\n<h2 id=\"Публичные-методы-блока\"><a href=\"#Публичные-методы-блока\" class=\"anchor\"></a>Публичные методы блока</h2>\n<p>Блок предоставляет следующий набор публичных методов:</p>\n<ul>\n<li><code>parse</code> – служит для формирования объекта на основании параметров запроса адресной строки. Метод принимает на вход строку с параметрами и возвращает сформированный объект. Параметры передаются в виде пар ключ-значение с символом <code>=</code> в качестве разделителя. Пары отделяются символом <code>&amp;</code>. В ходе работы метода, ключи и значения декодируются из формата <code>URI</code>;</li>\n<li><code>stringify</code> – служит для формирования строки запроса с набором параметров на основании собственных свойств объекта. Метод принимает на вход объект и возвращает сформированную строку запроса. Имена свойств отделяются от значений символом <code>=</code>, пары разделяются символом <code>&amp;</code>. </li>\n</ul>\n<h2 id=\"Элементы-блока\"><a href=\"#Элементы-блока\" class=\"anchor\"></a>Элементы блока</h2>\n<h3 id=\"__uri\"><a href=\"#__uri\" class=\"anchor\"></a>__uri</h3>\n<p>Элемент предназначен для декодирования строки из формата <code>URI</code>. </p>\n<p>Элемент предоставляет следующий набор публичных методов:</p>\n<ul>\n<li><code>decodeURI</code> – декодирование <code>URI</code>. Заменяет каждую эскейпинговую последовательность в строке <code>URI</code> соответствующим символом. Метод поддерживает тот же набор последовательностей, что и стандартный метод JavaScript <code>encodeURI</code>. Символ <code>#</code> не декодируется.</li>\n<li><code>decodeURIComponent</code> – декодирование компонента <code>URI</code>. Заменяет каждую эскейпинговую последовательность в строке <code>URI</code> соответствующим символом. Метод позволяет декодировать компонент <code>URI</code>, сформированный методом <code>encodeURIComponent</code>. Декодируются последовательности, соответствующие символам <code>&amp;</code>, <code>+</code>, и <code>=</code>.</li>\n</ul>\n<p>Оба метода являются оберткой над соответствующими стандартными методами JavaScript <code>decodeURI</code> и <code>decodeURIComponent</code>. В ходе их работы производится проверка входной строки:</p>\n<ul>\n<li>если передана строка в формате, отличном от <code>UTF8</code>, генерируется ошибка;</li>\n<li>если в строке не были найдены эскейпинговые последовательности методы возвращают ее без изменений.</li>\n</ul>\n"},"en":{"name":"querystring","examples":[],"description":""}},"jsdoc":"<h1 id=\"querystring-Module\"><a href=\"#querystring-Module\" class=\"anchor\"></a>querystring Module</h1>\n<p>A set of helpers to work with query strings</p>\n<h2 id=\"parse---str---→--Object-\"><a href=\"#parse---str---→--Object-\" class=\"anchor\"></a>parse ( str ) → {Object}</h2>\n<p>Parse a query string to an object</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Object}</p>\n<h2 id=\"stringify---obj---→--String-\"><a href=\"#stringify---obj---→--String-\" class=\"anchor\"></a>stringify ( obj ) → {String}</h2>\n<p>Serialize an object to a query string</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<h1 id=\"querystring__uri-Module\"><a href=\"#querystring__uri-Module\" class=\"anchor\"></a>querystring__uri Module</h1>\n<p>A set of helpers to work with URI</p>\n<h2 id=\"decodeURI---str---→--String-\"><a href=\"#decodeURI---str---→--String-\" class=\"anchor\"></a>decodeURI ( str ) → {String}</h2>\n<p>Decodes URI string</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<h2 id=\"decodeURIComponent---str---→--String-\"><a href=\"#decodeURIComponent---str---→--String-\" class=\"anchor\"></a>decodeURIComponent ( str ) → {String}</h2>\n<p>Decodes URI component string</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n"},{"name":"strings","data":{"ru":{"name":"strings","examples":[],"description":""},"en":{"name":"strings","examples":[],"description":""}},"jsdoc":"<h1 id=\"strings__escape-Module\"><a href=\"#strings__escape-Module\" class=\"anchor\"></a>strings__escape Module</h1>\n<p>A set of string escaping functions</p>\n<h2 id=\"xml---str---→--String-\"><a href=\"#xml---str---→--String-\" class=\"anchor\"></a>xml ( str ) → {String}</h2>\n<p>Escape string to use in XML</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<h2 id=\"html---str---→--String-\"><a href=\"#html---str---→--String-\" class=\"anchor\"></a>html ( str ) → {String}</h2>\n<p>Escape string to use in HTML</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<h2 id=\"attr---str---→--String-\"><a href=\"#attr---str---→--String-\" class=\"anchor\"></a>attr ( str ) → {String}</h2>\n<p>Escape string to use in attributes</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n"},{"name":"tick","data":{"ru":{"name":"tick","examples":[],"description":""},"en":{"name":"tick","examples":[],"description":""}},"jsdoc":"<h1 id=\"tick-Module\"><a href=\"#tick-Module\" class=\"anchor\"></a>tick Module</h1>\n<p>Helpers for polling anything</p>\n<h2 id=\"Tick-Class\"><a href=\"#Tick-Class\" class=\"anchor\"></a>Tick Class</h2>\n<p>Aughtments {events:Emitter}</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Tick---\"><a href=\"#Tick---\" class=\"anchor\"></a>Tick ()</h4>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"start---\"><a href=\"#start---\" class=\"anchor\"></a>start ()</h4>\n<p>Starts polling</p>\n<h4 id=\"stop---\"><a href=\"#stop---\" class=\"anchor\"></a>stop ()</h4>\n<p>Stops polling</p>\n"},{"name":"ua","data":{"ru":{"name":"ua","examples":[],"description":"<p>Блок <code>ua</code> — служебный, не имеет визуального представления на странице.</p>\n<p>Этот блок используется всегда, когда используется блок <code>page</code>, так как вызывается\nвнутри него. Задавать его самостоятельно на странице не нужно.</p>\n<p>В <code>HTML</code> блок представлен в виде инлайнового скрипта, в результате работы которого,\nу тега <code>&lt;html&gt;</code> появляются <code>CSS</code>-классы, идентифицирующие, включен ли <code>JS</code> (<code>ua_js_no</code>/<code>ua_js_yes</code>) и в\nкаком режиме рендеринга находится браузер (<code>ua_css_standart</code>/<code>ua_css_quirks</code>).</p>\n<p>Эти классы можно использовать, чтобы при помощи <code>CSS</code> задавать блокам разный\nвнешний вид в зависимости от ситуации.</p>\n<p>Если такие классы проекту не нужны, можно переопределить <code>BEMHTML</code> шаблон блока <code>ua</code>\nна уровне переопределения проекта:</p>\n<pre><code class=\"lang-js\">block(&#39;ua&#39;).default()()\n</code></pre>\n"},"en":{"name":"ua","examples":[],"description":""}},"jsdoc":"<h1 id=\"ua-Module\"><a href=\"#ua-Module\" class=\"anchor\"></a>ua Module</h1>\n<p>Detect some user agent features (works like jQuery.browser in jQuery 1.8)</p>\n<p>See:</p>\n<ul>\n<li><a href=\"http://code.jquery.com/jquery-migrate-1.1.1.js\">http://code.jquery.com/jquery-migrate-1.1.1.js</a></li>\n</ul>\n<h2 id=\"-type---Object-\"><a href=\"#-type---Object-\" class=\"anchor\"></a><em>type</em> {Object}</h2>\n"},{"name":"vow","data":{"ru":{"name":"vow","examples":[],"description":""},"en":{"name":"vow","examples":[],"description":""}},"jsdoc":"<h1 id=\"vow-Module\"><a href=\"#vow-Module\" class=\"anchor\"></a>vow Module</h1>\n<h2 id=\"Deferred-Class\"><a href=\"#Deferred-Class\" class=\"anchor\"></a>Deferred Class</h2>\n<p>The <code>Deferred</code> class is used to encapsulate newly-created promise object along with functions that resolve, reject or notify it.</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Deferred---\"><a href=\"#Deferred---\" class=\"anchor\"></a>Deferred ()</h4>\n<p>You can use <code>vow.defer()</code> instead of using this constructor.</p>\n<p><code>new vow.Deferred()</code> gives the same result as <code>vow.defer()</code>.</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"promise----→--vow:Promise-\"><a href=\"#promise----→--vow:Promise-\" class=\"anchor\"></a>promise () → {vow:Promise}</h4>\n<p>Returns corresponding promise.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"resolve---value--\"><a href=\"#resolve---value--\" class=\"anchor\"></a>resolve ( value )</h4>\n<p>Resolves corresponding promise with given <code>value</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>value {*}</li>\n</ul>\n<h4 id=\"reject---reason--\"><a href=\"#reject---reason--\" class=\"anchor\"></a>reject ( reason )</h4>\n<p>Rejects corresponding promise with given <code>reason</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>reason {*}</li>\n</ul>\n<h4 id=\"notify---value--\"><a href=\"#notify---value--\" class=\"anchor\"></a>notify ( value )</h4>\n<p>Notifies corresponding promise with given <code>value</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>value {*}</li>\n</ul>\n<h2 id=\"Promise-Class\"><a href=\"#Promise-Class\" class=\"anchor\"></a>Promise Class</h2>\n<p>The <code>Promise</code> class is used when you want to give to the caller something to subscribe to,\nbut not the ability to resolve or reject the deferred.</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Promise---resolver--\"><a href=\"#Promise---resolver--\" class=\"anchor\"></a>Promise ( resolver )</h4>\n<p>You should use this constructor directly only if you are going to use <code>vow</code> as DOM Promises implementation.\nIn other case you should use <code>vow.defer()</code> and <code>defer.promise()</code> methods.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>resolver {Function}<br/>\nSee <a href=\"https://github.com/domenic/promises-unwrapping/blob/master/README.md#the-promise-constructor\">https://github.com/domenic/promises-unwrapping/blob/master/README.md#the-promise-constructor</a> for details.</li>\n</ul>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"valueOf----→----\"><a href=\"#valueOf----→----\" class=\"anchor\"></a>valueOf () → {*}</h4>\n<p>Returns value of fulfilled promise or reason in case of rejection.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{*}</p>\n<h4 id=\"isResolved----→--Boolean-\"><a href=\"#isResolved----→--Boolean-\" class=\"anchor\"></a>isResolved () → {Boolean}</h4>\n<p>Returns <code>true</code> if promise is resolved.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"isFulfilled----→--Boolean-\"><a href=\"#isFulfilled----→--Boolean-\" class=\"anchor\"></a>isFulfilled () → {Boolean}</h4>\n<p>Returns <code>true</code> if promise is fulfilled.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"isRejected----→--Boolean-\"><a href=\"#isRejected----→--Boolean-\" class=\"anchor\"></a>isRejected () → {Boolean}</h4>\n<p>Returns <code>true</code> if promise is rejected.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"then----onFulfilled-,--onRejected-,--onProgress-,--ctx----→--vow:Promise-\"><a href=\"#then----onFulfilled-,--onRejected-,--onProgress-,--ctx----→--vow:Promise-\" class=\"anchor\"></a>then ( [onFulfilled], [onRejected], [onProgress], [ctx] ) → {vow:Promise}</h4>\n<p>Adds reactions to promise.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[onProgress] {Function}<br/>\nCallback that will to be invoked with the value after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<p>A new promise, see <a href=\"https://github.com/promises-aplus/promises-spec\">https://github.com/promises-aplus/promises-spec</a> for details</p>\n<h4 id=\"catch---onRejected,--ctx----→--vow:Promise-\"><a href=\"#catch---onRejected,--ctx----→--vow:Promise-\" class=\"anchor\"></a>catch ( onRejected, [ctx] ) → {vow:Promise}</h4>\n<p>Adds rejection reaction only. It is shortcut for <code>promise.then(undefined, onRejected)</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>onRejected {Function}<br/>\nCallback to be called with the value after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"fail---onRejected,--ctx----→--vow:Promise-\"><a href=\"#fail---onRejected,--ctx----→--vow:Promise-\" class=\"anchor\"></a>fail ( onRejected, [ctx] ) → {vow:Promise}</h4>\n<p>Adds rejection reaction only. It is shortcut for <code>promise.then(null, onRejected)</code>. It&#39;s alias for <code>catch</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>onRejected {Function}<br/>\nCallback to be called with the value after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"always---onResolved,--ctx----→--vow:Promise-\"><a href=\"#always---onResolved,--ctx----→--vow:Promise-\" class=\"anchor\"></a>always ( onResolved, [ctx] ) → {vow:Promise}</h4>\n<p>Adds resolving reaction (to fulfillment and rejection both).</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>onResolved {Function}<br/>\nCallback that to be called with the value after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"progress---onProgress,--ctx----→--vow:Promise-\"><a href=\"#progress---onProgress,--ctx----→--vow:Promise-\" class=\"anchor\"></a>progress ( onProgress, [ctx] ) → {vow:Promise}</h4>\n<p>Adds progress reaction.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>onProgress {Function}<br/>\nCallback to be called with the value when promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"spread----onFulfilled-,--onRejected-,--ctx----→--vow:Promise-\"><a href=\"#spread----onFulfilled-,--onRejected-,--ctx----→--vow:Promise-\" class=\"anchor\"></a>spread ( [onFulfilled], [onRejected], [ctx] ) → {vow:Promise}</h4>\n<p>Like <code>promise.then</code>, but &quot;spreads&quot; the array into a variadic value handler.\nIt is useful with <code>vow.all</code> and <code>vow.allResolved</code> methods.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"done----onFulfilled-,--onRejected-,--onProgress-,--ctx---\"><a href=\"#done----onFulfilled-,--onRejected-,--onProgress-,--ctx---\" class=\"anchor\"></a>done ( [onFulfilled], [onRejected], [onProgress], [ctx] )</h4>\n<p>Like <code>then</code>, but terminates a chain of promises.\nIf the promise has been rejected, throws it as an exception in a future turn of the event loop.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[onProgress] {Function}<br/>\nCallback that will to be invoked with the value after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h4 id=\"delay---delay---→--vow:Promise-\"><a href=\"#delay---delay---→--vow:Promise-\" class=\"anchor\"></a>delay ( delay ) → {vow:Promise}</h4>\n<p>Returns a new promise that will be fulfilled in <code>delay</code> milliseconds if the promise is fulfilled,\nor immediately rejected if promise is rejected.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>delay {Number}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"timeout---timeout---→--vow:Promise-\"><a href=\"#timeout---timeout---→--vow:Promise-\" class=\"anchor\"></a>timeout ( timeout ) → {vow:Promise}</h4>\n<p>Returns a new promise that will be rejected in <code>timeout</code> milliseconds\nif the promise is not resolved beforehand.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>timeout {Number}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"cast---value---→--vow:Promise-\"><a href=\"#cast---value---→--vow:Promise-\" class=\"anchor\"></a>cast ( value ) → {vow:Promise}</h4>\n<p>Coerces given <code>value</code> to a promise, or returns the <code>value</code> if it&#39;s already a promise.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>value {*}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"all---iterable---→--vow:Promise-\"><a href=\"#all---iterable---→--vow:Promise-\" class=\"anchor\"></a>all ( iterable ) → {vow:Promise}</h4>\n<p>Returns a promise to be fulfilled only after all the items in <code>iterable</code> are fulfilled,\nor to be rejected when any of the <code>iterable</code> is rejected.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>iterable {Array | Object}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"race---iterable---→--vow:Promise-\"><a href=\"#race---iterable---→--vow:Promise-\" class=\"anchor\"></a>race ( iterable ) → {vow:Promise}</h4>\n<p>Returns a promise to be fulfilled only when any of the items in <code>iterable</code> are fulfilled,\nor to be rejected when the first item is rejected.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>iterable {Array}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"resolve---value---→--vow:Promise-\"><a href=\"#resolve---value---→--vow:Promise-\" class=\"anchor\"></a>resolve ( value ) → {vow:Promise}</h4>\n<p>Returns a promise that has already been resolved with the given <code>value</code>.\nIf <code>value</code> is a promise, returned promise will be adopted with the state of given promise.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>value {*}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"reject---reason---→--vow:Promise-\"><a href=\"#reject---reason---→--vow:Promise-\" class=\"anchor\"></a>reject ( reason ) → {vow:Promise}</h4>\n<p>Returns a promise that has already been rejected with the given <code>reason</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>reason {*}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h2 id=\"defer----→--vow:Deferred-\"><a href=\"#defer----→--vow:Deferred-\" class=\"anchor\"></a>defer () → {vow:Deferred}</h2>\n<p>Creates a new deferred. This method is a factory method for <code>vow:Deferred</code> class.\nIt&#39;s equivalent to <code>new vow.Deferred()</code>.</p>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Deferred}</p>\n<h2 id=\"when---value,--onFulfilled-,--onRejected-,--onProgress-,--ctx----→--vow:Promise-\"><a href=\"#when---value,--onFulfilled-,--onRejected-,--onProgress-,--ctx----→--vow:Promise-\" class=\"anchor\"></a>when ( value, [onFulfilled], [onRejected], [onProgress], [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.then</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[onProgress] {Function}<br/>\nCallback that will to be invoked with the value after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"fail---value,-onRejected,--ctx----→--vow:Promise-\"><a href=\"#fail---value,-onRejected,--ctx----→--vow:Promise-\" class=\"anchor\"></a>fail ( value, onRejected, [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.fail</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>onRejected {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"always---value,-onResolved,--ctx----→--vow:Promise-\"><a href=\"#always---value,-onResolved,--ctx----→--vow:Promise-\" class=\"anchor\"></a>always ( value, onResolved, [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.always</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>onResolved {Function}<br/>\nCallback that will to be invoked with the reason after promise has been resolved</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"progress---value,-onProgress,--ctx----→--vow:Promise-\"><a href=\"#progress---value,-onProgress,--ctx----→--vow:Promise-\" class=\"anchor\"></a>progress ( value, onProgress, [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.progress</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>onProgress {Function}<br/>\nCallback that will to be invoked with the reason after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"spread---value,--onFulfilled-,--onRejected-,--ctx----→--vow:Promise-\"><a href=\"#spread---value,--onFulfilled-,--onRejected-,--ctx----→--vow:Promise-\" class=\"anchor\"></a>spread ( value, [onFulfilled], [onRejected], [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.spread</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"done---value,--onFulfilled-,--onRejected-,--onProgress-,--ctx---\"><a href=\"#done---value,--onFulfilled-,--onRejected-,--onProgress-,--ctx---\" class=\"anchor\"></a>done ( value, [onFulfilled], [onRejected], [onProgress], [ctx] )</h2>\n<p>Static equivalent to <code>promise.done</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[onProgress] {Function}<br/>\nCallback that will to be invoked with the value after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h2 id=\"isPromise---value---→--Boolean-\"><a href=\"#isPromise---value---→--Boolean-\" class=\"anchor\"></a>isPromise ( value ) → {Boolean}</h2>\n<p>Checks whether the given <code>value</code> is a promise-like object</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"cast---value---→--vow:Promise-\"><a href=\"#cast---value---→--vow:Promise-\" class=\"anchor\"></a>cast ( value ) → {vow:Promise}</h2>\n<p>Coerces given <code>value</code> to a promise, or returns the <code>value</code> if it&#39;s already a promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"valueOf---value---→----\"><a href=\"#valueOf---value---→----\" class=\"anchor\"></a>valueOf ( value ) → {*}</h2>\n<p>Static equivalent to <code>promise.valueOf</code>.\nIf given <code>value</code> is not an instance of <code>vow.Promise</code>, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{*}</p>\n<h2 id=\"isFulfilled---value---→--Boolean-\"><a href=\"#isFulfilled---value---→--Boolean-\" class=\"anchor\"></a>isFulfilled ( value ) → {Boolean}</h2>\n<p>Static equivalent to <code>promise.isFulfilled</code>.\nIf given <code>value</code> is not an instance of <code>vow.Promise</code>, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"isRejected---value---→--Boolean-\"><a href=\"#isRejected---value---→--Boolean-\" class=\"anchor\"></a>isRejected ( value ) → {Boolean}</h2>\n<p>Static equivalent to <code>promise.isRejected</code>.\nIf given <code>value</code> is not an instance of <code>vow.Promise</code>, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"isResolved---value---→--Boolean-\"><a href=\"#isResolved---value---→--Boolean-\" class=\"anchor\"></a>isResolved ( value ) → {Boolean}</h2>\n<p>Static equivalent to <code>promise.isResolved</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"resolve---value---→--vow:Promise-\"><a href=\"#resolve---value---→--vow:Promise-\" class=\"anchor\"></a>resolve ( value ) → {vow:Promise}</h2>\n<p>Returns a promise that has already been resolved with the given <code>value</code>.\nIf <code>value</code> is a promise, returned promise will be adopted with the state of given promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"fulfill---value---→--vow:Promise-\"><a href=\"#fulfill---value---→--vow:Promise-\" class=\"anchor\"></a>fulfill ( value ) → {vow:Promise}</h2>\n<p>Returns a promise that has already been fulfilled with the given <code>value</code>.\nIf <code>value</code> is a promise, returned promise will be fulfilled with fulfill/rejection value of given promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"reject---reason---→--vow:Promise-\"><a href=\"#reject---reason---→--vow:Promise-\" class=\"anchor\"></a>reject ( reason ) → {vow:Promise}</h2>\n<p>Returns a promise that has already been rejected with the given <code>reason</code>.\nIf <code>reason</code> is a promise, returned promise will be rejected with fulfill/rejection value of given promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>reason {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"invoke---fn,--args----→--vow:Promise-\"><a href=\"#invoke---fn,--args----→--vow:Promise-\" class=\"anchor\"></a>invoke ( fn, [args] ) → {vow:Promise}</h2>\n<p>Invokes a given function <code>fn</code> with arguments <code>args</code></p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>fn {Function}</li>\n<li>[args] {...*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"all---iterable---→--vow:Promise-\"><a href=\"#all---iterable---→--vow:Promise-\" class=\"anchor\"></a>all ( iterable ) → {vow:Promise}</h2>\n<p>Returns a promise to be fulfilled only after all the items in <code>iterable</code> are fulfilled,\nor to be rejected when any of the <code>iterable</code> is rejected.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>iterable {Array | Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"allResolved---iterable---→--vow:Promise-\"><a href=\"#allResolved---iterable---→--vow:Promise-\" class=\"anchor\"></a>allResolved ( iterable ) → {vow:Promise}</h2>\n<p>Returns a promise to be fulfilled only after all the items in <code>iterable</code> are resolved.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>iterable {Array | Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"any---iterable---→--vow:Promise-\"><a href=\"#any---iterable---→--vow:Promise-\" class=\"anchor\"></a>any ( iterable ) → {vow:Promise}</h2>\n<p>Returns a promise to be fulfilled only when any of the items in <code>iterable</code> are fulfilled,\nor to be rejected when all the items are rejected (with the reason of the first rejected item).</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>iterable {Array}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"anyResolved---iterable---→--vow:Promise-\"><a href=\"#anyResolved---iterable---→--vow:Promise-\" class=\"anchor\"></a>anyResolved ( iterable ) → {vow:Promise}</h2>\n<p>Returns a promise to be fulfilled only when any of the items in <code>iterable</code> are fulfilled,\nor to be rejected when the first item is rejected.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>iterable {Array}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"delay---value,-delay---→--vow:Promise-\"><a href=\"#delay---value,-delay---→--vow:Promise-\" class=\"anchor\"></a>delay ( value, delay ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.delay</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>delay {Number}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"timeout---value,-timeout---→--vow:Promise-\"><a href=\"#timeout---value,-timeout---→--vow:Promise-\" class=\"anchor\"></a>timeout ( value, timeout ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.timeout</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>timeout {Number}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n"}]},{"name":"touch-pad.docs","blocks":[{"name":"clearfix","data":{"ru":{"name":"clearfix","examples":[],"description":"<div class=\"shmakowiki\"><p>Для использования блока необходимо подмешать его к нужному html-элементу, например:</p><pre><code class=\"xml\">    &lt;div style=&quot;background: #ada;&quot;&gt;\n        top\n    &lt;/div&gt;\n\n    &lt;div class=&quot;clearfix&quot; style=&quot;background: #eda;&quot;&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item1&lt;/div&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item2&lt;/div&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item3&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div style=&quot;background: #ada;&quot;&gt;\n        bottom\n    &lt;/div&gt;</code></pre></div>"},"en":{"name":"clearfix","examples":[],"description":""}},"jsdoc":""},{"name":"cookie","data":{"ru":{"name":"cookie","examples":[],"description":""},"en":{"name":"cookie","examples":[],"description":""}},"jsdoc":"<h1 id=\"cookie\"><a href=\"#cookie\" class=\"anchor\"></a>cookie</h1>\n<p>inspired from $.cookie plugin by Klaus Hartl (stilbuero.de) Module</p>\n<h2 id=\"get---name---→--String---null-\"><a href=\"#get---name---→--String---null-\" class=\"anchor\"></a>get ( name ) → {String | null}</h2>\n<p>Returns cookie by given name</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>name {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String | null}</p>\n<h2 id=\"set---name,-val,-options---→--cookie-\"><a href=\"#set---name,-val,-options---→--cookie-\" class=\"anchor\"></a>set ( name, val, options ) → {cookie}</h2>\n<p>Sets cookie by given name</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>name {String}</li>\n<li>val {String}</li>\n<li>options {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{cookie}</p>\n<p>this</p>\n"},{"name":"dom","data":{"ru":{"name":"dom","examples":[],"description":""},"en":{"name":"dom","examples":[],"description":""}},"jsdoc":"<h1 id=\"dom-Module\"><a href=\"#dom-Module\" class=\"anchor\"></a>dom Module</h1>\n<p>some DOM utils</p>\n<h2 id=\"contains---ctx,-domElem---→--Boolean-\"><a href=\"#contains---ctx,-domElem---→--Boolean-\" class=\"anchor\"></a>contains ( ctx, domElem ) → {Boolean}</h2>\n<p>Checks whether a DOM elem is in a context</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>ctx {jQuery}<br/>\nDOM elem where check is being performed</li>\n<li>domElem {jQuery}<br/>\nDOM elem to check</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"getFocused----→--jQuery-\"><a href=\"#getFocused----→--jQuery-\" class=\"anchor\"></a>getFocused () → {jQuery}</h2>\n<p>Returns current focused DOM elem in document</p>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{jQuery}</p>\n<h2 id=\"containsFocus---domElem---→--Boolean-\"><a href=\"#containsFocus---domElem---→--Boolean-\" class=\"anchor\"></a>containsFocus ( domElem ) → {Boolean}</h2>\n<p>Checks whether a DOM element contains focus</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>domElem {jQuery}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"isFocusable---domElem---→--Boolean-\"><a href=\"#isFocusable---domElem---→--Boolean-\" class=\"anchor\"></a>isFocusable ( domElem ) → {Boolean}</h2>\n<p>Checks whether a browser currently can set focus on DOM elem</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>domElem {jQuery}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"isEditable---domElem---→--Boolean-\"><a href=\"#isEditable---domElem---→--Boolean-\" class=\"anchor\"></a>isEditable ( domElem ) → {Boolean}</h2>\n<p>Checks whether a domElem is intended to edit text</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>domElem {jQuery}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n"},{"name":"events","data":{"ru":{"name":"events","examples":[],"description":""},"en":{"name":"events","examples":[],"description":""}},"jsdoc":"<h1 id=\"events-Module\"><a href=\"#events-Module\" class=\"anchor\"></a>events Module</h1>\n<h2 id=\"Event-Class\"><a href=\"#Event-Class\" class=\"anchor\"></a>Event Class</h2>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Event---type,-target--\"><a href=\"#Event---type,-target--\" class=\"anchor\"></a>Event ( type, target )</h4>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>type {String}</li>\n<li>target {Object}</li>\n</ul>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"type--String-\"><a href=\"#type--String-\" class=\"anchor\"></a>type {String}</h4>\n<p>Type</p>\n<h4 id=\"target--String-\"><a href=\"#target--String-\" class=\"anchor\"></a>target {String}</h4>\n<p>Target</p>\n<h4 id=\"result----\"><a href=\"#result----\" class=\"anchor\"></a>result {*}</h4>\n<p>Result</p>\n<h4 id=\"data----\"><a href=\"#data----\" class=\"anchor\"></a>data {*}</h4>\n<p>Data</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"preventDefault---\"><a href=\"#preventDefault---\" class=\"anchor\"></a>preventDefault ()</h4>\n<p>Prevents default action</p>\n<h4 id=\"isDefaultPrevented----→--Boolean-\"><a href=\"#isDefaultPrevented----→--Boolean-\" class=\"anchor\"></a>isDefaultPrevented () → {Boolean}</h4>\n<p>Returns whether is default action prevented</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"stopPropagation---\"><a href=\"#stopPropagation---\" class=\"anchor\"></a>stopPropagation ()</h4>\n<p>Stops propagation</p>\n<h4 id=\"isPropagationStopped----→--Boolean-\"><a href=\"#isPropagationStopped----→--Boolean-\" class=\"anchor\"></a>isPropagationStopped () → {Boolean}</h4>\n<p>Returns whether is propagation stopped</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h2 id=\"Emitter-Class\"><a href=\"#Emitter-Class\" class=\"anchor\"></a>Emitter Class</h2>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--Emitter-\"><a href=\"#on---e,--data-,-fn,--ctx----→--Emitter-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {Emitter}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"once---e,--data-,-fn,--ctx----→--Emitter-\"><a href=\"#once---e,--data-,-fn,--ctx----→--Emitter-\" class=\"anchor\"></a>once ( e, [data], fn, [ctx] ) → {Emitter}</h4>\n<p>Adds a one time handler for the event.\nHandler is executed only the next time the event is fired, after which it is removed.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--Emitter-\"><a href=\"#un----e-,--fn-,--ctx----→--Emitter-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {Emitter}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"emit---e,--data----→--Emitter-\"><a href=\"#emit---e,--data----→--Emitter-\" class=\"anchor\"></a>emit ( e, [data] ) → {Emitter}</h4>\n<p>Fires event handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | events:Event}<br/>\nEvent</li>\n<li>[data] {Object}<br/>\nAdditional data</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--Emitter-\"><a href=\"#on---e,--data-,-fn,--ctx----→--Emitter-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {Emitter}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"once---e,--data-,-fn,--ctx----→--Emitter-\"><a href=\"#once---e,--data-,-fn,--ctx----→--Emitter-\" class=\"anchor\"></a>once ( e, [data], fn, [ctx] ) → {Emitter}</h4>\n<p>Adds a one time handler for the event.\nHandler is executed only the next time the event is fired, after which it is removed.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--Emitter-\"><a href=\"#un----e-,--fn-,--ctx----→--Emitter-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {Emitter}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"emit---e,--data----→--Emitter-\"><a href=\"#emit---e,--data----→--Emitter-\" class=\"anchor\"></a>emit ( e, [data] ) → {Emitter}</h4>\n<p>Fires event handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | events:Event}<br/>\nEvent</li>\n<li>[data] {Object}<br/>\nAdditional data</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h1 id=\"events__channels-Module\"><a href=\"#events__channels-Module\" class=\"anchor\"></a>events__channels Module</h1>\n<h2 id=\"-function-----id=-default--,--drop=false----→--events:Emitter---undefined-\"><a href=\"#-function-----id=-default--,--drop=false----→--events:Emitter---undefined-\" class=\"anchor\"></a><em>function</em> ( [id=&#39;default&#39;], [drop=false] ) → {events:Emitter | undefined}</h2>\n<p>Returns/destroys a named communication channel</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>[id=&#39;default&#39;] {String}<br/>\nChannel ID</li>\n<li>[drop=false] {Boolean}<br/>\nDestroy the channel</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{events:Emitter | undefined}</p>\n<p>Communication channel</p>\n"},{"name":"functions","data":{"ru":{"name":"functions","examples":[],"description":""},"en":{"name":"functions","examples":[],"description":""}},"jsdoc":"<h1 id=\"functions-Module\"><a href=\"#functions-Module\" class=\"anchor\"></a>functions Module</h1>\n<p>A set of helpers to work with JavaScript functions</p>\n<h2 id=\"isFunction---obj---→--Boolean-\"><a href=\"#isFunction---obj---→--Boolean-\" class=\"anchor\"></a>isFunction ( obj ) → {Boolean}</h2>\n<p>Checks whether a given object is function</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"noop---\"><a href=\"#noop---\" class=\"anchor\"></a>noop ()</h2>\n<p>Empty function</p>\n<h1 id=\"functions__debounce-Module\"><a href=\"#functions__debounce-Module\" class=\"anchor\"></a>functions__debounce Module</h1>\n<h2 id=\"-function----fn,-timeout,--invokeAsap=false-,--ctx----→--Function-\"><a href=\"#-function----fn,-timeout,--invokeAsap=false-,--ctx----→--Function-\" class=\"anchor\"></a><em>function</em> ( fn, timeout, [invokeAsap=false], [ctx] ) → {Function}</h2>\n<p>Debounces given function</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>fn {Function}<br/>\nfunction to debounce</li>\n<li>timeout {Number}<br/>\ndebounce interval</li>\n<li>[invokeAsap=false] {Boolean}<br/>\ninvoke before first interval</li>\n<li>[ctx] {Object}<br/>\ncontext of function invocation</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Function}</p>\n<p>debounced function</p>\n<h1 id=\"functions__throttle-Module\"><a href=\"#functions__throttle-Module\" class=\"anchor\"></a>functions__throttle Module</h1>\n<h2 id=\"-function----fn,-timeout,--invokeAsap=true-,--ctx----→--Function-\"><a href=\"#-function----fn,-timeout,--invokeAsap=true-,--ctx----→--Function-\" class=\"anchor\"></a><em>function</em> ( fn, timeout, [invokeAsap=true], [ctx] ) → {Function}</h2>\n<p>Throttle given function</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>fn {Function}<br/>\nfunction to throttle</li>\n<li>timeout {Number}<br/>\nthrottle interval</li>\n<li>[invokeAsap=true] {Boolean}<br/>\ninvoke before first interval</li>\n<li>[ctx] {Object}<br/>\ncontext of function invocation</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Function}</p>\n<p>throttled function</p>\n"},{"name":"i-bem","data":{"ru":{"name":"i-bem","examples":[],"description":"<h1 id=\"i-bem-js:-руководство-пользователя\"><a href=\"#i-bem-js:-руководство-пользователя\" class=\"anchor\"></a>i-bem.js: руководство пользователя</h1>\n<h2 id=\"i-bem-js:-JavaScript-фреймворк-для-БЭМ\"><a href=\"#i-bem-js:-JavaScript-фреймворк-для-БЭМ\" class=\"anchor\"></a>i-bem.js: JavaScript-фреймворк для БЭМ</h2>\n<p><code>i-bem.js</code> — специализированный JavaScript-фреймворк для веб-разработки\nв рамках <a href=\"https://ru.bem.info/method/\">БЭМ-методологии</a>.</p>\n<p><code>i-bem.js</code> позволяет:</p>\n<ul>\n<li>разрабатывать веб-интерфейс в терминах блоков, элементов, модификаторов;</li>\n<li>описывать логику работы блока в декларативном стиле — как набор состояний;</li>\n<li>легко интегрировать JavaScript-код с BEMHTML-шаблонами и CSS в стиле БЭМ;</li>\n<li>гибко переопределять поведение библиотечных блоков.</li>\n</ul>\n<p><code>i-bem.js</code> не предназначен:</p>\n<ul>\n<li>для замены фреймворка общего назначения, подобного jQuery.</li>\n</ul>\n<p><strong>Краткий обзор содержания документа</strong>:</p>\n<ul>\n<li><a href=\"#intro\">Общие сведения</a> о фреймворке: связь с понятиями предметной области БЭМ, краткое описание модульной структуры\nфреймворка, шаблонного проекта и инструментов для сборки кода,\nнаписанного с использованием <code>i-bem.js</code>.</li>\n<li><a href=\"#html\">Привязка JS-блоков к HTML</a> — синтаксис указания JS-блоков на\nHTML-странице, типы соотношения HTML-элементов и JS-блоков.</li>\n<li><a href=\"#decl\">Декларация блока</a> — синтаксис описания JS-блоков.</li>\n<li><a href=\"#dom\">Работа с DOM-деревом</a> — API для работы с DOM-узлами блоков:\nэлементы, динамическое изменение DOM-дерева (AJAX).</li>\n<li><a href=\"#events\">События</a> — событийная модель <code>i-bem.js</code>: DOM-события,\nБЭМ-события, делегирование событий.</li>\n<li><a href=\"#states\">Состояния блока</a> — модификаторы, триггеры на смену\nсостояний (установку модификаторов), инициализация экземпляров\nблоков.</li>\n<li><a href=\"#ibc\">Взаимодействие блоков</a> — API для обращения из блока к другим блокам.</li>\n<li><a href=\"#docs\">Что дальше?</a> — ссылки на документацию и дополнительные материалы.</li>\n</ul>\n<p><a name=\"intro\"></a></p>\n<h2 id=\"Общие-сведения\"><a href=\"#Общие-сведения\" class=\"anchor\"></a>Общие сведения</h2>\n<p><a name=\"intro-bem\"></a></p>\n<h3 id=\"БЭМ-методология-и-JavaScript\"><a href=\"#БЭМ-методология-и-JavaScript\" class=\"anchor\"></a>БЭМ-методология и JavaScript</h3>\n<p>С точки зрения БЭМ-методологии веб-интерфейс строится из независимых\n<strong>блоков</strong> (внутри которых могут быть выделены <strong>элементы</strong>). И блоки,\nи элементы могут иметь состояния, описываемые <strong>модификаторами</strong>.</p>\n<p>Работа веб-интерфейса обеспечивается несколькими <strong>технологиями</strong>\n(HTML, CSS, JS и т.д.). При использовании БЭМ-методологии вся реализация\nвеб-интерфейса разбита на компоненты по блокам. Описание блока в этой\nсхеме складывается из нескольких файлов — по одному на каждую технологию:</p>\n<ul>\n<li><code>my-block.css</code> — описывает внешний вид блока;</li>\n<li><code>my-block.bemhtml</code> — шаблоны для генерации HTML-представления блока;</li>\n<li><code>my-block.js</code> — описывает <strong>динамическое поведение</strong> блока в браузере.</li>\n</ul>\n<p>Фреймворк <code>i-bem.js</code> позволяет разложить клиентский JavaScript на компоненты в терминах БЭМ:</p>\n<ul>\n<li><strong>Блок</strong> — JS-компонент, описывающий логику работы однотипных\nэлементов интерфейса. Например, все кнопки могут быть реализованы\nв виде блока <code>button</code>. В этом случае, в соответствии с БЭМ-методологией,\n<code>button.css</code> определяет внешний вид всех кнопок, а <code>button.js</code> —\nлогику их работы.<br/>\nНа каждой странице может размещаться более одного <strong>экземпляра\nблока</strong> (например, кнопки). Каждому экземпляру блока соответствует\nJS-объект, динамически создаваемый в памяти браузера и хранящий\nсостояние данного экземпляра. JS-объект хранит ссылку на DOM-узел,\nк которому привязан данный экземпляр блока.</li>\n<li><strong>Элементы</strong> — DOM-узлы, вложенные в DOM-узел блока и имеющие атрибут\n<code>class</code>, указывающий на их роль в БЭМ-предметной области (имя блока\nи элемента). Элементы блока доступны через <a href=\"#elem-api\">JS-API</a>\nэкземпляра блока.</li>\n<li><strong>Модификаторы</strong> — хранят информацию о состоянии блока и его\nэлементов. Состояние модификаторов записывается в атрибуте <code>class</code>\nна DOM-узлах блока и элементов. Управление модификаторами\nпроизводится через <a href=\"#mods-api\">JS-API</a> экземпляра блока.</li>\n</ul>\n<p><a name=\"intro-use\"></a></p>\n<h3 id=\"Как-использовать-i-bem-js\"><a href=\"#Как-использовать-i-bem-js\" class=\"anchor\"></a>Как использовать i-bem.js</h3>\n<p>Фреймворк <code>i-bem.js</code> входит в состав библиотеки <a href=\"https://ru.bem.info/libs/bem-core/\">bem-core</a>.</p>\n<p>Реализация <code>i-bem.js</code> состоит из двух модулей:</p>\n<ul>\n<li><strong>Модуль <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/i-bem.vanilla.js\">i-bem</a></strong>.<br/>\nБазовая реализация JS-блока <code>i-bem</code>, от которой наследуются все блоки в\n<code>i-bem.js</code>. Блок <code>i-bem</code> написан с расчетом на использование в любом\nJS-окружении: как на клиенте, так и на сервере например, в\nNode.js).</li>\n<li><strong>Модуль <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a></strong>.<br/>\nБазовая реализация блока, привязанного к DOM-узлу.\nРассчитан на использование на клиенте, опирается на работу браузеров с DOM. Зависит от <code>jQuery</code>.</li>\n</ul>\n<p>Зависимости:</p>\n<ul>\n<li>jQuery (только для модуля <code>i-bem__dom</code>). При использовании <code>bem-core</code> отдельная установка\njQuery не требуется.</li>\n<li>Модульная система <a href=\"https://github.com/ymaps/modules\">ymaps/modules</a>. При использовании\n<a href=\"https://ru.bem.info/tools/bem/\">bem-tools</a> с технологией <code>.browser.js</code> (и производных от нее)\nэта зависимость удовлетворяется автоматически.</li>\n</ul>\n<p>Можно использовать <code>i-bem.js</code> как часть полного стека\nБЭМ-инструментов. В этом случае свой проект удобно создавать на основе\nшаблонного репозитория <a href=\"https://github.com/bem/project-stub/\">project-stub</a>, в котором настроена автоматическая установка зависимых библиотек.</p>\n<p>Если не планируется использование других технологий БЭМ-платформы,\nдостаточно скопировать код библиотеки <code>bem-core</code> в существующий проект.</p>\n<p><a name=\"intro-build\"></a></p>\n<h3 id=\"Сборка\"><a href=\"#Сборка\" class=\"anchor\"></a>Сборка</h3>\n<p>Разработка в рамках БЭМ-методологии ведется модульно — каждый блок\nпрограммируется отдельно. Финальный исходный код веб-страниц\nформируется из кода отдельных блоков с помощью процедур <strong>сборки</strong>.</p>\n<p>В файловой системе блок удобно представлять в виде каталога, а реализацию блока в каждой из технологий — в виде отдельного файла:</p>\n<pre><code class=\"lang-html\">    desktop.blocks/\n        my-block/\n            my-block.css\n            my-block.js\n            my-block.bemhtml\n            ...\n\n    desktop.blocks/\n        other-block/\n            other-block.css\n            other-block.js\n            other-block.bemhtml\n            ...\n</code></pre>\n<p>Для каждой веб-страницы код использованных на ней блоков может быть собран в единые файлы:</p>\n<pre><code class=\"lang-html\">    desktop.bundles/\n        index/\n            index.html\n            index.css\n            index.js\n            ...\n</code></pre>\n<p>Для сборки кода результирующих веб-страниц из отдельных\nописаний блоков существует два инструмента:</p>\n<ul>\n<li><a href=\"https://ru.bem.info/tools/bem/bem-tools/\">bem-tools</a>;</li>\n<li><a href=\"https://github.com/enb-make/enb\">enb</a> совместно с <a href=\"https://github.com/enb-make/enb-modules\">enb-modules</a>.</li>\n</ul>\n<p><a name=\"intro-name\"></a></p>\n<h3 id=\"Почему-i-bem-js-так-называется\"><a href=\"#Почему-i-bem-js-так-называется\" class=\"anchor\"></a>Почему i-bem.js так называется</h3>\n<p>В соответствии с БЭМ-методологией, базовая JS-библиотека БЭМ-платформы изначально разрабатывалась\nкак особый служебный блок. Такой подход позволяет работать с базовыми библиотеками так же, как\nи с обычными блоками. В частности, структурировать код в терминах элементов и модификаторов и\nгибко настраивать поведение библиотеки на разных уровнях переопределения.</p>\n<p>Служебным блокам в БЭМ было принято давать имена с префиксом <code>i-</code>. Таким образом, имя <code>i-bem.js</code>\nчитается как <em>реализация блока <code>i-bem</code> в технологии <code>JS</code></em>.</p>\n<p><a name=\"html\"></a></p>\n<h2 id=\"Привязка-JS-блоков-к-HTML\"><a href=\"#Привязка-JS-блоков-к-HTML\" class=\"anchor\"></a>Привязка JS-блоков к HTML</h2>\n<p>JavaScript-компоненты в <code>i-bem.js</code> служат для «оживления» HTML-элементов\nстраницы. Типовая задача JS-блока — привязать обработку определенных событий к\nуказанному HTML-фрагменту.</p>\n<p>При разработке веб-интерфейса в <code>i-bem.js</code> первичным «каркасом»\nявляется HTML-дерево документа. В HTML-дереве размечаются точки, к\nкоторым привязаны интерактивные элементы интерфейса — JS-блоки.\nТочка привязки JS-блока — HTML-элемент, в атрибуте <code>class</code> которого\nуказано имя блока, а в атрибуте <code>data-bem</code> — <a href=\"#html-syntax\">параметры блока</a>.</p>\n<p>При загрузке страницы в браузере выполняется\n<a href=\"#init\">инициализация блоков</a>. В процессе инициализации создаются\nэкземпляры блоков — JS-объекты для всех блоков, упомянутых в\nHTML-элементах на странице. JS-объект, привязанный к HTML-элементу,\nобрабатывает происходящие на нем <a href=\"#dom-events\">DOM-события</a> и хранит\nсостояние данного экземпляра блока.</p>\n<p><code>i-bem.js</code> дает возможность реализовать JS-компонент, не привязанный к\nHTML, — <a href=\"#i-blocks\">блок без DOM-представления</a>. Такой блок предоставляет API, аналогичное обычным JS-блокам.</p>\n<p>Описанный подход привязки JavaScript-компонентов к HTML имеет следующие преимущества:</p>\n<ul>\n<li>естественная деградация интерфейса на клиентах с отключенным JavaScript;</li>\n<li>прогрессивный рендеринг — возможность начинать отрисовку элементов интерфейса\nдо окончания загрузки всех данных страницы (например, изображений).</li>\n</ul>\n<p><a name=\"html-syntax\"></a></p>\n<h3 id=\"Синтаксис-привязки-блоков\"><a href=\"#Синтаксис-привязки-блоков\" class=\"anchor\"></a>Синтаксис привязки блоков</h3>\n<p>Чтобы привязать блок к HTML-элементу (например, <code>&lt;div&gt;...&lt;/div&gt;</code>), необходимо:</p>\n<ul>\n<li><strong>Отметить блок в HTML-дереве</strong>.<br/>\nВключить имя блока в список классов HTML-элемента (атрибут <code>class</code>).</li>\n</ul>\n<pre><code class=\"lang-html\"> &lt;div class=&quot;my-block&quot;&gt;...&lt;/div&gt;\n</code></pre>\n<ul>\n<li><strong>Инициализировать экземпляр блока</strong>.<br/>\nВключить класс <code>i-bem</code> в список классов HTML-элемента. Наличие этого класса позволит фреймворку инициализировать блок.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem&quot;&gt;...&lt;/div&gt;\n</code></pre>\n<ul>\n<li><strong>Передать параметры экземпляру блока</strong>.<br/>\nПоместить параметры блока в атрибут <code>data-bem</code>. Параметры блока записываются в формате\nJSON и представляют собой хэш вида: <code>имя блока</code> - <code>хэш параметров</code>. Параметры\nпередаются экземпляру блока <a href=\"#data-bem\">в момент инициализации</a>.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem&quot; data-bem=&#39;{ &quot;my-block&quot;: { &quot;name&quot;: &quot;ya&quot; } }&#39;&gt;...&lt;/div&gt;\n</code></pre>\n<p>Одному HTML-элементу не обязательно должен соответствовать один\nэкземпляр блока. Возможны следующие типы связи между блоками и HTML-элементами:</p>\n<ul>\n<li><a href=\"#html-simple\">Один HTML-элемент — один JS-блок</a>;</li>\n<li><a href=\"#html-mixes\">Один HTML-элемент — несколько JS-блоков</a>;</li>\n<li><a href=\"#distrib-block\">Один JS-блок на нескольких HTML-элементах</a>;</li>\n<li><a href=\"#i-blocks\">Блоки без DOM-представления</a>.</li>\n</ul>\n<p><a name=\"html-simple\"></a></p>\n<h4 id=\"Один-HTML-элемент-—-один-JS-блок\"><a href=\"#Один-HTML-элемент-—-один-JS-блок\" class=\"anchor\"></a>Один HTML-элемент — один JS-блок</h4>\n<p>Самый простой и распространенный способ привязки блоков к HTML.</p>\n<p><strong>Пример:</strong> HTML-элемент <code>div</code>, на котором размещен блок <code>my-block</code>.\nПараметры блока: пустой список <code>{}</code>.</p>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem&quot; data-bem=&#39;{ &quot;my-block&quot;: {} }&#39;&gt;\n    ...\n&lt;/div&gt;\n</code></pre>\n<p><a name=\"html-mixes\"></a></p>\n<h4 id=\"Один-HTML-элемент-—-несколько-JS-блоков\"><a href=\"#Один-HTML-элемент-—-несколько-JS-блоков\" class=\"anchor\"></a>Один HTML-элемент — несколько JS-блоков</h4>\n<p>Техника размещения нескольких блоков на одном HTML-элементе в БЭМ-методологии называется <strong>микс</strong>.</p>\n<p><strong>Пример:</strong> HTML-элемент <code>div</code>, на котором размещены:</p>\n<ul>\n<li>блок <code>user</code> с параметром <code>name</code>: <code>pushkin</code>;</li>\n<li>блок <code>avatar</code> с параметром <code>img</code>: <code>http://...</code>.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;user avatar i-bem&quot;\n    data-bem=&#39;{\n        &quot;user&quot;: { &quot;name&quot;: &quot;pushkin&quot; },\n        &quot;avatar&quot;: { &quot;img&quot;: &quot;http://...&quot; }\n     }&#39;&gt;\n     ...\n&lt;/div&gt;\n</code></pre>\n<p><a name=\"distrib-block\"></a></p>\n<h4 id=\"Один-JS-блок-на-нескольких-HTML-элементах\"><a href=\"#Один-JS-блок-на-нескольких-HTML-элементах\" class=\"anchor\"></a>Один JS-блок на нескольких HTML-элементах</h4>\n<p>Такой дизайн позволяет прозрачно реализовывать блоки, состоящие из\nнескольких компонентов, состояние которых должно быть согласовано. Например, виджет «вкладки»,\nгде клик по заголовку вкладки (первый HTML-элемент), меняет содержимое вкладки (второй HTML-элемент).\nДругой пример: маркер, обозначающий точку на карте (первый элемент),\nи связанное с ним описание точки в списке рядом с картой (второй элемент).</p>\n<p>Чтобы привязать экземпляр блока к нескольким HTML-элементам, в параметрах блока необходимо\nуказать одинаковое значение <code>id</code> для всех связанных с блоком HTML-элементов.\nВ качестве значения <code>id</code> может выступать произвольная строка.</p>\n<p><strong>Пример:</strong> Экземпляр блока <code>notebook</code> привязан к HTML-элементам <code>div</code> и <code>span</code>.\nВ параметрах блока указан общий <code>id</code> — <code>maintab</code>.</p>\n<pre><code class=\"lang-html\">&lt;div class=&quot;notebook i-bem&quot; data-bem=&#39;{ &quot;notebook&quot;: { &quot;id&quot;: &quot;maintab&quot; }}&#39;&gt;\n&lt;/div&gt;\n...\n&lt;span class=&quot;notebook i-bem&quot; data-bem=&#39;{ &quot;notebook&quot;: { &quot;id&quot;: &quot;maintab&quot; }}&#39;&gt;\n&lt;/span&gt;\n</code></pre>\n<p>В результате при инициализации блоков создается один JS-объект, поле\n<a href=\"#domElem\"><code>{jQuery} domElem</code></a> которого содержит ссылки на оба DOM-узла.</p>\n<p>Идентификатор <code>id</code> используется <em>только в момент инициализации</em>\nэкземпляра блока. Значение <code>id</code> должно быть уникальным в пределах\nэкземпляров одного блока, в рамках одной <a href=\"#init-wave\">волны инициализации</a>.</p>\n<p><a name=\"i-blocks\"></a></p>\n<h4 id=\"Блоки-без-DOM-представления\"><a href=\"#Блоки-без-DOM-представления\" class=\"anchor\"></a>Блоки без DOM-представления</h4>\n<p>Инфраструктурный код, решающий общие задачи интерфейса (связь с\nбэкэндом, общие вычисления и т.п.), при работе с <code>i-bem.js</code> можно\nоформлять в виде блока, как и весь прочий JS-код. Чтобы не приходилось привязывать\nтакие блоки к HTML-дереву искусственно, <code>i-bem.js</code> предоставляет\nвозможность создавать блоки без DOM-представления.</p>\n<p>Блоки без DOM-представления:</p>\n<ul>\n<li>не указываются в HTML-коде страницы;</li>\n<li>декларируются как <a href=\"#bem-decl\">доопределение модуля <code>i-bem</code></a>, а не <code>i-bem__dom</code>\n(как блоки с DOM-представлением);</li>\n<li>должны быть <a href=\"#init-bem\">инициализированы явно</a>.</li>\n</ul>\n<p><a name=\"data-bem\"></a></p>\n<h3 id=\"Синтаксис-передачи-параметров\"><a href=\"#Синтаксис-передачи-параметров\" class=\"anchor\"></a>Синтаксис передачи параметров</h3>\n<p>Параметры блока хранятся в атрибуте <code>data-bem</code> HTML-элемента\nи передаются блоку в момент инициализации. Параметры позволяют\nмодифицировать поведение экземпляра блока, привязанного к данному\nHTML-элементу.</p>\n<p>В значении атрибута <code>data-bem</code> указываются параметры <em>всех JS-блоков, размещенных на данном узле</em>.\nПараметры передаются в формате JSON в виде хэша:</p>\n<ul>\n<li>ключ — <code>{String}</code>, имя блока;</li>\n<li>значение — <code>{Object}</code>, параметры данного блока. Если данному экземпляру блока не требуются\nпараметры, указывается пустой хэш <code>{}</code>.</li>\n</ul>\n<p>Значение атрибута <code>data-bem</code> должно содержать валидный JSON.</p>\n<p>Такой формат параметров продиктован следующими соображениями:</p>\n<ul>\n<li>Указание имени блока в параметрах позволяет избежать необходимости\nпарсить значение атрибута <code>class</code>, что упрощает и ускоряет\nинициализацию блоков.</li>\n<li>Это же решение позволяет размещать несколько блоков на одном\nHTML-элементе без необходимости множить атрибуты элемента.</li>\n</ul>\n<p><a name=\"decl\"></a></p>\n<h2 id=\"Декларация-блока\"><a href=\"#Декларация-блока\" class=\"anchor\"></a>Декларация блока</h2>\n<p>JS-реализация блока описывает поведение определенного класса элементов веб-интерфейса. В конкретных\nинтерфейсах каждый блок может быть представлен несколькими экземплярами. Каждый экземпляр блока реализует\nфункциональность всего класса и имеет собственное состояние, независимое от остальных.</p>\n<p>В терминах парадигмы объектно-ориентированного программирования:</p>\n<ul>\n<li>блок — класс;</li>\n<li>экземпляр блока — экземпляр класса.</li>\n</ul>\n<p>В соответствии с ООП, вся функциональность блока реализуется модульно в методах класса <em>(=блока)</em>.</p>\n<p>Методы блока подразделяются на:</p>\n<ul>\n<li>методы экземпляра блока;</li>\n<li>статические методы.</li>\n</ul>\n<p>Код блока в <code>i-bem.js</code> принято называть <strong>декларацией</strong>, чтобы подчеркнуть принятый\nв БЭМ декларативный стиль программирования. Поведение блока программируется\nв декларативном стиле в виде утверждений: <code>набор условий</code> — <code>реакция блока</code>.</p>\n<p><a name=\"decl-syntax\"></a></p>\n<h3 id=\"Синтаксис-декларации\"><a href=\"#Синтаксис-декларации\" class=\"anchor\"></a>Синтаксис декларации</h3>\n<p>Чтобы задекларировать новый JS-блок <strong>с DOM-представлением</strong> (привязанный к HTML-элементу), необходимо доопределить <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуль <code>i-bem__dom</code>.</p>\n<p>Блоки декларируются с помощью метода <code>decl</code>, принимающего три\nпараметра:</p>\n<ol>\n<li>Имя блока <code>{String}</code> или <a href=\"#decl-selector\">описание блока</a> <code>{Object}</code>.</li>\n<li>Методы экземпляра блока — <code>{Object}</code>.</li>\n<li>Статические методы — <code>{Object}</code>.</li>\n</ol>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(/* имя или описание блока */,\n    {\n        /* методы экземпляра */\n    },\n    {\n        /* статические методы */\n    }\n);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p><strong>NB</strong> С точки зрения модульной системы <a href=\"https://github.com/ymaps/modules\">ymaps</a>, декларации разных\nблоков представляют собой переопределение одного и того же модуля\n<code>i-bem__dom</code>. Однако, с точки зрения <code>i-bem.js</code>, таким образом создаются\n<em>разные объекты</em> для построения экземпляров блоков.</p>\n<p><a name=\"bem-decl\"></a>\nБлоки, не имеющие DOM-представления, декларируются как доопределение <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуля <code>i-bem</code>.\nДля декларации используется метод <code>decl</code>, принимающий те же параметры,\nчто и метод <code>decl</code> модуля <code>i-bem__dom</code>:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem&#39;, function(provide, BEM) {\n\nBEM.decl(/* имя или описание блока */,\n    {\n        /* методы экземпляра */\n    },\n    {\n        /* статические методы */\n    }\n);\n\nprovide(BEM);\n\n});\n</code></pre>\n<hr>\n<p><strong>NB</strong> Оформлять инфраструктурный код в виде блока без\nDOM-представления удобно, если в нем планируется использовать API\nБЭМ-блоков (состояния, выражаемые модификаторами, БЭМ-события и\nт. п.). Если использовать БЭМ-предметную область не планируется,\nинфраструктурный код можно оформлять в виде <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуля.</p>\n<p><strong>Пример:</strong></p>\n<pre><code class=\"lang-js\">modules.define(&#39;router&#39;, function(provide) {\n\nprovide({\n    route : function() { /* ... */ }\n});\n\n});\n</code></pre>\n<hr>\n<p><a name=\"decl-selector\"></a></p>\n<h3 id=\"Описание-блока-в-декларации\"><a href=\"#Описание-блока-в-декларации\" class=\"anchor\"></a>Описание блока в декларации</h3>\n<p>Первый параметр метода <code>decl</code> представляет собой описание блока, в\nкотором будут применяться объявленные в декларации методы. Описание\nобязательно содержит имя блока и может дополнительно содержать:</p>\n<ul>\n<li>ограничение сферы действия декларации определенной модификацией\nблока;</li>\n<li>список родительских блоков, методы которых должен наследовать данный\nблок.</li>\n</ul>\n<p>Описание может быть задано в одной из двух форм:</p>\n<ul>\n<li><p><strong>Имя блока — строка</strong>.<br/>\n Объявленные методы будут применяться во всех экземплярах блока независимо от их состояний (модификаторов).<br/>\n<strong>Пример:</strong> Декларация методов для блока <code>button</code>.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;button&#39;,\n  { /* методы экземпляра */ },\n  { /* статические методы */ }\n);\n</code></pre>\n</li>\n<li><p><strong>Описание блока — хэш</strong>.<br/>\nСодержит имя (и значение) модификатора. Объявленные методы будут применяться только к тем\nэкземплярам блока, у которых присутствует данный модификатор (с\nуказанным значением).<br/>\n<strong>Пример:</strong> Декларация методов для блока <code>button</code> с модификатором\n<code>type</code> в значении <code>link</code> (описывает поведение псевдокнопок):</p>\n<pre><code class=\"lang-js\">BEMDOM.decl({ block: &#39;button&#39;, modName: &#39;type&#39;, modVal: &#39;link&#39; },\n  { /* методы экземпляра */ },\n  { /* статические методы */ }\n);\n</code></pre>\n</li>\n</ul>\n<p><strong>NB</strong> Cтатические методы блока будут доступны всем его экземплярам <em>вне зависимости от значений модификаторов</em>.\nМодификаторы являются свойствами экземпляров блоков, а статические методы принадлежат классу\nблока и не учитывают состояния модификаторов.</p>\n<p><a name=\"inher\"></a></p>\n<h3 id=\"Наследование-блока\"><a href=\"#Наследование-блока\" class=\"anchor\"></a>Наследование блока</h3>\n<p>Одна и та же функциональность может быть востребована в нескольких блоках проекта.\nНапример, разные блоки могут обращаться за данными к бэкенду, используя AJAX,\nили совершать однотипные операции с DOM-деревом и т.д. Чтобы избежать ненужных повторов в коде,\nобщую функциональность можно инкапсулировать в виде модулей, а затем добавлять к блокам.</p>\n<p>Наследование позволяет повторно использовать функциональность блока, расширяя ее новой логикой.\nВ <code>i-bem.js</code> доступно несколько механизмов наследования. Выбор конкретного механизма зависит от специфики создаваемого блока.</p>\n<p><a name=\"inher-simple\"></a></p>\n<h4 id=\"Простое-наследование\"><a href=\"#Простое-наследование\" class=\"anchor\"></a>Простое наследование</h4>\n<p>В случае простого наследования создаваемый блок объявляется как наследник существующего. Для этого нужно:</p>\n<ol>\n<li>Указать базовый блок в зависимостях модульной системы.</li>\n<li>Передать ссылку на базовый блок в специальном поле декларации <code>baseBlock</code>.</li>\n</ol>\n<pre><code class=\"lang-js\">modules.define(&#39;ablock&#39;, [&#39;i-bem__dom&#39;], function(provide, BEMDOM) {\n\nprovide(BEMDOM.decl(this.name, {}));\n\n});\n\nmodules.define(&#39;bblock&#39;, [&#39;i-bem__dom&#39;, &#39;ablock&#39;], function(provide, BEMDOM, ABlock) {\n\nprovide(BEMDOM.decl({ block : this.name, baseBlock : ABlock ));\n\n});\n</code></pre>\n<p>Такой механизм позволяет использовать методы родительского блока внутри производного.\nДля доступа к методам родителя служит специальное поле контекста <code>this.__base</code>.</p>\n<p><strong>NB</strong> В <code>i-bem</code> можно создавать цепочки наследования – блок наследуется от другого,\nкоторый, в свою очередь, наследуется от третьего и т.д.</p>\n<p><a name=\"inher-over\"></a></p>\n<h4 id=\"Доопределение-существующего-блока\"><a href=\"#Доопределение-существующего-блока\" class=\"anchor\"></a>Доопределение существующего блока</h4>\n<p>При наследовании можно сохранить основную функциональность базового блока.\nДля этого можно <strong>доопределить</strong> базовый блок новым на уровне переопределения проекта.\nСоздаваемый в проекте блок реализует собственную логику, дополняющую или переопределяющую логику базового.\nТакая схема наследования часто используется при работе с библиотечными блоками.</p>\n<p>Чтобы доопределить существующий блок нужно создать новый блок с тем же именем.\nПересекающиеся методы и модификаторы будут определены в соответствие с декларацией нового блока.</p>\n<pre><code class=\"lang-js\">modules.define(&#39;ablock&#39;, [&#39;i-bem__dom&#39;], function(provide, BEMDOM) {\n\nprovide(BEMDOM.decl(this.name, {})); // Объявляем базовый блок\n\n});\n\nmodules.define(&#39;ablock&#39;, function(provide, ABlock) {\n\nprovide(ABlock.decl({})); // Доопределяем базовый блок\n\n});\n</code></pre>\n<p><a name=\"inher-over-modifier\"></a></p>\n<h5 id=\"Добавление-модификатора-к-существующему-блоку\"><a href=\"#Добавление-модификатора-к-существующему-блоку\" class=\"anchor\"></a>Добавление модификатора к существующему блоку</h5>\n<p>В соответствии с БЭМ-методологией состояния блока должны описываться <a href=\"#modifiers\">модификаторами</a>.\nПоэтому расширение функциональности блока часто предполагает реализацию поддержки новых модификаторов.</p>\n<p>Для добавления модификатора необходимо передать методу <code>decl</code> доопределяемого блока:</p>\n<ul>\n<li>хеш с ключами <code>modName</code> и <code>modVal</code>. Значением для <code>modName</code> служит строка – имя модификатора. Значением <code>modVal</code> – строка со значением модификатора.</li>\n<li>хеш с реализацией методов, которые будут доступны для блока с соответствующим модификатором. Пересекающиеся методы будут переопределены методами из хеша.</li>\n</ul>\n<pre><code class=\"lang-js\">modules.define(&#39;ablock&#39;, [&#39;i-bem__dom&#39;], function(provide, BEMDOM) {\n\nprovide(BEMDOM.decl(this.name, {})); // Объявляем базовый блок\n\n});\n\nmodules.define(&#39;ablock&#39;, function(provide, ABlock) {\n\nprovide(ABlock.decl({ modName : &#39;m1&#39;, modVal : &#39;v1&#39; }, {})); // Доопределяем базовый блок с модификтором _m1_v1\n\n});\n</code></pre>\n<p><a name=\"inher-mixins\"></a></p>\n<h4 id=\"Блоки-миксы\"><a href=\"#Блоки-миксы\" class=\"anchor\"></a>Блоки-миксы</h4>\n<p>В <code>i-bem.js</code> для добавления востребованной функциональности к блокам, используется специальный\nтип блоков – <strong>блоки-миксы</strong>. Главная особенность блоков-миксов состоит в том, что они не участвуют\nв цепочке наследования. Это позволяет примешивать реализованную в них функциональность к другим блокам\nбез риска нарушения их связей с родительскими блоками (вызов базовых методов (<code>this.__base</code>) и т.д.).</p>\n<p><a name=\"inher-mixins-declwithmix\"></a></p>\n<h5 id=\"Описание-блока-микса-в-декларации\"><a href=\"#Описание-блока-микса-в-декларации\" class=\"anchor\"></a>Описание блока-микса в декларации</h5>\n<p>Чтобы подмешать к блоку один или несколько блоков-миксов, необходимо в декларации блока присвоить\nзначение опциональному полю <code>baseMix</code>.  Значением служит массив имен примешиваемых блоков-миксов:</p>\n<pre><code class=\"lang-js\">BEM.decl({ block: &#39;myblock&#39;, baseMix: [&#39;foo&#39;, &#39;bar&#39;]},\n    { /* методы экземпляра */ },\n    { /* статические методы */ }\n);\n</code></pre>\n<p><a name=\"inher-mixins-mixindecl\"></a></p>\n<h5 id=\"Декларация-блока-микса\"><a href=\"#Декларация-блока-микса\" class=\"anchor\"></a>Декларация блока-микса</h5>\n<p>В качестве блоков-миксов можно использовать только блоки, созданные с помощью <code>declMix</code>.\nЭтот метод принимает декларацию блока в формате, аналогичном методу <code>decl</code>:</p>\n<pre><code class=\"lang-js\">BEMDOM.declMix(&#39;mymix&#39;,\n    { /* свойства и методы экземпляра */ },\n    { /* статические свойства и методы */ }\n);\n</code></pre>\n<p><strong>NB</strong> Первым аргументом в декларации блока-микса всегда выступает строка – имя блока.\nЭто связано с тем, что для блоков-миксов не предполагаются возможности использования модификаторов или примешивания блоков.</p>\n<p><a name=\"context\"></a></p>\n<h3 id=\"Контекст\"><a href=\"#Контекст\" class=\"anchor\"></a>Контекст</h3>\n<p><strong>Методы экземпляра блока</strong> исполняются в контексте JS-объекта\nэкземпляра блока. Соответственно, ключевое слово <code>this</code> в методах\nэкземпляра блока ссылается на JS-объект <strong>экземпляра блока</strong>.</p>\n<p><strong>Статические методы</strong> исполняются в контексте JS-объекта,\nсоответствующего классу блока. Соответственно, ключевое слово <code>this</code>\nв статических методах блока ссылается на <strong>класс блока</strong>, а не на\nэкземпляр.</p>\n<p>Контекст содержит зарезервированные поля:</p>\n<ul>\n<li><code>this.__self</code>: cсылается на статические методы класса, к которому\nпринадлежит экземпляр. Определен в методах экземпляра блока. Для\nстатических методов не имеет смысла и не определен.<br/>\n<strong>Пример:</strong> Вызов статического метода <code>staticMethod</code> в методе\n<code>onEvent</code> экземпляра блока <code>my-block</code>.</li>\n</ul>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;my-block&#39;, {\n    onEvent: function() {\n        this.__self.staticMethod(); // вызов статического метода\n        this.doMore();\n    },\n    {\n        staticMethod: function() { /* ... */ }; // определение статического метода\n    }\n});\n</code></pre>\n<ul>\n<li><code>this.__base</code>: cсылается на реализацию метода в базовом классе, от которого наследуется данный.\nПозволяет выполнить <code>super call</code>. Определен в методах экземпляра\nблока и в статических методах блока.<br/>\n<strong>Пример:</strong> вызов (и модификация) метода <code>_onClick</code> родительского класса (базовой реализации метода в классе <code>button</code>).</li>\n</ul>\n<pre><code class=\"lang-js\">BEMDOM.decl({ block: &#39;my-button&#39;, baseBlock: &#39;button&#39; }, {\n    _onClick: function() {\n        this.__base();\n        this.doMore();\n    }\n);\n</code></pre>\n<hr>\n<p><strong>NB</strong> Так как блоки-миксы не участвуют в цепочке наследования, внутри них нельзя использовать <code>__base</code> для обращения к родительскому блоку.</p>\n<hr>\n<p><strong>NB</strong> При разработке блоков с использованием <code>i-bem.js</code> внутренним\nметодам блока, не предназначенным для использования извне, принято\nдавать имена, начинающиеся с символа подчеркивания. Например,\n<code>_onClick</code>.</p>\n<hr>\n<p><a name=\"dom\"></a></p>\n<h2 id=\"Работа-с-DOM-деревом\"><a href=\"#Работа-с-DOM-деревом\" class=\"anchor\"></a>Работа с DOM-деревом</h2>\n<p><a name=\"domElem\"></a></p>\n<h3 id=\"DOM-узел-экземпляра-блока\"><a href=\"#DOM-узел-экземпляра-блока\" class=\"anchor\"></a>DOM-узел экземпляра блока</h3>\n<p>Все экземпляры блоков, привязанные к DOM-дереву, содержат в поле\n<code>{jQuery} this.domElem</code> jQuery-объект, ссылающийся на один или\nнесколько DOM-узлов, с которыми связан данный экземпляр блока.</p>\n<p><a name=\"elem-api\"></a></p>\n<h3 id=\"Элементы\"><a href=\"#Элементы\" class=\"anchor\"></a>Элементы</h3>\n<p>БЭМ-элементы блоков представлены в <code>i-bem.js</code> как DOM-узлы, вложенные\nв DOM-узел экземпляра блока. Для обращения к DOM-узлам элементов и\nработы с их модификаторами, следует использовать API, предоставляемый\nэкземпляром блока.</p>\n<p>Экземпляр блока предоставляет два метода для обращения к элементам данного экземпляра:</p>\n<ul>\n<li>Кэширующий доступ: <code>elem(elems, [modName], [modVal])</code>. Элемент,\nполученный таким образом, не требуется сохранять в переменную.</li>\n</ul>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;link&#39;, {\n    setInnerText: function() {\n        this.elem(&#39;inner&#39;).text(&#39;Текст ссылки&#39;);\n        /* ... */\n        this.elem(&#39;inner&#39;).text(&#39;Другой текст&#39;);\n    }\n);\n</code></pre>\n<ul>\n<li>Некэширующий доступ: <code>findElem(elems, [modName], [modVal])</code>.</li>\n</ul>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;link&#39;, {\n    setInnerText: function() {\n        var inner = this.findElem(&#39;inner&#39;);\n        inner.text(&#39;Текст ссылки&#39;);\n        /* ... */\n        inner.text(&#39;Другой текст&#39;);\n    }\n});\n</code></pre>\n<p>При <a href=\"#dynamic\">динамическом добавлении и удалении элементов блока</a> может\nвозникнуть необходимость сброса кэша элементов. Для этого предназначен\nметод <code>dropElemCache(&#39;elements&#39;)</code>. В качестве параметра указывается\nразделенный пробелами список имен элементов, кэш которых нужно сбросить:</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;attach&#39;, {\n    clear: function() {\n        BEMDOM.destruct(this.elem(&#39;control&#39;));\n        BEMDOM.destruct(this.elem(&#39;file&#39;));\n        return this.dropElemCache(&#39;control file&#39;);\n    }\n});\n</code></pre>\n<p>Полное описание API для работы с элементами содержится в\nисходном коде модуля <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><a name=\"dynamic\"></a></p>\n<h3 id=\"Динамическое-обновление-блоков-и-элементов-в-DOM-дереве\"><a href=\"#Динамическое-обновление-блоков-и-элементов-в-DOM-дереве\" class=\"anchor\"></a>Динамическое обновление блоков и элементов в DOM-дереве</h3>\n<p>В современных интерфейсах зачастую необходимо создавать новые\nфрагменты DOM-дерева и заменять старые в процессе работы (AJAX). В\n<code>i-bem.js</code> предусмотрены следующие функции для добавления и замены\nфрагментов DOM-дерева.</p>\n<ul>\n<li><p>Добавить DOM-фрагмент:</p>\n<ul>\n<li><code>append</code> —  в конец указанного контекста;</li>\n<li><code>prepend</code> — в начало указанного контекста;</li>\n<li><code>before</code> — перед указанным контекстом;</li>\n<li><code>after</code> — после указанного контекста;</li>\n</ul>\n</li>\n<li><p>Заместить DOM-фрагмент:</p>\n<ul>\n<li><code>update</code> —  внутри указанного контекста;</li>\n<li><code>replace</code> — заменить указанный контекст новым DOM-фрагментом.</li>\n</ul>\n</li>\n</ul>\n<p>Все функции автоматически выполняют <a href=\"#init-ajax\">инициализацию блоков на обновленном фрагменте DOM-дерева</a>.</p>\n<p>Чтобы упростить создание БЭМ-сущностей на обновляемых фрагментах\nDOM-дерева, можно использовать шаблонизатор\n<a href=\"https://ru.bem.info/technology/bemhtml/current/intro/\">BEMHTML</a>, подключив\nего в качестве <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуля. БЭМ-сущности описываются в формате\n<a href=\"https://ru.bem.info/technology/bemjson/current/bemjson/\">BEMJSON</a>\nнепосредственно в коде блока. Функция <code>BEMHTML.apply</code> генерирует\nHTML-элементы по BEMJSON-описанию в соответствии с правилами\nименования БЭМ.</p>\n<p><strong>Пример:</strong> В методе <code>_updateFileElem</code> блока <code>attach</code> выполняются\nудаление элемента <code>file</code>, если он существовал, и генерация нового\nэлемента с помощью функции <code>BEMHTML.apply</code>:</p>\n<pre><code class=\"lang-js\">modules.define(\n    &#39;i-bem__dom&#39;,\n    [&#39;BEMHTML&#39;, &#39;strings__escape&#39;],\n    function(provide, BEMHTML, escape, BEMDOM) {\n\nprovide(BEMDOM.decl(&#39;attach&#39;, {\n    _updateFileElem : function() {\n        var fileName = extractFileNameFromPath(this.getVal());\n        this.elem(&#39;file&#39;).length &amp;&amp; BEMDOM.destruct(this.elem(&#39;file&#39;));\n        BEMDOM.append(\n            this.domElem,\n            BEMHTML.apply({\n                block : &#39;attach&#39;,\n                elem : &#39;file&#39;,\n                content : [\n                    {\n                        elem : &#39;icon&#39;,\n                        mods : { file : extractExtensionFromFileName(fileName) }\n                    },\n                    { elem : &#39;text&#39;, content : escape.html(fileName) },\n                    { elem : &#39;clear&#39; }\n                ]\n            }));\n        return this.dropElemCache(&#39;file&#39;);\n    }\n}));\n\n});\n</code></pre>\n<p><a name=\"events\"></a></p>\n<h2 id=\"События\"><a href=\"#События\" class=\"anchor\"></a>События</h2>\n<p>В <code>i-bem.js</code> поддерживается два вида событий:</p>\n<p><a name=\"dom-events\"></a></p>\n<ul>\n<li><strong>DOM-событие</strong> — JavaScript-событие на DOM-узле, связанном с\nблоком. Отражает взаимодействие пользователя с интерфейсом (клик,\nнаведение мыши, ввод текста и т.п.). DOM-событие обычно обрабатывает\nтот экземпляр блока, на DOM-узле которого оно возникло.</li>\n<li><strong>БЭМ-событие</strong> — собственное событие, генерируемое\nблоком. Позволяет организовать API для\n<a href=\"#ibc\">взаимодействия с блоком</a>. БЭМ-событие обычно обрабатывает\nэкземпляр блока, отслеживающий состояние других блоков, на которых\nгенерируются события.</li>\n</ul>\n<p>Планируя архитектуру интерфейса, нужно учитывать, что DOM-события\nследует использовать только во <em>внутренних</em> процедурах блока. Для\nвзаимодействия блока с <em>внешней</em> средой (другими блоками),\nпредназначены БЭМ-события.</p>\n<p><strong>NB</strong> Работа с DOM-событиями полностью реализована средствами\nфреймворка jQuery.</p>\n<p><a name=\"delegated-events\"></a></p>\n<h3 id=\"Делегирование-событий\"><a href=\"#Делегирование-событий\" class=\"anchor\"></a>Делегирование событий</h3>\n<p>Обработка БЭМ- и DOM-событий может быть <strong>делегирована</strong> контейнеру\n(всему документу или конкретному DOM-узлу). В этом случае контейнер\nслужит точкой обработки событий, возникающих на любом из\nдочерних узлов контейнера, даже если в момент подписки на события\nнекоторые из дочерних узлов еще не существовали.</p>\n<p>Блок меню может содержать вложенные блоки (или элементы, в\nзависимости от конкретной реализации блока): например, пункты меню. Обработку\nкликов на пунктах меню имеет смысл делегировать самому блоку\nменю. Это, во-первых, позволяет сэкономить затраты ресурсов на\nподписку на события (дешевле подписаться на одно событие контейнера,\nчем на много событий элементов). Во-вторых, дает возможность более\nгибко изменять состав меню: добавлять и удалять пункты, не выполняя\nпри этом подписку на события добавленных пунктов меню и отмену\nподписки на события удаленных.</p>\n<ul>\n<li><a href=\"#dom-events-delegated\">Делегирование DOM-событий</a> можно\nиспользовать для обработки DOM-событий, происходящих на DOM-узле\nэкземпляра блока или на DOM-узлах его элементов. Делегирование\nDOM-событий может выполняться либо для всех экземпляров блоков\nданного типа в пределах документа, либо только для экземпляров\nблоков внутри указанного контекста (фрагмента HTML-дерева).</li>\n</ul>\n<p>Контейнером, которому делегируется обработка DOM-событий, всегда\nвыступает <code>window.document</code>.</p>\n<ul>\n<li><a href=\"#bem-events-delegated\">Делегирование БЭМ-событий</a> следует\nиспользовать для обработки событий на <em>экземплярах блоков</em>,\nсодержащихся внутри указанного DOM-узла.</li>\n</ul>\n<p>Контейнером, которому делегируется обработка БЭМ-событий, может\nслужить <strong>произвольный DOM-узел</strong>. По умолчанию в качестве\nконтейнера выступает весь документ (<code>window.document</code>). Часто блок\nобрабатывает БЭМ-события вложенных блоков, тогда в качестве\nконтейнера следует указать DOM-узел блока-обработчика\n<a href=\"#domElem\"><code>this.domElem</code></a>.</p>\n<p>Полный список хелперов для подписки на делегированные события\nможно найти в исходном коде модуля <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<h3 id=\"DOM-события\"><a href=\"#DOM-события\" class=\"anchor\"></a>DOM-события</h3>\n<p>Для подписки на DOM-события на узлах, связанных с блоком или\nэлементом, используется метод экземпляра блока <code>bindTo([elem], event, handler)</code>.</p>\n<p><strong>Пример:</strong> В момент <a href=\"#init\">инициализации экземпляра блока</a>\n<code>my-block</code> выполняется подписка на событие <code>click</code>, при наступлении\nкоторого блок выставляет себе <a href=\"#modifier\">модификатор</a> <code>size</code> в\nзначение <code>big</code>.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;my-block&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39;: function() {\n                this.bindTo(&#39;click&#39;, function(e) {\n                    var domElem = $(e.currentTarget); // DOM-элемент, на котором слушается событие\n                                                      // в данном случае то же, что this.domElem\n                    this.setMod(&#39;size&#39;, &#39;big&#39;);\n                });\n            }\n        }\n    }\n});\n</code></pre>\n<p><strong>Пример:</strong> При <a href=\"#init\">инициализации экземпляра блока</a> <code>my-form</code> выполняется\nподписка на событие <code>click</code> элемента <code>submit</code>, при наступлении\nкоторого будет вызван метод экземпляра блока <code>_onSubmit</code>.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;my-block&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39;: function() {\n                this.bindTo(&#39;submit&#39;, &#39;click&#39;, function(e) {\n                    var domElem = $(e.currentTarget); // DOM-элемент, на котором слушается событие\n                                                      // в данном случае то же, что this.elem(&#39;submit&#39;)\n                    this._onSubmit();\n                });\n            }\n        }\n    },\n\n    _onSubmit : function() { /* ... */ }\n});\n</code></pre>\n<p><strong>NB</strong> Функция-обработчик выполняется в контексте того экземпляра\nблока, в котором возникло событие.</p>\n<p><strong>Удаление подписки</strong> на DOM-события выполняется автоматически при\nуничтожении экземпляра блока. Если необходимо удалить подписку вручную\nв процессе работы блока, следует использовать метод\n<code>unbindFrom([elem], event, handler)</code>.</p>\n<p><a name=\"dom-events-delegated\"></a></p>\n<h4 id=\"Делегирование-DOM-событий\"><a href=\"#Делегирование-DOM-событий\" class=\"anchor\"></a>Делегирование DOM-событий</h4>\n<p>Делегирование обработки DOM-событий выполняется с помощью метода\n<code>liveBindTo([elem], event, handler)</code>. В декларации блока точкой,\nзарезервированной для подписки на делегированные DOM-события, служит\nсвойство <code>live</code> в разделе статических методов блока.</p>\n<p><strong>Пример:</strong> Все экземпляры блока <code>menu</code> подписываются на\nделегированное DOM-событие <code>click</code> своих элементов <code>item</code>. Метод\n<code>_onItemClick</code> экземпляра блока <code>menu</code> будет выполняться при клике\nна любой пункт (элемент <code>item</code>) в этом меню. Не имеет значения,\nсуществовал ли этот пункт в момент инициализации экземпляра блока.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;menu&#39;, {\n    _onItemClick : function(e) {\n        var clickedItem = $(e.currentTarget); // элемент &#39;item&#39; блока &#39;menu&#39;, на котором слушается DOM-событие &#39;click&#39;\n    }\n}, {\n    live : function() {\n        this.liveBindTo(&#39;item&#39;, &#39;click&#39;, function() {\n            this._onItemClick();\n        });\n        return false; // если инициализация блока не может быть отложена\n    }\n});\n</code></pre>\n<p>По умолчанию, при наличии в декларации блока свойства <code>live</code>\nинициализация экземпляров блока будет <em>отложена</em> до момента, когда\nэкземпляр блока потребуется в работе\n(<a href=\"#init-live\">ленивая инициализация</a>). Таким моментом может стать\nDOM-событие на экземпляре блока, на которое выполнена делегированная\nподписка, или обращение к экземпляру блока <a href=\"#ibc\">из другого блока</a>.\nЕсли инициализация блока не может быть отложена (требуется\n<a href=\"#init-auto\">автоматическая инициализация</a>), следует вернуть <code>false</code>\nв результате выполнения функции в значении свойства <code>live</code>.</p>\n<p><strong>NB</strong> Функция-обработчик выполняется в контексте ближайшего блока\nданного типа на пути распространения DOM-события (снизу вверх\nпо DOM-дереву).</p>\n<p><strong>Удаление подписки</strong> на делегированные DOM-события никогда не\nвыполняется автоматически. Если подписку необходимо удалить, следует\nвоспользоваться методом <code>liveUnbindFrom([elem], event, [handler])</code>.</p>\n<h4 id=\"Объект-DOM-события\"><a href=\"#Объект-DOM-события\" class=\"anchor\"></a>Объект DOM-события</h4>\n<p>В качестве параметра функции-обработчику передается jQuery-объект,\nописывающий DOM-событие — <a href=\"https://api.jquery.com/category/events/event-object/\"><code>{jQuery.Event}</code></a>.</p>\n<p>Если DOM-событие было сгенерировано вручную, все параметры, переданные\nфункции <code>trigger</code> при создании события, будут переданы\nфункции-обработчику в том же порядке после объекта события.</p>\n<p><a name=\"bem-events\"></a></p>\n<h3 id=\"БЭМ-события\"><a href=\"#БЭМ-события\" class=\"anchor\"></a>БЭМ-события</h3>\n<p>В отличие от DOM-событий, БЭМ-события генерируются не на\nDOM-элементах, а на <strong>экземплярах блоков</strong>. Элементы блоков не могут\nгенерировать БЭМ-события.</p>\n<p>Чтобы сгенерировать БЭМ-событие, используется метод экземпляра блока\n<code>emit(event)</code>.</p>\n<p><strong>Пример:</strong> Взаимодействие пользователя с элементом управления блока\n(DOM-событие) можно преобразовать в БЭМ-событие на блоке. В\nприведенном ниже примере при клике пользователя по кнопке <code>submit</code>\n(DOM-событие <code>click</code>) <strong>БЭМ-событие</strong> <code>click</code> генерируется только в\nтом случае, если у блока в этот момент не выставлен модификатор\n<code>disabled</code>:</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;submit&#39;, {\n    onSetMod: {\n        &#39;js&#39;: {\n            &#39;inited&#39;: function() {\n                this.bindTo(&#39;click&#39;, this._onClick); // подписка на DOM-событие &quot;click&quot;\n            }\n        }\n    },\n\n    _onClick: function() {\n        if(!this.hasMod(&#39;disabled&#39;)) {\n            this.emit(&#39;click&#39;); // создание БЭМ-события &quot;click&quot;\n        }\n    }\n});\n</code></pre>\n<p>Для подписки на БЭМ-события экземпляров блоков используются методы\nэкземпляра блока <code>on(event, [data], handler, [handlerCtx])</code>.</p>\n<p><strong>Пример:</strong> В момент инициализации HTML-формы (экземпляра блока <code>my-form</code>)\nвыполняется поиск вложенной в форму кнопки <code>submit</code> и подписка на\nБЭМ-событие <code>click</code> этой кнопки. В результате при нажатии на кнопку\n(экземпляр блока <code>submit</code>) будет выполнен метод <code>_onSubmit</code> формы\n(экземпляр блока <code>my-form</code>).</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;my-form&#39;, {\n    onSetMod: {\n        &#39;js&#39;: {\n            &#39;inited&#39;: function() {\n                this.findBlockInside(&#39;submit&#39;).on(\n                    &#39;click&#39;, // имя БЭМ-события\n                    this._onSubmit, // метод экземпляра блока my-form\n                    this); // контекст для выполнения _onSubmit — блок my-form\n            }\n        }\n    },\n\n    _onSubmit: function() { /* ... */ }\n});\n</code></pre>\n<p><strong>NB</strong> Если не указывать последний параметр метода <code>on</code> —\n<code>[handlerCtx]</code>, контекстом для выполнения функции-обработчика будет\nтот блок, в котором возникло БЭМ-событие (в примере выше это блок\n<code>submit</code>).</p>\n<p><strong>Удаление подписки</strong> на БЭМ-события выполняется автоматически при\nуничтожении экземпляра блока. Если требуется удалить подписку вручную\nв процессе работы блока, следует использовать метод экземпляра блока\n<code>un(event, [handler], [handlerCtx])</code>.</p>\n<h4 id=\"События-при-изменении-модификаторов\"><a href=\"#События-при-изменении-модификаторов\" class=\"anchor\"></a>События при изменении модификаторов</h4>\n<p>Для подписки на БЭМ-события при изменении модификатора блока или элемента используется метод экземпляра блока <code>on</code>. Метод принимает аргументами:</p>\n<ul>\n<li>объект, описывающий модификатор, на который производится подписка;</li>\n<li>функцию обратного вызова, выполняющуюся при установке соответствующего модификатора.</li>\n</ul>\n<p>Объект, описывающий модификатор, может содержать следующие зарезервированные свойства:</p>\n<ul>\n<li><code>modName</code> <code>{String}</code> – имя модификатора. Обязательное свойство.</li>\n<li><code>modVal</code> <code>{String}</code> – значение модификатора. Обязательное свойство. Со значением <code>*</code> производится\nподписка на установку модификатора в <strong>любое</strong> значение. Со значением <code>&#39;&#39;</code> – на <strong>удаление</strong> модификатора.\nПодробнее смотрите в разделе <a href=\"#mods-api-trigger\">триггеры на установку модификаторов</a>.</li>\n<li><code>elem</code> <code>{String}</code> – имя элемента (для модификаторов элементов).</li>\n</ul>\n<p><strong>Пример:</strong> В момент инициализации блока <code>monitor</code> выполнятся подписка на:</p>\n<ul>\n<li><p>установку модификатора <code>m1</code> в любое значение;</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;monitor&#39;, {\n  onSetMod: {\n      &#39;js&#39;: {\n          &#39;inited&#39;: function() {\n            block1.on({ modName : &#39;m1&#39;, modVal : &#39;*&#39; }, function() {});\n          }\n      }\n  },\n});\n</code></pre>\n</li>\n<li><p>установку модификатора <code>m1</code> в значение <code>v1</code>;</p>\n<pre><code class=\"lang-js\">block1.on({ modName : &#39;m1&#39;, modVal : &#39;v1&#39; }, function() {});\n</code></pre>\n</li>\n<li><p>удаление модификатора <code>m1</code>;</p>\n<pre><code class=\"lang-js\">block1.on({ modName : &#39;m1&#39;, modVal : &#39;&#39; }, function() {});\n</code></pre>\n</li>\n<li><p>удаление модификатора <code>m1</code> у элемента <code>e1</code>;</p>\n<pre><code class=\"lang-js\">block1.on({ elem : &#39;e1&#39;, modName : &#39;m1&#39;, modVal : &#39;&#39; }, function() {});\n</code></pre>\n</li>\n</ul>\n<p><strong>NB</strong> В целях оптимизации производительности БЭМ-события при изменении модификаторов генерируются только в случае, если для них есть подписчики.</p>\n<p><a name=\"bem-events-delegated\"></a></p>\n<h4 id=\"Делегирование-БЭМ-событий\"><a href=\"#Делегирование-БЭМ-событий\" class=\"anchor\"></a>Делегирование БЭМ-событий</h4>\n<p>Делегирование БЭМ-событий означает, что блок подписывается на\nопределенное БЭМ-событие <strong>всех экземпляров</strong> блока с заданным именем\n<strong>в пределах заданного контекста</strong>. Подписка на делегированные\nБЭМ-события выполняется с помощью статического метода <em>класса блока</em>\n<code>on([ctx], event, [data], handler, [handlerCtx])</code>.</p>\n<p>Параметры:</p>\n<ul>\n<li><code>{jQuery} [ctx]</code> — DOM-узел, в пределах которого отслеживаются\nБЭМ-события (контейнер). Если не указан, в качестве контейнера\nиспользуется весь документ.</li>\n<li><code>{String} event</code> — имя БЭМ-события.</li>\n<li><code>{Object} [data]</code> — произвольные данные, передаваемые функции-обработчику.</li>\n<li><code>{Function} handler</code> — функция-обработчик события.</li>\n<li><code>{Object} [handlerCtx]</code> — контекст функции-обработчика\nсобытия. Обычно в качестве контекста должен выступать тот экземпляр\nблока, который подписывается на БЭМ-событие, а не тот, в котором БЭМ-событие\nпроизошло.</li>\n</ul>\n<p><strong>Пример:</strong> При инициализации экземпляров блока <code>menu</code> выполняется\nподписка на БЭМ-событие <code>click</code> всех ссылок (экземпляров блока\n<code>link</code>) в пределах DOM-узла, к которому привязано меню\n(<code>this.domElem</code>). В качестве контекста функции-обработчика\nпередается экземпляр блока, в котором событие будет обрабатываться\n(<code>this</code>).\nПри <a href=\"#destruct\">уничтожении экземпляров блока</a> <code>menu</code> <strong>удаление подписки</strong> на делегированные\nБЭМ-события никогда не происходит автоматически. Всегда следует явно удалять подписку\nпри помощи статического метода блока <code>un([ctx], event, [handler], [handlerCtx])</code>.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;menu&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39; : function() {\n                BEMDOM.blocks[&#39;link&#39;].on( // подписка на БЭМ-событие\n                    this.domElem, // контейнер — DOM-узел экземпляра блока menu\n                    &#39;click&#39;, // БЭМ-событие\n                    this._onLinkClick, // обработчик\n                    this); // контекст обработчика — экземпляр блока menu\n            },\n\n            &#39;&#39; : function() {\n                BEMDOM.blocks[&#39;link&#39;].un( // удаление подписки на БЭМ-событие\n                    this.domElem,\n                    &#39;click&#39;,\n                    this._onLinkClick,\n                    this);\n            }\n        }\n    },\n\n    _onLinkClick : function(e) {\n        var clickedLink = e.target; // экземпляр блока &#39;link&#39;, на котором произошло БЭМ-событие &#39;click&#39;\n    }\n});\n</code></pre>\n<p><strong>NB</strong> Если не указывать параметр <code>[handlerCtx]</code> метода <code>on</code>,\nконтекстом для функции-обработчика будет тот блок, в котором\n<em>возникло</em> БЭМ-событие.</p>\n<p><strong>Удаление подписки</strong> на делегированные БЭМ-события никогда не\nпроисходит автоматически. Всегда следует явно удалять подписку при\nпомощи статического метода блока <code>un([ctx], event, [handler], [handlerCtx])</code>.</p>\n<p>Полное описание API для работы с БЭМ-событиями содержится в исходном\nкоде модулей <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/i-bem.vanilla.js\">i-bem</a> и <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><a name=\"api\"></a></p>\n<h3 id=\"Объект-БЭМ-события\"><a href=\"#Объект-БЭМ-события\" class=\"anchor\"></a>Объект БЭМ-события</h3>\n<p>В качестве параметра функции-обработчику передается объект,\nописывающий БЭМ-событие. Объект БЭМ-события <code>events.Event</code> определен\nв <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуле\n<a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/events/events.vanilla.js\"><code>events</code></a> библиотеки bem-core. Содержит поля:</p>\n<ul>\n<li><code>target</code> — экземпляр блока, в котором произошло БЭМ-событие.</li>\n<li><code>data</code> — произвольные дополнительные данные. Передается в качестве\nпараметра <code>data</code> в момент подписки на БЭМ-событие или при создании\nБЭМ-события блоком.</li>\n<li><code>result</code> — последнее значение, возвращенное обработчиком данного\nсобытия. Аналогично <a href=\"https://api.jquery.com/event.result/\">jQuery.Event.result</a>.</li>\n<li><code>type</code> — тип события. Аналогично\n<a href=\"https://api.jquery.com/event.type/\">jQuery.Event.type</a>.</li>\n</ul>\n<p><a name=\"states\"></a></p>\n<h2 id=\"Состояния-блока\"><a href=\"#Состояния-блока\" class=\"anchor\"></a>Состояния блока</h2>\n<p>Проектируя динамический блок в стиле БЭМ, нужно представить всю логику\nизменений, происходящих в нем, как набор <strong>состояний</strong> блока. Тогда\nповедение блока определяется <strong>триггерами</strong> — callback-функциями, которые\nвыполняются при переходе блока из одного состояния в другое.</p>\n<p>Такой подход позволяет писать код блока в декларативном стиле как\nнабор утверждений вида: <code>описание состояния</code> — <code>действия, выполняемые\nпри переходе в данное состояние</code>.</p>\n<p><a name=\"modifiers\"></a></p>\n<h3 id=\"Модификаторы\"><a href=\"#Модификаторы\" class=\"anchor\"></a>Модификаторы</h3>\n<p>Согласно БЭМ-методологии, состояние блока и его элементов описывается\n<strong>модификаторами</strong>.</p>\n<p>Модификатор описывает, в каком из возможных состояний находится\nблок. Модификатор представляет собой пару строк: <strong>имя</strong> и\n<strong>значение</strong>. Список допустимых значений модификатора описывает\nнабор состояний блока. Например, для описания размеров блока\nможно использовать модификатор <code>size</code> с допустимыми значениями <code>s</code>, <code>m</code> и\n<code>l</code>.</p>\n<p><strong>Простой модификатор</strong> — частный случай, когда важно только наличие\nили отсутствие данного модификатора у блока, а его значение\nнесущественно. Например, модификатор описывающий состояние «отключен»:\n<code>disabled</code>. В <code>i-bem.js</code> представлены как модификаторы с булевым\nзначением. При выставлении модификатора с неуказанным значением\n<code>i-bem.js</code> автоматически присваивает ему значение <code>true</code>.</p>\n<p>Каждому блоку можно установить один или несколько модификаторов. Блок\nможет не иметь модификаторов. Список допустимых модификаторов и их\nзначений определяет разработчик блока.</p>\n<p>В <code>i-bem.js</code> модификаторы устанавливаются при\n<a href=\"#init\">инициализации экземпляра блока</a> (если модификаторы и их\nзначения указаны в атрибуте <code>class</code> соответствующего HTML-элемента).</p>\n<p><strong>NB</strong> Если модификаторы блока указаны в HTML-элементе, при\nинициализации блока триггеры на установку данных модификаторов <em>не\nвыполняются</em>. Экземпляр блока в этом случае получает начальное\nсостояние, а не меняет его.</p>\n<p>Модификаторы могут добавляться, удаляться и менять значения:</p>\n<ul>\n<li>в ходе выполнения кода блока (например, в качестве реакции на <a href=\"#dom-events\">DOM-события</a>);</li>\n<li>по запросу из другого блока (см. раздел <a href=\"#ibc\">Взаимодействие блоков</a>).</li>\n</ul>\n<p>При добавлении, удалении и изменении значений модификаторов выполняются триггеры.</p>\n<p><a name=\"mods-api\"></a></p>\n<h4 id=\"Управление-модификаторами\"><a href=\"#Управление-модификаторами\" class=\"anchor\"></a>Управление модификаторами</h4>\n<p>Экземпляр блока предоставляет методы для установки, проверки значений\nи удаления модификаторов данного экземпляра.</p>\n<p><strong>NB</strong> Модификаторы нельзя устанавливать, напрямую меняя CSS-классы на\nсоответствующем DOM-узле. Для изменения значений модификаторов следует\nиспользовать описанный ниже API, предоставляемый <code>i-bem.js</code>.</p>\n<p><strong>Пример:</strong> Экземпляр блока <code>square</code> может по клику на DOM-элементе\nблока переключаться между значениями <code>green</code> и <code>red</code> модификатора\n<code>color</code>, если не выставлен модификатор <code>disabled</code>:</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;square&#39;, {\n    onSquareClick: function(e) {\n        if(!this.hasMod(&#39;disabled&#39;)) {\n            this.toggleMod(&#39;color&#39;, &#39;green&#39;, &#39;red&#39;);\n        }\n    }\n});\n</code></pre>\n<p>Эти же методы используются для управления модификаторами элементов\nблока. Для этого в качестве первого (необязательного) параметра\nуказывается ссылка на объект элемента (а не имя элемента).</p>\n<p><strong>Пример:</strong> Блок <code>searchbox</code> по клику может выставлять своему элементу\n<code>input</code> простой модификатор <code>clean</code> (подразумеваемое значение —\n<code>true</code>):</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;searchbox&#39;, {\n    _onClick: function() {\n        this.setMod(this.elem(&#39;input&#39;), &#39;clean&#39;);\n    }\n});\n</code></pre>\n<p><strong>NB</strong> При управлении модификаторами элементов в качестве первого\nпараметра необходимо указывать ссылку на <strong>DOM-узел элемента</strong>, а не\nимя элемента. В противном случае возникла бы неоднозначность:\nимеется в виду установка блоку <em>модификатора</em> <code>input</code> со значением\n<code>clean</code> или установка элементу <code>input</code> <em>простого модификатора</em> <code>clean</code>.</p>\n<p>Полное описание API для управления модификаторами приведено в\nисходном коде модулей <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/i-bem.vanilla.js\">i-bem</a> и <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><a name=\"mods-api-trigger\"></a></p>\n<h3 id=\"Триггеры-на-установку-модификаторов\"><a href=\"#Триггеры-на-установку-модификаторов\" class=\"anchor\"></a>Триггеры на установку модификаторов</h3>\n<p>Выполнение триггеров на установку модификаторов разбито на две фазы:</p>\n<ol>\n<li><strong>До установки модификатора</strong>. Эта фаза зарезервирована для\nвозможности <strong>отменить</strong> установку модификатора. Если хотя бы один\nиз триггеров, выполняемых в этой фазе, вернет <code>false</code>,\nустановки модификатора не произойдет.</li>\n<li><strong>После установки модификатора</strong>. Триггеры, выполняемые в этой\nфазе, уже не могут отменить установку модификаторов.</li>\n</ol>\n<p>Триггеры могут быть привязаны к следующим типам изменений значений модификаторов:</p>\n<ol>\n<li>установка <em>любого</em> модификатора в <em>любое</em> значение;</li>\n<li>установка <em>конкретного</em> модификатора <code>modName</code> в <em>любое</em> значение (в том числе\nустановка простого модификатора в значение <code>true</code>);</li>\n<li>установка <em>конкретного</em> модификатора <code>modName</code> в <em>конкретное</em> значение <code>modVal</code>;</li>\n<li>установка модификатора в значение <code>&#39;&#39;</code> (пустая строка), что\nэквивалентно удалению модификатора или установке простого\nмодификатора в значение <code>false</code>.</li>\n</ol>\n<p>При установке модификатора <code>modName</code> в значение <code>modVal</code> триггеры\nкаждой фазы (если они определены) вызываются в том порядке, в котором они\nперечислены в приведенном выше списке событий (от общего к частному).</p>\n<p>Таким образом, при определении триггера пользователь указывает:</p>\n<ul>\n<li>фазу выполнения (до или после установки модификатора);</li>\n<li>тип события (имя и устанавливаемое значение модификатора).</li>\n</ul>\n<p><a name=\"mods-api-trigger-phase\"></a></p>\n<h4 id=\"Фазы-выполнения\"><a href=\"#Фазы-выполнения\" class=\"anchor\"></a>Фазы выполнения</h4>\n<p>Наличие дополнительной фазы, предшествующей установке модификатора, позволяет\nпроизвести некоторые проверки без риска повлиять на логику, связанную с установкой модификатора. Например, если существуют взаимоисключающие модификаторы, перед установкой одного из них логично проверить не установлен ли другой.</p>\n<p>В блоке <code>checkbox-group</code> библиотеки <code>bem-components</code> перед установкой модификатора <code>focused</code> производится проверка на наличие модификатора <code>disabled</code>:</p>\n<pre><code class=\"lang-js\">provide(BEMDOM.decl(this.name, /** @lends checkbox-group.prototype */{\n    beforeSetMod : {\n        &#39;focused&#39; : {\n            &#39;true&#39; : function() {\n                return !this.hasMod(&#39;disabled&#39;);\n            }\n        }\n    },\n\n    onSetMod : {\n        &#39;focused&#39; : { /* ... */}\n    }\n}));\n</code></pre>\n<p>Если триггер для фазы, предшествующей установке (<code>beforeSetMod</code>), возвращает <code>false</code>, установка модификатора не производится.</p>\n<p><a name=\"mods-api-trigger-decl\"></a></p>\n<h4 id=\"Декларация-триггеров\"><a href=\"#Декларация-триггеров\" class=\"anchor\"></a>Декларация триггеров</h4>\n<p>Триггеры, выполняемые при установке модификаторов, описываются в\nдекларации блока. Для этого в хэше методов экземпляра блока\nзарезервированы свойства:</p>\n<ul>\n<li><code>beforeSetMod</code> — триггеры, вызываемые до установки\n<strong>модификаторов блока</strong>;</li>\n<li><code>beforeElemSetMod</code> — триггеры, вызываемые до установки\n<strong>модификаторов элементов</strong>;</li>\n<li><code>onSetMod</code> — триггеры, вызываемые после установки\n<strong>модификаторов блока</strong>;</li>\n<li><code>onElemSetMod</code> — триггеры, вызываемые после установки\n<strong>модификаторов элементов</strong> блока.</li>\n</ul>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nprovide(BEMDOM.decl(/* селектор блока */,\n    {\n        /* методы экземпляра */\n        beforeSetMod: { /* триггеры до установки модификаторов блока*/}\n        beforeElemSetMod: { /* триггеры до установки модификаторов элементов*/}\n        onSetMod: { /* триггеры после установки модификаторов блока */ }\n        onElemSetMod: { /* триггеры после установки модификаторов элементов */ }\n    },\n    {\n        /* статические методы */\n    }\n));\n});\n</code></pre>\n<p>Значение свойств <code>beforeSetMod</code> и <code>onSetMod</code> — хэш, связывающий\nизменения модификаторов с триггерами. В качестве параметров триггерам\nпередаются:</p>\n<ul>\n<li>имя модификатора;</li>\n<li>выставляемое значение модификатора;</li>\n<li>предшествующее (для <code>beforeElemSetMod</code>) или текущее (для <code>onElemSetMod</code>) значение модификатора.</li>\n</ul>\n<pre><code class=\"lang-js\">{\n    &#39;mod1&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // установка mod1 в любое значение\n    &#39;mod2&#39;: {\n        &#39;val1&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 в значение val1\n        &#39;val2&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 в значение val2\n        &#39;&#39;: function(modName, modVal, prevModVal) { /* ... */ } // триггер на удаление модификатора mod2\n    &#39;mod3&#39;: {\n        &#39;true&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку простого модификатора mod3\n        &#39;&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // триггер на удаление простого модификатора mod3\n    },\n    &#39;*&#39;: function(modName, modVal, prevModVal) { /* ... */ } // триггер на установку любого модификатора в любое значение\n}\n</code></pre>\n<p>Для триггера на установку любого модификатора блока в любое значение\nсуществует сокращенная форма записи:</p>\n<pre><code class=\"lang-js\">beforeSetMod: function(modName, modVal, prevModVal) { /* ... */ }\nonSetMod: function(modName, modVal, prevModVal) { /* ... */ }\n</code></pre>\n<p>Для свойств <code>beforeElemSetMod</code> и <code>onElemSetMod</code> в хэш значений\nдобавляется дополнительный уровень вложенности — <strong>элемент</strong>. В этих\nсвойствах описываются триггеры на установку модификаторов элементов.\nВ качестве параметров триггеру передаются:</p>\n<ul>\n<li>имя элемента;</li>\n<li>имя модификатора;</li>\n<li>выставляемое значение модификатора;</li>\n<li>предшествующее (для <code>beforeElemSetMod</code>) или текущее (для <code>onElemSetMod</code>) значение модификатора.</li>\n</ul>\n<pre><code class=\"lang-js\">{\n    &#39;elem1&#39;: {\n        &#39;mod1&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod1 элемента elem 1 в любое значение\n        &#39;mod2&#39;: {\n            &#39;val1&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 элемента elem1 в значение val1\n            &#39;val2&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ } // триггер на установку mod2 элемента elem1 в значение val2\n            }\n        },\n    &#39;elem2&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ } // триггер на установку любого модификатора элемента elem2 в любое значение\n}\n</code></pre>\n<p>Сокращенная запись для триггера на установку любого модификатора элемента <code>elem1</code> в любое значение:</p>\n<pre><code class=\"lang-js\">beforeElemSetMod: { &#39;elem1&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ } }\nonElemSetMod: { &#39;elem1&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ } }\n</code></pre>\n<h4 id=\"Примеры-триггеров\"><a href=\"#Примеры-триггеров\" class=\"anchor\"></a>Примеры триггеров</h4>\n<p>Типовая задача триггеров, вызываемых после установки модификатора или\nизменения его значения (свойство <code>onSetMod</code>) — выполнить операции над\nDOM-узлом блока, необходимые для перехода в новое состояние.</p>\n<p><strong>Пример:</strong> Экземпляр блока <code>input</code> при установке простого\nмодификатора <code>focused</code> (в значение <code>true</code>) очищает поле ввода —\nзаменяет пустой строкой текст DOM-узла блока.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;input&#39;, {\n    onSetMod : {\n        &#39;focused&#39; : {\n            &#39;true&#39; : function() {\n                this.domElem.val(&#39;&#39;); // очистить поле ввода\n            }\n        }\n    }\n});\n</code></pre>\n<p>Триггеры, выполняемые перед установкой модификатора (свойство\n<code>beforeSetMod</code>), необходимы для проверки текущего состояния экземпляра\nблока и возможности отменить переход в другое состояние.</p>\n<p><strong>Пример:</strong> Экземпляр блока <code>input</code> перед установкой простого\nмодификатора <code>focused</code> проверяет, не выставлен ли у него модификатор\n<code>disabled</code>. Если <code>disabled</code> выставлен, будет возвращено значение <code>false</code> и\nустановки модификатора <code>focused</code> не произойдет.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;input&#39;, {\n    beforeSetMod : {\n        &#39;focused&#39; : {\n            &#39;true&#39; : function() {\n                return !this.hasMod(&#39;disabled&#39;); // вернет false, если disabled\n            }\n        }\n    }\n});\n</code></pre>\n<p><a name=\"init\"></a></p>\n<h3 id=\"Инициализация\"><a href=\"#Инициализация\" class=\"anchor\"></a>Инициализация</h3>\n<p>Инициализация блока — это создание в памяти браузера JS-объекта,\nсоответствующего экземпляру блока. Инициализация экземпляров блоков выполняется\nметодом <code>init()</code> модуля <code>i-bem__dom</code> на заданном фрагменте DOM-дерева.</p>\n<p>Каждому экземпляру блока можно приписать три состояния:</p>\n<ul>\n<li>экземпляр блока не инициализирован (JS-объект не создан);</li>\n<li>экземпляр блока инициализирован (JS-объект создан в памяти браузера);</li>\n<li>экземпляр блока уничтожен (удалены все ссылки на JS-объект экземпляра\nблока, и он может быть удален сборщиком мусора).</li>\n</ul>\n<p>В <code>i-bem.js</code> эти состояния экземпляра блока описываются с помощью служебного\nмодификатора <code>js</code>.</p>\n<ul>\n<li>До инициализации экземпляр блока не имеет модификатора <code>js</code>.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem&quot; data-bem=&quot;...&quot; &gt;...&lt;/div&gt;\n</code></pre>\n<ul>\n<li>В момент инициализации экземпляру блока устанавливается модификатор\n<code>js</code> в значении <code>inited</code>.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem my-block_js_inited&quot; data-bem=&quot;...&quot;&gt;...&lt;/div&gt;\n</code></pre>\n<ul>\n<li>Если в процессе работы удаляется фрагмент DOM-дерева (при помощи\nметода <code>destruct</code> модуля <code>i-bem__dom</code>), то вместе с\nним удаляются экземпляры блоков, все HTML-элементы которых находятся\nв этом фрагменте. Перед удалением экземпляра блока модификатор <code>js</code>\nудаляется.</li>\n</ul>\n<p><strong>NB</strong> Если экземпляр блока был\n<a href=\"#distrib-block\">привязан к нескольким HTML-элементам</a>, блок будет существовать,\nпока в HTML-дереве сохраняется хотя бы один элемент, с которым он\nсвязан.</p>\n<p>Если на HTML-элементе размещено несколько экземпляров других блоков, то\nинициализация одного из них (появление модификатора <code>my-block_js_inited</code>)\nне влияет на инициализацию остальных.</p>\n<p><strong>Пример:</strong> На HTML-элементе инициализирован только экземпляр блока <code>my-block</code>.\nЭкземпляр блока <code>lazy-block</code> не инициализирован:</p>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block my-block_js_inited lazy-block i-bem&quot;\n    data-bem=&#39;{ &quot;my-block&quot;: {}, &quot;lazy-block&quot;: {} }&#39; &gt;\n    ...\n&lt;/div&gt;\n</code></pre>\n<p><strong>NB</strong> Наличие модификатора <code>js</code> позволяет писать разные CSS-стили для\nблока в зависимости от того, инициализирован он или нет.</p>\n<h4 id=\"Конструктор-экземпляра-блока\"><a href=\"#Конструктор-экземпляра-блока\" class=\"anchor\"></a>Конструктор экземпляра блока</h4>\n<p>На изменение значений модификатора <code>js</code> можно назначать триггеры так\nже, как и для любых других модификаторов блока.</p>\n<p>Триггер на установку модификатора <code>js</code> в значение <code>inited</code> выполняется\nпри создании блока. Этот триггер можно считать <strong>конструктором\nэкземпляра блока</strong>:</p>\n<pre><code class=\"lang-js\">onSetMod: {\n    &#39;js&#39;: {\n        &#39;inited&#39;: function() { /* ... */ } // конструктор экземпляра блока\n    }\n}\n</code></pre>\n<p><a name=\"destruct\"></a></p>\n<h4 id=\"Деструктор-экземпляра-блока\"><a href=\"#Деструктор-экземпляра-блока\" class=\"anchor\"></a>Деструктор экземпляра блока</h4>\n<p>Моментом удаления блока является момент уничтожения всех ссылок на\nJS-объект блока, после чего он может быть удален из памяти браузера\nсборщиком мусора.</p>\n<p>Триггер на удаление модификатора <code>js</code> (установку в пустое значение\n<code>&#39;&#39;</code>) выполняется перед удалением блока. Такой триггер можно считать\n<strong>деструктором экземпляра блока</strong>.</p>\n<pre><code class=\"lang-js\">onSetMod: {\n    &#39;js&#39;: {\n        &#39;&#39;: function() { /* ... */ } // деструктор экземпляра блока\n    }\n}\n</code></pre>\n<p><a name=\"init-wave\"></a></p>\n<h4 id=\"Волны-инициализации\"><a href=\"#Волны-инициализации\" class=\"anchor\"></a>Волны инициализации</h4>\n<p>Инициализация экземпляров блоков, присутствующих на странице, не\nобязательно происходит одновременно. Блоки могут добавляться в ходе\nработы (например, за счет динамической генерации HTML на основе\nданных, полученных от сервера) или инициализироваться только по запросу.\nИнициализация очередной группы блоков называется <strong>волной\nинициализации</strong>.</p>\n<p>Новая волна инициализации создается в следующих случаях:</p>\n<ul>\n<li><a href=\"#init-auto\">Автоматическая инициализация всех блоков в документе по событию <code>domReady</code></a>;</li>\n<li><a href=\"#init-live\">Инициализация блока по событию на DOM-узле</a> (ленивая инициализация);</li>\n<li><a href=\"#init-ajax\">Явный вызов инициализации блоков на указанном фрагменте DOM-дерева</a>.</li>\n</ul>\n<p><a name=\"init-auto\"></a></p>\n<h4 id=\"Автоматическая-инициализация\"><a href=\"#Автоматическая-инициализация\" class=\"anchor\"></a>Автоматическая инициализация</h4>\n<p>Фреймворк <em>i-bem.js</em> позволяет автоматически инициализировать все\nблоки, имеющие DOM-представление (привязанные к DOM-элементам на\nстранице) в момент наступления DOM-события <code>domReady</code>. Чтобы включить\nавтоматическую инициализацию, необходимо задекларировать на странице\nблок <code>i-bem</code> с модификатором <code>init</code> в значении <code>auto</code>.</p>\n<p><strong>Пример файла</strong> <code>.deps.js</code>:</p>\n<!-- bem-example: desktop.examples/i-bem/6BCJYSf_Nz1N5D2VXV76OeXM0kY -->\n\n<p>При автоматической инициализации в памяти браузера будут созданы\nJS-объекты для всех DOM-узлов, в атрибуте <code>class</code> которых указан\n<code>i-bem</code>. Инициализация выполняется функцией <code>init</code> модуля\n<a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><a name=\"init-live\"></a></p>\n<h4 id=\"Инициализация-по-событию--ленивая-инициализация-\"><a href=\"#Инициализация-по-событию--ленивая-инициализация-\" class=\"anchor\"></a>Инициализация по событию (ленивая инициализация)</h4>\n<p>Если на странице размещено много экземпляров блоков, автоматическая инициализация\nвсех блоков в момент загрузки страницы нежелательна, так как она\nувеличивает время загрузки и объем памяти, затрачиваемой браузером.</p>\n<p>В этом случае имеет смысл инициализировать JS-объекты\nтолько в тот момент, когда их функциональность потребуется\nпользователю: например, по клику на блоке. Такая инициализация\nназывается <strong>ленивой</strong> или <strong>live-инициализацией</strong>.</p>\n<p>Для описания условий ленивой инициализации зарезервировано свойство\n<code>live</code> в разделе статических методов декларации блока. Свойство <code>live</code>\nможет принимать два типа значений:</p>\n<ul>\n<li><code>Boolean</code><br/>\nИмеет смысл только значение <code>true</code>: экземпляры\nблоков данного класса будут инициализированы только при попытке\nполучить соответствующий экземпляр (см. раздел <a href=\"#ibc\">Взаимодействие блоков</a>).</li>\n</ul>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;my-block&#39;,\n    {\n        onSetMod: {\n            &#39;js&#39;: {\n                &#39;inited&#39;: function() { /* ... */ } // этот код будет выполняться\n                                                   // при первом обращении к экземпляру блока\n            }\n        }\n    },\n    { live: &#39;true&#39; } // статические методы и свойства\n);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<ul>\n<li><code>Function</code><br/>\nФункция, которую нужно выполнить при попытке\nинициализации <strong>первого экземпляра</strong> блока заданного класса. Если\nфункция возвращает значение <code>false</code>, экземпляры блоков будут\nинициализироваться <a href=\"#init-auto\">автоматически</a>.</li>\n</ul>\n<p>Если необходимо инициализировать экземпляры блока по наступлению\nDOM- или БЭМ-событий, в теле функции следует выполнить подписку на\n<a href=\"#delegated-events\">делегированные события</a>. Возможна инициализация\nпо:</p>\n<ul>\n<li>DOM-событию на DOM-узле блока и вложенных элементах;</li>\n<li>БЭМ-событию на вложенных блоках.</li>\n</ul>\n<p><strong>Пример:</strong> Экземпляры блока <code>my-block</code> будут инициализироваться по\nDOM-событию <code>click</code> на DOM-узле блока. По каждому DOM-событию\n<code>click</code> будет вызываться метод экземпляра блока <code>_onClick</code>:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;my-block&#39;,\n    {\n        onSetMod: {\n            &#39;js&#39;: {\n                &#39;inited&#39;: function() { /* ... */ } // выполняется при первом DOM-событии &#39;click&#39;\n            }\n        },\n\n        _onClick: function() { /* ... */ } // выполняется при каждом DOM-событии &#39;click&#39;\n    },\n    {\n        live: function() {\n            this.liveBindTo(&#39;click&#39;, function() {\n                this._onClick(); // в момент клика будет создан экземпляр блока и вызван его метод _onClick\n            });\n        }\n    }\n);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p>Если необходимо воспользоваться делегированными событиями в блоке,\nно инициализацию блока нельзя отложить (экземпляры блока должны быть\nинициализированы немедленно после загрузки страницы), следует вернуть\nзначение <code>false</code>:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;my-block&#39;,\n    {\n        onSetMod: {\n            &#39;js&#39;: {\n                &#39;inited&#39;: function() { /* ... */ } // будет выполнена по наступлении domReady\n            }\n        },\n\n        _onClick: function() { /* ... */ } // будет выполняться каждый\n                                           // раз при наступлении DOM-события &#39;click&#39;\n    },\n    {\n        live: function() {\n            this.liveBindTo(&#39;click&#39;, function() { this._onClick() });\n            return false; // экземпляры блоков будут инициализированы автоматически\n        }\n    }\n);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p>Полный список хелперов для подписки на делегированные события\nприведен в исходном коде модуля <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><strong>NB</strong> Свойство <code>live</code> задает ленивую инициализацию для <em>всех\nэкземпляров</em> соответствующего блока, так как технически относится\nк статическим методам класса блока. Поэтому даже если свойство <code>live</code>\nзадекларировано для блока с определенным значением модификатора, оно\nбудет применено ко всем блокам данного класса вне зависимости от\nмодификаторов.</p>\n<p><a name=\"init-ajax\"></a></p>\n<h4 id=\"Инициализация-блоков-на-фрагменте-DOM-дерева\"><a href=\"#Инициализация-блоков-на-фрагменте-DOM-дерева\" class=\"anchor\"></a>Инициализация блоков на фрагменте DOM-дерева</h4>\n<p>Процедура инициализации JS-объектов может быть вызвана\nявно для указанного фрагмента DOM-дерева. Часто такая необходимость\nвозникает при разработке AJAX-интерфейсов, когда нужно <a href=\"#dynamic\">динамически встроить</a> в страницу новые экземпляры блоков либо обновить существующие.</p>\n<p>В <code>i-bem.js</code> следующие функции выполняют динамическую инициализацию блоков:</p>\n<ul>\n<li>Инициализация/уничтожение блоков на указанном фрагменте DOM-дерева\n(<code>init</code>);</li>\n<li>Добавление/замена фрагмента DOM-дерева с одновременной\nинициализацией блоков на обновленном фрагменте (<code>update</code>, <code>replace</code>,\n<code>append</code>, <code>prepend</code>, <code>before</code>, <code>after</code>).</li>\n</ul>\n<p><a name=\"destruct-dom\"></a></p>\n<h4 id=\"Удаление-блоков-на-фрагменте-DOM-дерева\"><a href=\"#Удаление-блоков-на-фрагменте-DOM-дерева\" class=\"anchor\"></a>Удаление блоков на фрагменте DOM-дерева</h4>\n<p>Как и процедура инициализации блоков, процедура удаления может быть вызвана явно для заданного фрагмента DOM-дерева. Например, при разработке AJAX-интерфейсов, для динамического удаления экземпляров блоков со страницы.</p>\n<p>Явный вызов процедуры гарантирует корректное удаление:</p>\n<ul>\n<li>вложенных DOM-узлов;</li>\n<li>блоков, примешанных к другим блокам.</li>\n</ul>\n<p>Для явного вызова процедуры удаления служит статичесикий метод <code>destruct</code>, реализованный в элементе <code>dom</code> блока <code>i-bem</code> библиотеки <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js#L970\">bem-core</a>.</p>\n<p>Метод принимает два аргумента:</p>\n<ul>\n<li><code>ctx</code> <code>{jQuery}</code> – корневой DOM-элемент. Удаляется со всем вложенными DOM-узлами.</li>\n<li><code>excludeSelf</code> <code>Boolean</code> – не удалять корневой DOM-элемент если значение <code>true</code>. По умолчанию <code>false</code>.</li>\n</ul>\n<p>Например, в блоке <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/popup/_target/popup_target_anchor.js\">popup_target_anchor</a> библиотеки <code>bem-components</code> <code>destruct</code> используется приватным методом <code>_onPopupAnchorDestruct</code> для удаления текущего DOM-элемента при удалении якоря попапа:</p>\n<pre><code class=\"lang-js\">_onPopupAnchorDestruct : function() {\n    BEMDOM.destruct(this.domElem);\n}\n</code></pre>\n<p><a name=\"init-bem\"></a></p>\n<h4 id=\"Инициализация-и-удаление-блоков-без-DOM-представления\"><a href=\"#Инициализация-и-удаление-блоков-без-DOM-представления\" class=\"anchor\"></a>Инициализация и удаление блоков без DOM-представления</h4>\n<p>Чтобы создать JS-объект для блока, не имеющего DOM-представления (не\nпривязанного к HTML-элементу), необходимо вызвать метод <code>create</code>,\nкоторый вернет экземпляр блока указанного класса.</p>\n<p><strong>Пример:</strong> В момент инициализации экземпляра блока с DOM-представлением\n<code>container</code> создается экземпляр блока без DOM-представления <code>router</code>. Экземпляр блока\n<code>container</code> затем будет обращаться к созданному им экземпляру блока\n<code>router</code> при вызове метода <code>onRequest</code>:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, &#39;i-bem&#39;, function(provide, BEM, BEMDOM) {\n\nBEMDOM.decl(&#39;container&#39;, {\n    onSetMod: {\n        &#39;js&#39;: {\n            &#39;inited&#39;: function() {\n                this._router = BEM.create(&#39;router&#39;); // создание экземпляра блока router\n            }\n        }\n    },\n\n    onRequest: function() {\n        this._router.route(/* ... */) // вызов метода экземпляра блока router\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p><strong>Пример:</strong> Блок без DOM-представления реализован в виде простого\n<a href=\"https://github.com/ymaps/modules\">ymaps-модуля</a>, без использования модуля <code>i-bem</code>. Такой блок\nиспользуется как обычный ymaps-модуль (нет необходимости создавать\nэкземпляр блока):</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, &#39;router&#39;, function(provide, BEMDOM, router) {\n\nBEMDOM.decl(&#39;container&#39;, {\n    onRequest: function() {\n        router.route(/* ... */); // вызов метода блока router\n    }\n});\n\nprovide(BEMDOM, router);\n\n});\n</code></pre>\n<p><strong>Удаление</strong> экземпляров блоков без DOM-представления не может быть\nвыполнено автоматически и является ответственностью\nразработчика. Блоки без DOM-представления представляют собой обычные\nJS-объекты и удаляются в момент удаления всех ссылок на объект блока.</p>\n<p><strong>Пример:</strong> При удалении экземпляра блока <code>container</code> удаляется созданный им в\nпроцессе работы экземпляр блока без DOM-представления <code>router</code>.</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, &#39;i-bem&#39;, function(provide, BEM, BEMDOM) {\n\nBEMDOM.decl(&#39;container&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;&#39; : function() {\n                delete this._router; // удаление экземпляра блока router\n            }\n        }\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p><a name=\"ibc\"></a></p>\n<h2 id=\"Взаимодействие-блоков\"><a href=\"#Взаимодействие-блоков\" class=\"anchor\"></a>Взаимодействие блоков</h2>\n<p>В рамках БЭМ-методологии блоки следует разрабатывать так,\nчтобы по возможности исключить зависимость состояний одних\nблоков от других. Однако на практике идеал полной независимости блоков\nнедостижим.</p>\n<p>Взаимодействие блоков может быть реализовано двумя способами:</p>\n<ul>\n<li>с помощью подписки на <a href=\"#bem-events\">БЭМ-события</a> других экземпляров\nблоков или подписки на <a href=\"#bem-events-delegated\">делегированные БЭМ-события</a>;</li>\n<li>с помощью непосредственного вызова методов других экземпляров\nблоков или статических методов класса другого блока.</li>\n</ul>\n<p><strong>NB</strong> Не используйте <a href=\"#dom-events\">DOM-события</a> для\nорганизации взаимодействия между блоками. DOM-события предназначены\nтолько для реализации внутренних процедур блока.</p>\n<p>Для реализации взаимодействия блоков <code>i-bem.js</code> предоставляет API:</p>\n<ul>\n<li><a href=\"#api-find\">Поиск экземпляров блоков в DOM-дереве</a>;</li>\n<li><a href=\"#api-nodom\">Доступ к экземплярам блоков без DOM-представления</a>;</li>\n<li><a href=\"#api-calss\">Доступ к классам блоков</a>.</li>\n</ul>\n<p><a name=\"api-find\"></a></p>\n<h3 id=\"Поиск-экземпляров-блоков-в-DOM-дереве\"><a href=\"#Поиск-экземпляров-блоков-в-DOM-дереве\" class=\"anchor\"></a>Поиск экземпляров блоков в DOM-дереве</h3>\n<p>Обращение к другому блоку в <code>i-bem.js</code> выполняется из текущего блока,\nразмещенного на определенном узле DOM-дерева. Поиск других блоков в\nDOM-дереве может вестись по трем направлениям (осям) относительно\nDOM-узла текущего блока:</p>\n<ul>\n<li><strong>Внутри блока</strong> — на DOM-узлах, вложенных в DOM-узел текущего блока.</li>\n<li><strong>Снаружи блока</strong> — на DOM-узлах, потомком которых является DOM-узел\nтекущего блока. Необходимость в таком поиске может свидетельствовать\nо неудачной архитектуре интерфейса.</li>\n<li><strong>На себе</strong> — на том же DOM-узле, на котором размещен текущий\nблок. Это актуально в случае <a href=\"#html-mixes\">размещения нескольких JS-блоков на одном DOM-узле</a> (микс).</li>\n</ul>\n<p><strong>Пример</strong>: При переключении модификатора <code>disabled</code> экземпляр блока\n<code>attach</code> находит вложенный в него блок <code>button</code> и переключает его\nмодификатор <code>disabled</code> в то же значение, которое получил сам:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;attach&#39;, {\n    onSetMod: {\n        &#39;disabled&#39;: function(modName, modVal) {\n            this.findBlockInside(&#39;button&#39;).setMod(modName, modVal);\n        }\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p>Полный список методов для поиска блоков приведен\nв исходном коде модуля <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><strong>NB</strong> Не используйте jQuery-селекторы для поиска блоков и элементов.\n<code>i-bem.js</code> предоставляет высокоуровневое API для доступа к DOM-узлам\nблоков и элементов. Обращение к DOM-дереву в обход этого API делает\nкод менее устойчивым к изменениям БЭМ-библиотек и может привести к\nвозникновению сложно обнаруживаемых ошибок.</p>\n<p><a name=\"api-nodom\"></a></p>\n<h3 id=\"Доступ-к-экземплярам-блоков-без-DOM-представления\"><a href=\"#Доступ-к-экземплярам-блоков-без-DOM-представления\" class=\"anchor\"></a>Доступ к экземплярам блоков без DOM-представления</h3>\n<p>При создании экземпляра блока без DOM-представления необходимо\nпозаботиться о том, чтобы ссылка на этот экземпляр была доступна\nблокам, которым потребуется взаимодействовать с ним. Подробности и\nпример см. в разделе <a href=\"#init-bem\">Инициализация и удаление блоков без DOM-представления</a>.</p>\n<p><a name=\"api-class\"></a></p>\n<h3 id=\"Доступ-к-классам-блоков\"><a href=\"#Доступ-к-классам-блоков\" class=\"anchor\"></a>Доступ к классам блоков</h3>\n<p>JS-компоненты, соответствующие всем блокам («классы» блоков), хранятся\nв структуре данных <code>BEM.blocks</code>. Классы блоков,\n<a href=\"#i-blocks\">не привязанных к DOM-дереву</a>, также размещены в этой\nструктуре данных. При необходимости доступа к таким блокам следует\nиспользовать конструкцию:</p>\n<pre><code class=\"lang-js\">BEM.blocks[&#39;name&#39;]\n</code></pre>\n<p>где <code>name</code> — имя блока.</p>\n<p>Доступ к классам блоков необходим для решения двух основных задач:</p>\n<ul>\n<li><a href=\"#bem-events-delegated\">делегирование БЭМ-событий</a>;</li>\n<li>вызов статического метода класса.</li>\n</ul>\n<p><strong>Пример:</strong> Вызов статического метода <code>close</code> блока <code>popup</code> — закрыть\nвсе попапы на странице:</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;switcher&#39;, {\n    onSetMod : {\n        &#39;popup&#39; : {\n            &#39;disabled&#39; : function() {\n                BEM.blocks[&#39;popup&#39;].close();\n            }\n        }\n    }\n});\n</code></pre>\n<p><a name=\"docs\"></a></p>\n<h2 id=\"Что-дальше-\"><a href=\"#Что-дальше-\" class=\"anchor\"></a>Что дальше?</h2>\n<p>Общую информацию о БЭМ-методологии, инструментарии, новостях в мире\nБЭМ можно найти на сайте <a href=\"https://ru.bem.info/\">bem.info</a>.</p>\n<p>Полную информацию обо всех методах API <code>i-bem.js</code> можно найти в\nисходном коде, который сопровождается структурированными комментариями\nв формате JSDoc:</p>\n<ul>\n<li><a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/i-bem.vanilla.js\">i-bem</a>;</li>\n<li><a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</li>\n</ul>\n<p>Задать вопрос опытным пользователям и разработчикам <code>i-bem.js</code> и\nследить за текущими обсуждениями можно в социальных сетях:</p>\n<ul>\n<li><a href=\"http://clubs.ya.ru/bem/\">Клуб в Я.ру</a>;</li>\n<li><a href=\"https://www.facebook.com/#!/groups/209713935765634/\">Группа в Facebook</a>;</li>\n<li><a href=\"https://twitter.com/bem_ru\">Twitter</a>.</li>\n</ul>\n<p>Прочитать о принципах работы <code>i-bem.js</code> в другом изложении, найти\nобразцы его применения и пошаговые инструкции на примере простых\nпроектов можно в статьях:</p>\n<ul>\n<li><a href=\"https://ru.bem.info/articles/bem-js-main-terms/\">JavaScript по БЭМ: основные понятия</a>;</li>\n<li><a href=\"https://github.com/varya/bem-js-tutorial\">Tutorial on JavaScript in BEM terms</a>;</li>\n<li><a href=\"http://habrahabr.ru/post/162385/\">Попробуй БЭМ на вкус!</a>;</li>\n<li><a href=\"https://ru.bem.info/articles/firm-card-story/\">БЭМ-приложение на Leaflet и API 2GIS</a>.</li>\n</ul>\n<p><strong>NB</strong> Обратите внимание, что в перечисленных статьях может\nиспользоваться устаревший синтаксис, не соответствующий текущей версии\n<code>i-bem.js</code>, включенной в <code>bem-core</code>.</p>\n\n<p>Подключение данного модификатора позволяет работать с элементами почти так же, как и с обычными блоками, т.е. любой (но не обязательно каждый) элемент может иметь свой BEM-инстанс. API инстансов элементов аналогично API блоков с некоторыми различиями, описанными ниже.</p>\n<h3 id=\"Декларация\"><a href=\"#Декларация\" class=\"anchor\"></a>Декларация</h3>\n<p>Декларация элемента</p>\n<pre><code class=\"lang-javascript\">BEMDOM.decl({ block: &#39;menu&#39;, elem: &#39;item&#39; }, { /* properties */ }, { /* static properties */ });\n</code></pre>\n<p>Декларация модификатора элемента:</p>\n<pre><code class=\"lang-javascript\">BEMDOM.decl({\n    block: &#39;menu&#39;,\n    elem: &#39;item&#39;,\n    modName: &#39;state&#39;,\n    modVal: &#39;current&#39;\n}, {\n    /* properties */\n}, {\n    /* static properties */\n});\n</code></pre>\n<p>Модификаторы элементов работают так же, как модификаторы блоков.</p>\n<h3 id=\"BEM-инстансы-элементов\"><a href=\"#BEM-инстансы-элементов\" class=\"anchor\"></a>BEM-инстансы элементов</h3>\n<p>Для доступа к BEM-инстансам элементов используется хелпер <code>findElemInstances</code>, API которого аналогично хелперу <code>findElem</code>:</p>\n<pre><code class=\"lang-javascript\">// поиск всех вложенных элементов &#39;item&#39;\nthis.findElemInstances(&#39;item&#39;);\n\n// строгий поиск всех вложенных элементов &#39;item&#39;\nthis.findElemInstances(&#39;item&#39;, true);\n\n// поиск всех вложенных модификаторов элементов &#39;item&#39;\nthis.findElemInstances(&#39;item&#39;, &#39;state&#39;, &#39;current&#39;);\n\n// строгий поиск всех вложенных модификаторов элементов &#39;item&#39;\nthis.findElemInstances(&#39;item&#39;, &#39;state&#39;, &#39;current&#39;, true);\n\n// поиск всех элементов &#39;item&#39; внутри указанного контекста\nthis.findElemInstances(ctx, &#39;item&#39;);\n\n// строгий поиск всех элементов &#39;item&#39; внутри указанного контекста\nthis.findElemInstances(ctx, &#39;item&#39;, true);\n\n// поиск всех модификаторов элементов &#39;item&#39; внутри указанного контекста\nthis.findElemInstances(ctx, &#39;item&#39;, &#39;state&#39;, &#39;current&#39;);\n\n// строгий поиск всех модификаторов элементов &#39;item&#39; внутри указанного контекста\nthis.findElemInstances(ctx, &#39;item&#39;, &#39;state&#39;, &#39;current&#39;, true);\n</code></pre>\n<p>При необходимости, инстансы найденных элементов инициализируются.</p>\n<p>Строгий поиск подразумевает фильтрацию элементов вложенных блоков с таким же именем, как у текущего блока:</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;menu&#39;,\n    content: [\n        {\n            elem: &#39;item&#39; // (1)\n        },\n        {\n            block: &#39;menu&#39;,\n            content: {\n                elem: &#39;item&#39; // (2)\n            }\n        }\n    ]\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nthis.findElemInstances(&#39;item&#39;);         // найдет инстансы (1) и (2)\nthis.findElemInstances(&#39;item&#39;, true);   // найдет только инстанс (1)\n</code></pre>\n<p>По аналогии с хелпером <code>elem</code>, кэширующим результаты своей работы, для минимизации количества операций с DOM рекомендуется использовать кэширующий поиск BEM-инстансов элементов:</p>\n<pre><code class=\"lang-javascript\">// кэширующий поиск всех вложенных элементов &#39;item&#39;\nthis.elemInstances(&#39;item&#39;);\n\n// кэширующий поиск всех вложенных модификаторов элемента &#39;item&#39;\nthis.elemInstances(&#39;item&#39;, &#39;state&#39;, &#39;current&#39;);\n</code></pre>\n<p>Также с помощью этого хелпера можно вернуть инстансы элементов, расположенных на DOM-нодах указанной jQuery-коллекции:</p>\n<pre><code class=\"lang-javascript\">this.elemInstances(domElem);\n</code></pre>\n<p>Для поиска одного (первого) BEM-инстанса элемента есть дополнительные формы этих хелперов с аналогичным API:</p>\n<pre><code class=\"lang-javascript\">// поиск одного вложенного элемента &#39;item&#39;\nthis.findElemInstance(&#39;item&#39;);\n\n// кэширующий поиск одного вложенного элемента &#39;item&#39;\nthis.elemInstance(&#39;item&#39;);\n\n// вернуть инстанс элемента, расположенного на первой DOM-ноде указанной jQuery-коллекции\nthis.elemInstance(domElem);\n</code></pre>\n<p>Если необходимо вернуть BEM-инстанс элемента, на DOM-ноде которого подмешаны другие элементы того же блока:</p>\n<pre><code class=\"lang-javascript\">this.elemInstance(this.elemify(domElem, &#39;item&#39;));\n</code></pre>\n<h3 id=\"Поиск-снаружи-контекста\"><a href=\"#Поиск-снаружи-контекста\" class=\"anchor\"></a>Поиск снаружи контекста</h3>\n<p>Существует хелпер для поиска элемента снаружи указанного контекста:</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;menu&#39;,\n    content: {\n        elem: &#39;item&#39;,\n        content: {\n            elem: &#39;link&#39;\n        }\n    }\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nthis.closestElem(this.elem(&#39;link&#39;), &#39;item&#39;);\n</code></pre>\n<p>При поиске от имени BEM-инстанса элемента можно не указывать контекст поиска, тогда поиск будет производиться относительно DOM-ноды этого элемента:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__link&#39;\nthis.closestElem(&#39;item&#39;);\n</code></pre>\n<p>По аналогии с хелперами <code>elem</code> и <code>findElem</code>, хелпер <code>closestElem</code> возвращает jQuery-коллекцию. Для доступа к BEM-инстансам элементов снаружи контекста используются хелперы <code>closestElemInstance</code> и <code>closestElemInstances</code>:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nthis.closestElemInstance(this.elem(&#39;link&#39;), &#39;item&#39;);\nthis.closestElemInstances(this.elem(&#39;link&#39;), &#39;item&#39;);\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__link&#39;\nthis.closestElemInstance(&#39;item&#39;);\n</code></pre>\n<h3 id=\"Доступ-к-родительскому-блоку\"><a href=\"#Доступ-к-родительскому-блоку\" class=\"anchor\"></a>Доступ к родительскому блоку</h3>\n<p>По аналогии с методом <code>elem</code> для получения элемента блока существует метод <code>block</code> для получения блока элемента.</p>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nthis.block() // эквивалентно this.findBlockOutside(&#39;menu&#39;) с кэшированием результата поиска\n</code></pre>\n<h3 id=\"Поиск-элементов-и-блоков\"><a href=\"#Поиск-элементов-и-блоков\" class=\"anchor\"></a>Поиск элементов и блоков</h3>\n<p>Элемент ищет только вложенные в него элементы:</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;menu&#39;,\n    content: [\n        {\n            elem: &#39;item&#39;,\n            content: {\n                elem: &#39;link&#39; // (1)\n            }\n        },\n        {\n            elem: &#39;link&#39; // (2)\n        }\n    ]\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nthis.findElem(&#39;link&#39;);  // будет найден только элемент (1).\n</code></pre>\n<p>Если нужно найти все элементы <code>&#39;link&#39;</code>, поиск нужно производить от имени блока-родителя:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nthis.block().findElem(&#39;link&#39;);    // будут найдены элементы (1) и (2).\n</code></pre>\n<p>Все это справедливо также для хелпера <code>elem</code>, хелперов поиска блоков (<code>findBlockInside</code> и др.) и описанных выше хелперов для поиска BEM-инстансов элементов.</p>\n<h3 id=\"Реакция-на-установку-модификаторов\"><a href=\"#Реакция-на-установку-модификаторов\" class=\"anchor\"></a>Реакция на установку модификаторов</h3>\n<p>Блок делегирует установку модификаторов тем элементам, у которых есть свои BEM-декларации.\nПоэтому обработчики <code>onSetMod</code> элемента выполнятся, если родительский блок установит этому элементу соответствующие модификаторы:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nonSetMod: {\n    &#39;state&#39;: {\n        &#39;current&#39;: function() {\n            // код обработчика\n        }\n    }\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nthis.setMod(this.elem(&#39;item&#39;), &#39;state&#39;, &#39;current&#39;); // выполнится задекларированный выше обработчик\n</code></pre>\n<p>Обработчики <code>onElemSetMod</code> блока выполнятся, если инстанс элемента сам установит себе соответствующие модификаторы:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nonElemSetMod: {\n    &#39;item&#39;: {\n        &#39;state&#39;: {\n            &#39;current&#39;: function() {\n                // код обработчика\n            }\n        }\n    }\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nthis.setMod(&#39;state&#39;, &#39;current&#39;); // выполнится задекларированный выше обработчик\n</code></pre>\n<p>Обработчики <code>onElemSetMod</code> в контексте инстанса элемента не используются.</p>\n<h3 id=\"Отложенная-инициализация-и-live-события\"><a href=\"#Отложенная-инициализация-и-live-события\" class=\"anchor\"></a>Отложенная инициализация и live-события</h3>\n<p>Рекомендуется по возможности всегда использовать отложенную инициализацию BEM-инстансов элементов. Они, как и обычные блоки, поддерживают все хелперы для работы с live-событиями. Кроме того, хелпер <code>liveInitOnBlockEvent</code> имеет дополнительную форму для инициализации по событию родительского блока - для этого просто опускается второй параметр (имя блока):</p>\n<pre><code class=\"lang-javascript\">this.liveInitOnBlockEvent(&#39;switch&#39;, function() { /* обработчик */ });\n</code></pre>\n"},"en":{"name":"i-bem","examples":[],"description":""}},"jsdoc":"<h1 id=\"i-bem-Module\"><a href=\"#i-bem-Module\" class=\"anchor\"></a>i-bem Module</h1>\n<h2 id=\"BEM-Class\"><a href=\"#BEM-Class\" class=\"anchor\"></a>BEM Class</h2>\n<p>Aughtments {BEM}</p>\n<p>Base block for creating BEM blocks</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"params--Object---readonly-\"><a href=\"#params--Object---readonly-\" class=\"anchor\"></a>params {Object} (readonly)</h4>\n<p>Block parameters, taking into account the defaults</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--BEM-\"><a href=\"#on---e,--data-,-fn,--ctx----→--BEM-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {BEM}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | Object}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--BEM-\"><a href=\"#un----e-,--fn-,--ctx----→--BEM-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {BEM}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String | Object}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"emit---e,--data----→--BEM---protected\"><a href=\"#emit---e,--data----→--BEM---protected\" class=\"anchor\"></a>emit ( e, [data] ) → {BEM}  protected</h4>\n<p>Executes the block&#39;s event handlers and live event handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"hasMod----elem-,-modName,--modVal----→--Boolean-\"><a href=\"#hasMod----elem-,-modName,--modVal----→--Boolean-\" class=\"anchor\"></a>hasMod ( [elem], modName, [modVal] ) → {Boolean}</h4>\n<p>Checks whether a block or nested element has a modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getMod----elem-,-modName---→--String-\"><a href=\"#getMod----elem-,-modName---→--String-\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}</h4>\n<p>Returns the value of the modifier of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,-----modNames----→--Object-\"><a href=\"#getMods----elem-,-----modNames----→--Object-\" class=\"anchor\"></a>getMods ( [elem], [...modNames] ) → {Object}</h4>\n<p>Returns values of modifiers of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>[...modNames] {String}<br/>\nModifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}</h4>\n<p>Sets the modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"_onSetMod---modName,-modVal,-oldModVal,--elem-,--elemName-----protected\"><a href=\"#_onSetMod---modName,-modVal,-oldModVal,--elem-,--elemName-----protected\" class=\"anchor\"></a>_onSetMod ( modName, modVal, oldModVal, [elem], [elemName] )  protected</h4>\n<p>Function after successfully changing the modifier of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n<li>oldModVal {String}<br/>\nOld modifier value</li>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>[elemName] {String}<br/>\nElement name</li>\n</ul>\n<h4 id=\"toggleMod----elem-,-modName,-modVal1,--modVal2-,--condition----→--BEM-\"><a href=\"#toggleMod----elem-,-modName,-modVal1,--modVal2-,--condition----→--BEM-\" class=\"anchor\"></a>toggleMod ( [elem], modName, modVal1, [modVal2], [condition] ) → {BEM}</h4>\n<p>Sets a modifier for a block/nested element, depending on conditions.\nIf the condition parameter is passed: when true, modVal1 is set; when false, modVal2 is set.\nIf the condition parameter is not passed: modVal1 is set if modVal2 was set, or vice versa.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal1 {String}<br/>\nFirst modifier value</li>\n<li>[modVal2] {String}<br/>\nSecond modifier value</li>\n<li>[condition] {Boolean}<br/>\nCondition</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"delMod----elem-,-modName---→--BEM---protected\"><a href=\"#delMod----elem-,-modName---→--BEM---protected\" class=\"anchor\"></a>delMod ( [elem], modName ) → {BEM}  protected</h4>\n<p>Removes a modifier from a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"getDefaultParams----→--Object---protected\"><a href=\"#getDefaultParams----→--Object---protected\" class=\"anchor\"></a>getDefaultParams () → {Object}  protected</h4>\n<p>Returns a block&#39;s default parameters</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<h4 id=\"nextTick---fn---→--BEM---protected\"><a href=\"#nextTick---fn---→--BEM---protected\" class=\"anchor\"></a>nextTick ( fn ) → {BEM}  protected</h4>\n<p>Executes given callback on next turn eventloop in block&#39;s context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>fn {Function}<br/>\ncallback</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"blocks--Object-\"><a href=\"#blocks--Object-\" class=\"anchor\"></a>blocks {Object}</h4>\n<p>Storage for block declarations (hash by block name)</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"decl---decl,--props-,--staticProps----→--Function-\"><a href=\"#decl---decl,--props-,--staticProps----→--Function-\" class=\"anchor\"></a>decl ( decl, [props], [staticProps] ) → {Function}</h4>\n<p>Declares blocks and creates a block class</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>decl {String | Object}<br/>\nBlock name (simple syntax) or description</li>\n<li>decl.block | decl.name {String}<br/>\nBlock name</li>\n<li>[decl.baseBlock] {String}<br/>\nName of the parent block</li>\n<li>[decl.baseMix] {Array}<br/>\nMixed block names</li>\n<li>[decl.modName] {String}<br/>\nModifier name</li>\n<li>[decl.modVal] {String | Array}<br/>\nModifier value</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"create---block,--params----→--BEM-\"><a href=\"#create---block,--params----→--BEM-\" class=\"anchor\"></a>create ( block, [params] ) → {BEM}</h4>\n<p>Factory method for creating an instance of the block named</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>block {String | Object}<br/>\nBlock name or description</li>\n<li>[params] {Object}<br/>\nBlock parameters</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"getName----→--String-\"><a href=\"#getName----→--String-\" class=\"anchor\"></a>getName () → {String}</h4>\n<p>Returns the name of the current block</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--Function-\"><a href=\"#on---e,--data-,-fn,--ctx----→--Function-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {Function}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | Object}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--Function-\"><a href=\"#un----e-,--fn-,--ctx----→--Function-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {Function}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String | Object}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"decl---decl,--props-,--staticProps----→--Function---protected\"><a href=\"#decl---decl,--props-,--staticProps----→--Function---protected\" class=\"anchor\"></a>decl ( decl, [props], [staticProps] ) → {Function}  protected</h4>\n<p>Declares elements and creates an elements class</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>decl {Object}<br/>\nElement description</li>\n<li>decl.block {String}<br/>\nBlock name</li>\n<li>decl.elem {String}<br/>\nElement name</li>\n<li>[decl.baseBlock] {String}<br/>\nName of the parent block</li>\n<li>[decl.baseMix] {Array}<br/>\nMixed block names</li>\n<li>[decl.modName] {String}<br/>\nModifier name</li>\n<li>[decl.modVal] {String | Array}<br/>\nModifier value</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"create---desc,--params----→--BEM-\"><a href=\"#create---desc,--params----→--BEM-\" class=\"anchor\"></a>create ( desc, [params] ) → {BEM}</h4>\n<p>Factory method for creating an instance of the element named</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>desc {Object}<br/>\nDescription</li>\n<li>[params] {Object}<br/>\nInstance parameters</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"getName----shortName----→--String---protected\"><a href=\"#getName----shortName----→--String---protected\" class=\"anchor\"></a>getName ( [shortName] ) → {String}  protected</h4>\n<p>Returns the name of the current instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[shortName] {Boolean}<br/>\nreturn the short name of the current instance</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__internal-Module\"><a href=\"#i-bem__internal-Module\" class=\"anchor\"></a>i-bem__internal Module</h1>\n<h2 id=\"buildClass---block,--elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass---block,--elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( block, [elem], [modName], [modVal] ) → {String}</h2>\n<p>Builds the class of a block or element with a modifier</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>block {String}<br/>\nBlock name</li>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String | Number}<br/>\nModifier value</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<p>Class</p>\n<h2 id=\"buildClasses---block,--elem-,--mods----→--String-\"><a href=\"#buildClasses---block,--elem-,--mods----→--String-\" class=\"anchor\"></a>buildClasses ( block, [elem], [mods] ) → {String}</h2>\n<p>Builds full classes for a buffer or element with modifiers</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>block {String}<br/>\nBlock name</li>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[mods] {Object}<br/>\nModifiers</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<p>Class</p>\n<h1 id=\"i-bem-Module\"><a href=\"#i-bem-Module\" class=\"anchor\"></a>i-bem Module</h1>\n<h2 id=\"BEM-Class\"><a href=\"#BEM-Class\" class=\"anchor\"></a>BEM Class</h2>\n<p>Aughtments {BEM}</p>\n<p>Base block for creating BEM blocks</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"params--Object---readonly-\"><a href=\"#params--Object---readonly-\" class=\"anchor\"></a>params {Object} (readonly)</h4>\n<p>Block parameters, taking into account the defaults</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--BEM-\"><a href=\"#on---e,--data-,-fn,--ctx----→--BEM-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {BEM}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | Object}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--BEM-\"><a href=\"#un----e-,--fn-,--ctx----→--BEM-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {BEM}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String | Object}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"emit---e,--data----→--BEM---protected\"><a href=\"#emit---e,--data----→--BEM---protected\" class=\"anchor\"></a>emit ( e, [data] ) → {BEM}  protected</h4>\n<p>Executes the block&#39;s event handlers and live event handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"hasMod----elem-,-modName,--modVal----→--Boolean-\"><a href=\"#hasMod----elem-,-modName,--modVal----→--Boolean-\" class=\"anchor\"></a>hasMod ( [elem], modName, [modVal] ) → {Boolean}</h4>\n<p>Checks whether a block or nested element has a modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getMod----elem-,-modName---→--String-\"><a href=\"#getMod----elem-,-modName---→--String-\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}</h4>\n<p>Returns the value of the modifier of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,-----modNames----→--Object-\"><a href=\"#getMods----elem-,-----modNames----→--Object-\" class=\"anchor\"></a>getMods ( [elem], [...modNames] ) → {Object}</h4>\n<p>Returns values of modifiers of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>[...modNames] {String}<br/>\nModifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}</h4>\n<p>Sets the modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"_onSetMod---modName,-modVal,-oldModVal,--elem-,--elemName-----protected\"><a href=\"#_onSetMod---modName,-modVal,-oldModVal,--elem-,--elemName-----protected\" class=\"anchor\"></a>_onSetMod ( modName, modVal, oldModVal, [elem], [elemName] )  protected</h4>\n<p>Function after successfully changing the modifier of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n<li>oldModVal {String}<br/>\nOld modifier value</li>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>[elemName] {String}<br/>\nElement name</li>\n</ul>\n<h4 id=\"toggleMod----elem-,-modName,-modVal1,--modVal2-,--condition----→--BEM-\"><a href=\"#toggleMod----elem-,-modName,-modVal1,--modVal2-,--condition----→--BEM-\" class=\"anchor\"></a>toggleMod ( [elem], modName, modVal1, [modVal2], [condition] ) → {BEM}</h4>\n<p>Sets a modifier for a block/nested element, depending on conditions.\nIf the condition parameter is passed: when true, modVal1 is set; when false, modVal2 is set.\nIf the condition parameter is not passed: modVal1 is set if modVal2 was set, or vice versa.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal1 {String}<br/>\nFirst modifier value</li>\n<li>[modVal2] {String}<br/>\nSecond modifier value</li>\n<li>[condition] {Boolean}<br/>\nCondition</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"delMod----elem-,-modName---→--BEM---protected\"><a href=\"#delMod----elem-,-modName---→--BEM---protected\" class=\"anchor\"></a>delMod ( [elem], modName ) → {BEM}  protected</h4>\n<p>Removes a modifier from a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"getDefaultParams----→--Object---protected\"><a href=\"#getDefaultParams----→--Object---protected\" class=\"anchor\"></a>getDefaultParams () → {Object}  protected</h4>\n<p>Returns a block&#39;s default parameters</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<h4 id=\"nextTick---fn---→--BEM---protected\"><a href=\"#nextTick---fn---→--BEM---protected\" class=\"anchor\"></a>nextTick ( fn ) → {BEM}  protected</h4>\n<p>Executes given callback on next turn eventloop in block&#39;s context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>fn {Function}<br/>\ncallback</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"blocks--Object-\"><a href=\"#blocks--Object-\" class=\"anchor\"></a>blocks {Object}</h4>\n<p>Storage for block declarations (hash by block name)</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"decl---decl,--props-,--staticProps----→--Function-\"><a href=\"#decl---decl,--props-,--staticProps----→--Function-\" class=\"anchor\"></a>decl ( decl, [props], [staticProps] ) → {Function}</h4>\n<p>Declares blocks and creates a block class</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>decl {String | Object}<br/>\nBlock name (simple syntax) or description</li>\n<li>decl.block | decl.name {String}<br/>\nBlock name</li>\n<li>[decl.baseBlock] {String}<br/>\nName of the parent block</li>\n<li>[decl.baseMix] {Array}<br/>\nMixed block names</li>\n<li>[decl.modName] {String}<br/>\nModifier name</li>\n<li>[decl.modVal] {String | Array}<br/>\nModifier value</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"create---block,--params----→--BEM-\"><a href=\"#create---block,--params----→--BEM-\" class=\"anchor\"></a>create ( block, [params] ) → {BEM}</h4>\n<p>Factory method for creating an instance of the block named</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>block {String | Object}<br/>\nBlock name or description</li>\n<li>[params] {Object}<br/>\nBlock parameters</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"getName----→--String-\"><a href=\"#getName----→--String-\" class=\"anchor\"></a>getName () → {String}</h4>\n<p>Returns the name of the current block</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--Function-\"><a href=\"#on---e,--data-,-fn,--ctx----→--Function-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {Function}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | Object}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--Function-\"><a href=\"#un----e-,--fn-,--ctx----→--Function-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {Function}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String | Object}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"decl---decl,--props-,--staticProps----→--Function---protected\"><a href=\"#decl---decl,--props-,--staticProps----→--Function---protected\" class=\"anchor\"></a>decl ( decl, [props], [staticProps] ) → {Function}  protected</h4>\n<p>Declares elements and creates an elements class</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>decl {Object}<br/>\nElement description</li>\n<li>decl.block {String}<br/>\nBlock name</li>\n<li>decl.elem {String}<br/>\nElement name</li>\n<li>[decl.baseBlock] {String}<br/>\nName of the parent block</li>\n<li>[decl.baseMix] {Array}<br/>\nMixed block names</li>\n<li>[decl.modName] {String}<br/>\nModifier name</li>\n<li>[decl.modVal] {String | Array}<br/>\nModifier value</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"create---desc,--params----→--BEM-\"><a href=\"#create---desc,--params----→--BEM-\" class=\"anchor\"></a>create ( desc, [params] ) → {BEM}</h4>\n<p>Factory method for creating an instance of the element named</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>desc {Object}<br/>\nDescription</li>\n<li>[params] {Object}<br/>\nInstance parameters</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"getName----shortName----→--String---protected\"><a href=\"#getName----shortName----→--String---protected\" class=\"anchor\"></a>getName ( [shortName] ) → {String}  protected</h4>\n<p>Returns the name of the current instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[shortName] {Boolean}<br/>\nreturn the short name of the current instance</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__collection-Module\"><a href=\"#i-bem__collection-Module\" class=\"anchor\"></a>i-bem__collection Module</h1>\n<h2 id=\"BEMCollection-Class\"><a href=\"#BEMCollection-Class\" class=\"anchor\"></a>BEMCollection Class</h2>\n<p>Aughtments {Array}</p>\n<p>Base class for collections. Create collection of similar objects.</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"getMethods----→--Array-\"><a href=\"#getMethods----→--Array-\" class=\"anchor\"></a>getMethods () → {Array}</h4>\n<p>Get method names that will be implemented in collection</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Array}</p>\n<h4 id=\"getBase----→--Object-\"><a href=\"#getBase----→--Object-\" class=\"anchor\"></a>getBase () → {Object}</h4>\n<p>Get base prototype for collection</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<h4 id=\"create---a---→--Object-\"><a href=\"#create---a---→--Object-\" class=\"anchor\"></a>create ( a ) → {Object}</h4>\n<p>Create collection instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>a {Array}<br/>\nlist of similar objects</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<h1 id=\"i-bem__collection_type_dom-Module\"><a href=\"#i-bem__collection_type_dom-Module\" class=\"anchor\"></a>i-bem__collection_type_dom Module</h1>\n<h2 id=\"BEMDOMCollection-Class\"><a href=\"#BEMDOMCollection-Class\" class=\"anchor\"></a>BEMDOMCollection Class</h2>\n<p>Aughtments {i-bem__collection}</p>\n<p>Collection of BEM.DOM blocks. Implementation of BEM.DOM methods for array of blocks.</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"getMethods----→--Array-\"><a href=\"#getMethods----→--Array-\" class=\"anchor\"></a>getMethods () → {Array}</h4>\n<p>Get methods that will be implemented in BEMDOMCollection</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Array}</p>\n<h1 id=\"i-bem__dom-Module\"><a href=\"#i-bem__dom-Module\" class=\"anchor\"></a>i-bem__dom Module</h1>\n<h2 id=\"BEMDOM-Class\"><a href=\"#BEMDOM-Class\" class=\"anchor\"></a>BEMDOM Class</h2>\n<p>Aughtments {BEMDOM}</p>\n<p>Base block for creating BEM blocks that have DOM representation</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"domElem--jQuery---readonly-\"><a href=\"#domElem--jQuery---readonly-\" class=\"anchor\"></a>domElem {jQuery} (readonly)</h4>\n<p>DOM elements of block</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"findBlocksInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDomElem ( domElem, event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler for any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event will be listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToDoc---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDoc---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDoc ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToWin---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToWin---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToWin ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindTo ( [elem], event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nElement</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDomElem ( domElem, event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event was being listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDoc---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDoc---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDoc ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromWin---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromWin---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromWin ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFrom ( [elem], event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nNested element</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEMDOM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEMDOM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEMDOM}</h4>\n<p>Sets a modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\"><a href=\"#findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\" class=\"anchor\"></a>findElem ( [ctx=this.domElem], names, [modName], [modVal], [strictMode=false] ) → {jQuery}</h4>\n<p>Finds elements nested in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elem---names,--modName-,--modVal----→--jQuery-\"><a href=\"#elem---names,--modName-,--modVal----→--jQuery-\" class=\"anchor\"></a>elem ( names, [modName], [modVal] ) → {jQuery}</h4>\n<p>Lazy search for elements nested in a block (caches results)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElem---ctx,-elemName---→--jQuery-\"><a href=\"#closestElem---ctx,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( ctx, elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\ncontext</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\"><a href=\"#dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\" class=\"anchor\"></a>dropElemCache ( [names], [modName], [modVal] ) → {BEMDOM}  protected</h4>\n<p>Clearing the cache for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[names] {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"elemParams---elem---→--Object-\"><a href=\"#elemParams---elem---→--Object-\" class=\"anchor\"></a>elemParams ( elem ) → {Object}</h4>\n<p>Retrieves parameters of a block element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Parameters</p>\n<h4 id=\"elemify---elem,-elemName---→--jQuery-\"><a href=\"#elemify---elem,-elemName---→--jQuery-\" class=\"anchor\"></a>elemify ( elem, elemName ) → {jQuery}</h4>\n<p>Elemify given element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {jQuery}<br/>\nElement</li>\n<li>elemName {String}<br/>\nName</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<h4 id=\"containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\"><a href=\"#containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\" class=\"anchor\"></a>containsDomElem ( [ctx=this.domElem], domElem ) → {Boolean}  protected</h4>\n<p>Checks whether a DOM element is in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where check is being performed</li>\n<li>domElem {jQuery}<br/>\nDOM element</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to a block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getMod----elem-,-modName---→--String---protected\"><a href=\"#getMod----elem-,-modName---→--String---protected\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}  protected</h4>\n<p>Delegates native getMod helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,--modName1----→--Object---protected\"><a href=\"#getMods----elem-,--modName1----→--Object---protected\" class=\"anchor\"></a>getMods ( [elem], [modName1] ) → {Object}  protected</h4>\n<p>Delegates native getMods helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>[modName1] {String}<br/>\n..., modNameN] Modifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM---protected\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM---protected\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}  protected</h4>\n<p>Delegates native setMod helper to element&#39;s instances</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"block----→--BEMDOM-\"><a href=\"#block----→--BEMDOM-\" class=\"anchor\"></a>block () → {BEMDOM}</h4>\n<p>Returns and initializes (if necessary) the own block of current element</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elemInstance---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstance---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstance ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"elemInstances---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstances---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstances ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstance ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstances ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElem----ctx=this-domElem-,-elemName---→--jQuery-\"><a href=\"#closestElem----ctx=this-domElem-,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( [ctx=this.domElem], elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstance ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instance of defined element outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstances ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"scope--jQuery-\"><a href=\"#scope--jQuery-\" class=\"anchor\"></a>scope {jQuery}</h4>\n<p>Scope, will be set on onDomReady to <code>&lt;body&gt;</code></p>\n<h4 id=\"doc--jQuery-\"><a href=\"#doc--jQuery-\" class=\"anchor\"></a>doc {jQuery}</h4>\n<p>Document shortcut</p>\n<h4 id=\"win--jQuery-\"><a href=\"#win--jQuery-\" class=\"anchor\"></a>win {jQuery}</h4>\n<p>Window shortcut</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"init----ctx=scope----→--jQuery-\"><a href=\"#init----ctx=scope----→--jQuery-\" class=\"anchor\"></a>init ( [ctx=scope] ) → {jQuery}</h4>\n<p>Initializes blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=scope] {jQuery | String}<br/>\nRoot DOM node</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>ctx Initialization context</p>\n<h4 id=\"destruct---ctx,--excludeSelf=false---\"><a href=\"#destruct---ctx,--excludeSelf=false---\" class=\"anchor\"></a>destruct ( ctx, [excludeSelf=false] )</h4>\n<p>Destroys blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>[excludeSelf=false] {Boolean}<br/>\nExclude the main domElem</li>\n</ul>\n<h4 id=\"update---ctx,-content---→--jQuery-\"><a href=\"#update---ctx,-content---→--jQuery-\" class=\"anchor\"></a>update ( ctx, content ) → {jQuery}</h4>\n<p>Replaces a fragment of the DOM tree inside the context, destroying old blocks and intializing new ones</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nNew content</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>Updated root DOM node</p>\n<h4 id=\"replace---ctx,-content---→--jQuery-\"><a href=\"#replace---ctx,-content---→--jQuery-\" class=\"anchor\"></a>replace ( ctx, content ) → {jQuery}</h4>\n<p>Changes a fragment of the DOM tree including the context and initializes blocks.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"append---ctx,-content---→--jQuery-\"><a href=\"#append---ctx,-content---→--jQuery-\" class=\"anchor\"></a>append ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the end of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"prepend---ctx,-content---→--jQuery-\"><a href=\"#prepend---ctx,-content---→--jQuery-\" class=\"anchor\"></a>prepend ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the beginning of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"before---ctx,-content---→--jQuery-\"><a href=\"#before---ctx,-content---→--jQuery-\" class=\"anchor\"></a>before ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree before the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"after---ctx,-content---→--jQuery-\"><a href=\"#after---ctx,-content---→--jQuery-\" class=\"anchor\"></a>after ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree after the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"liveInitOnEvent----elemName-,-event,--callback-----protected\"><a href=\"#liveInitOnEvent----elemName-,-event,--callback-----protected\" class=\"anchor\"></a>liveInitOnEvent ( [elemName], event, [callback] )  protected</h4>\n<p>Helper for live initialization for an event on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elemName] {String}<br/>\nElement name or names (separated by spaces)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to call after successful initialization</li>\n</ul>\n<h4 id=\"liveBindTo----to-,-event,--callback-----protected\"><a href=\"#liveBindTo----to-,-event,--callback-----protected\" class=\"anchor\"></a>liveBindTo ( [to], event, [callback] )  protected</h4>\n<p>Helper for subscribing to live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[to] {String | Object}<br/>\nDescription (object with modName, modVal, elem) or name of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveUnbindFrom----elem-,-event,--callback-----protected\"><a href=\"#liveUnbindFrom----elem-,-event,--callback-----protected\" class=\"anchor\"></a>liveUnbindFrom ( [elem], event, [callback] )  protected</h4>\n<p>Helper for unsubscribing from live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nName of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveInitOnBlockEvent---event,-blockName,-callback----protected\"><a href=\"#liveInitOnBlockEvent---event,-blockName,-callback----protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, blockName, callback )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event on the current block&#39;s DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>callback {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\"><a href=\"#liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\" class=\"anchor\"></a>liveInitOnBlockInsideEvent ( event, blockName, [callback] )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event inside the current block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"on----ctx-,-e,--data-,-fn,--fnCtx---\"><a href=\"#on----ctx-,-e,--data-,-fn,--fnCtx---\" class=\"anchor\"></a>on ( [ctx], e, [data], fn, [fnCtx] )</h4>\n<p>Adds a live event handler to a block, based on a specified element where the event will be listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event will be listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler&#39;s context</li>\n</ul>\n<h4 id=\"un----ctx-,-e,--fn-,--fnCtx---\"><a href=\"#un----ctx-,-e,--fn-,--fnCtx---\" class=\"anchor\"></a>un ( [ctx], e, [fn], [fnCtx] )</h4>\n<p>Removes the live event handler from a block, based on a specified element where the event was being listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event was being listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler context</li>\n</ul>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\"><a href=\"#decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\" class=\"anchor\"></a>decl ( name, [props], [staticProps], [_autoDecl] ) → {Function}  protected</h4>\n<p>Auto-declarator for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>name {Object}<br/>\nInstance name</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n<li>[_autoDecl] {Object}<br/>\nAuto-declaration flag</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"liveInitOnBlockEvent---event,--callback----→--Function---protected\"><a href=\"#liveInitOnBlockEvent---event,--callback----→--Function---protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, [callback] ) → {Function}  protected</h4>\n<p>Helper for live initialization for an own block&#39;s event</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new element&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__dom-Module\"><a href=\"#i-bem__dom-Module\" class=\"anchor\"></a>i-bem__dom Module</h1>\n<p>Overrides BEM.DOM.findBlocks* methods that they return i-bem__collection_type_dom</p>\n<h2 id=\"BEMDOM-Class\"><a href=\"#BEMDOM-Class\" class=\"anchor\"></a>BEMDOM Class</h2>\n<p>Aughtments {BEMDOM}</p>\n<p>Base block for creating BEM blocks that have DOM representation</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"domElem--jQuery---readonly-\"><a href=\"#domElem--jQuery---readonly-\" class=\"anchor\"></a>domElem {jQuery} (readonly)</h4>\n<p>DOM elements of block</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"findBlocksInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDomElem ( domElem, event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler for any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event will be listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToDoc---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDoc---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDoc ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToWin---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToWin---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToWin ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindTo ( [elem], event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nElement</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDomElem ( domElem, event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event was being listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDoc---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDoc---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDoc ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromWin---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromWin---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromWin ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFrom ( [elem], event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nNested element</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEMDOM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEMDOM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEMDOM}</h4>\n<p>Sets a modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\"><a href=\"#findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\" class=\"anchor\"></a>findElem ( [ctx=this.domElem], names, [modName], [modVal], [strictMode=false] ) → {jQuery}</h4>\n<p>Finds elements nested in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elem---names,--modName-,--modVal----→--jQuery-\"><a href=\"#elem---names,--modName-,--modVal----→--jQuery-\" class=\"anchor\"></a>elem ( names, [modName], [modVal] ) → {jQuery}</h4>\n<p>Lazy search for elements nested in a block (caches results)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElem---ctx,-elemName---→--jQuery-\"><a href=\"#closestElem---ctx,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( ctx, elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\ncontext</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\"><a href=\"#dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\" class=\"anchor\"></a>dropElemCache ( [names], [modName], [modVal] ) → {BEMDOM}  protected</h4>\n<p>Clearing the cache for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[names] {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"elemParams---elem---→--Object-\"><a href=\"#elemParams---elem---→--Object-\" class=\"anchor\"></a>elemParams ( elem ) → {Object}</h4>\n<p>Retrieves parameters of a block element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Parameters</p>\n<h4 id=\"elemify---elem,-elemName---→--jQuery-\"><a href=\"#elemify---elem,-elemName---→--jQuery-\" class=\"anchor\"></a>elemify ( elem, elemName ) → {jQuery}</h4>\n<p>Elemify given element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {jQuery}<br/>\nElement</li>\n<li>elemName {String}<br/>\nName</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<h4 id=\"containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\"><a href=\"#containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\" class=\"anchor\"></a>containsDomElem ( [ctx=this.domElem], domElem ) → {Boolean}  protected</h4>\n<p>Checks whether a DOM element is in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where check is being performed</li>\n<li>domElem {jQuery}<br/>\nDOM element</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to a block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getMod----elem-,-modName---→--String---protected\"><a href=\"#getMod----elem-,-modName---→--String---protected\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}  protected</h4>\n<p>Delegates native getMod helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,--modName1----→--Object---protected\"><a href=\"#getMods----elem-,--modName1----→--Object---protected\" class=\"anchor\"></a>getMods ( [elem], [modName1] ) → {Object}  protected</h4>\n<p>Delegates native getMods helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>[modName1] {String}<br/>\n..., modNameN] Modifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM---protected\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM---protected\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}  protected</h4>\n<p>Delegates native setMod helper to element&#39;s instances</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"block----→--BEMDOM-\"><a href=\"#block----→--BEMDOM-\" class=\"anchor\"></a>block () → {BEMDOM}</h4>\n<p>Returns and initializes (if necessary) the own block of current element</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elemInstance---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstance---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstance ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"elemInstances---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstances---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstances ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstance ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstances ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElem----ctx=this-domElem-,-elemName---→--jQuery-\"><a href=\"#closestElem----ctx=this-domElem-,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( [ctx=this.domElem], elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstance ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instance of defined element outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstances ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"scope--jQuery-\"><a href=\"#scope--jQuery-\" class=\"anchor\"></a>scope {jQuery}</h4>\n<p>Scope, will be set on onDomReady to <code>&lt;body&gt;</code></p>\n<h4 id=\"doc--jQuery-\"><a href=\"#doc--jQuery-\" class=\"anchor\"></a>doc {jQuery}</h4>\n<p>Document shortcut</p>\n<h4 id=\"win--jQuery-\"><a href=\"#win--jQuery-\" class=\"anchor\"></a>win {jQuery}</h4>\n<p>Window shortcut</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"init----ctx=scope----→--jQuery-\"><a href=\"#init----ctx=scope----→--jQuery-\" class=\"anchor\"></a>init ( [ctx=scope] ) → {jQuery}</h4>\n<p>Initializes blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=scope] {jQuery | String}<br/>\nRoot DOM node</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>ctx Initialization context</p>\n<h4 id=\"destruct---ctx,--excludeSelf=false---\"><a href=\"#destruct---ctx,--excludeSelf=false---\" class=\"anchor\"></a>destruct ( ctx, [excludeSelf=false] )</h4>\n<p>Destroys blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>[excludeSelf=false] {Boolean}<br/>\nExclude the main domElem</li>\n</ul>\n<h4 id=\"update---ctx,-content---→--jQuery-\"><a href=\"#update---ctx,-content---→--jQuery-\" class=\"anchor\"></a>update ( ctx, content ) → {jQuery}</h4>\n<p>Replaces a fragment of the DOM tree inside the context, destroying old blocks and intializing new ones</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nNew content</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>Updated root DOM node</p>\n<h4 id=\"replace---ctx,-content---→--jQuery-\"><a href=\"#replace---ctx,-content---→--jQuery-\" class=\"anchor\"></a>replace ( ctx, content ) → {jQuery}</h4>\n<p>Changes a fragment of the DOM tree including the context and initializes blocks.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"append---ctx,-content---→--jQuery-\"><a href=\"#append---ctx,-content---→--jQuery-\" class=\"anchor\"></a>append ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the end of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"prepend---ctx,-content---→--jQuery-\"><a href=\"#prepend---ctx,-content---→--jQuery-\" class=\"anchor\"></a>prepend ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the beginning of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"before---ctx,-content---→--jQuery-\"><a href=\"#before---ctx,-content---→--jQuery-\" class=\"anchor\"></a>before ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree before the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"after---ctx,-content---→--jQuery-\"><a href=\"#after---ctx,-content---→--jQuery-\" class=\"anchor\"></a>after ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree after the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"liveInitOnEvent----elemName-,-event,--callback-----protected\"><a href=\"#liveInitOnEvent----elemName-,-event,--callback-----protected\" class=\"anchor\"></a>liveInitOnEvent ( [elemName], event, [callback] )  protected</h4>\n<p>Helper for live initialization for an event on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elemName] {String}<br/>\nElement name or names (separated by spaces)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to call after successful initialization</li>\n</ul>\n<h4 id=\"liveBindTo----to-,-event,--callback-----protected\"><a href=\"#liveBindTo----to-,-event,--callback-----protected\" class=\"anchor\"></a>liveBindTo ( [to], event, [callback] )  protected</h4>\n<p>Helper for subscribing to live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[to] {String | Object}<br/>\nDescription (object with modName, modVal, elem) or name of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveUnbindFrom----elem-,-event,--callback-----protected\"><a href=\"#liveUnbindFrom----elem-,-event,--callback-----protected\" class=\"anchor\"></a>liveUnbindFrom ( [elem], event, [callback] )  protected</h4>\n<p>Helper for unsubscribing from live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nName of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveInitOnBlockEvent---event,-blockName,-callback----protected\"><a href=\"#liveInitOnBlockEvent---event,-blockName,-callback----protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, blockName, callback )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event on the current block&#39;s DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>callback {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\"><a href=\"#liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\" class=\"anchor\"></a>liveInitOnBlockInsideEvent ( event, blockName, [callback] )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event inside the current block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"on----ctx-,-e,--data-,-fn,--fnCtx---\"><a href=\"#on----ctx-,-e,--data-,-fn,--fnCtx---\" class=\"anchor\"></a>on ( [ctx], e, [data], fn, [fnCtx] )</h4>\n<p>Adds a live event handler to a block, based on a specified element where the event will be listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event will be listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler&#39;s context</li>\n</ul>\n<h4 id=\"un----ctx-,-e,--fn-,--fnCtx---\"><a href=\"#un----ctx-,-e,--fn-,--fnCtx---\" class=\"anchor\"></a>un ( [ctx], e, [fn], [fnCtx] )</h4>\n<p>Removes the live event handler from a block, based on a specified element where the event was being listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event was being listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler context</li>\n</ul>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\"><a href=\"#decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\" class=\"anchor\"></a>decl ( name, [props], [staticProps], [_autoDecl] ) → {Function}  protected</h4>\n<p>Auto-declarator for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>name {Object}<br/>\nInstance name</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n<li>[_autoDecl] {Object}<br/>\nAuto-declaration flag</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"liveInitOnBlockEvent---event,--callback----→--Function---protected\"><a href=\"#liveInitOnBlockEvent---event,--callback----→--Function---protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, [callback] ) → {Function}  protected</h4>\n<p>Helper for live initialization for an own block&#39;s event</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new element&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__dom-Module\"><a href=\"#i-bem__dom-Module\" class=\"anchor\"></a>i-bem__dom Module</h1>\n<h2 id=\"BEMDOM-Class\"><a href=\"#BEMDOM-Class\" class=\"anchor\"></a>BEMDOM Class</h2>\n<p>Aughtments {BEMDOM}</p>\n<p>Base block for creating BEM blocks that have DOM representation</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"domElem--jQuery---readonly-\"><a href=\"#domElem--jQuery---readonly-\" class=\"anchor\"></a>domElem {jQuery} (readonly)</h4>\n<p>DOM elements of block</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"findBlocksInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDomElem ( domElem, event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler for any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event will be listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToDoc---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDoc---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDoc ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToWin---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToWin---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToWin ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindTo ( [elem], event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nElement</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDomElem ( domElem, event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event was being listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDoc---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDoc---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDoc ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromWin---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromWin---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromWin ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFrom ( [elem], event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nNested element</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEMDOM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEMDOM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEMDOM}</h4>\n<p>Sets a modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\"><a href=\"#findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\" class=\"anchor\"></a>findElem ( [ctx=this.domElem], names, [modName], [modVal], [strictMode=false] ) → {jQuery}</h4>\n<p>Finds elements nested in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elem---names,--modName-,--modVal----→--jQuery-\"><a href=\"#elem---names,--modName-,--modVal----→--jQuery-\" class=\"anchor\"></a>elem ( names, [modName], [modVal] ) → {jQuery}</h4>\n<p>Lazy search for elements nested in a block (caches results)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElem---ctx,-elemName---→--jQuery-\"><a href=\"#closestElem---ctx,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( ctx, elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\ncontext</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\"><a href=\"#dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\" class=\"anchor\"></a>dropElemCache ( [names], [modName], [modVal] ) → {BEMDOM}  protected</h4>\n<p>Clearing the cache for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[names] {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"elemParams---elem---→--Object-\"><a href=\"#elemParams---elem---→--Object-\" class=\"anchor\"></a>elemParams ( elem ) → {Object}</h4>\n<p>Retrieves parameters of a block element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Parameters</p>\n<h4 id=\"elemify---elem,-elemName---→--jQuery-\"><a href=\"#elemify---elem,-elemName---→--jQuery-\" class=\"anchor\"></a>elemify ( elem, elemName ) → {jQuery}</h4>\n<p>Elemify given element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {jQuery}<br/>\nElement</li>\n<li>elemName {String}<br/>\nName</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<h4 id=\"containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\"><a href=\"#containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\" class=\"anchor\"></a>containsDomElem ( [ctx=this.domElem], domElem ) → {Boolean}  protected</h4>\n<p>Checks whether a DOM element is in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where check is being performed</li>\n<li>domElem {jQuery}<br/>\nDOM element</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to a block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getMod----elem-,-modName---→--String---protected\"><a href=\"#getMod----elem-,-modName---→--String---protected\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}  protected</h4>\n<p>Delegates native getMod helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,--modName1----→--Object---protected\"><a href=\"#getMods----elem-,--modName1----→--Object---protected\" class=\"anchor\"></a>getMods ( [elem], [modName1] ) → {Object}  protected</h4>\n<p>Delegates native getMods helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>[modName1] {String}<br/>\n..., modNameN] Modifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM---protected\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM---protected\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}  protected</h4>\n<p>Delegates native setMod helper to element&#39;s instances</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"block----→--BEMDOM-\"><a href=\"#block----→--BEMDOM-\" class=\"anchor\"></a>block () → {BEMDOM}</h4>\n<p>Returns and initializes (if necessary) the own block of current element</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elemInstance---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstance---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstance ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"elemInstances---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstances---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstances ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstance ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstances ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElem----ctx=this-domElem-,-elemName---→--jQuery-\"><a href=\"#closestElem----ctx=this-domElem-,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( [ctx=this.domElem], elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstance ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instance of defined element outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstances ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"scope--jQuery-\"><a href=\"#scope--jQuery-\" class=\"anchor\"></a>scope {jQuery}</h4>\n<p>Scope, will be set on onDomReady to <code>&lt;body&gt;</code></p>\n<h4 id=\"doc--jQuery-\"><a href=\"#doc--jQuery-\" class=\"anchor\"></a>doc {jQuery}</h4>\n<p>Document shortcut</p>\n<h4 id=\"win--jQuery-\"><a href=\"#win--jQuery-\" class=\"anchor\"></a>win {jQuery}</h4>\n<p>Window shortcut</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"init----ctx=scope----→--jQuery-\"><a href=\"#init----ctx=scope----→--jQuery-\" class=\"anchor\"></a>init ( [ctx=scope] ) → {jQuery}</h4>\n<p>Initializes blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=scope] {jQuery | String}<br/>\nRoot DOM node</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>ctx Initialization context</p>\n<h4 id=\"destruct---ctx,--excludeSelf=false---\"><a href=\"#destruct---ctx,--excludeSelf=false---\" class=\"anchor\"></a>destruct ( ctx, [excludeSelf=false] )</h4>\n<p>Destroys blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>[excludeSelf=false] {Boolean}<br/>\nExclude the main domElem</li>\n</ul>\n<h4 id=\"update---ctx,-content---→--jQuery-\"><a href=\"#update---ctx,-content---→--jQuery-\" class=\"anchor\"></a>update ( ctx, content ) → {jQuery}</h4>\n<p>Replaces a fragment of the DOM tree inside the context, destroying old blocks and intializing new ones</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nNew content</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>Updated root DOM node</p>\n<h4 id=\"replace---ctx,-content---→--jQuery-\"><a href=\"#replace---ctx,-content---→--jQuery-\" class=\"anchor\"></a>replace ( ctx, content ) → {jQuery}</h4>\n<p>Changes a fragment of the DOM tree including the context and initializes blocks.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"append---ctx,-content---→--jQuery-\"><a href=\"#append---ctx,-content---→--jQuery-\" class=\"anchor\"></a>append ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the end of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"prepend---ctx,-content---→--jQuery-\"><a href=\"#prepend---ctx,-content---→--jQuery-\" class=\"anchor\"></a>prepend ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the beginning of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"before---ctx,-content---→--jQuery-\"><a href=\"#before---ctx,-content---→--jQuery-\" class=\"anchor\"></a>before ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree before the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"after---ctx,-content---→--jQuery-\"><a href=\"#after---ctx,-content---→--jQuery-\" class=\"anchor\"></a>after ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree after the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"liveInitOnEvent----elemName-,-event,--callback-----protected\"><a href=\"#liveInitOnEvent----elemName-,-event,--callback-----protected\" class=\"anchor\"></a>liveInitOnEvent ( [elemName], event, [callback] )  protected</h4>\n<p>Helper for live initialization for an event on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elemName] {String}<br/>\nElement name or names (separated by spaces)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to call after successful initialization</li>\n</ul>\n<h4 id=\"liveBindTo----to-,-event,--callback-----protected\"><a href=\"#liveBindTo----to-,-event,--callback-----protected\" class=\"anchor\"></a>liveBindTo ( [to], event, [callback] )  protected</h4>\n<p>Helper for subscribing to live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[to] {String | Object}<br/>\nDescription (object with modName, modVal, elem) or name of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveUnbindFrom----elem-,-event,--callback-----protected\"><a href=\"#liveUnbindFrom----elem-,-event,--callback-----protected\" class=\"anchor\"></a>liveUnbindFrom ( [elem], event, [callback] )  protected</h4>\n<p>Helper for unsubscribing from live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nName of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveInitOnBlockEvent---event,-blockName,-callback----protected\"><a href=\"#liveInitOnBlockEvent---event,-blockName,-callback----protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, blockName, callback )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event on the current block&#39;s DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>callback {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\"><a href=\"#liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\" class=\"anchor\"></a>liveInitOnBlockInsideEvent ( event, blockName, [callback] )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event inside the current block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"on----ctx-,-e,--data-,-fn,--fnCtx---\"><a href=\"#on----ctx-,-e,--data-,-fn,--fnCtx---\" class=\"anchor\"></a>on ( [ctx], e, [data], fn, [fnCtx] )</h4>\n<p>Adds a live event handler to a block, based on a specified element where the event will be listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event will be listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler&#39;s context</li>\n</ul>\n<h4 id=\"un----ctx-,-e,--fn-,--fnCtx---\"><a href=\"#un----ctx-,-e,--fn-,--fnCtx---\" class=\"anchor\"></a>un ( [ctx], e, [fn], [fnCtx] )</h4>\n<p>Removes the live event handler from a block, based on a specified element where the event was being listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event was being listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler context</li>\n</ul>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\"><a href=\"#decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\" class=\"anchor\"></a>decl ( name, [props], [staticProps], [_autoDecl] ) → {Function}  protected</h4>\n<p>Auto-declarator for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>name {Object}<br/>\nInstance name</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n<li>[_autoDecl] {Object}<br/>\nAuto-declaration flag</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"liveInitOnBlockEvent---event,--callback----→--Function---protected\"><a href=\"#liveInitOnBlockEvent---event,--callback----→--Function---protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, [callback] ) → {Function}  protected</h4>\n<p>Helper for live initialization for an own block&#39;s event</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new element&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__dom_init-Module\"><a href=\"#i-bem__dom_init-Module\" class=\"anchor\"></a>i-bem__dom_init Module</h1>\n<h2 id=\"-function-----ctx=scope----→--jQuery-\"><a href=\"#-function-----ctx=scope----→--jQuery-\" class=\"anchor\"></a><em>function</em> ( [ctx=scope] ) → {jQuery}</h2>\n<p>Initializes blocks on a fragment of the DOM tree</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>[ctx=scope] {jQuery}<br/>\nRoot DOM node</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{jQuery}</p>\n<p>ctx Initialization context</p>\n"},{"name":"identify","data":{"ru":{"name":"identify","examples":[],"description":""},"en":{"name":"identify","examples":[],"description":""}},"jsdoc":"<h1 id=\"identify-Module\"><a href=\"#identify-Module\" class=\"anchor\"></a>identify Module</h1>\n<h2 id=\"-function----obj,--onlyGet=false----→--String-\"><a href=\"#-function----obj,--onlyGet=false----→--String-\" class=\"anchor\"></a><em>function</em> ( obj, [onlyGet=false] ) → {String}</h2>\n<p>Makes unique ID</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {Object}<br/>\nObject that needs to be identified</li>\n<li>[onlyGet=false] {Boolean}<br/>\nReturn a unique value only if it had already been assigned before</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<p>ID</p>\n"},{"name":"idle","data":{"ru":{"name":"idle","examples":[],"description":""},"en":{"name":"idle","examples":[],"description":""}},"jsdoc":"<h1 id=\"idle-Module\"><a href=\"#idle-Module\" class=\"anchor\"></a>idle Module</h1>\n<h2 id=\"Idle-Class\"><a href=\"#Idle-Class\" class=\"anchor\"></a>Idle Class</h2>\n<p>Aughtments {events:Emitter}</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Idle---\"><a href=\"#Idle---\" class=\"anchor\"></a>Idle ()</h4>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"start---\"><a href=\"#start---\" class=\"anchor\"></a>start ()</h4>\n<p>Starts monitoring of idle state</p>\n<h4 id=\"stop---\"><a href=\"#stop---\" class=\"anchor\"></a>stop ()</h4>\n<p>Stops monitoring of idle state</p>\n<h4 id=\"isIdle----→--Boolean-\"><a href=\"#isIdle----→--Boolean-\" class=\"anchor\"></a>isIdle () → {Boolean}</h4>\n<p>Returns whether state is idle</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n"},{"name":"inherit","data":{"ru":{"name":"inherit","examples":[],"description":""},"en":{"name":"inherit","examples":[],"description":""}},"jsdoc":"<h1 id=\"inherit-Module\"><a href=\"#inherit-Module\" class=\"anchor\"></a>inherit Module</h1>\n<p>This module provides some syntax sugar for &quot;class&quot; declarations, constructors, mixins, &quot;super&quot; calls and static members.</p>\n<h2 id=\"-function-----baseClass---baseClassAndMixins-,-prototypeFields,--staticFields----→--Function-\"><a href=\"#-function-----baseClass---baseClassAndMixins-,-prototypeFields,--staticFields----→--Function-\" class=\"anchor\"></a><em>function</em> ( [baseClass | baseClassAndMixins], prototypeFields, [staticFields] ) → {Function}</h2>\n<p>Creates class</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>[baseClass | baseClassAndMixins] {Function | Array}<br/>\nclass (or class and mixins) to inherit from</li>\n<li>prototypeFields {Object}</li>\n<li>[staticFields] {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Function}</p>\n<p>class</p>\n"},{"name":"jquery","data":{"ru":{"name":"jquery","examples":[],"description":"<p>Используется для поставки на страницу нужных плагинов через зависимости блоков от элементов блока ##i-jquery##.</p>\n"},"en":{"name":"jquery","examples":[],"description":""}},"jsdoc":"<h1 id=\"jquery-Module\"><a href=\"#jquery-Module\" class=\"anchor\"></a>jquery Module</h1>\n<p>Provide jQuery (load if it does not exist).</p>\n<h2 id=\"-function----\"><a href=\"#-function----\" class=\"anchor\"></a><em>function</em> ()</h2>\n<h1 id=\"jquery__config-Module\"><a href=\"#jquery__config-Module\" class=\"anchor\"></a>jquery__config Module</h1>\n<p>Configuration for jQuery</p>\n<h2 id=\"url--String-\"><a href=\"#url--String-\" class=\"anchor\"></a>url {String}</h2>\n<p>URL for loading jQuery if it does not exist</p>\n<p>Value: &quot;//yastatic.net/jquery/2.1.1/jquery.min.js&quot;</p>\n"},{"name":"keyboard","data":{"ru":{"name":"keyboard","examples":[],"description":""},"en":{"name":"keyboard","examples":[],"description":""}},"jsdoc":"<h1 id=\"keyboard__codes-Module\"><a href=\"#keyboard__codes-Module\" class=\"anchor\"></a>keyboard__codes Module</h1>\n"},{"name":"loader","data":{"ru":{"name":"loader","examples":[],"description":""},"en":{"name":"loader","examples":[],"description":""}},"jsdoc":"<h1 id=\"loader_type_bundle-Module\"><a href=\"#loader_type_bundle-Module\" class=\"anchor\"></a>loader_type_bundle Module</h1>\n<p>Load BEM bundle (JS+CSS) from external URL.</p>\n<h2 id=\"-function----id,-url,-onSuccess,--onError---\"><a href=\"#-function----id,-url,-onSuccess,--onError---\" class=\"anchor\"></a><em>function</em> ( id, url, onSuccess, [onError] )</h2>\n<p>Loads bundle</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>id {String}</li>\n<li>url {String}</li>\n<li>onSuccess {Function}</li>\n<li>[onError] {Function}</li>\n</ul>\n<h1 id=\"loader_type_js-Module\"><a href=\"#loader_type_js-Module\" class=\"anchor\"></a>loader_type_js Module</h1>\n<p>Load JS from external URL.</p>\n<h2 id=\"-function----path,-success,-error--\"><a href=\"#-function----path,-success,-error--\" class=\"anchor\"></a><em>function</em> ( path, success, error )</h2>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>path {String}<br/>\nresource link</li>\n<li>success {Function}<br/>\nto be called if the script succeeds</li>\n<li>error {Function}<br/>\nto be called if the script fails</li>\n</ul>\n"},{"name":"next-tick","data":{"ru":{"name":"next-tick","examples":[],"description":""},"en":{"name":"next-tick","examples":[],"description":""}},"jsdoc":"<h1 id=\"next-tick-Module\"><a href=\"#next-tick-Module\" class=\"anchor\"></a>next-tick Module</h1>\n<h2 id=\"-function----fn--\"><a href=\"#-function----fn--\" class=\"anchor\"></a><em>function</em> ( fn )</h2>\n<p>Executes given function on next tick.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>fn {Function}</li>\n</ul>\n"},{"name":"objects","data":{"ru":{"name":"objects","examples":[],"description":""},"en":{"name":"objects","examples":[],"description":""}},"jsdoc":"<h1 id=\"objects-Module\"><a href=\"#objects-Module\" class=\"anchor\"></a>objects Module</h1>\n<p>A set of helpers to work with JavaScript objects</p>\n<h2 id=\"extend---target,-source---→--Object-\"><a href=\"#extend---target,-source---→--Object-\" class=\"anchor\"></a>extend ( target, source ) → {Object}</h2>\n<p>Extends a given target by</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>target {Object}<br/>\nobject to extend</li>\n<li>source {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Object}</p>\n<h2 id=\"isEmpty---obj---→--Boolean-\"><a href=\"#isEmpty---obj---→--Boolean-\" class=\"anchor\"></a>isEmpty ( obj ) → {Boolean}</h2>\n<p>Check whether a given object is empty (contains no enumerable properties)</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"each---obj,-fn,--ctx---\"><a href=\"#each---obj,-fn,--ctx---\" class=\"anchor\"></a>each ( obj, fn, [ctx] )</h2>\n<p>Generic iterator function over object</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {Object}<br/>\nobject to iterate</li>\n<li>fn {Function}<br/>\ncallback</li>\n<li>[ctx] {Object}<br/>\ncallbacks&#39;s context</li>\n</ul>\n"},{"name":"page","data":{"ru":{"name":"page","examples":[{"name":"10-simple","path":"touch-pad.examples/page/10-simple","notation":{"block":"10-simple"}},{"name":"20-doctype","path":"touch-pad.examples/page/20-doctype","notation":{"block":"20-doctype"}}],"description":"<p>﻿Блок <code>page</code> создаёт теги верхнего уровня страницы:</p>\n<ul>\n<li><code>&lt;html&gt;</code></li>\n<li><code>&lt;head&gt;</code></li>\n<li><code>&lt;body&gt;</code></li>\n</ul>\n<p>Именно он отвечает за то, какие подключить <code>CSS</code> и <code>JS</code> файлы к странице,\nвыставление <code>meta</code> тегов, заголовка и так далее.</p>\n<p>Декларация блока в <code>BEMJSON</code> начинается объявлением блока и\nуказанием свойства <code>title</code>, которое превращается в тег <code>&lt;title&gt;</code> в <code>HTML</code>.</p>\n<pre><code class=\"lang-javascript\">({\n    block: &#39;page&#39;,\n    title: &#39;Page title&#39;,\n    content: &#39;Блок page&#39;\n})\n</code></pre>\n<p>Указание свойства <code>head</code> дополняет элемент <code>head</code>, соответствующий <code>HTML</code> тегу <code>&lt;head&gt;</code>,\nэлементами для подключения <code>CSS</code> и <code>JS</code> файлов, а также указания <code>meta</code>:</p>\n<pre><code class=\"lang-javascript\">({\n    block: &#39;page&#39;,\n    title: &#39;Page title&#39;,\n    head: [\n        { elem: &#39;css&#39;, url: &#39;example.css&#39;, ie: false },\n        { elem: &#39;css&#39;, url: &#39;example.ie.css&#39;, ie: &#39;lt IE 8&#39; },\n        { elem: &#39;js&#39;, url: &#39;example.js&#39; },\n        { elem: &#39;meta&#39;, attrs: { name: &#39;keywords&#39;, content: &#39;js, css, html&#39; } },\n        { elem: &#39;meta&#39;, attrs: { name: &#39;description&#39;, content: &#39;Yet another webdev blog&#39; } }\n    ],\n    content: &#39;Страница с подключенными CSS, JS и meta-данными&#39;\n})\n</code></pre>\n<p>Элемент <code>css</code> превращается в <code>HTML</code> в тег <code>&lt;link&gt;</code>, подключающий как <code>CSS</code> стиль тот файл,\nчто указан в свойстве <code>url</code> этого элемента. Также у такого элемента может быть свойство <code>ie</code>.\nЕсли это свойство <code>false</code>, то будут использоваться такие <code>conditional comments</code>, которые предотвратят использование этих стилей в <code>IE</code>. При строчном значении этого свойства тег <code>&lt;link&gt;</code> , будет обёрнут в соответствующий <code>conditional comment</code>, и этот стиль будет грузиться и использоваться указанных браузерах.</p>\n<p>Также есть возможность указывать свойство <code>content</code> для содержания тега <code>&lt;style&gt;</code>:</p>\n<pre><code class=\"lang-javascript\">({\n    block: &#39;page&#39;,\n    title: &#39;Page title&#39;,\n    head: [\n        {\n            elem: &#39;css&#39;,\n            content: &#39;.page { color: #f00 }&#39;\n        }\n    ],\n    content: &#39;Страница с тэгом &lt;style&gt;&#39;\n})\n</code></pre>\n<p>Элемент <code>js</code> действует аналогично, подключая к странице <code>JS</code> файлы при помощи тега <code>&lt;script&gt;</code>.</p>\n<p>Свойство <code>head</code> не описывает содержание <code>HTML</code>-тега <code>&lt;head&gt;</code> полностью, а лишь\nдополняет дефолтное, которое блок сам создаёт в своём <code>BEMHTML</code> шаблоне.</p>\n<h3 id=\"Тег-<meta>-с-указанием-кодировки\"><a href=\"#Тег-<meta>-с-указанием-кодировки\" class=\"anchor\"></a>Тег <code>meta</code> с указанием кодировки</h3>\n<p><code>BEMHTML</code>:</p>\n<pre><code class=\"lang-javascript\">content: [\n{\n    tag: &#39;meta&#39;,\n    attrs: { &#39;http-equiv&#39;: &#39;content-type&#39;, content: &#39;text/html; charset=utf-8&#39; }\n},\n// ...\n]\n</code></pre>\n<h3 id=\"Тег-<meta>-для-использования-`IE9`--и-выше--в-максимальном-`compatibility`-режиме\"><a href=\"#Тег-<meta>-для-использования-`IE9`--и-выше--в-максимальном-`compatibility`-режиме\" class=\"anchor\"></a>Тег <code>meta</code> для использования <code>IE9</code> (и выше) в максимальном <code>compatibility</code> режиме</h3>\n<p><code>BEMHTML</code>:</p>\n<pre><code class=\"lang-javascript\">content: [\n// ...\n{\n    tag: &#39;meta&#39;,\n    attrs: { &#39;http-equiv&#39;: &#39;X-UA-Compatible&#39;, content: &#39;IE=EmulateIE7, IE=edge&#39; }\n},\n// ...\n]\n</code></pre>\n<h3 id=\"Выставление-значения-тега-<title>-страницы-из-свойства\"><a href=\"#Выставление-значения-тега-<title>-страницы-из-свойства\" class=\"anchor\"></a>Выставление значения тега <code>&lt;title&gt;</code> страницы из свойства</h3>\n<pre><code class=\"lang-javascript\">content: [\n// ...\n{\n    tag: &#39;title&#39;,\n    content: this.ctx.title\n},\n// ...\n]\n</code></pre>\n<h3 id=\"Выставление-фавиконки\"><a href=\"#Выставление-фавиконки\" class=\"anchor\"></a>Выставление фавиконки</h3>\n<pre><code class=\"lang-javascript\">content: [\n// ...\nthis.ctx.favicon ? {\n    elem: &#39;favicon&#39;,\n    url: this.ctx.favicon\n} : &#39;&#39;,\n// ...\n]\n</code></pre>\n<h3 id=\"Декларация-блока-ua\"><a href=\"#Декларация-блока-ua\" class=\"anchor\"></a>Декларация блока ua</h3>\n<pre><code class=\"lang-javascript\">content: [\n// ...\n{\n    block: &#39;ua&#39;\n},\n// ...\n]\n</code></pre>\n<p>Значением свойства <code>content</code> блока <code>page</code> может быть хеш-описание содержимого\n(если речь идёт лишь об одном блоке) или массив блоков, описанных хешами:</p>\n<pre><code class=\"lang-javascript\">({\n    block: &#39;page&#39;,\n    title: &#39;Page title&#39;,\n    content: {\n        block: &#39;b-link&#39;,\n        mods: { pseudo: &#39;yes&#39;, togcolor: &#39;yes&#39;, color: &#39;green&#39; },\n        url: &#39;#&#39;,\n        target: &#39;_blank&#39;,\n        title: &#39;Кликни меня&#39;,\n        content: &#39;Псевдоссылка, меняющая цвет по клику&#39;\n    }\n})\n</code></pre>\n<p>На блоки, содержащиеся в <code>content</code>, действуют их <code>BEMHTML</code> шаблоны.</p>\n<h3 id=\"Отмена-автоматической-инициализации-блоков\"><a href=\"#Отмена-автоматической-инициализации-блоков\" class=\"anchor\"></a>Отмена автоматической инициализации блоков</h3>\n<pre><code class=\"lang-javascript\">noDeps: [\n    { block: &#39;i-bem&#39;, elem: &#39;dom&#39;, mods: { init: &#39;auto&#39; } }\n]\n</code></pre>\n"},"en":{"name":"page","examples":[{"name":"10-simple","path":"touch-pad.examples/page/10-simple","notation":{"block":"10-simple"}},{"name":"20-doctype","path":"touch-pad.examples/page/20-doctype","notation":{"block":"20-doctype"}}],"description":""}},"jsdoc":""},{"name":"querystring","data":{"ru":{"name":"querystring","examples":[],"description":"<h1 id=\"querystring\"><a href=\"#querystring\" class=\"anchor\"></a>querystring</h1>\n<p>Блок <code>querystring</code> служит для работы с адресной строкой браузера – обработки и формирования запросов.</p>\n<p>Блок реализован в технологии <code>vanilla.js</code> и подходит для использования в серверных и клиентских приложениях.</p>\n<h2 id=\"Публичные-методы-блока\"><a href=\"#Публичные-методы-блока\" class=\"anchor\"></a>Публичные методы блока</h2>\n<p>Блок предоставляет следующий набор публичных методов:</p>\n<ul>\n<li><code>parse</code> – служит для формирования объекта на основании параметров запроса адресной строки. Метод принимает на вход строку с параметрами и возвращает сформированный объект. Параметры передаются в виде пар ключ-значение с символом <code>=</code> в качестве разделителя. Пары отделяются символом <code>&amp;</code>. В ходе работы метода, ключи и значения декодируются из формата <code>URI</code>;</li>\n<li><code>stringify</code> – служит для формирования строки запроса с набором параметров на основании собственных свойств объекта. Метод принимает на вход объект и возвращает сформированную строку запроса. Имена свойств отделяются от значений символом <code>=</code>, пары разделяются символом <code>&amp;</code>. </li>\n</ul>\n<h2 id=\"Элементы-блока\"><a href=\"#Элементы-блока\" class=\"anchor\"></a>Элементы блока</h2>\n<h3 id=\"__uri\"><a href=\"#__uri\" class=\"anchor\"></a>__uri</h3>\n<p>Элемент предназначен для декодирования строки из формата <code>URI</code>. </p>\n<p>Элемент предоставляет следующий набор публичных методов:</p>\n<ul>\n<li><code>decodeURI</code> – декодирование <code>URI</code>. Заменяет каждую эскейпинговую последовательность в строке <code>URI</code> соответствующим символом. Метод поддерживает тот же набор последовательностей, что и стандартный метод JavaScript <code>encodeURI</code>. Символ <code>#</code> не декодируется.</li>\n<li><code>decodeURIComponent</code> – декодирование компонента <code>URI</code>. Заменяет каждую эскейпинговую последовательность в строке <code>URI</code> соответствующим символом. Метод позволяет декодировать компонент <code>URI</code>, сформированный методом <code>encodeURIComponent</code>. Декодируются последовательности, соответствующие символам <code>&amp;</code>, <code>+</code>, и <code>=</code>.</li>\n</ul>\n<p>Оба метода являются оберткой над соответствующими стандартными методами JavaScript <code>decodeURI</code> и <code>decodeURIComponent</code>. В ходе их работы производится проверка входной строки:</p>\n<ul>\n<li>если передана строка в формате, отличном от <code>UTF8</code>, генерируется ошибка;</li>\n<li>если в строке не были найдены эскейпинговые последовательности методы возвращают ее без изменений.</li>\n</ul>\n"},"en":{"name":"querystring","examples":[],"description":""}},"jsdoc":"<h1 id=\"querystring-Module\"><a href=\"#querystring-Module\" class=\"anchor\"></a>querystring Module</h1>\n<p>A set of helpers to work with query strings</p>\n<h2 id=\"parse---str---→--Object-\"><a href=\"#parse---str---→--Object-\" class=\"anchor\"></a>parse ( str ) → {Object}</h2>\n<p>Parse a query string to an object</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Object}</p>\n<h2 id=\"stringify---obj---→--String-\"><a href=\"#stringify---obj---→--String-\" class=\"anchor\"></a>stringify ( obj ) → {String}</h2>\n<p>Serialize an object to a query string</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<h1 id=\"querystring__uri-Module\"><a href=\"#querystring__uri-Module\" class=\"anchor\"></a>querystring__uri Module</h1>\n<p>A set of helpers to work with URI</p>\n<h2 id=\"decodeURI---str---→--String-\"><a href=\"#decodeURI---str---→--String-\" class=\"anchor\"></a>decodeURI ( str ) → {String}</h2>\n<p>Decodes URI string</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<h2 id=\"decodeURIComponent---str---→--String-\"><a href=\"#decodeURIComponent---str---→--String-\" class=\"anchor\"></a>decodeURIComponent ( str ) → {String}</h2>\n<p>Decodes URI component string</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n"},{"name":"strings","data":{"ru":{"name":"strings","examples":[],"description":""},"en":{"name":"strings","examples":[],"description":""}},"jsdoc":"<h1 id=\"strings__escape-Module\"><a href=\"#strings__escape-Module\" class=\"anchor\"></a>strings__escape Module</h1>\n<p>A set of string escaping functions</p>\n<h2 id=\"xml---str---→--String-\"><a href=\"#xml---str---→--String-\" class=\"anchor\"></a>xml ( str ) → {String}</h2>\n<p>Escape string to use in XML</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<h2 id=\"html---str---→--String-\"><a href=\"#html---str---→--String-\" class=\"anchor\"></a>html ( str ) → {String}</h2>\n<p>Escape string to use in HTML</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<h2 id=\"attr---str---→--String-\"><a href=\"#attr---str---→--String-\" class=\"anchor\"></a>attr ( str ) → {String}</h2>\n<p>Escape string to use in attributes</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n"},{"name":"tick","data":{"ru":{"name":"tick","examples":[],"description":""},"en":{"name":"tick","examples":[],"description":""}},"jsdoc":"<h1 id=\"tick-Module\"><a href=\"#tick-Module\" class=\"anchor\"></a>tick Module</h1>\n<p>Helpers for polling anything</p>\n<h2 id=\"Tick-Class\"><a href=\"#Tick-Class\" class=\"anchor\"></a>Tick Class</h2>\n<p>Aughtments {events:Emitter}</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Tick---\"><a href=\"#Tick---\" class=\"anchor\"></a>Tick ()</h4>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"start---\"><a href=\"#start---\" class=\"anchor\"></a>start ()</h4>\n<p>Starts polling</p>\n<h4 id=\"stop---\"><a href=\"#stop---\" class=\"anchor\"></a>stop ()</h4>\n<p>Stops polling</p>\n"},{"name":"ua","data":{"ru":{"name":"ua","examples":[],"description":"<p>Блок <code>ua</code> — служебный, не имеет визуального представления на странице.</p>\n<p>Этот блок используется всегда, когда используется блок <code>page</code>, так как вызывается\nвнутри него. Задавать его самостоятельно на странице не нужно.</p>\n<p>В <code>HTML</code> блок представлен в виде инлайнового скрипта, в результате работы которого,\nу тега <code>&lt;html&gt;</code> появляются <code>CSS</code>-классы, идентифицирующие, включен ли <code>JS</code> (<code>ua_js_no</code>/<code>ua_js_yes</code>) и в\nкаком режиме рендеринга находится браузер (<code>ua_css_standart</code>/<code>ua_css_quirks</code>).</p>\n<p>Эти классы можно использовать, чтобы при помощи <code>CSS</code> задавать блокам разный\nвнешний вид в зависимости от ситуации.</p>\n<p>Если такие классы проекту не нужны, можно переопределить <code>BEMHTML</code> шаблон блока <code>ua</code>\nна уровне переопределения проекта:</p>\n<pre><code class=\"lang-js\">block(&#39;ua&#39;).default()()\n</code></pre>\n\n<p>Для тач-платформы блок <code>ua</code> добавляет дополнительные <code>CSS</code>-классы:</p>\n<ul>\n<li>TODO</li>\n</ul>\n"},"en":{"name":"ua","examples":[],"description":""}},"jsdoc":"<h1 id=\"ua-Module\"><a href=\"#ua-Module\" class=\"anchor\"></a>ua Module</h1>\n<p>Detect some user agent features</p>\n<h2 id=\"ua--String-\"><a href=\"#ua--String-\" class=\"anchor\"></a>ua {String}</h2>\n<p>User agent</p>\n<h2 id=\"ios--String---undefined-\"><a href=\"#ios--String---undefined-\" class=\"anchor\"></a>ios {String | undefined}</h2>\n<p>iOS version</p>\n<h2 id=\"iphone--Boolean---undefined-\"><a href=\"#iphone--Boolean---undefined-\" class=\"anchor\"></a>iphone {Boolean | undefined}</h2>\n<p>Is iPhone</p>\n<h2 id=\"ipad--Boolean---undefined-\"><a href=\"#ipad--Boolean---undefined-\" class=\"anchor\"></a>ipad {Boolean | undefined}</h2>\n<p>Is iPad</p>\n<h2 id=\"android--String---undefined-\"><a href=\"#android--String---undefined-\" class=\"anchor\"></a>android {String | undefined}</h2>\n<p>Android version</p>\n<h2 id=\"bada--String---undefined-\"><a href=\"#bada--String---undefined-\" class=\"anchor\"></a>bada {String | undefined}</h2>\n<p>Bada version</p>\n<h2 id=\"wp--String---undefined-\"><a href=\"#wp--String---undefined-\" class=\"anchor\"></a>wp {String | undefined}</h2>\n<p>Windows Phone version</p>\n<h2 id=\"other--Boolean---undefined-\"><a href=\"#other--Boolean---undefined-\" class=\"anchor\"></a>other {Boolean | undefined}</h2>\n<p>Undetected platform</p>\n<h2 id=\"opera--String---undefined-\"><a href=\"#opera--String---undefined-\" class=\"anchor\"></a>opera {String | undefined}</h2>\n<p>Opera version</p>\n<h2 id=\"chrome--String---undefined-\"><a href=\"#chrome--String---undefined-\" class=\"anchor\"></a>chrome {String | undefined}</h2>\n<p>Chrome version</p>\n<h2 id=\"screenSize--String-\"><a href=\"#screenSize--String-\" class=\"anchor\"></a>screenSize {String}</h2>\n<p>Screen size, one of: large, normal, small</p>\n<h2 id=\"dpr--Number-\"><a href=\"#dpr--Number-\" class=\"anchor\"></a>dpr {Number}</h2>\n<p>Device pixel ratio</p>\n<h2 id=\"connection--String-\"><a href=\"#connection--String-\" class=\"anchor\"></a>connection {String}</h2>\n<p>Connection type, one of: wifi, 3g, 2g</p>\n<h2 id=\"flash--String---undefined-\"><a href=\"#flash--String---undefined-\" class=\"anchor\"></a>flash {String | undefined}</h2>\n<p>Flash version</p>\n<h2 id=\"video--Boolean-\"><a href=\"#video--Boolean-\" class=\"anchor\"></a>video {Boolean}</h2>\n<p>Is video supported?</p>\n<h2 id=\"svg--Boolean-\"><a href=\"#svg--Boolean-\" class=\"anchor\"></a>svg {Boolean}</h2>\n<p>Is SVG supported?</p>\n<h2 id=\"width--Number-\"><a href=\"#width--Number-\" class=\"anchor\"></a>width {Number}</h2>\n<p>Viewport width</p>\n<h2 id=\"height--Number-\"><a href=\"#height--Number-\" class=\"anchor\"></a>height {Number}</h2>\n<p>Viewport height</p>\n<h2 id=\"landscape--Boolean-\"><a href=\"#landscape--Boolean-\" class=\"anchor\"></a>landscape {Boolean}</h2>\n<p>Is landscape oriented?</p>\n<h1 id=\"ua-Module\"><a href=\"#ua-Module\" class=\"anchor\"></a>ua Module</h1>\n<p>Use ua module to provide user agent features by modifiers and update some on orient change</p>\n<h2 id=\"-type-----\"><a href=\"#-type-----\" class=\"anchor\"></a><em>type</em> {*}</h2>\n"},{"name":"vow","data":{"ru":{"name":"vow","examples":[],"description":""},"en":{"name":"vow","examples":[],"description":""}},"jsdoc":"<h1 id=\"vow-Module\"><a href=\"#vow-Module\" class=\"anchor\"></a>vow Module</h1>\n<h2 id=\"Deferred-Class\"><a href=\"#Deferred-Class\" class=\"anchor\"></a>Deferred Class</h2>\n<p>The <code>Deferred</code> class is used to encapsulate newly-created promise object along with functions that resolve, reject or notify it.</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Deferred---\"><a href=\"#Deferred---\" class=\"anchor\"></a>Deferred ()</h4>\n<p>You can use <code>vow.defer()</code> instead of using this constructor.</p>\n<p><code>new vow.Deferred()</code> gives the same result as <code>vow.defer()</code>.</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"promise----→--vow:Promise-\"><a href=\"#promise----→--vow:Promise-\" class=\"anchor\"></a>promise () → {vow:Promise}</h4>\n<p>Returns corresponding promise.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"resolve---value--\"><a href=\"#resolve---value--\" class=\"anchor\"></a>resolve ( value )</h4>\n<p>Resolves corresponding promise with given <code>value</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>value {*}</li>\n</ul>\n<h4 id=\"reject---reason--\"><a href=\"#reject---reason--\" class=\"anchor\"></a>reject ( reason )</h4>\n<p>Rejects corresponding promise with given <code>reason</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>reason {*}</li>\n</ul>\n<h4 id=\"notify---value--\"><a href=\"#notify---value--\" class=\"anchor\"></a>notify ( value )</h4>\n<p>Notifies corresponding promise with given <code>value</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>value {*}</li>\n</ul>\n<h2 id=\"Promise-Class\"><a href=\"#Promise-Class\" class=\"anchor\"></a>Promise Class</h2>\n<p>The <code>Promise</code> class is used when you want to give to the caller something to subscribe to,\nbut not the ability to resolve or reject the deferred.</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Promise---resolver--\"><a href=\"#Promise---resolver--\" class=\"anchor\"></a>Promise ( resolver )</h4>\n<p>You should use this constructor directly only if you are going to use <code>vow</code> as DOM Promises implementation.\nIn other case you should use <code>vow.defer()</code> and <code>defer.promise()</code> methods.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>resolver {Function}<br/>\nSee <a href=\"https://github.com/domenic/promises-unwrapping/blob/master/README.md#the-promise-constructor\">https://github.com/domenic/promises-unwrapping/blob/master/README.md#the-promise-constructor</a> for details.</li>\n</ul>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"valueOf----→----\"><a href=\"#valueOf----→----\" class=\"anchor\"></a>valueOf () → {*}</h4>\n<p>Returns value of fulfilled promise or reason in case of rejection.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{*}</p>\n<h4 id=\"isResolved----→--Boolean-\"><a href=\"#isResolved----→--Boolean-\" class=\"anchor\"></a>isResolved () → {Boolean}</h4>\n<p>Returns <code>true</code> if promise is resolved.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"isFulfilled----→--Boolean-\"><a href=\"#isFulfilled----→--Boolean-\" class=\"anchor\"></a>isFulfilled () → {Boolean}</h4>\n<p>Returns <code>true</code> if promise is fulfilled.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"isRejected----→--Boolean-\"><a href=\"#isRejected----→--Boolean-\" class=\"anchor\"></a>isRejected () → {Boolean}</h4>\n<p>Returns <code>true</code> if promise is rejected.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"then----onFulfilled-,--onRejected-,--onProgress-,--ctx----→--vow:Promise-\"><a href=\"#then----onFulfilled-,--onRejected-,--onProgress-,--ctx----→--vow:Promise-\" class=\"anchor\"></a>then ( [onFulfilled], [onRejected], [onProgress], [ctx] ) → {vow:Promise}</h4>\n<p>Adds reactions to promise.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[onProgress] {Function}<br/>\nCallback that will to be invoked with the value after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<p>A new promise, see <a href=\"https://github.com/promises-aplus/promises-spec\">https://github.com/promises-aplus/promises-spec</a> for details</p>\n<h4 id=\"catch---onRejected,--ctx----→--vow:Promise-\"><a href=\"#catch---onRejected,--ctx----→--vow:Promise-\" class=\"anchor\"></a>catch ( onRejected, [ctx] ) → {vow:Promise}</h4>\n<p>Adds rejection reaction only. It is shortcut for <code>promise.then(undefined, onRejected)</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>onRejected {Function}<br/>\nCallback to be called with the value after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"fail---onRejected,--ctx----→--vow:Promise-\"><a href=\"#fail---onRejected,--ctx----→--vow:Promise-\" class=\"anchor\"></a>fail ( onRejected, [ctx] ) → {vow:Promise}</h4>\n<p>Adds rejection reaction only. It is shortcut for <code>promise.then(null, onRejected)</code>. It&#39;s alias for <code>catch</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>onRejected {Function}<br/>\nCallback to be called with the value after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"always---onResolved,--ctx----→--vow:Promise-\"><a href=\"#always---onResolved,--ctx----→--vow:Promise-\" class=\"anchor\"></a>always ( onResolved, [ctx] ) → {vow:Promise}</h4>\n<p>Adds resolving reaction (to fulfillment and rejection both).</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>onResolved {Function}<br/>\nCallback that to be called with the value after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"progress---onProgress,--ctx----→--vow:Promise-\"><a href=\"#progress---onProgress,--ctx----→--vow:Promise-\" class=\"anchor\"></a>progress ( onProgress, [ctx] ) → {vow:Promise}</h4>\n<p>Adds progress reaction.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>onProgress {Function}<br/>\nCallback to be called with the value when promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"spread----onFulfilled-,--onRejected-,--ctx----→--vow:Promise-\"><a href=\"#spread----onFulfilled-,--onRejected-,--ctx----→--vow:Promise-\" class=\"anchor\"></a>spread ( [onFulfilled], [onRejected], [ctx] ) → {vow:Promise}</h4>\n<p>Like <code>promise.then</code>, but &quot;spreads&quot; the array into a variadic value handler.\nIt is useful with <code>vow.all</code> and <code>vow.allResolved</code> methods.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"done----onFulfilled-,--onRejected-,--onProgress-,--ctx---\"><a href=\"#done----onFulfilled-,--onRejected-,--onProgress-,--ctx---\" class=\"anchor\"></a>done ( [onFulfilled], [onRejected], [onProgress], [ctx] )</h4>\n<p>Like <code>then</code>, but terminates a chain of promises.\nIf the promise has been rejected, throws it as an exception in a future turn of the event loop.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[onProgress] {Function}<br/>\nCallback that will to be invoked with the value after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h4 id=\"delay---delay---→--vow:Promise-\"><a href=\"#delay---delay---→--vow:Promise-\" class=\"anchor\"></a>delay ( delay ) → {vow:Promise}</h4>\n<p>Returns a new promise that will be fulfilled in <code>delay</code> milliseconds if the promise is fulfilled,\nor immediately rejected if promise is rejected.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>delay {Number}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"timeout---timeout---→--vow:Promise-\"><a href=\"#timeout---timeout---→--vow:Promise-\" class=\"anchor\"></a>timeout ( timeout ) → {vow:Promise}</h4>\n<p>Returns a new promise that will be rejected in <code>timeout</code> milliseconds\nif the promise is not resolved beforehand.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>timeout {Number}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"cast---value---→--vow:Promise-\"><a href=\"#cast---value---→--vow:Promise-\" class=\"anchor\"></a>cast ( value ) → {vow:Promise}</h4>\n<p>Coerces given <code>value</code> to a promise, or returns the <code>value</code> if it&#39;s already a promise.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>value {*}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"all---iterable---→--vow:Promise-\"><a href=\"#all---iterable---→--vow:Promise-\" class=\"anchor\"></a>all ( iterable ) → {vow:Promise}</h4>\n<p>Returns a promise to be fulfilled only after all the items in <code>iterable</code> are fulfilled,\nor to be rejected when any of the <code>iterable</code> is rejected.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>iterable {Array | Object}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"race---iterable---→--vow:Promise-\"><a href=\"#race---iterable---→--vow:Promise-\" class=\"anchor\"></a>race ( iterable ) → {vow:Promise}</h4>\n<p>Returns a promise to be fulfilled only when any of the items in <code>iterable</code> are fulfilled,\nor to be rejected when the first item is rejected.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>iterable {Array}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"resolve---value---→--vow:Promise-\"><a href=\"#resolve---value---→--vow:Promise-\" class=\"anchor\"></a>resolve ( value ) → {vow:Promise}</h4>\n<p>Returns a promise that has already been resolved with the given <code>value</code>.\nIf <code>value</code> is a promise, returned promise will be adopted with the state of given promise.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>value {*}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"reject---reason---→--vow:Promise-\"><a href=\"#reject---reason---→--vow:Promise-\" class=\"anchor\"></a>reject ( reason ) → {vow:Promise}</h4>\n<p>Returns a promise that has already been rejected with the given <code>reason</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>reason {*}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h2 id=\"defer----→--vow:Deferred-\"><a href=\"#defer----→--vow:Deferred-\" class=\"anchor\"></a>defer () → {vow:Deferred}</h2>\n<p>Creates a new deferred. This method is a factory method for <code>vow:Deferred</code> class.\nIt&#39;s equivalent to <code>new vow.Deferred()</code>.</p>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Deferred}</p>\n<h2 id=\"when---value,--onFulfilled-,--onRejected-,--onProgress-,--ctx----→--vow:Promise-\"><a href=\"#when---value,--onFulfilled-,--onRejected-,--onProgress-,--ctx----→--vow:Promise-\" class=\"anchor\"></a>when ( value, [onFulfilled], [onRejected], [onProgress], [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.then</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[onProgress] {Function}<br/>\nCallback that will to be invoked with the value after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"fail---value,-onRejected,--ctx----→--vow:Promise-\"><a href=\"#fail---value,-onRejected,--ctx----→--vow:Promise-\" class=\"anchor\"></a>fail ( value, onRejected, [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.fail</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>onRejected {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"always---value,-onResolved,--ctx----→--vow:Promise-\"><a href=\"#always---value,-onResolved,--ctx----→--vow:Promise-\" class=\"anchor\"></a>always ( value, onResolved, [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.always</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>onResolved {Function}<br/>\nCallback that will to be invoked with the reason after promise has been resolved</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"progress---value,-onProgress,--ctx----→--vow:Promise-\"><a href=\"#progress---value,-onProgress,--ctx----→--vow:Promise-\" class=\"anchor\"></a>progress ( value, onProgress, [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.progress</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>onProgress {Function}<br/>\nCallback that will to be invoked with the reason after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"spread---value,--onFulfilled-,--onRejected-,--ctx----→--vow:Promise-\"><a href=\"#spread---value,--onFulfilled-,--onRejected-,--ctx----→--vow:Promise-\" class=\"anchor\"></a>spread ( value, [onFulfilled], [onRejected], [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.spread</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"done---value,--onFulfilled-,--onRejected-,--onProgress-,--ctx---\"><a href=\"#done---value,--onFulfilled-,--onRejected-,--onProgress-,--ctx---\" class=\"anchor\"></a>done ( value, [onFulfilled], [onRejected], [onProgress], [ctx] )</h2>\n<p>Static equivalent to <code>promise.done</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[onProgress] {Function}<br/>\nCallback that will to be invoked with the value after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h2 id=\"isPromise---value---→--Boolean-\"><a href=\"#isPromise---value---→--Boolean-\" class=\"anchor\"></a>isPromise ( value ) → {Boolean}</h2>\n<p>Checks whether the given <code>value</code> is a promise-like object</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"cast---value---→--vow:Promise-\"><a href=\"#cast---value---→--vow:Promise-\" class=\"anchor\"></a>cast ( value ) → {vow:Promise}</h2>\n<p>Coerces given <code>value</code> to a promise, or returns the <code>value</code> if it&#39;s already a promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"valueOf---value---→----\"><a href=\"#valueOf---value---→----\" class=\"anchor\"></a>valueOf ( value ) → {*}</h2>\n<p>Static equivalent to <code>promise.valueOf</code>.\nIf given <code>value</code> is not an instance of <code>vow.Promise</code>, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{*}</p>\n<h2 id=\"isFulfilled---value---→--Boolean-\"><a href=\"#isFulfilled---value---→--Boolean-\" class=\"anchor\"></a>isFulfilled ( value ) → {Boolean}</h2>\n<p>Static equivalent to <code>promise.isFulfilled</code>.\nIf given <code>value</code> is not an instance of <code>vow.Promise</code>, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"isRejected---value---→--Boolean-\"><a href=\"#isRejected---value---→--Boolean-\" class=\"anchor\"></a>isRejected ( value ) → {Boolean}</h2>\n<p>Static equivalent to <code>promise.isRejected</code>.\nIf given <code>value</code> is not an instance of <code>vow.Promise</code>, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"isResolved---value---→--Boolean-\"><a href=\"#isResolved---value---→--Boolean-\" class=\"anchor\"></a>isResolved ( value ) → {Boolean}</h2>\n<p>Static equivalent to <code>promise.isResolved</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"resolve---value---→--vow:Promise-\"><a href=\"#resolve---value---→--vow:Promise-\" class=\"anchor\"></a>resolve ( value ) → {vow:Promise}</h2>\n<p>Returns a promise that has already been resolved with the given <code>value</code>.\nIf <code>value</code> is a promise, returned promise will be adopted with the state of given promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"fulfill---value---→--vow:Promise-\"><a href=\"#fulfill---value---→--vow:Promise-\" class=\"anchor\"></a>fulfill ( value ) → {vow:Promise}</h2>\n<p>Returns a promise that has already been fulfilled with the given <code>value</code>.\nIf <code>value</code> is a promise, returned promise will be fulfilled with fulfill/rejection value of given promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"reject---reason---→--vow:Promise-\"><a href=\"#reject---reason---→--vow:Promise-\" class=\"anchor\"></a>reject ( reason ) → {vow:Promise}</h2>\n<p>Returns a promise that has already been rejected with the given <code>reason</code>.\nIf <code>reason</code> is a promise, returned promise will be rejected with fulfill/rejection value of given promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>reason {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"invoke---fn,--args----→--vow:Promise-\"><a href=\"#invoke---fn,--args----→--vow:Promise-\" class=\"anchor\"></a>invoke ( fn, [args] ) → {vow:Promise}</h2>\n<p>Invokes a given function <code>fn</code> with arguments <code>args</code></p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>fn {Function}</li>\n<li>[args] {...*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"all---iterable---→--vow:Promise-\"><a href=\"#all---iterable---→--vow:Promise-\" class=\"anchor\"></a>all ( iterable ) → {vow:Promise}</h2>\n<p>Returns a promise to be fulfilled only after all the items in <code>iterable</code> are fulfilled,\nor to be rejected when any of the <code>iterable</code> is rejected.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>iterable {Array | Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"allResolved---iterable---→--vow:Promise-\"><a href=\"#allResolved---iterable---→--vow:Promise-\" class=\"anchor\"></a>allResolved ( iterable ) → {vow:Promise}</h2>\n<p>Returns a promise to be fulfilled only after all the items in <code>iterable</code> are resolved.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>iterable {Array | Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"any---iterable---→--vow:Promise-\"><a href=\"#any---iterable---→--vow:Promise-\" class=\"anchor\"></a>any ( iterable ) → {vow:Promise}</h2>\n<p>Returns a promise to be fulfilled only when any of the items in <code>iterable</code> are fulfilled,\nor to be rejected when all the items are rejected (with the reason of the first rejected item).</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>iterable {Array}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"anyResolved---iterable---→--vow:Promise-\"><a href=\"#anyResolved---iterable---→--vow:Promise-\" class=\"anchor\"></a>anyResolved ( iterable ) → {vow:Promise}</h2>\n<p>Returns a promise to be fulfilled only when any of the items in <code>iterable</code> are fulfilled,\nor to be rejected when the first item is rejected.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>iterable {Array}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"delay---value,-delay---→--vow:Promise-\"><a href=\"#delay---value,-delay---→--vow:Promise-\" class=\"anchor\"></a>delay ( value, delay ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.delay</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>delay {Number}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"timeout---value,-timeout---→--vow:Promise-\"><a href=\"#timeout---value,-timeout---→--vow:Promise-\" class=\"anchor\"></a>timeout ( value, timeout ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.timeout</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>timeout {Number}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n"}]},{"name":"touch-phone.docs","blocks":[{"name":"clearfix","data":{"ru":{"name":"clearfix","examples":[],"description":"<div class=\"shmakowiki\"><p>Для использования блока необходимо подмешать его к нужному html-элементу, например:</p><pre><code class=\"xml\">    &lt;div style=&quot;background: #ada;&quot;&gt;\n        top\n    &lt;/div&gt;\n\n    &lt;div class=&quot;clearfix&quot; style=&quot;background: #eda;&quot;&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item1&lt;/div&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item2&lt;/div&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item3&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div style=&quot;background: #ada;&quot;&gt;\n        bottom\n    &lt;/div&gt;</code></pre></div>"},"en":{"name":"clearfix","examples":[],"description":""}},"jsdoc":""},{"name":"cookie","jsdoc":"<h1 id=\"cookie\"><a href=\"#cookie\" class=\"anchor\"></a>cookie</h1>\n<p>inspired from $.cookie plugin by Klaus Hartl (stilbuero.de) Module</p>\n<h2 id=\"get---name---→--String---null-\"><a href=\"#get---name---→--String---null-\" class=\"anchor\"></a>get ( name ) → {String | null}</h2>\n<p>Returns cookie by given name</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>name {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String | null}</p>\n<h2 id=\"set---name,-val,-options---→--cookie-\"><a href=\"#set---name,-val,-options---→--cookie-\" class=\"anchor\"></a>set ( name, val, options ) → {cookie}</h2>\n<p>Sets cookie by given name</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>name {String}</li>\n<li>val {String}</li>\n<li>options {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{cookie}</p>\n<p>this</p>\n","data":{"ru":{"name":"cookie","examples":[],"description":""},"en":{"name":"cookie","examples":[],"description":""}}},{"name":"dom","data":{"ru":{"name":"dom","examples":[],"description":""},"en":{"name":"dom","examples":[],"description":""}},"jsdoc":"<h1 id=\"dom-Module\"><a href=\"#dom-Module\" class=\"anchor\"></a>dom Module</h1>\n<p>some DOM utils</p>\n<h2 id=\"contains---ctx,-domElem---→--Boolean-\"><a href=\"#contains---ctx,-domElem---→--Boolean-\" class=\"anchor\"></a>contains ( ctx, domElem ) → {Boolean}</h2>\n<p>Checks whether a DOM elem is in a context</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>ctx {jQuery}<br/>\nDOM elem where check is being performed</li>\n<li>domElem {jQuery}<br/>\nDOM elem to check</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"getFocused----→--jQuery-\"><a href=\"#getFocused----→--jQuery-\" class=\"anchor\"></a>getFocused () → {jQuery}</h2>\n<p>Returns current focused DOM elem in document</p>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{jQuery}</p>\n<h2 id=\"containsFocus---domElem---→--Boolean-\"><a href=\"#containsFocus---domElem---→--Boolean-\" class=\"anchor\"></a>containsFocus ( domElem ) → {Boolean}</h2>\n<p>Checks whether a DOM element contains focus</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>domElem {jQuery}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"isFocusable---domElem---→--Boolean-\"><a href=\"#isFocusable---domElem---→--Boolean-\" class=\"anchor\"></a>isFocusable ( domElem ) → {Boolean}</h2>\n<p>Checks whether a browser currently can set focus on DOM elem</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>domElem {jQuery}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"isEditable---domElem---→--Boolean-\"><a href=\"#isEditable---domElem---→--Boolean-\" class=\"anchor\"></a>isEditable ( domElem ) → {Boolean}</h2>\n<p>Checks whether a domElem is intended to edit text</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>domElem {jQuery}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n"},{"name":"events","data":{"ru":{"name":"events","examples":[],"description":""},"en":{"name":"events","examples":[],"description":""}},"jsdoc":"<h1 id=\"events-Module\"><a href=\"#events-Module\" class=\"anchor\"></a>events Module</h1>\n<h2 id=\"Event-Class\"><a href=\"#Event-Class\" class=\"anchor\"></a>Event Class</h2>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Event---type,-target--\"><a href=\"#Event---type,-target--\" class=\"anchor\"></a>Event ( type, target )</h4>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>type {String}</li>\n<li>target {Object}</li>\n</ul>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"type--String-\"><a href=\"#type--String-\" class=\"anchor\"></a>type {String}</h4>\n<p>Type</p>\n<h4 id=\"target--String-\"><a href=\"#target--String-\" class=\"anchor\"></a>target {String}</h4>\n<p>Target</p>\n<h4 id=\"result----\"><a href=\"#result----\" class=\"anchor\"></a>result {*}</h4>\n<p>Result</p>\n<h4 id=\"data----\"><a href=\"#data----\" class=\"anchor\"></a>data {*}</h4>\n<p>Data</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"preventDefault---\"><a href=\"#preventDefault---\" class=\"anchor\"></a>preventDefault ()</h4>\n<p>Prevents default action</p>\n<h4 id=\"isDefaultPrevented----→--Boolean-\"><a href=\"#isDefaultPrevented----→--Boolean-\" class=\"anchor\"></a>isDefaultPrevented () → {Boolean}</h4>\n<p>Returns whether is default action prevented</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"stopPropagation---\"><a href=\"#stopPropagation---\" class=\"anchor\"></a>stopPropagation ()</h4>\n<p>Stops propagation</p>\n<h4 id=\"isPropagationStopped----→--Boolean-\"><a href=\"#isPropagationStopped----→--Boolean-\" class=\"anchor\"></a>isPropagationStopped () → {Boolean}</h4>\n<p>Returns whether is propagation stopped</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h2 id=\"Emitter-Class\"><a href=\"#Emitter-Class\" class=\"anchor\"></a>Emitter Class</h2>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--Emitter-\"><a href=\"#on---e,--data-,-fn,--ctx----→--Emitter-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {Emitter}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"once---e,--data-,-fn,--ctx----→--Emitter-\"><a href=\"#once---e,--data-,-fn,--ctx----→--Emitter-\" class=\"anchor\"></a>once ( e, [data], fn, [ctx] ) → {Emitter}</h4>\n<p>Adds a one time handler for the event.\nHandler is executed only the next time the event is fired, after which it is removed.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--Emitter-\"><a href=\"#un----e-,--fn-,--ctx----→--Emitter-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {Emitter}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"emit---e,--data----→--Emitter-\"><a href=\"#emit---e,--data----→--Emitter-\" class=\"anchor\"></a>emit ( e, [data] ) → {Emitter}</h4>\n<p>Fires event handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | events:Event}<br/>\nEvent</li>\n<li>[data] {Object}<br/>\nAdditional data</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--Emitter-\"><a href=\"#on---e,--data-,-fn,--ctx----→--Emitter-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {Emitter}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"once---e,--data-,-fn,--ctx----→--Emitter-\"><a href=\"#once---e,--data-,-fn,--ctx----→--Emitter-\" class=\"anchor\"></a>once ( e, [data], fn, [ctx] ) → {Emitter}</h4>\n<p>Adds a one time handler for the event.\nHandler is executed only the next time the event is fired, after which it is removed.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--Emitter-\"><a href=\"#un----e-,--fn-,--ctx----→--Emitter-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {Emitter}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h4 id=\"emit---e,--data----→--Emitter-\"><a href=\"#emit---e,--data----→--Emitter-\" class=\"anchor\"></a>emit ( e, [data] ) → {Emitter}</h4>\n<p>Fires event handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | events:Event}<br/>\nEvent</li>\n<li>[data] {Object}<br/>\nAdditional data</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Emitter}</p>\n<p>this</p>\n<h1 id=\"events__channels-Module\"><a href=\"#events__channels-Module\" class=\"anchor\"></a>events__channels Module</h1>\n<h2 id=\"-function-----id=-default--,--drop=false----→--events:Emitter---undefined-\"><a href=\"#-function-----id=-default--,--drop=false----→--events:Emitter---undefined-\" class=\"anchor\"></a><em>function</em> ( [id=&#39;default&#39;], [drop=false] ) → {events:Emitter | undefined}</h2>\n<p>Returns/destroys a named communication channel</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>[id=&#39;default&#39;] {String}<br/>\nChannel ID</li>\n<li>[drop=false] {Boolean}<br/>\nDestroy the channel</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{events:Emitter | undefined}</p>\n<p>Communication channel</p>\n"},{"name":"functions","data":{"ru":{"name":"functions","examples":[],"description":""},"en":{"name":"functions","examples":[],"description":""}},"jsdoc":"<h1 id=\"functions-Module\"><a href=\"#functions-Module\" class=\"anchor\"></a>functions Module</h1>\n<p>A set of helpers to work with JavaScript functions</p>\n<h2 id=\"isFunction---obj---→--Boolean-\"><a href=\"#isFunction---obj---→--Boolean-\" class=\"anchor\"></a>isFunction ( obj ) → {Boolean}</h2>\n<p>Checks whether a given object is function</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"noop---\"><a href=\"#noop---\" class=\"anchor\"></a>noop ()</h2>\n<p>Empty function</p>\n<h1 id=\"functions__debounce-Module\"><a href=\"#functions__debounce-Module\" class=\"anchor\"></a>functions__debounce Module</h1>\n<h2 id=\"-function----fn,-timeout,--invokeAsap=false-,--ctx----→--Function-\"><a href=\"#-function----fn,-timeout,--invokeAsap=false-,--ctx----→--Function-\" class=\"anchor\"></a><em>function</em> ( fn, timeout, [invokeAsap=false], [ctx] ) → {Function}</h2>\n<p>Debounces given function</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>fn {Function}<br/>\nfunction to debounce</li>\n<li>timeout {Number}<br/>\ndebounce interval</li>\n<li>[invokeAsap=false] {Boolean}<br/>\ninvoke before first interval</li>\n<li>[ctx] {Object}<br/>\ncontext of function invocation</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Function}</p>\n<p>debounced function</p>\n<h1 id=\"functions__throttle-Module\"><a href=\"#functions__throttle-Module\" class=\"anchor\"></a>functions__throttle Module</h1>\n<h2 id=\"-function----fn,-timeout,--invokeAsap=true-,--ctx----→--Function-\"><a href=\"#-function----fn,-timeout,--invokeAsap=true-,--ctx----→--Function-\" class=\"anchor\"></a><em>function</em> ( fn, timeout, [invokeAsap=true], [ctx] ) → {Function}</h2>\n<p>Throttle given function</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>fn {Function}<br/>\nfunction to throttle</li>\n<li>timeout {Number}<br/>\nthrottle interval</li>\n<li>[invokeAsap=true] {Boolean}<br/>\ninvoke before first interval</li>\n<li>[ctx] {Object}<br/>\ncontext of function invocation</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Function}</p>\n<p>throttled function</p>\n"},{"name":"i-bem","data":{"ru":{"name":"i-bem","examples":[],"description":"<h1 id=\"i-bem-js:-руководство-пользователя\"><a href=\"#i-bem-js:-руководство-пользователя\" class=\"anchor\"></a>i-bem.js: руководство пользователя</h1>\n<h2 id=\"i-bem-js:-JavaScript-фреймворк-для-БЭМ\"><a href=\"#i-bem-js:-JavaScript-фреймворк-для-БЭМ\" class=\"anchor\"></a>i-bem.js: JavaScript-фреймворк для БЭМ</h2>\n<p><code>i-bem.js</code> — специализированный JavaScript-фреймворк для веб-разработки\nв рамках <a href=\"https://ru.bem.info/method/\">БЭМ-методологии</a>.</p>\n<p><code>i-bem.js</code> позволяет:</p>\n<ul>\n<li>разрабатывать веб-интерфейс в терминах блоков, элементов, модификаторов;</li>\n<li>описывать логику работы блока в декларативном стиле — как набор состояний;</li>\n<li>легко интегрировать JavaScript-код с BEMHTML-шаблонами и CSS в стиле БЭМ;</li>\n<li>гибко переопределять поведение библиотечных блоков.</li>\n</ul>\n<p><code>i-bem.js</code> не предназначен:</p>\n<ul>\n<li>для замены фреймворка общего назначения, подобного jQuery.</li>\n</ul>\n<p><strong>Краткий обзор содержания документа</strong>:</p>\n<ul>\n<li><a href=\"#intro\">Общие сведения</a> о фреймворке: связь с понятиями предметной области БЭМ, краткое описание модульной структуры\nфреймворка, шаблонного проекта и инструментов для сборки кода,\nнаписанного с использованием <code>i-bem.js</code>.</li>\n<li><a href=\"#html\">Привязка JS-блоков к HTML</a> — синтаксис указания JS-блоков на\nHTML-странице, типы соотношения HTML-элементов и JS-блоков.</li>\n<li><a href=\"#decl\">Декларация блока</a> — синтаксис описания JS-блоков.</li>\n<li><a href=\"#dom\">Работа с DOM-деревом</a> — API для работы с DOM-узлами блоков:\nэлементы, динамическое изменение DOM-дерева (AJAX).</li>\n<li><a href=\"#events\">События</a> — событийная модель <code>i-bem.js</code>: DOM-события,\nБЭМ-события, делегирование событий.</li>\n<li><a href=\"#states\">Состояния блока</a> — модификаторы, триггеры на смену\nсостояний (установку модификаторов), инициализация экземпляров\nблоков.</li>\n<li><a href=\"#ibc\">Взаимодействие блоков</a> — API для обращения из блока к другим блокам.</li>\n<li><a href=\"#docs\">Что дальше?</a> — ссылки на документацию и дополнительные материалы.</li>\n</ul>\n<p><a name=\"intro\"></a></p>\n<h2 id=\"Общие-сведения\"><a href=\"#Общие-сведения\" class=\"anchor\"></a>Общие сведения</h2>\n<p><a name=\"intro-bem\"></a></p>\n<h3 id=\"БЭМ-методология-и-JavaScript\"><a href=\"#БЭМ-методология-и-JavaScript\" class=\"anchor\"></a>БЭМ-методология и JavaScript</h3>\n<p>С точки зрения БЭМ-методологии веб-интерфейс строится из независимых\n<strong>блоков</strong> (внутри которых могут быть выделены <strong>элементы</strong>). И блоки,\nи элементы могут иметь состояния, описываемые <strong>модификаторами</strong>.</p>\n<p>Работа веб-интерфейса обеспечивается несколькими <strong>технологиями</strong>\n(HTML, CSS, JS и т.д.). При использовании БЭМ-методологии вся реализация\nвеб-интерфейса разбита на компоненты по блокам. Описание блока в этой\nсхеме складывается из нескольких файлов — по одному на каждую технологию:</p>\n<ul>\n<li><code>my-block.css</code> — описывает внешний вид блока;</li>\n<li><code>my-block.bemhtml</code> — шаблоны для генерации HTML-представления блока;</li>\n<li><code>my-block.js</code> — описывает <strong>динамическое поведение</strong> блока в браузере.</li>\n</ul>\n<p>Фреймворк <code>i-bem.js</code> позволяет разложить клиентский JavaScript на компоненты в терминах БЭМ:</p>\n<ul>\n<li><strong>Блок</strong> — JS-компонент, описывающий логику работы однотипных\nэлементов интерфейса. Например, все кнопки могут быть реализованы\nв виде блока <code>button</code>. В этом случае, в соответствии с БЭМ-методологией,\n<code>button.css</code> определяет внешний вид всех кнопок, а <code>button.js</code> —\nлогику их работы.<br/>\nНа каждой странице может размещаться более одного <strong>экземпляра\nблока</strong> (например, кнопки). Каждому экземпляру блока соответствует\nJS-объект, динамически создаваемый в памяти браузера и хранящий\nсостояние данного экземпляра. JS-объект хранит ссылку на DOM-узел,\nк которому привязан данный экземпляр блока.</li>\n<li><strong>Элементы</strong> — DOM-узлы, вложенные в DOM-узел блока и имеющие атрибут\n<code>class</code>, указывающий на их роль в БЭМ-предметной области (имя блока\nи элемента). Элементы блока доступны через <a href=\"#elem-api\">JS-API</a>\nэкземпляра блока.</li>\n<li><strong>Модификаторы</strong> — хранят информацию о состоянии блока и его\nэлементов. Состояние модификаторов записывается в атрибуте <code>class</code>\nна DOM-узлах блока и элементов. Управление модификаторами\nпроизводится через <a href=\"#mods-api\">JS-API</a> экземпляра блока.</li>\n</ul>\n<p><a name=\"intro-use\"></a></p>\n<h3 id=\"Как-использовать-i-bem-js\"><a href=\"#Как-использовать-i-bem-js\" class=\"anchor\"></a>Как использовать i-bem.js</h3>\n<p>Фреймворк <code>i-bem.js</code> входит в состав библиотеки <a href=\"https://ru.bem.info/libs/bem-core/\">bem-core</a>.</p>\n<p>Реализация <code>i-bem.js</code> состоит из двух модулей:</p>\n<ul>\n<li><strong>Модуль <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/i-bem.vanilla.js\">i-bem</a></strong>.<br/>\nБазовая реализация JS-блока <code>i-bem</code>, от которой наследуются все блоки в\n<code>i-bem.js</code>. Блок <code>i-bem</code> написан с расчетом на использование в любом\nJS-окружении: как на клиенте, так и на сервере например, в\nNode.js).</li>\n<li><strong>Модуль <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a></strong>.<br/>\nБазовая реализация блока, привязанного к DOM-узлу.\nРассчитан на использование на клиенте, опирается на работу браузеров с DOM. Зависит от <code>jQuery</code>.</li>\n</ul>\n<p>Зависимости:</p>\n<ul>\n<li>jQuery (только для модуля <code>i-bem__dom</code>). При использовании <code>bem-core</code> отдельная установка\njQuery не требуется.</li>\n<li>Модульная система <a href=\"https://github.com/ymaps/modules\">ymaps/modules</a>. При использовании\n<a href=\"https://ru.bem.info/tools/bem/\">bem-tools</a> с технологией <code>.browser.js</code> (и производных от нее)\nэта зависимость удовлетворяется автоматически.</li>\n</ul>\n<p>Можно использовать <code>i-bem.js</code> как часть полного стека\nБЭМ-инструментов. В этом случае свой проект удобно создавать на основе\nшаблонного репозитория <a href=\"https://github.com/bem/project-stub/\">project-stub</a>, в котором настроена автоматическая установка зависимых библиотек.</p>\n<p>Если не планируется использование других технологий БЭМ-платформы,\nдостаточно скопировать код библиотеки <code>bem-core</code> в существующий проект.</p>\n<p><a name=\"intro-build\"></a></p>\n<h3 id=\"Сборка\"><a href=\"#Сборка\" class=\"anchor\"></a>Сборка</h3>\n<p>Разработка в рамках БЭМ-методологии ведется модульно — каждый блок\nпрограммируется отдельно. Финальный исходный код веб-страниц\nформируется из кода отдельных блоков с помощью процедур <strong>сборки</strong>.</p>\n<p>В файловой системе блок удобно представлять в виде каталога, а реализацию блока в каждой из технологий — в виде отдельного файла:</p>\n<pre><code class=\"lang-html\">    desktop.blocks/\n        my-block/\n            my-block.css\n            my-block.js\n            my-block.bemhtml\n            ...\n\n    desktop.blocks/\n        other-block/\n            other-block.css\n            other-block.js\n            other-block.bemhtml\n            ...\n</code></pre>\n<p>Для каждой веб-страницы код использованных на ней блоков может быть собран в единые файлы:</p>\n<pre><code class=\"lang-html\">    desktop.bundles/\n        index/\n            index.html\n            index.css\n            index.js\n            ...\n</code></pre>\n<p>Для сборки кода результирующих веб-страниц из отдельных\nописаний блоков существует два инструмента:</p>\n<ul>\n<li><a href=\"https://ru.bem.info/tools/bem/bem-tools/\">bem-tools</a>;</li>\n<li><a href=\"https://github.com/enb-make/enb\">enb</a> совместно с <a href=\"https://github.com/enb-make/enb-modules\">enb-modules</a>.</li>\n</ul>\n<p><a name=\"intro-name\"></a></p>\n<h3 id=\"Почему-i-bem-js-так-называется\"><a href=\"#Почему-i-bem-js-так-называется\" class=\"anchor\"></a>Почему i-bem.js так называется</h3>\n<p>В соответствии с БЭМ-методологией, базовая JS-библиотека БЭМ-платформы изначально разрабатывалась\nкак особый служебный блок. Такой подход позволяет работать с базовыми библиотеками так же, как\nи с обычными блоками. В частности, структурировать код в терминах элементов и модификаторов и\nгибко настраивать поведение библиотеки на разных уровнях переопределения.</p>\n<p>Служебным блокам в БЭМ было принято давать имена с префиксом <code>i-</code>. Таким образом, имя <code>i-bem.js</code>\nчитается как <em>реализация блока <code>i-bem</code> в технологии <code>JS</code></em>.</p>\n<p><a name=\"html\"></a></p>\n<h2 id=\"Привязка-JS-блоков-к-HTML\"><a href=\"#Привязка-JS-блоков-к-HTML\" class=\"anchor\"></a>Привязка JS-блоков к HTML</h2>\n<p>JavaScript-компоненты в <code>i-bem.js</code> служат для «оживления» HTML-элементов\nстраницы. Типовая задача JS-блока — привязать обработку определенных событий к\nуказанному HTML-фрагменту.</p>\n<p>При разработке веб-интерфейса в <code>i-bem.js</code> первичным «каркасом»\nявляется HTML-дерево документа. В HTML-дереве размечаются точки, к\nкоторым привязаны интерактивные элементы интерфейса — JS-блоки.\nТочка привязки JS-блока — HTML-элемент, в атрибуте <code>class</code> которого\nуказано имя блока, а в атрибуте <code>data-bem</code> — <a href=\"#html-syntax\">параметры блока</a>.</p>\n<p>При загрузке страницы в браузере выполняется\n<a href=\"#init\">инициализация блоков</a>. В процессе инициализации создаются\nэкземпляры блоков — JS-объекты для всех блоков, упомянутых в\nHTML-элементах на странице. JS-объект, привязанный к HTML-элементу,\nобрабатывает происходящие на нем <a href=\"#dom-events\">DOM-события</a> и хранит\nсостояние данного экземпляра блока.</p>\n<p><code>i-bem.js</code> дает возможность реализовать JS-компонент, не привязанный к\nHTML, — <a href=\"#i-blocks\">блок без DOM-представления</a>. Такой блок предоставляет API, аналогичное обычным JS-блокам.</p>\n<p>Описанный подход привязки JavaScript-компонентов к HTML имеет следующие преимущества:</p>\n<ul>\n<li>естественная деградация интерфейса на клиентах с отключенным JavaScript;</li>\n<li>прогрессивный рендеринг — возможность начинать отрисовку элементов интерфейса\nдо окончания загрузки всех данных страницы (например, изображений).</li>\n</ul>\n<p><a name=\"html-syntax\"></a></p>\n<h3 id=\"Синтаксис-привязки-блоков\"><a href=\"#Синтаксис-привязки-блоков\" class=\"anchor\"></a>Синтаксис привязки блоков</h3>\n<p>Чтобы привязать блок к HTML-элементу (например, <code>&lt;div&gt;...&lt;/div&gt;</code>), необходимо:</p>\n<ul>\n<li><strong>Отметить блок в HTML-дереве</strong>.<br/>\nВключить имя блока в список классов HTML-элемента (атрибут <code>class</code>).</li>\n</ul>\n<pre><code class=\"lang-html\"> &lt;div class=&quot;my-block&quot;&gt;...&lt;/div&gt;\n</code></pre>\n<ul>\n<li><strong>Инициализировать экземпляр блока</strong>.<br/>\nВключить класс <code>i-bem</code> в список классов HTML-элемента. Наличие этого класса позволит фреймворку инициализировать блок.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem&quot;&gt;...&lt;/div&gt;\n</code></pre>\n<ul>\n<li><strong>Передать параметры экземпляру блока</strong>.<br/>\nПоместить параметры блока в атрибут <code>data-bem</code>. Параметры блока записываются в формате\nJSON и представляют собой хэш вида: <code>имя блока</code> - <code>хэш параметров</code>. Параметры\nпередаются экземпляру блока <a href=\"#data-bem\">в момент инициализации</a>.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem&quot; data-bem=&#39;{ &quot;my-block&quot;: { &quot;name&quot;: &quot;ya&quot; } }&#39;&gt;...&lt;/div&gt;\n</code></pre>\n<p>Одному HTML-элементу не обязательно должен соответствовать один\nэкземпляр блока. Возможны следующие типы связи между блоками и HTML-элементами:</p>\n<ul>\n<li><a href=\"#html-simple\">Один HTML-элемент — один JS-блок</a>;</li>\n<li><a href=\"#html-mixes\">Один HTML-элемент — несколько JS-блоков</a>;</li>\n<li><a href=\"#distrib-block\">Один JS-блок на нескольких HTML-элементах</a>;</li>\n<li><a href=\"#i-blocks\">Блоки без DOM-представления</a>.</li>\n</ul>\n<p><a name=\"html-simple\"></a></p>\n<h4 id=\"Один-HTML-элемент-—-один-JS-блок\"><a href=\"#Один-HTML-элемент-—-один-JS-блок\" class=\"anchor\"></a>Один HTML-элемент — один JS-блок</h4>\n<p>Самый простой и распространенный способ привязки блоков к HTML.</p>\n<p><strong>Пример:</strong> HTML-элемент <code>div</code>, на котором размещен блок <code>my-block</code>.\nПараметры блока: пустой список <code>{}</code>.</p>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem&quot; data-bem=&#39;{ &quot;my-block&quot;: {} }&#39;&gt;\n    ...\n&lt;/div&gt;\n</code></pre>\n<p><a name=\"html-mixes\"></a></p>\n<h4 id=\"Один-HTML-элемент-—-несколько-JS-блоков\"><a href=\"#Один-HTML-элемент-—-несколько-JS-блоков\" class=\"anchor\"></a>Один HTML-элемент — несколько JS-блоков</h4>\n<p>Техника размещения нескольких блоков на одном HTML-элементе в БЭМ-методологии называется <strong>микс</strong>.</p>\n<p><strong>Пример:</strong> HTML-элемент <code>div</code>, на котором размещены:</p>\n<ul>\n<li>блок <code>user</code> с параметром <code>name</code>: <code>pushkin</code>;</li>\n<li>блок <code>avatar</code> с параметром <code>img</code>: <code>http://...</code>.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;user avatar i-bem&quot;\n    data-bem=&#39;{\n        &quot;user&quot;: { &quot;name&quot;: &quot;pushkin&quot; },\n        &quot;avatar&quot;: { &quot;img&quot;: &quot;http://...&quot; }\n     }&#39;&gt;\n     ...\n&lt;/div&gt;\n</code></pre>\n<p><a name=\"distrib-block\"></a></p>\n<h4 id=\"Один-JS-блок-на-нескольких-HTML-элементах\"><a href=\"#Один-JS-блок-на-нескольких-HTML-элементах\" class=\"anchor\"></a>Один JS-блок на нескольких HTML-элементах</h4>\n<p>Такой дизайн позволяет прозрачно реализовывать блоки, состоящие из\nнескольких компонентов, состояние которых должно быть согласовано. Например, виджет «вкладки»,\nгде клик по заголовку вкладки (первый HTML-элемент), меняет содержимое вкладки (второй HTML-элемент).\nДругой пример: маркер, обозначающий точку на карте (первый элемент),\nи связанное с ним описание точки в списке рядом с картой (второй элемент).</p>\n<p>Чтобы привязать экземпляр блока к нескольким HTML-элементам, в параметрах блока необходимо\nуказать одинаковое значение <code>id</code> для всех связанных с блоком HTML-элементов.\nВ качестве значения <code>id</code> может выступать произвольная строка.</p>\n<p><strong>Пример:</strong> Экземпляр блока <code>notebook</code> привязан к HTML-элементам <code>div</code> и <code>span</code>.\nВ параметрах блока указан общий <code>id</code> — <code>maintab</code>.</p>\n<pre><code class=\"lang-html\">&lt;div class=&quot;notebook i-bem&quot; data-bem=&#39;{ &quot;notebook&quot;: { &quot;id&quot;: &quot;maintab&quot; }}&#39;&gt;\n&lt;/div&gt;\n...\n&lt;span class=&quot;notebook i-bem&quot; data-bem=&#39;{ &quot;notebook&quot;: { &quot;id&quot;: &quot;maintab&quot; }}&#39;&gt;\n&lt;/span&gt;\n</code></pre>\n<p>В результате при инициализации блоков создается один JS-объект, поле\n<a href=\"#domElem\"><code>{jQuery} domElem</code></a> которого содержит ссылки на оба DOM-узла.</p>\n<p>Идентификатор <code>id</code> используется <em>только в момент инициализации</em>\nэкземпляра блока. Значение <code>id</code> должно быть уникальным в пределах\nэкземпляров одного блока, в рамках одной <a href=\"#init-wave\">волны инициализации</a>.</p>\n<p><a name=\"i-blocks\"></a></p>\n<h4 id=\"Блоки-без-DOM-представления\"><a href=\"#Блоки-без-DOM-представления\" class=\"anchor\"></a>Блоки без DOM-представления</h4>\n<p>Инфраструктурный код, решающий общие задачи интерфейса (связь с\nбэкэндом, общие вычисления и т.п.), при работе с <code>i-bem.js</code> можно\nоформлять в виде блока, как и весь прочий JS-код. Чтобы не приходилось привязывать\nтакие блоки к HTML-дереву искусственно, <code>i-bem.js</code> предоставляет\nвозможность создавать блоки без DOM-представления.</p>\n<p>Блоки без DOM-представления:</p>\n<ul>\n<li>не указываются в HTML-коде страницы;</li>\n<li>декларируются как <a href=\"#bem-decl\">доопределение модуля <code>i-bem</code></a>, а не <code>i-bem__dom</code>\n(как блоки с DOM-представлением);</li>\n<li>должны быть <a href=\"#init-bem\">инициализированы явно</a>.</li>\n</ul>\n<p><a name=\"data-bem\"></a></p>\n<h3 id=\"Синтаксис-передачи-параметров\"><a href=\"#Синтаксис-передачи-параметров\" class=\"anchor\"></a>Синтаксис передачи параметров</h3>\n<p>Параметры блока хранятся в атрибуте <code>data-bem</code> HTML-элемента\nи передаются блоку в момент инициализации. Параметры позволяют\nмодифицировать поведение экземпляра блока, привязанного к данному\nHTML-элементу.</p>\n<p>В значении атрибута <code>data-bem</code> указываются параметры <em>всех JS-блоков, размещенных на данном узле</em>.\nПараметры передаются в формате JSON в виде хэша:</p>\n<ul>\n<li>ключ — <code>{String}</code>, имя блока;</li>\n<li>значение — <code>{Object}</code>, параметры данного блока. Если данному экземпляру блока не требуются\nпараметры, указывается пустой хэш <code>{}</code>.</li>\n</ul>\n<p>Значение атрибута <code>data-bem</code> должно содержать валидный JSON.</p>\n<p>Такой формат параметров продиктован следующими соображениями:</p>\n<ul>\n<li>Указание имени блока в параметрах позволяет избежать необходимости\nпарсить значение атрибута <code>class</code>, что упрощает и ускоряет\nинициализацию блоков.</li>\n<li>Это же решение позволяет размещать несколько блоков на одном\nHTML-элементе без необходимости множить атрибуты элемента.</li>\n</ul>\n<p><a name=\"decl\"></a></p>\n<h2 id=\"Декларация-блока\"><a href=\"#Декларация-блока\" class=\"anchor\"></a>Декларация блока</h2>\n<p>JS-реализация блока описывает поведение определенного класса элементов веб-интерфейса. В конкретных\nинтерфейсах каждый блок может быть представлен несколькими экземплярами. Каждый экземпляр блока реализует\nфункциональность всего класса и имеет собственное состояние, независимое от остальных.</p>\n<p>В терминах парадигмы объектно-ориентированного программирования:</p>\n<ul>\n<li>блок — класс;</li>\n<li>экземпляр блока — экземпляр класса.</li>\n</ul>\n<p>В соответствии с ООП, вся функциональность блока реализуется модульно в методах класса <em>(=блока)</em>.</p>\n<p>Методы блока подразделяются на:</p>\n<ul>\n<li>методы экземпляра блока;</li>\n<li>статические методы.</li>\n</ul>\n<p>Код блока в <code>i-bem.js</code> принято называть <strong>декларацией</strong>, чтобы подчеркнуть принятый\nв БЭМ декларативный стиль программирования. Поведение блока программируется\nв декларативном стиле в виде утверждений: <code>набор условий</code> — <code>реакция блока</code>.</p>\n<p><a name=\"decl-syntax\"></a></p>\n<h3 id=\"Синтаксис-декларации\"><a href=\"#Синтаксис-декларации\" class=\"anchor\"></a>Синтаксис декларации</h3>\n<p>Чтобы задекларировать новый JS-блок <strong>с DOM-представлением</strong> (привязанный к HTML-элементу), необходимо доопределить <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуль <code>i-bem__dom</code>.</p>\n<p>Блоки декларируются с помощью метода <code>decl</code>, принимающего три\nпараметра:</p>\n<ol>\n<li>Имя блока <code>{String}</code> или <a href=\"#decl-selector\">описание блока</a> <code>{Object}</code>.</li>\n<li>Методы экземпляра блока — <code>{Object}</code>.</li>\n<li>Статические методы — <code>{Object}</code>.</li>\n</ol>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(/* имя или описание блока */,\n    {\n        /* методы экземпляра */\n    },\n    {\n        /* статические методы */\n    }\n);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p><strong>NB</strong> С точки зрения модульной системы <a href=\"https://github.com/ymaps/modules\">ymaps</a>, декларации разных\nблоков представляют собой переопределение одного и того же модуля\n<code>i-bem__dom</code>. Однако, с точки зрения <code>i-bem.js</code>, таким образом создаются\n<em>разные объекты</em> для построения экземпляров блоков.</p>\n<p><a name=\"bem-decl\"></a>\nБлоки, не имеющие DOM-представления, декларируются как доопределение <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуля <code>i-bem</code>.\nДля декларации используется метод <code>decl</code>, принимающий те же параметры,\nчто и метод <code>decl</code> модуля <code>i-bem__dom</code>:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem&#39;, function(provide, BEM) {\n\nBEM.decl(/* имя или описание блока */,\n    {\n        /* методы экземпляра */\n    },\n    {\n        /* статические методы */\n    }\n);\n\nprovide(BEM);\n\n});\n</code></pre>\n<hr>\n<p><strong>NB</strong> Оформлять инфраструктурный код в виде блока без\nDOM-представления удобно, если в нем планируется использовать API\nБЭМ-блоков (состояния, выражаемые модификаторами, БЭМ-события и\nт. п.). Если использовать БЭМ-предметную область не планируется,\nинфраструктурный код можно оформлять в виде <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуля.</p>\n<p><strong>Пример:</strong></p>\n<pre><code class=\"lang-js\">modules.define(&#39;router&#39;, function(provide) {\n\nprovide({\n    route : function() { /* ... */ }\n});\n\n});\n</code></pre>\n<hr>\n<p><a name=\"decl-selector\"></a></p>\n<h3 id=\"Описание-блока-в-декларации\"><a href=\"#Описание-блока-в-декларации\" class=\"anchor\"></a>Описание блока в декларации</h3>\n<p>Первый параметр метода <code>decl</code> представляет собой описание блока, в\nкотором будут применяться объявленные в декларации методы. Описание\nобязательно содержит имя блока и может дополнительно содержать:</p>\n<ul>\n<li>ограничение сферы действия декларации определенной модификацией\nблока;</li>\n<li>список родительских блоков, методы которых должен наследовать данный\nблок.</li>\n</ul>\n<p>Описание может быть задано в одной из двух форм:</p>\n<ul>\n<li><p><strong>Имя блока — строка</strong>.<br/>\n Объявленные методы будут применяться во всех экземплярах блока независимо от их состояний (модификаторов).<br/>\n<strong>Пример:</strong> Декларация методов для блока <code>button</code>.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;button&#39;,\n  { /* методы экземпляра */ },\n  { /* статические методы */ }\n);\n</code></pre>\n</li>\n<li><p><strong>Описание блока — хэш</strong>.<br/>\nСодержит имя (и значение) модификатора. Объявленные методы будут применяться только к тем\nэкземплярам блока, у которых присутствует данный модификатор (с\nуказанным значением).<br/>\n<strong>Пример:</strong> Декларация методов для блока <code>button</code> с модификатором\n<code>type</code> в значении <code>link</code> (описывает поведение псевдокнопок):</p>\n<pre><code class=\"lang-js\">BEMDOM.decl({ block: &#39;button&#39;, modName: &#39;type&#39;, modVal: &#39;link&#39; },\n  { /* методы экземпляра */ },\n  { /* статические методы */ }\n);\n</code></pre>\n</li>\n</ul>\n<p><strong>NB</strong> Cтатические методы блока будут доступны всем его экземплярам <em>вне зависимости от значений модификаторов</em>.\nМодификаторы являются свойствами экземпляров блоков, а статические методы принадлежат классу\nблока и не учитывают состояния модификаторов.</p>\n<p><a name=\"inher\"></a></p>\n<h3 id=\"Наследование-блока\"><a href=\"#Наследование-блока\" class=\"anchor\"></a>Наследование блока</h3>\n<p>Одна и та же функциональность может быть востребована в нескольких блоках проекта.\nНапример, разные блоки могут обращаться за данными к бэкенду, используя AJAX,\nили совершать однотипные операции с DOM-деревом и т.д. Чтобы избежать ненужных повторов в коде,\nобщую функциональность можно инкапсулировать в виде модулей, а затем добавлять к блокам.</p>\n<p>Наследование позволяет повторно использовать функциональность блока, расширяя ее новой логикой.\nВ <code>i-bem.js</code> доступно несколько механизмов наследования. Выбор конкретного механизма зависит от специфики создаваемого блока.</p>\n<p><a name=\"inher-simple\"></a></p>\n<h4 id=\"Простое-наследование\"><a href=\"#Простое-наследование\" class=\"anchor\"></a>Простое наследование</h4>\n<p>В случае простого наследования создаваемый блок объявляется как наследник существующего. Для этого нужно:</p>\n<ol>\n<li>Указать базовый блок в зависимостях модульной системы.</li>\n<li>Передать ссылку на базовый блок в специальном поле декларации <code>baseBlock</code>.</li>\n</ol>\n<pre><code class=\"lang-js\">modules.define(&#39;ablock&#39;, [&#39;i-bem__dom&#39;], function(provide, BEMDOM) {\n\nprovide(BEMDOM.decl(this.name, {}));\n\n});\n\nmodules.define(&#39;bblock&#39;, [&#39;i-bem__dom&#39;, &#39;ablock&#39;], function(provide, BEMDOM, ABlock) {\n\nprovide(BEMDOM.decl({ block : this.name, baseBlock : ABlock ));\n\n});\n</code></pre>\n<p>Такой механизм позволяет использовать методы родительского блока внутри производного.\nДля доступа к методам родителя служит специальное поле контекста <code>this.__base</code>.</p>\n<p><strong>NB</strong> В <code>i-bem</code> можно создавать цепочки наследования – блок наследуется от другого,\nкоторый, в свою очередь, наследуется от третьего и т.д.</p>\n<p><a name=\"inher-over\"></a></p>\n<h4 id=\"Доопределение-существующего-блока\"><a href=\"#Доопределение-существующего-блока\" class=\"anchor\"></a>Доопределение существующего блока</h4>\n<p>При наследовании можно сохранить основную функциональность базового блока.\nДля этого можно <strong>доопределить</strong> базовый блок новым на уровне переопределения проекта.\nСоздаваемый в проекте блок реализует собственную логику, дополняющую или переопределяющую логику базового.\nТакая схема наследования часто используется при работе с библиотечными блоками.</p>\n<p>Чтобы доопределить существующий блок нужно создать новый блок с тем же именем.\nПересекающиеся методы и модификаторы будут определены в соответствие с декларацией нового блока.</p>\n<pre><code class=\"lang-js\">modules.define(&#39;ablock&#39;, [&#39;i-bem__dom&#39;], function(provide, BEMDOM) {\n\nprovide(BEMDOM.decl(this.name, {})); // Объявляем базовый блок\n\n});\n\nmodules.define(&#39;ablock&#39;, function(provide, ABlock) {\n\nprovide(ABlock.decl({})); // Доопределяем базовый блок\n\n});\n</code></pre>\n<p><a name=\"inher-over-modifier\"></a></p>\n<h5 id=\"Добавление-модификатора-к-существующему-блоку\"><a href=\"#Добавление-модификатора-к-существующему-блоку\" class=\"anchor\"></a>Добавление модификатора к существующему блоку</h5>\n<p>В соответствии с БЭМ-методологией состояния блока должны описываться <a href=\"#modifiers\">модификаторами</a>.\nПоэтому расширение функциональности блока часто предполагает реализацию поддержки новых модификаторов.</p>\n<p>Для добавления модификатора необходимо передать методу <code>decl</code> доопределяемого блока:</p>\n<ul>\n<li>хеш с ключами <code>modName</code> и <code>modVal</code>. Значением для <code>modName</code> служит строка – имя модификатора. Значением <code>modVal</code> – строка со значением модификатора.</li>\n<li>хеш с реализацией методов, которые будут доступны для блока с соответствующим модификатором. Пересекающиеся методы будут переопределены методами из хеша.</li>\n</ul>\n<pre><code class=\"lang-js\">modules.define(&#39;ablock&#39;, [&#39;i-bem__dom&#39;], function(provide, BEMDOM) {\n\nprovide(BEMDOM.decl(this.name, {})); // Объявляем базовый блок\n\n});\n\nmodules.define(&#39;ablock&#39;, function(provide, ABlock) {\n\nprovide(ABlock.decl({ modName : &#39;m1&#39;, modVal : &#39;v1&#39; }, {})); // Доопределяем базовый блок с модификтором _m1_v1\n\n});\n</code></pre>\n<p><a name=\"inher-mixins\"></a></p>\n<h4 id=\"Блоки-миксы\"><a href=\"#Блоки-миксы\" class=\"anchor\"></a>Блоки-миксы</h4>\n<p>В <code>i-bem.js</code> для добавления востребованной функциональности к блокам, используется специальный\nтип блоков – <strong>блоки-миксы</strong>. Главная особенность блоков-миксов состоит в том, что они не участвуют\nв цепочке наследования. Это позволяет примешивать реализованную в них функциональность к другим блокам\nбез риска нарушения их связей с родительскими блоками (вызов базовых методов (<code>this.__base</code>) и т.д.).</p>\n<p><a name=\"inher-mixins-declwithmix\"></a></p>\n<h5 id=\"Описание-блока-микса-в-декларации\"><a href=\"#Описание-блока-микса-в-декларации\" class=\"anchor\"></a>Описание блока-микса в декларации</h5>\n<p>Чтобы подмешать к блоку один или несколько блоков-миксов, необходимо в декларации блока присвоить\nзначение опциональному полю <code>baseMix</code>.  Значением служит массив имен примешиваемых блоков-миксов:</p>\n<pre><code class=\"lang-js\">BEM.decl({ block: &#39;myblock&#39;, baseMix: [&#39;foo&#39;, &#39;bar&#39;]},\n    { /* методы экземпляра */ },\n    { /* статические методы */ }\n);\n</code></pre>\n<p><a name=\"inher-mixins-mixindecl\"></a></p>\n<h5 id=\"Декларация-блока-микса\"><a href=\"#Декларация-блока-микса\" class=\"anchor\"></a>Декларация блока-микса</h5>\n<p>В качестве блоков-миксов можно использовать только блоки, созданные с помощью <code>declMix</code>.\nЭтот метод принимает декларацию блока в формате, аналогичном методу <code>decl</code>:</p>\n<pre><code class=\"lang-js\">BEMDOM.declMix(&#39;mymix&#39;,\n    { /* свойства и методы экземпляра */ },\n    { /* статические свойства и методы */ }\n);\n</code></pre>\n<p><strong>NB</strong> Первым аргументом в декларации блока-микса всегда выступает строка – имя блока.\nЭто связано с тем, что для блоков-миксов не предполагаются возможности использования модификаторов или примешивания блоков.</p>\n<p><a name=\"context\"></a></p>\n<h3 id=\"Контекст\"><a href=\"#Контекст\" class=\"anchor\"></a>Контекст</h3>\n<p><strong>Методы экземпляра блока</strong> исполняются в контексте JS-объекта\nэкземпляра блока. Соответственно, ключевое слово <code>this</code> в методах\nэкземпляра блока ссылается на JS-объект <strong>экземпляра блока</strong>.</p>\n<p><strong>Статические методы</strong> исполняются в контексте JS-объекта,\nсоответствующего классу блока. Соответственно, ключевое слово <code>this</code>\nв статических методах блока ссылается на <strong>класс блока</strong>, а не на\nэкземпляр.</p>\n<p>Контекст содержит зарезервированные поля:</p>\n<ul>\n<li><code>this.__self</code>: cсылается на статические методы класса, к которому\nпринадлежит экземпляр. Определен в методах экземпляра блока. Для\nстатических методов не имеет смысла и не определен.<br/>\n<strong>Пример:</strong> Вызов статического метода <code>staticMethod</code> в методе\n<code>onEvent</code> экземпляра блока <code>my-block</code>.</li>\n</ul>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;my-block&#39;, {\n    onEvent: function() {\n        this.__self.staticMethod(); // вызов статического метода\n        this.doMore();\n    },\n    {\n        staticMethod: function() { /* ... */ }; // определение статического метода\n    }\n});\n</code></pre>\n<ul>\n<li><code>this.__base</code>: cсылается на реализацию метода в базовом классе, от которого наследуется данный.\nПозволяет выполнить <code>super call</code>. Определен в методах экземпляра\nблока и в статических методах блока.<br/>\n<strong>Пример:</strong> вызов (и модификация) метода <code>_onClick</code> родительского класса (базовой реализации метода в классе <code>button</code>).</li>\n</ul>\n<pre><code class=\"lang-js\">BEMDOM.decl({ block: &#39;my-button&#39;, baseBlock: &#39;button&#39; }, {\n    _onClick: function() {\n        this.__base();\n        this.doMore();\n    }\n);\n</code></pre>\n<hr>\n<p><strong>NB</strong> Так как блоки-миксы не участвуют в цепочке наследования, внутри них нельзя использовать <code>__base</code> для обращения к родительскому блоку.</p>\n<hr>\n<p><strong>NB</strong> При разработке блоков с использованием <code>i-bem.js</code> внутренним\nметодам блока, не предназначенным для использования извне, принято\nдавать имена, начинающиеся с символа подчеркивания. Например,\n<code>_onClick</code>.</p>\n<hr>\n<p><a name=\"dom\"></a></p>\n<h2 id=\"Работа-с-DOM-деревом\"><a href=\"#Работа-с-DOM-деревом\" class=\"anchor\"></a>Работа с DOM-деревом</h2>\n<p><a name=\"domElem\"></a></p>\n<h3 id=\"DOM-узел-экземпляра-блока\"><a href=\"#DOM-узел-экземпляра-блока\" class=\"anchor\"></a>DOM-узел экземпляра блока</h3>\n<p>Все экземпляры блоков, привязанные к DOM-дереву, содержат в поле\n<code>{jQuery} this.domElem</code> jQuery-объект, ссылающийся на один или\nнесколько DOM-узлов, с которыми связан данный экземпляр блока.</p>\n<p><a name=\"elem-api\"></a></p>\n<h3 id=\"Элементы\"><a href=\"#Элементы\" class=\"anchor\"></a>Элементы</h3>\n<p>БЭМ-элементы блоков представлены в <code>i-bem.js</code> как DOM-узлы, вложенные\nв DOM-узел экземпляра блока. Для обращения к DOM-узлам элементов и\nработы с их модификаторами, следует использовать API, предоставляемый\nэкземпляром блока.</p>\n<p>Экземпляр блока предоставляет два метода для обращения к элементам данного экземпляра:</p>\n<ul>\n<li>Кэширующий доступ: <code>elem(elems, [modName], [modVal])</code>. Элемент,\nполученный таким образом, не требуется сохранять в переменную.</li>\n</ul>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;link&#39;, {\n    setInnerText: function() {\n        this.elem(&#39;inner&#39;).text(&#39;Текст ссылки&#39;);\n        /* ... */\n        this.elem(&#39;inner&#39;).text(&#39;Другой текст&#39;);\n    }\n);\n</code></pre>\n<ul>\n<li>Некэширующий доступ: <code>findElem(elems, [modName], [modVal])</code>.</li>\n</ul>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;link&#39;, {\n    setInnerText: function() {\n        var inner = this.findElem(&#39;inner&#39;);\n        inner.text(&#39;Текст ссылки&#39;);\n        /* ... */\n        inner.text(&#39;Другой текст&#39;);\n    }\n});\n</code></pre>\n<p>При <a href=\"#dynamic\">динамическом добавлении и удалении элементов блока</a> может\nвозникнуть необходимость сброса кэша элементов. Для этого предназначен\nметод <code>dropElemCache(&#39;elements&#39;)</code>. В качестве параметра указывается\nразделенный пробелами список имен элементов, кэш которых нужно сбросить:</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;attach&#39;, {\n    clear: function() {\n        BEMDOM.destruct(this.elem(&#39;control&#39;));\n        BEMDOM.destruct(this.elem(&#39;file&#39;));\n        return this.dropElemCache(&#39;control file&#39;);\n    }\n});\n</code></pre>\n<p>Полное описание API для работы с элементами содержится в\nисходном коде модуля <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><a name=\"dynamic\"></a></p>\n<h3 id=\"Динамическое-обновление-блоков-и-элементов-в-DOM-дереве\"><a href=\"#Динамическое-обновление-блоков-и-элементов-в-DOM-дереве\" class=\"anchor\"></a>Динамическое обновление блоков и элементов в DOM-дереве</h3>\n<p>В современных интерфейсах зачастую необходимо создавать новые\nфрагменты DOM-дерева и заменять старые в процессе работы (AJAX). В\n<code>i-bem.js</code> предусмотрены следующие функции для добавления и замены\nфрагментов DOM-дерева.</p>\n<ul>\n<li><p>Добавить DOM-фрагмент:</p>\n<ul>\n<li><code>append</code> —  в конец указанного контекста;</li>\n<li><code>prepend</code> — в начало указанного контекста;</li>\n<li><code>before</code> — перед указанным контекстом;</li>\n<li><code>after</code> — после указанного контекста;</li>\n</ul>\n</li>\n<li><p>Заместить DOM-фрагмент:</p>\n<ul>\n<li><code>update</code> —  внутри указанного контекста;</li>\n<li><code>replace</code> — заменить указанный контекст новым DOM-фрагментом.</li>\n</ul>\n</li>\n</ul>\n<p>Все функции автоматически выполняют <a href=\"#init-ajax\">инициализацию блоков на обновленном фрагменте DOM-дерева</a>.</p>\n<p>Чтобы упростить создание БЭМ-сущностей на обновляемых фрагментах\nDOM-дерева, можно использовать шаблонизатор\n<a href=\"https://ru.bem.info/technology/bemhtml/current/intro/\">BEMHTML</a>, подключив\nего в качестве <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуля. БЭМ-сущности описываются в формате\n<a href=\"https://ru.bem.info/technology/bemjson/current/bemjson/\">BEMJSON</a>\nнепосредственно в коде блока. Функция <code>BEMHTML.apply</code> генерирует\nHTML-элементы по BEMJSON-описанию в соответствии с правилами\nименования БЭМ.</p>\n<p><strong>Пример:</strong> В методе <code>_updateFileElem</code> блока <code>attach</code> выполняются\nудаление элемента <code>file</code>, если он существовал, и генерация нового\nэлемента с помощью функции <code>BEMHTML.apply</code>:</p>\n<pre><code class=\"lang-js\">modules.define(\n    &#39;i-bem__dom&#39;,\n    [&#39;BEMHTML&#39;, &#39;strings__escape&#39;],\n    function(provide, BEMHTML, escape, BEMDOM) {\n\nprovide(BEMDOM.decl(&#39;attach&#39;, {\n    _updateFileElem : function() {\n        var fileName = extractFileNameFromPath(this.getVal());\n        this.elem(&#39;file&#39;).length &amp;&amp; BEMDOM.destruct(this.elem(&#39;file&#39;));\n        BEMDOM.append(\n            this.domElem,\n            BEMHTML.apply({\n                block : &#39;attach&#39;,\n                elem : &#39;file&#39;,\n                content : [\n                    {\n                        elem : &#39;icon&#39;,\n                        mods : { file : extractExtensionFromFileName(fileName) }\n                    },\n                    { elem : &#39;text&#39;, content : escape.html(fileName) },\n                    { elem : &#39;clear&#39; }\n                ]\n            }));\n        return this.dropElemCache(&#39;file&#39;);\n    }\n}));\n\n});\n</code></pre>\n<p><a name=\"events\"></a></p>\n<h2 id=\"События\"><a href=\"#События\" class=\"anchor\"></a>События</h2>\n<p>В <code>i-bem.js</code> поддерживается два вида событий:</p>\n<p><a name=\"dom-events\"></a></p>\n<ul>\n<li><strong>DOM-событие</strong> — JavaScript-событие на DOM-узле, связанном с\nблоком. Отражает взаимодействие пользователя с интерфейсом (клик,\nнаведение мыши, ввод текста и т.п.). DOM-событие обычно обрабатывает\nтот экземпляр блока, на DOM-узле которого оно возникло.</li>\n<li><strong>БЭМ-событие</strong> — собственное событие, генерируемое\nблоком. Позволяет организовать API для\n<a href=\"#ibc\">взаимодействия с блоком</a>. БЭМ-событие обычно обрабатывает\nэкземпляр блока, отслеживающий состояние других блоков, на которых\nгенерируются события.</li>\n</ul>\n<p>Планируя архитектуру интерфейса, нужно учитывать, что DOM-события\nследует использовать только во <em>внутренних</em> процедурах блока. Для\nвзаимодействия блока с <em>внешней</em> средой (другими блоками),\nпредназначены БЭМ-события.</p>\n<p><strong>NB</strong> Работа с DOM-событиями полностью реализована средствами\nфреймворка jQuery.</p>\n<p><a name=\"delegated-events\"></a></p>\n<h3 id=\"Делегирование-событий\"><a href=\"#Делегирование-событий\" class=\"anchor\"></a>Делегирование событий</h3>\n<p>Обработка БЭМ- и DOM-событий может быть <strong>делегирована</strong> контейнеру\n(всему документу или конкретному DOM-узлу). В этом случае контейнер\nслужит точкой обработки событий, возникающих на любом из\nдочерних узлов контейнера, даже если в момент подписки на события\nнекоторые из дочерних узлов еще не существовали.</p>\n<p>Блок меню может содержать вложенные блоки (или элементы, в\nзависимости от конкретной реализации блока): например, пункты меню. Обработку\nкликов на пунктах меню имеет смысл делегировать самому блоку\nменю. Это, во-первых, позволяет сэкономить затраты ресурсов на\nподписку на события (дешевле подписаться на одно событие контейнера,\nчем на много событий элементов). Во-вторых, дает возможность более\nгибко изменять состав меню: добавлять и удалять пункты, не выполняя\nпри этом подписку на события добавленных пунктов меню и отмену\nподписки на события удаленных.</p>\n<ul>\n<li><a href=\"#dom-events-delegated\">Делегирование DOM-событий</a> можно\nиспользовать для обработки DOM-событий, происходящих на DOM-узле\nэкземпляра блока или на DOM-узлах его элементов. Делегирование\nDOM-событий может выполняться либо для всех экземпляров блоков\nданного типа в пределах документа, либо только для экземпляров\nблоков внутри указанного контекста (фрагмента HTML-дерева).</li>\n</ul>\n<p>Контейнером, которому делегируется обработка DOM-событий, всегда\nвыступает <code>window.document</code>.</p>\n<ul>\n<li><a href=\"#bem-events-delegated\">Делегирование БЭМ-событий</a> следует\nиспользовать для обработки событий на <em>экземплярах блоков</em>,\nсодержащихся внутри указанного DOM-узла.</li>\n</ul>\n<p>Контейнером, которому делегируется обработка БЭМ-событий, может\nслужить <strong>произвольный DOM-узел</strong>. По умолчанию в качестве\nконтейнера выступает весь документ (<code>window.document</code>). Часто блок\nобрабатывает БЭМ-события вложенных блоков, тогда в качестве\nконтейнера следует указать DOM-узел блока-обработчика\n<a href=\"#domElem\"><code>this.domElem</code></a>.</p>\n<p>Полный список хелперов для подписки на делегированные события\nможно найти в исходном коде модуля <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<h3 id=\"DOM-события\"><a href=\"#DOM-события\" class=\"anchor\"></a>DOM-события</h3>\n<p>Для подписки на DOM-события на узлах, связанных с блоком или\nэлементом, используется метод экземпляра блока <code>bindTo([elem], event, handler)</code>.</p>\n<p><strong>Пример:</strong> В момент <a href=\"#init\">инициализации экземпляра блока</a>\n<code>my-block</code> выполняется подписка на событие <code>click</code>, при наступлении\nкоторого блок выставляет себе <a href=\"#modifier\">модификатор</a> <code>size</code> в\nзначение <code>big</code>.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;my-block&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39;: function() {\n                this.bindTo(&#39;click&#39;, function(e) {\n                    var domElem = $(e.currentTarget); // DOM-элемент, на котором слушается событие\n                                                      // в данном случае то же, что this.domElem\n                    this.setMod(&#39;size&#39;, &#39;big&#39;);\n                });\n            }\n        }\n    }\n});\n</code></pre>\n<p><strong>Пример:</strong> При <a href=\"#init\">инициализации экземпляра блока</a> <code>my-form</code> выполняется\nподписка на событие <code>click</code> элемента <code>submit</code>, при наступлении\nкоторого будет вызван метод экземпляра блока <code>_onSubmit</code>.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;my-block&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39;: function() {\n                this.bindTo(&#39;submit&#39;, &#39;click&#39;, function(e) {\n                    var domElem = $(e.currentTarget); // DOM-элемент, на котором слушается событие\n                                                      // в данном случае то же, что this.elem(&#39;submit&#39;)\n                    this._onSubmit();\n                });\n            }\n        }\n    },\n\n    _onSubmit : function() { /* ... */ }\n});\n</code></pre>\n<p><strong>NB</strong> Функция-обработчик выполняется в контексте того экземпляра\nблока, в котором возникло событие.</p>\n<p><strong>Удаление подписки</strong> на DOM-события выполняется автоматически при\nуничтожении экземпляра блока. Если необходимо удалить подписку вручную\nв процессе работы блока, следует использовать метод\n<code>unbindFrom([elem], event, handler)</code>.</p>\n<p><a name=\"dom-events-delegated\"></a></p>\n<h4 id=\"Делегирование-DOM-событий\"><a href=\"#Делегирование-DOM-событий\" class=\"anchor\"></a>Делегирование DOM-событий</h4>\n<p>Делегирование обработки DOM-событий выполняется с помощью метода\n<code>liveBindTo([elem], event, handler)</code>. В декларации блока точкой,\nзарезервированной для подписки на делегированные DOM-события, служит\nсвойство <code>live</code> в разделе статических методов блока.</p>\n<p><strong>Пример:</strong> Все экземпляры блока <code>menu</code> подписываются на\nделегированное DOM-событие <code>click</code> своих элементов <code>item</code>. Метод\n<code>_onItemClick</code> экземпляра блока <code>menu</code> будет выполняться при клике\nна любой пункт (элемент <code>item</code>) в этом меню. Не имеет значения,\nсуществовал ли этот пункт в момент инициализации экземпляра блока.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;menu&#39;, {\n    _onItemClick : function(e) {\n        var clickedItem = $(e.currentTarget); // элемент &#39;item&#39; блока &#39;menu&#39;, на котором слушается DOM-событие &#39;click&#39;\n    }\n}, {\n    live : function() {\n        this.liveBindTo(&#39;item&#39;, &#39;click&#39;, function() {\n            this._onItemClick();\n        });\n        return false; // если инициализация блока не может быть отложена\n    }\n});\n</code></pre>\n<p>По умолчанию, при наличии в декларации блока свойства <code>live</code>\nинициализация экземпляров блока будет <em>отложена</em> до момента, когда\nэкземпляр блока потребуется в работе\n(<a href=\"#init-live\">ленивая инициализация</a>). Таким моментом может стать\nDOM-событие на экземпляре блока, на которое выполнена делегированная\nподписка, или обращение к экземпляру блока <a href=\"#ibc\">из другого блока</a>.\nЕсли инициализация блока не может быть отложена (требуется\n<a href=\"#init-auto\">автоматическая инициализация</a>), следует вернуть <code>false</code>\nв результате выполнения функции в значении свойства <code>live</code>.</p>\n<p><strong>NB</strong> Функция-обработчик выполняется в контексте ближайшего блока\nданного типа на пути распространения DOM-события (снизу вверх\nпо DOM-дереву).</p>\n<p><strong>Удаление подписки</strong> на делегированные DOM-события никогда не\nвыполняется автоматически. Если подписку необходимо удалить, следует\nвоспользоваться методом <code>liveUnbindFrom([elem], event, [handler])</code>.</p>\n<h4 id=\"Объект-DOM-события\"><a href=\"#Объект-DOM-события\" class=\"anchor\"></a>Объект DOM-события</h4>\n<p>В качестве параметра функции-обработчику передается jQuery-объект,\nописывающий DOM-событие — <a href=\"https://api.jquery.com/category/events/event-object/\"><code>{jQuery.Event}</code></a>.</p>\n<p>Если DOM-событие было сгенерировано вручную, все параметры, переданные\nфункции <code>trigger</code> при создании события, будут переданы\nфункции-обработчику в том же порядке после объекта события.</p>\n<p><a name=\"bem-events\"></a></p>\n<h3 id=\"БЭМ-события\"><a href=\"#БЭМ-события\" class=\"anchor\"></a>БЭМ-события</h3>\n<p>В отличие от DOM-событий, БЭМ-события генерируются не на\nDOM-элементах, а на <strong>экземплярах блоков</strong>. Элементы блоков не могут\nгенерировать БЭМ-события.</p>\n<p>Чтобы сгенерировать БЭМ-событие, используется метод экземпляра блока\n<code>emit(event)</code>.</p>\n<p><strong>Пример:</strong> Взаимодействие пользователя с элементом управления блока\n(DOM-событие) можно преобразовать в БЭМ-событие на блоке. В\nприведенном ниже примере при клике пользователя по кнопке <code>submit</code>\n(DOM-событие <code>click</code>) <strong>БЭМ-событие</strong> <code>click</code> генерируется только в\nтом случае, если у блока в этот момент не выставлен модификатор\n<code>disabled</code>:</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;submit&#39;, {\n    onSetMod: {\n        &#39;js&#39;: {\n            &#39;inited&#39;: function() {\n                this.bindTo(&#39;click&#39;, this._onClick); // подписка на DOM-событие &quot;click&quot;\n            }\n        }\n    },\n\n    _onClick: function() {\n        if(!this.hasMod(&#39;disabled&#39;)) {\n            this.emit(&#39;click&#39;); // создание БЭМ-события &quot;click&quot;\n        }\n    }\n});\n</code></pre>\n<p>Для подписки на БЭМ-события экземпляров блоков используются методы\nэкземпляра блока <code>on(event, [data], handler, [handlerCtx])</code>.</p>\n<p><strong>Пример:</strong> В момент инициализации HTML-формы (экземпляра блока <code>my-form</code>)\nвыполняется поиск вложенной в форму кнопки <code>submit</code> и подписка на\nБЭМ-событие <code>click</code> этой кнопки. В результате при нажатии на кнопку\n(экземпляр блока <code>submit</code>) будет выполнен метод <code>_onSubmit</code> формы\n(экземпляр блока <code>my-form</code>).</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;my-form&#39;, {\n    onSetMod: {\n        &#39;js&#39;: {\n            &#39;inited&#39;: function() {\n                this.findBlockInside(&#39;submit&#39;).on(\n                    &#39;click&#39;, // имя БЭМ-события\n                    this._onSubmit, // метод экземпляра блока my-form\n                    this); // контекст для выполнения _onSubmit — блок my-form\n            }\n        }\n    },\n\n    _onSubmit: function() { /* ... */ }\n});\n</code></pre>\n<p><strong>NB</strong> Если не указывать последний параметр метода <code>on</code> —\n<code>[handlerCtx]</code>, контекстом для выполнения функции-обработчика будет\nтот блок, в котором возникло БЭМ-событие (в примере выше это блок\n<code>submit</code>).</p>\n<p><strong>Удаление подписки</strong> на БЭМ-события выполняется автоматически при\nуничтожении экземпляра блока. Если требуется удалить подписку вручную\nв процессе работы блока, следует использовать метод экземпляра блока\n<code>un(event, [handler], [handlerCtx])</code>.</p>\n<h4 id=\"События-при-изменении-модификаторов\"><a href=\"#События-при-изменении-модификаторов\" class=\"anchor\"></a>События при изменении модификаторов</h4>\n<p>Для подписки на БЭМ-события при изменении модификатора блока или элемента используется метод экземпляра блока <code>on</code>. Метод принимает аргументами:</p>\n<ul>\n<li>объект, описывающий модификатор, на который производится подписка;</li>\n<li>функцию обратного вызова, выполняющуюся при установке соответствующего модификатора.</li>\n</ul>\n<p>Объект, описывающий модификатор, может содержать следующие зарезервированные свойства:</p>\n<ul>\n<li><code>modName</code> <code>{String}</code> – имя модификатора. Обязательное свойство.</li>\n<li><code>modVal</code> <code>{String}</code> – значение модификатора. Обязательное свойство. Со значением <code>*</code> производится\nподписка на установку модификатора в <strong>любое</strong> значение. Со значением <code>&#39;&#39;</code> – на <strong>удаление</strong> модификатора.\nПодробнее смотрите в разделе <a href=\"#mods-api-trigger\">триггеры на установку модификаторов</a>.</li>\n<li><code>elem</code> <code>{String}</code> – имя элемента (для модификаторов элементов).</li>\n</ul>\n<p><strong>Пример:</strong> В момент инициализации блока <code>monitor</code> выполнятся подписка на:</p>\n<ul>\n<li><p>установку модификатора <code>m1</code> в любое значение;</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;monitor&#39;, {\n  onSetMod: {\n      &#39;js&#39;: {\n          &#39;inited&#39;: function() {\n            block1.on({ modName : &#39;m1&#39;, modVal : &#39;*&#39; }, function() {});\n          }\n      }\n  },\n});\n</code></pre>\n</li>\n<li><p>установку модификатора <code>m1</code> в значение <code>v1</code>;</p>\n<pre><code class=\"lang-js\">block1.on({ modName : &#39;m1&#39;, modVal : &#39;v1&#39; }, function() {});\n</code></pre>\n</li>\n<li><p>удаление модификатора <code>m1</code>;</p>\n<pre><code class=\"lang-js\">block1.on({ modName : &#39;m1&#39;, modVal : &#39;&#39; }, function() {});\n</code></pre>\n</li>\n<li><p>удаление модификатора <code>m1</code> у элемента <code>e1</code>;</p>\n<pre><code class=\"lang-js\">block1.on({ elem : &#39;e1&#39;, modName : &#39;m1&#39;, modVal : &#39;&#39; }, function() {});\n</code></pre>\n</li>\n</ul>\n<p><strong>NB</strong> В целях оптимизации производительности БЭМ-события при изменении модификаторов генерируются только в случае, если для них есть подписчики.</p>\n<p><a name=\"bem-events-delegated\"></a></p>\n<h4 id=\"Делегирование-БЭМ-событий\"><a href=\"#Делегирование-БЭМ-событий\" class=\"anchor\"></a>Делегирование БЭМ-событий</h4>\n<p>Делегирование БЭМ-событий означает, что блок подписывается на\nопределенное БЭМ-событие <strong>всех экземпляров</strong> блока с заданным именем\n<strong>в пределах заданного контекста</strong>. Подписка на делегированные\nБЭМ-события выполняется с помощью статического метода <em>класса блока</em>\n<code>on([ctx], event, [data], handler, [handlerCtx])</code>.</p>\n<p>Параметры:</p>\n<ul>\n<li><code>{jQuery} [ctx]</code> — DOM-узел, в пределах которого отслеживаются\nБЭМ-события (контейнер). Если не указан, в качестве контейнера\nиспользуется весь документ.</li>\n<li><code>{String} event</code> — имя БЭМ-события.</li>\n<li><code>{Object} [data]</code> — произвольные данные, передаваемые функции-обработчику.</li>\n<li><code>{Function} handler</code> — функция-обработчик события.</li>\n<li><code>{Object} [handlerCtx]</code> — контекст функции-обработчика\nсобытия. Обычно в качестве контекста должен выступать тот экземпляр\nблока, который подписывается на БЭМ-событие, а не тот, в котором БЭМ-событие\nпроизошло.</li>\n</ul>\n<p><strong>Пример:</strong> При инициализации экземпляров блока <code>menu</code> выполняется\nподписка на БЭМ-событие <code>click</code> всех ссылок (экземпляров блока\n<code>link</code>) в пределах DOM-узла, к которому привязано меню\n(<code>this.domElem</code>). В качестве контекста функции-обработчика\nпередается экземпляр блока, в котором событие будет обрабатываться\n(<code>this</code>).\nПри <a href=\"#destruct\">уничтожении экземпляров блока</a> <code>menu</code> <strong>удаление подписки</strong> на делегированные\nБЭМ-события никогда не происходит автоматически. Всегда следует явно удалять подписку\nпри помощи статического метода блока <code>un([ctx], event, [handler], [handlerCtx])</code>.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;menu&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39; : function() {\n                BEMDOM.blocks[&#39;link&#39;].on( // подписка на БЭМ-событие\n                    this.domElem, // контейнер — DOM-узел экземпляра блока menu\n                    &#39;click&#39;, // БЭМ-событие\n                    this._onLinkClick, // обработчик\n                    this); // контекст обработчика — экземпляр блока menu\n            },\n\n            &#39;&#39; : function() {\n                BEMDOM.blocks[&#39;link&#39;].un( // удаление подписки на БЭМ-событие\n                    this.domElem,\n                    &#39;click&#39;,\n                    this._onLinkClick,\n                    this);\n            }\n        }\n    },\n\n    _onLinkClick : function(e) {\n        var clickedLink = e.target; // экземпляр блока &#39;link&#39;, на котором произошло БЭМ-событие &#39;click&#39;\n    }\n});\n</code></pre>\n<p><strong>NB</strong> Если не указывать параметр <code>[handlerCtx]</code> метода <code>on</code>,\nконтекстом для функции-обработчика будет тот блок, в котором\n<em>возникло</em> БЭМ-событие.</p>\n<p><strong>Удаление подписки</strong> на делегированные БЭМ-события никогда не\nпроисходит автоматически. Всегда следует явно удалять подписку при\nпомощи статического метода блока <code>un([ctx], event, [handler], [handlerCtx])</code>.</p>\n<p>Полное описание API для работы с БЭМ-событиями содержится в исходном\nкоде модулей <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/i-bem.vanilla.js\">i-bem</a> и <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><a name=\"api\"></a></p>\n<h3 id=\"Объект-БЭМ-события\"><a href=\"#Объект-БЭМ-события\" class=\"anchor\"></a>Объект БЭМ-события</h3>\n<p>В качестве параметра функции-обработчику передается объект,\nописывающий БЭМ-событие. Объект БЭМ-события <code>events.Event</code> определен\nв <a href=\"https://github.com/ymaps/modules\">ymaps</a>-модуле\n<a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/events/events.vanilla.js\"><code>events</code></a> библиотеки bem-core. Содержит поля:</p>\n<ul>\n<li><code>target</code> — экземпляр блока, в котором произошло БЭМ-событие.</li>\n<li><code>data</code> — произвольные дополнительные данные. Передается в качестве\nпараметра <code>data</code> в момент подписки на БЭМ-событие или при создании\nБЭМ-события блоком.</li>\n<li><code>result</code> — последнее значение, возвращенное обработчиком данного\nсобытия. Аналогично <a href=\"https://api.jquery.com/event.result/\">jQuery.Event.result</a>.</li>\n<li><code>type</code> — тип события. Аналогично\n<a href=\"https://api.jquery.com/event.type/\">jQuery.Event.type</a>.</li>\n</ul>\n<p><a name=\"states\"></a></p>\n<h2 id=\"Состояния-блока\"><a href=\"#Состояния-блока\" class=\"anchor\"></a>Состояния блока</h2>\n<p>Проектируя динамический блок в стиле БЭМ, нужно представить всю логику\nизменений, происходящих в нем, как набор <strong>состояний</strong> блока. Тогда\nповедение блока определяется <strong>триггерами</strong> — callback-функциями, которые\nвыполняются при переходе блока из одного состояния в другое.</p>\n<p>Такой подход позволяет писать код блока в декларативном стиле как\nнабор утверждений вида: <code>описание состояния</code> — <code>действия, выполняемые\nпри переходе в данное состояние</code>.</p>\n<p><a name=\"modifiers\"></a></p>\n<h3 id=\"Модификаторы\"><a href=\"#Модификаторы\" class=\"anchor\"></a>Модификаторы</h3>\n<p>Согласно БЭМ-методологии, состояние блока и его элементов описывается\n<strong>модификаторами</strong>.</p>\n<p>Модификатор описывает, в каком из возможных состояний находится\nблок. Модификатор представляет собой пару строк: <strong>имя</strong> и\n<strong>значение</strong>. Список допустимых значений модификатора описывает\nнабор состояний блока. Например, для описания размеров блока\nможно использовать модификатор <code>size</code> с допустимыми значениями <code>s</code>, <code>m</code> и\n<code>l</code>.</p>\n<p><strong>Простой модификатор</strong> — частный случай, когда важно только наличие\nили отсутствие данного модификатора у блока, а его значение\nнесущественно. Например, модификатор описывающий состояние «отключен»:\n<code>disabled</code>. В <code>i-bem.js</code> представлены как модификаторы с булевым\nзначением. При выставлении модификатора с неуказанным значением\n<code>i-bem.js</code> автоматически присваивает ему значение <code>true</code>.</p>\n<p>Каждому блоку можно установить один или несколько модификаторов. Блок\nможет не иметь модификаторов. Список допустимых модификаторов и их\nзначений определяет разработчик блока.</p>\n<p>В <code>i-bem.js</code> модификаторы устанавливаются при\n<a href=\"#init\">инициализации экземпляра блока</a> (если модификаторы и их\nзначения указаны в атрибуте <code>class</code> соответствующего HTML-элемента).</p>\n<p><strong>NB</strong> Если модификаторы блока указаны в HTML-элементе, при\nинициализации блока триггеры на установку данных модификаторов <em>не\nвыполняются</em>. Экземпляр блока в этом случае получает начальное\nсостояние, а не меняет его.</p>\n<p>Модификаторы могут добавляться, удаляться и менять значения:</p>\n<ul>\n<li>в ходе выполнения кода блока (например, в качестве реакции на <a href=\"#dom-events\">DOM-события</a>);</li>\n<li>по запросу из другого блока (см. раздел <a href=\"#ibc\">Взаимодействие блоков</a>).</li>\n</ul>\n<p>При добавлении, удалении и изменении значений модификаторов выполняются триггеры.</p>\n<p><a name=\"mods-api\"></a></p>\n<h4 id=\"Управление-модификаторами\"><a href=\"#Управление-модификаторами\" class=\"anchor\"></a>Управление модификаторами</h4>\n<p>Экземпляр блока предоставляет методы для установки, проверки значений\nи удаления модификаторов данного экземпляра.</p>\n<p><strong>NB</strong> Модификаторы нельзя устанавливать, напрямую меняя CSS-классы на\nсоответствующем DOM-узле. Для изменения значений модификаторов следует\nиспользовать описанный ниже API, предоставляемый <code>i-bem.js</code>.</p>\n<p><strong>Пример:</strong> Экземпляр блока <code>square</code> может по клику на DOM-элементе\nблока переключаться между значениями <code>green</code> и <code>red</code> модификатора\n<code>color</code>, если не выставлен модификатор <code>disabled</code>:</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;square&#39;, {\n    onSquareClick: function(e) {\n        if(!this.hasMod(&#39;disabled&#39;)) {\n            this.toggleMod(&#39;color&#39;, &#39;green&#39;, &#39;red&#39;);\n        }\n    }\n});\n</code></pre>\n<p>Эти же методы используются для управления модификаторами элементов\nблока. Для этого в качестве первого (необязательного) параметра\nуказывается ссылка на объект элемента (а не имя элемента).</p>\n<p><strong>Пример:</strong> Блок <code>searchbox</code> по клику может выставлять своему элементу\n<code>input</code> простой модификатор <code>clean</code> (подразумеваемое значение —\n<code>true</code>):</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;searchbox&#39;, {\n    _onClick: function() {\n        this.setMod(this.elem(&#39;input&#39;), &#39;clean&#39;);\n    }\n});\n</code></pre>\n<p><strong>NB</strong> При управлении модификаторами элементов в качестве первого\nпараметра необходимо указывать ссылку на <strong>DOM-узел элемента</strong>, а не\nимя элемента. В противном случае возникла бы неоднозначность:\nимеется в виду установка блоку <em>модификатора</em> <code>input</code> со значением\n<code>clean</code> или установка элементу <code>input</code> <em>простого модификатора</em> <code>clean</code>.</p>\n<p>Полное описание API для управления модификаторами приведено в\nисходном коде модулей <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/i-bem.vanilla.js\">i-bem</a> и <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><a name=\"mods-api-trigger\"></a></p>\n<h3 id=\"Триггеры-на-установку-модификаторов\"><a href=\"#Триггеры-на-установку-модификаторов\" class=\"anchor\"></a>Триггеры на установку модификаторов</h3>\n<p>Выполнение триггеров на установку модификаторов разбито на две фазы:</p>\n<ol>\n<li><strong>До установки модификатора</strong>. Эта фаза зарезервирована для\nвозможности <strong>отменить</strong> установку модификатора. Если хотя бы один\nиз триггеров, выполняемых в этой фазе, вернет <code>false</code>,\nустановки модификатора не произойдет.</li>\n<li><strong>После установки модификатора</strong>. Триггеры, выполняемые в этой\nфазе, уже не могут отменить установку модификаторов.</li>\n</ol>\n<p>Триггеры могут быть привязаны к следующим типам изменений значений модификаторов:</p>\n<ol>\n<li>установка <em>любого</em> модификатора в <em>любое</em> значение;</li>\n<li>установка <em>конкретного</em> модификатора <code>modName</code> в <em>любое</em> значение (в том числе\nустановка простого модификатора в значение <code>true</code>);</li>\n<li>установка <em>конкретного</em> модификатора <code>modName</code> в <em>конкретное</em> значение <code>modVal</code>;</li>\n<li>установка модификатора в значение <code>&#39;&#39;</code> (пустая строка), что\nэквивалентно удалению модификатора или установке простого\nмодификатора в значение <code>false</code>.</li>\n</ol>\n<p>При установке модификатора <code>modName</code> в значение <code>modVal</code> триггеры\nкаждой фазы (если они определены) вызываются в том порядке, в котором они\nперечислены в приведенном выше списке событий (от общего к частному).</p>\n<p>Таким образом, при определении триггера пользователь указывает:</p>\n<ul>\n<li>фазу выполнения (до или после установки модификатора);</li>\n<li>тип события (имя и устанавливаемое значение модификатора).</li>\n</ul>\n<p><a name=\"mods-api-trigger-phase\"></a></p>\n<h4 id=\"Фазы-выполнения\"><a href=\"#Фазы-выполнения\" class=\"anchor\"></a>Фазы выполнения</h4>\n<p>Наличие дополнительной фазы, предшествующей установке модификатора, позволяет\nпроизвести некоторые проверки без риска повлиять на логику, связанную с установкой модификатора. Например, если существуют взаимоисключающие модификаторы, перед установкой одного из них логично проверить не установлен ли другой.</p>\n<p>В блоке <code>checkbox-group</code> библиотеки <code>bem-components</code> перед установкой модификатора <code>focused</code> производится проверка на наличие модификатора <code>disabled</code>:</p>\n<pre><code class=\"lang-js\">provide(BEMDOM.decl(this.name, /** @lends checkbox-group.prototype */{\n    beforeSetMod : {\n        &#39;focused&#39; : {\n            &#39;true&#39; : function() {\n                return !this.hasMod(&#39;disabled&#39;);\n            }\n        }\n    },\n\n    onSetMod : {\n        &#39;focused&#39; : { /* ... */}\n    }\n}));\n</code></pre>\n<p>Если триггер для фазы, предшествующей установке (<code>beforeSetMod</code>), возвращает <code>false</code>, установка модификатора не производится.</p>\n<p><a name=\"mods-api-trigger-decl\"></a></p>\n<h4 id=\"Декларация-триггеров\"><a href=\"#Декларация-триггеров\" class=\"anchor\"></a>Декларация триггеров</h4>\n<p>Триггеры, выполняемые при установке модификаторов, описываются в\nдекларации блока. Для этого в хэше методов экземпляра блока\nзарезервированы свойства:</p>\n<ul>\n<li><code>beforeSetMod</code> — триггеры, вызываемые до установки\n<strong>модификаторов блока</strong>;</li>\n<li><code>beforeElemSetMod</code> — триггеры, вызываемые до установки\n<strong>модификаторов элементов</strong>;</li>\n<li><code>onSetMod</code> — триггеры, вызываемые после установки\n<strong>модификаторов блока</strong>;</li>\n<li><code>onElemSetMod</code> — триггеры, вызываемые после установки\n<strong>модификаторов элементов</strong> блока.</li>\n</ul>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nprovide(BEMDOM.decl(/* селектор блока */,\n    {\n        /* методы экземпляра */\n        beforeSetMod: { /* триггеры до установки модификаторов блока*/}\n        beforeElemSetMod: { /* триггеры до установки модификаторов элементов*/}\n        onSetMod: { /* триггеры после установки модификаторов блока */ }\n        onElemSetMod: { /* триггеры после установки модификаторов элементов */ }\n    },\n    {\n        /* статические методы */\n    }\n));\n});\n</code></pre>\n<p>Значение свойств <code>beforeSetMod</code> и <code>onSetMod</code> — хэш, связывающий\nизменения модификаторов с триггерами. В качестве параметров триггерам\nпередаются:</p>\n<ul>\n<li>имя модификатора;</li>\n<li>выставляемое значение модификатора;</li>\n<li>предшествующее (для <code>beforeElemSetMod</code>) или текущее (для <code>onElemSetMod</code>) значение модификатора.</li>\n</ul>\n<pre><code class=\"lang-js\">{\n    &#39;mod1&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // установка mod1 в любое значение\n    &#39;mod2&#39;: {\n        &#39;val1&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 в значение val1\n        &#39;val2&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 в значение val2\n        &#39;&#39;: function(modName, modVal, prevModVal) { /* ... */ } // триггер на удаление модификатора mod2\n    &#39;mod3&#39;: {\n        &#39;true&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // триггер на установку простого модификатора mod3\n        &#39;&#39;: function(modName, modVal, prevModVal) { /* ... */ }, // триггер на удаление простого модификатора mod3\n    },\n    &#39;*&#39;: function(modName, modVal, prevModVal) { /* ... */ } // триггер на установку любого модификатора в любое значение\n}\n</code></pre>\n<p>Для триггера на установку любого модификатора блока в любое значение\nсуществует сокращенная форма записи:</p>\n<pre><code class=\"lang-js\">beforeSetMod: function(modName, modVal, prevModVal) { /* ... */ }\nonSetMod: function(modName, modVal, prevModVal) { /* ... */ }\n</code></pre>\n<p>Для свойств <code>beforeElemSetMod</code> и <code>onElemSetMod</code> в хэш значений\nдобавляется дополнительный уровень вложенности — <strong>элемент</strong>. В этих\nсвойствах описываются триггеры на установку модификаторов элементов.\nВ качестве параметров триггеру передаются:</p>\n<ul>\n<li>имя элемента;</li>\n<li>имя модификатора;</li>\n<li>выставляемое значение модификатора;</li>\n<li>предшествующее (для <code>beforeElemSetMod</code>) или текущее (для <code>onElemSetMod</code>) значение модификатора.</li>\n</ul>\n<pre><code class=\"lang-js\">{\n    &#39;elem1&#39;: {\n        &#39;mod1&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod1 элемента elem 1 в любое значение\n        &#39;mod2&#39;: {\n            &#39;val1&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ }, // триггер на установку mod2 элемента elem1 в значение val1\n            &#39;val2&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ } // триггер на установку mod2 элемента elem1 в значение val2\n            }\n        },\n    &#39;elem2&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ } // триггер на установку любого модификатора элемента elem2 в любое значение\n}\n</code></pre>\n<p>Сокращенная запись для триггера на установку любого модификатора элемента <code>elem1</code> в любое значение:</p>\n<pre><code class=\"lang-js\">beforeElemSetMod: { &#39;elem1&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ } }\nonElemSetMod: { &#39;elem1&#39;: function(elem, modName, modVal, prevModVal) { /* ... */ } }\n</code></pre>\n<h4 id=\"Примеры-триггеров\"><a href=\"#Примеры-триггеров\" class=\"anchor\"></a>Примеры триггеров</h4>\n<p>Типовая задача триггеров, вызываемых после установки модификатора или\nизменения его значения (свойство <code>onSetMod</code>) — выполнить операции над\nDOM-узлом блока, необходимые для перехода в новое состояние.</p>\n<p><strong>Пример:</strong> Экземпляр блока <code>input</code> при установке простого\nмодификатора <code>focused</code> (в значение <code>true</code>) очищает поле ввода —\nзаменяет пустой строкой текст DOM-узла блока.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;input&#39;, {\n    onSetMod : {\n        &#39;focused&#39; : {\n            &#39;true&#39; : function() {\n                this.domElem.val(&#39;&#39;); // очистить поле ввода\n            }\n        }\n    }\n});\n</code></pre>\n<p>Триггеры, выполняемые перед установкой модификатора (свойство\n<code>beforeSetMod</code>), необходимы для проверки текущего состояния экземпляра\nблока и возможности отменить переход в другое состояние.</p>\n<p><strong>Пример:</strong> Экземпляр блока <code>input</code> перед установкой простого\nмодификатора <code>focused</code> проверяет, не выставлен ли у него модификатор\n<code>disabled</code>. Если <code>disabled</code> выставлен, будет возвращено значение <code>false</code> и\nустановки модификатора <code>focused</code> не произойдет.</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;input&#39;, {\n    beforeSetMod : {\n        &#39;focused&#39; : {\n            &#39;true&#39; : function() {\n                return !this.hasMod(&#39;disabled&#39;); // вернет false, если disabled\n            }\n        }\n    }\n});\n</code></pre>\n<p><a name=\"init\"></a></p>\n<h3 id=\"Инициализация\"><a href=\"#Инициализация\" class=\"anchor\"></a>Инициализация</h3>\n<p>Инициализация блока — это создание в памяти браузера JS-объекта,\nсоответствующего экземпляру блока. Инициализация экземпляров блоков выполняется\nметодом <code>init()</code> модуля <code>i-bem__dom</code> на заданном фрагменте DOM-дерева.</p>\n<p>Каждому экземпляру блока можно приписать три состояния:</p>\n<ul>\n<li>экземпляр блока не инициализирован (JS-объект не создан);</li>\n<li>экземпляр блока инициализирован (JS-объект создан в памяти браузера);</li>\n<li>экземпляр блока уничтожен (удалены все ссылки на JS-объект экземпляра\nблока, и он может быть удален сборщиком мусора).</li>\n</ul>\n<p>В <code>i-bem.js</code> эти состояния экземпляра блока описываются с помощью служебного\nмодификатора <code>js</code>.</p>\n<ul>\n<li>До инициализации экземпляр блока не имеет модификатора <code>js</code>.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem&quot; data-bem=&quot;...&quot; &gt;...&lt;/div&gt;\n</code></pre>\n<ul>\n<li>В момент инициализации экземпляру блока устанавливается модификатор\n<code>js</code> в значении <code>inited</code>.</li>\n</ul>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block i-bem my-block_js_inited&quot; data-bem=&quot;...&quot;&gt;...&lt;/div&gt;\n</code></pre>\n<ul>\n<li>Если в процессе работы удаляется фрагмент DOM-дерева (при помощи\nметода <code>destruct</code> модуля <code>i-bem__dom</code>), то вместе с\nним удаляются экземпляры блоков, все HTML-элементы которых находятся\nв этом фрагменте. Перед удалением экземпляра блока модификатор <code>js</code>\nудаляется.</li>\n</ul>\n<p><strong>NB</strong> Если экземпляр блока был\n<a href=\"#distrib-block\">привязан к нескольким HTML-элементам</a>, блок будет существовать,\nпока в HTML-дереве сохраняется хотя бы один элемент, с которым он\nсвязан.</p>\n<p>Если на HTML-элементе размещено несколько экземпляров других блоков, то\nинициализация одного из них (появление модификатора <code>my-block_js_inited</code>)\nне влияет на инициализацию остальных.</p>\n<p><strong>Пример:</strong> На HTML-элементе инициализирован только экземпляр блока <code>my-block</code>.\nЭкземпляр блока <code>lazy-block</code> не инициализирован:</p>\n<pre><code class=\"lang-html\">&lt;div class=&quot;my-block my-block_js_inited lazy-block i-bem&quot;\n    data-bem=&#39;{ &quot;my-block&quot;: {}, &quot;lazy-block&quot;: {} }&#39; &gt;\n    ...\n&lt;/div&gt;\n</code></pre>\n<p><strong>NB</strong> Наличие модификатора <code>js</code> позволяет писать разные CSS-стили для\nблока в зависимости от того, инициализирован он или нет.</p>\n<h4 id=\"Конструктор-экземпляра-блока\"><a href=\"#Конструктор-экземпляра-блока\" class=\"anchor\"></a>Конструктор экземпляра блока</h4>\n<p>На изменение значений модификатора <code>js</code> можно назначать триггеры так\nже, как и для любых других модификаторов блока.</p>\n<p>Триггер на установку модификатора <code>js</code> в значение <code>inited</code> выполняется\nпри создании блока. Этот триггер можно считать <strong>конструктором\nэкземпляра блока</strong>:</p>\n<pre><code class=\"lang-js\">onSetMod: {\n    &#39;js&#39;: {\n        &#39;inited&#39;: function() { /* ... */ } // конструктор экземпляра блока\n    }\n}\n</code></pre>\n<p><a name=\"destruct\"></a></p>\n<h4 id=\"Деструктор-экземпляра-блока\"><a href=\"#Деструктор-экземпляра-блока\" class=\"anchor\"></a>Деструктор экземпляра блока</h4>\n<p>Моментом удаления блока является момент уничтожения всех ссылок на\nJS-объект блока, после чего он может быть удален из памяти браузера\nсборщиком мусора.</p>\n<p>Триггер на удаление модификатора <code>js</code> (установку в пустое значение\n<code>&#39;&#39;</code>) выполняется перед удалением блока. Такой триггер можно считать\n<strong>деструктором экземпляра блока</strong>.</p>\n<pre><code class=\"lang-js\">onSetMod: {\n    &#39;js&#39;: {\n        &#39;&#39;: function() { /* ... */ } // деструктор экземпляра блока\n    }\n}\n</code></pre>\n<p><a name=\"init-wave\"></a></p>\n<h4 id=\"Волны-инициализации\"><a href=\"#Волны-инициализации\" class=\"anchor\"></a>Волны инициализации</h4>\n<p>Инициализация экземпляров блоков, присутствующих на странице, не\nобязательно происходит одновременно. Блоки могут добавляться в ходе\nработы (например, за счет динамической генерации HTML на основе\nданных, полученных от сервера) или инициализироваться только по запросу.\nИнициализация очередной группы блоков называется <strong>волной\nинициализации</strong>.</p>\n<p>Новая волна инициализации создается в следующих случаях:</p>\n<ul>\n<li><a href=\"#init-auto\">Автоматическая инициализация всех блоков в документе по событию <code>domReady</code></a>;</li>\n<li><a href=\"#init-live\">Инициализация блока по событию на DOM-узле</a> (ленивая инициализация);</li>\n<li><a href=\"#init-ajax\">Явный вызов инициализации блоков на указанном фрагменте DOM-дерева</a>.</li>\n</ul>\n<p><a name=\"init-auto\"></a></p>\n<h4 id=\"Автоматическая-инициализация\"><a href=\"#Автоматическая-инициализация\" class=\"anchor\"></a>Автоматическая инициализация</h4>\n<p>Фреймворк <em>i-bem.js</em> позволяет автоматически инициализировать все\nблоки, имеющие DOM-представление (привязанные к DOM-элементам на\nстранице) в момент наступления DOM-события <code>domReady</code>. Чтобы включить\nавтоматическую инициализацию, необходимо задекларировать на странице\nблок <code>i-bem</code> с модификатором <code>init</code> в значении <code>auto</code>.</p>\n<p><strong>Пример файла</strong> <code>.deps.js</code>:</p>\n<!-- bem-example: desktop.examples/i-bem/6BCJYSf_Nz1N5D2VXV76OeXM0kY -->\n\n<p>При автоматической инициализации в памяти браузера будут созданы\nJS-объекты для всех DOM-узлов, в атрибуте <code>class</code> которых указан\n<code>i-bem</code>. Инициализация выполняется функцией <code>init</code> модуля\n<a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><a name=\"init-live\"></a></p>\n<h4 id=\"Инициализация-по-событию--ленивая-инициализация-\"><a href=\"#Инициализация-по-событию--ленивая-инициализация-\" class=\"anchor\"></a>Инициализация по событию (ленивая инициализация)</h4>\n<p>Если на странице размещено много экземпляров блоков, автоматическая инициализация\nвсех блоков в момент загрузки страницы нежелательна, так как она\nувеличивает время загрузки и объем памяти, затрачиваемой браузером.</p>\n<p>В этом случае имеет смысл инициализировать JS-объекты\nтолько в тот момент, когда их функциональность потребуется\nпользователю: например, по клику на блоке. Такая инициализация\nназывается <strong>ленивой</strong> или <strong>live-инициализацией</strong>.</p>\n<p>Для описания условий ленивой инициализации зарезервировано свойство\n<code>live</code> в разделе статических методов декларации блока. Свойство <code>live</code>\nможет принимать два типа значений:</p>\n<ul>\n<li><code>Boolean</code><br/>\nИмеет смысл только значение <code>true</code>: экземпляры\nблоков данного класса будут инициализированы только при попытке\nполучить соответствующий экземпляр (см. раздел <a href=\"#ibc\">Взаимодействие блоков</a>).</li>\n</ul>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;my-block&#39;,\n    {\n        onSetMod: {\n            &#39;js&#39;: {\n                &#39;inited&#39;: function() { /* ... */ } // этот код будет выполняться\n                                                   // при первом обращении к экземпляру блока\n            }\n        }\n    },\n    { live: &#39;true&#39; } // статические методы и свойства\n);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<ul>\n<li><code>Function</code><br/>\nФункция, которую нужно выполнить при попытке\nинициализации <strong>первого экземпляра</strong> блока заданного класса. Если\nфункция возвращает значение <code>false</code>, экземпляры блоков будут\nинициализироваться <a href=\"#init-auto\">автоматически</a>.</li>\n</ul>\n<p>Если необходимо инициализировать экземпляры блока по наступлению\nDOM- или БЭМ-событий, в теле функции следует выполнить подписку на\n<a href=\"#delegated-events\">делегированные события</a>. Возможна инициализация\nпо:</p>\n<ul>\n<li>DOM-событию на DOM-узле блока и вложенных элементах;</li>\n<li>БЭМ-событию на вложенных блоках.</li>\n</ul>\n<p><strong>Пример:</strong> Экземпляры блока <code>my-block</code> будут инициализироваться по\nDOM-событию <code>click</code> на DOM-узле блока. По каждому DOM-событию\n<code>click</code> будет вызываться метод экземпляра блока <code>_onClick</code>:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;my-block&#39;,\n    {\n        onSetMod: {\n            &#39;js&#39;: {\n                &#39;inited&#39;: function() { /* ... */ } // выполняется при первом DOM-событии &#39;click&#39;\n            }\n        },\n\n        _onClick: function() { /* ... */ } // выполняется при каждом DOM-событии &#39;click&#39;\n    },\n    {\n        live: function() {\n            this.liveBindTo(&#39;click&#39;, function() {\n                this._onClick(); // в момент клика будет создан экземпляр блока и вызван его метод _onClick\n            });\n        }\n    }\n);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p>Если необходимо воспользоваться делегированными событиями в блоке,\nно инициализацию блока нельзя отложить (экземпляры блока должны быть\nинициализированы немедленно после загрузки страницы), следует вернуть\nзначение <code>false</code>:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;my-block&#39;,\n    {\n        onSetMod: {\n            &#39;js&#39;: {\n                &#39;inited&#39;: function() { /* ... */ } // будет выполнена по наступлении domReady\n            }\n        },\n\n        _onClick: function() { /* ... */ } // будет выполняться каждый\n                                           // раз при наступлении DOM-события &#39;click&#39;\n    },\n    {\n        live: function() {\n            this.liveBindTo(&#39;click&#39;, function() { this._onClick() });\n            return false; // экземпляры блоков будут инициализированы автоматически\n        }\n    }\n);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p>Полный список хелперов для подписки на делегированные события\nприведен в исходном коде модуля <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><strong>NB</strong> Свойство <code>live</code> задает ленивую инициализацию для <em>всех\nэкземпляров</em> соответствующего блока, так как технически относится\nк статическим методам класса блока. Поэтому даже если свойство <code>live</code>\nзадекларировано для блока с определенным значением модификатора, оно\nбудет применено ко всем блокам данного класса вне зависимости от\nмодификаторов.</p>\n<p><a name=\"init-ajax\"></a></p>\n<h4 id=\"Инициализация-блоков-на-фрагменте-DOM-дерева\"><a href=\"#Инициализация-блоков-на-фрагменте-DOM-дерева\" class=\"anchor\"></a>Инициализация блоков на фрагменте DOM-дерева</h4>\n<p>Процедура инициализации JS-объектов может быть вызвана\nявно для указанного фрагмента DOM-дерева. Часто такая необходимость\nвозникает при разработке AJAX-интерфейсов, когда нужно <a href=\"#dynamic\">динамически встроить</a> в страницу новые экземпляры блоков либо обновить существующие.</p>\n<p>В <code>i-bem.js</code> следующие функции выполняют динамическую инициализацию блоков:</p>\n<ul>\n<li>Инициализация/уничтожение блоков на указанном фрагменте DOM-дерева\n(<code>init</code>);</li>\n<li>Добавление/замена фрагмента DOM-дерева с одновременной\nинициализацией блоков на обновленном фрагменте (<code>update</code>, <code>replace</code>,\n<code>append</code>, <code>prepend</code>, <code>before</code>, <code>after</code>).</li>\n</ul>\n<p><a name=\"destruct-dom\"></a></p>\n<h4 id=\"Удаление-блоков-на-фрагменте-DOM-дерева\"><a href=\"#Удаление-блоков-на-фрагменте-DOM-дерева\" class=\"anchor\"></a>Удаление блоков на фрагменте DOM-дерева</h4>\n<p>Как и процедура инициализации блоков, процедура удаления может быть вызвана явно для заданного фрагмента DOM-дерева. Например, при разработке AJAX-интерфейсов, для динамического удаления экземпляров блоков со страницы.</p>\n<p>Явный вызов процедуры гарантирует корректное удаление:</p>\n<ul>\n<li>вложенных DOM-узлов;</li>\n<li>блоков, примешанных к другим блокам.</li>\n</ul>\n<p>Для явного вызова процедуры удаления служит статичесикий метод <code>destruct</code>, реализованный в элементе <code>dom</code> блока <code>i-bem</code> библиотеки <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js#L970\">bem-core</a>.</p>\n<p>Метод принимает два аргумента:</p>\n<ul>\n<li><code>ctx</code> <code>{jQuery}</code> – корневой DOM-элемент. Удаляется со всем вложенными DOM-узлами.</li>\n<li><code>excludeSelf</code> <code>Boolean</code> – не удалять корневой DOM-элемент если значение <code>true</code>. По умолчанию <code>false</code>.</li>\n</ul>\n<p>Например, в блоке <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/popup/_target/popup_target_anchor.js\">popup_target_anchor</a> библиотеки <code>bem-components</code> <code>destruct</code> используется приватным методом <code>_onPopupAnchorDestruct</code> для удаления текущего DOM-элемента при удалении якоря попапа:</p>\n<pre><code class=\"lang-js\">_onPopupAnchorDestruct : function() {\n    BEMDOM.destruct(this.domElem);\n}\n</code></pre>\n<p><a name=\"init-bem\"></a></p>\n<h4 id=\"Инициализация-и-удаление-блоков-без-DOM-представления\"><a href=\"#Инициализация-и-удаление-блоков-без-DOM-представления\" class=\"anchor\"></a>Инициализация и удаление блоков без DOM-представления</h4>\n<p>Чтобы создать JS-объект для блока, не имеющего DOM-представления (не\nпривязанного к HTML-элементу), необходимо вызвать метод <code>create</code>,\nкоторый вернет экземпляр блока указанного класса.</p>\n<p><strong>Пример:</strong> В момент инициализации экземпляра блока с DOM-представлением\n<code>container</code> создается экземпляр блока без DOM-представления <code>router</code>. Экземпляр блока\n<code>container</code> затем будет обращаться к созданному им экземпляру блока\n<code>router</code> при вызове метода <code>onRequest</code>:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, &#39;i-bem&#39;, function(provide, BEM, BEMDOM) {\n\nBEMDOM.decl(&#39;container&#39;, {\n    onSetMod: {\n        &#39;js&#39;: {\n            &#39;inited&#39;: function() {\n                this._router = BEM.create(&#39;router&#39;); // создание экземпляра блока router\n            }\n        }\n    },\n\n    onRequest: function() {\n        this._router.route(/* ... */) // вызов метода экземпляра блока router\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p><strong>Пример:</strong> Блок без DOM-представления реализован в виде простого\n<a href=\"https://github.com/ymaps/modules\">ymaps-модуля</a>, без использования модуля <code>i-bem</code>. Такой блок\nиспользуется как обычный ymaps-модуль (нет необходимости создавать\nэкземпляр блока):</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, &#39;router&#39;, function(provide, BEMDOM, router) {\n\nBEMDOM.decl(&#39;container&#39;, {\n    onRequest: function() {\n        router.route(/* ... */); // вызов метода блока router\n    }\n});\n\nprovide(BEMDOM, router);\n\n});\n</code></pre>\n<p><strong>Удаление</strong> экземпляров блоков без DOM-представления не может быть\nвыполнено автоматически и является ответственностью\nразработчика. Блоки без DOM-представления представляют собой обычные\nJS-объекты и удаляются в момент удаления всех ссылок на объект блока.</p>\n<p><strong>Пример:</strong> При удалении экземпляра блока <code>container</code> удаляется созданный им в\nпроцессе работы экземпляр блока без DOM-представления <code>router</code>.</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, &#39;i-bem&#39;, function(provide, BEM, BEMDOM) {\n\nBEMDOM.decl(&#39;container&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;&#39; : function() {\n                delete this._router; // удаление экземпляра блока router\n            }\n        }\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p><a name=\"ibc\"></a></p>\n<h2 id=\"Взаимодействие-блоков\"><a href=\"#Взаимодействие-блоков\" class=\"anchor\"></a>Взаимодействие блоков</h2>\n<p>В рамках БЭМ-методологии блоки следует разрабатывать так,\nчтобы по возможности исключить зависимость состояний одних\nблоков от других. Однако на практике идеал полной независимости блоков\nнедостижим.</p>\n<p>Взаимодействие блоков может быть реализовано двумя способами:</p>\n<ul>\n<li>с помощью подписки на <a href=\"#bem-events\">БЭМ-события</a> других экземпляров\nблоков или подписки на <a href=\"#bem-events-delegated\">делегированные БЭМ-события</a>;</li>\n<li>с помощью непосредственного вызова методов других экземпляров\nблоков или статических методов класса другого блока.</li>\n</ul>\n<p><strong>NB</strong> Не используйте <a href=\"#dom-events\">DOM-события</a> для\nорганизации взаимодействия между блоками. DOM-события предназначены\nтолько для реализации внутренних процедур блока.</p>\n<p>Для реализации взаимодействия блоков <code>i-bem.js</code> предоставляет API:</p>\n<ul>\n<li><a href=\"#api-find\">Поиск экземпляров блоков в DOM-дереве</a>;</li>\n<li><a href=\"#api-nodom\">Доступ к экземплярам блоков без DOM-представления</a>;</li>\n<li><a href=\"#api-calss\">Доступ к классам блоков</a>.</li>\n</ul>\n<p><a name=\"api-find\"></a></p>\n<h3 id=\"Поиск-экземпляров-блоков-в-DOM-дереве\"><a href=\"#Поиск-экземпляров-блоков-в-DOM-дереве\" class=\"anchor\"></a>Поиск экземпляров блоков в DOM-дереве</h3>\n<p>Обращение к другому блоку в <code>i-bem.js</code> выполняется из текущего блока,\nразмещенного на определенном узле DOM-дерева. Поиск других блоков в\nDOM-дереве может вестись по трем направлениям (осям) относительно\nDOM-узла текущего блока:</p>\n<ul>\n<li><strong>Внутри блока</strong> — на DOM-узлах, вложенных в DOM-узел текущего блока.</li>\n<li><strong>Снаружи блока</strong> — на DOM-узлах, потомком которых является DOM-узел\nтекущего блока. Необходимость в таком поиске может свидетельствовать\nо неудачной архитектуре интерфейса.</li>\n<li><strong>На себе</strong> — на том же DOM-узле, на котором размещен текущий\nблок. Это актуально в случае <a href=\"#html-mixes\">размещения нескольких JS-блоков на одном DOM-узле</a> (микс).</li>\n</ul>\n<p><strong>Пример</strong>: При переключении модификатора <code>disabled</code> экземпляр блока\n<code>attach</code> находит вложенный в него блок <code>button</code> и переключает его\nмодификатор <code>disabled</code> в то же значение, которое получил сам:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;attach&#39;, {\n    onSetMod: {\n        &#39;disabled&#39;: function(modName, modVal) {\n            this.findBlockInside(&#39;button&#39;).setMod(modName, modVal);\n        }\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<p>Полный список методов для поиска блоков приведен\nв исходном коде модуля <a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</p>\n<p><strong>NB</strong> Не используйте jQuery-селекторы для поиска блоков и элементов.\n<code>i-bem.js</code> предоставляет высокоуровневое API для доступа к DOM-узлам\nблоков и элементов. Обращение к DOM-дереву в обход этого API делает\nкод менее устойчивым к изменениям БЭМ-библиотек и может привести к\nвозникновению сложно обнаруживаемых ошибок.</p>\n<p><a name=\"api-nodom\"></a></p>\n<h3 id=\"Доступ-к-экземплярам-блоков-без-DOM-представления\"><a href=\"#Доступ-к-экземплярам-блоков-без-DOM-представления\" class=\"anchor\"></a>Доступ к экземплярам блоков без DOM-представления</h3>\n<p>При создании экземпляра блока без DOM-представления необходимо\nпозаботиться о том, чтобы ссылка на этот экземпляр была доступна\nблокам, которым потребуется взаимодействовать с ним. Подробности и\nпример см. в разделе <a href=\"#init-bem\">Инициализация и удаление блоков без DOM-представления</a>.</p>\n<p><a name=\"api-class\"></a></p>\n<h3 id=\"Доступ-к-классам-блоков\"><a href=\"#Доступ-к-классам-блоков\" class=\"anchor\"></a>Доступ к классам блоков</h3>\n<p>JS-компоненты, соответствующие всем блокам («классы» блоков), хранятся\nв структуре данных <code>BEM.blocks</code>. Классы блоков,\n<a href=\"#i-blocks\">не привязанных к DOM-дереву</a>, также размещены в этой\nструктуре данных. При необходимости доступа к таким блокам следует\nиспользовать конструкцию:</p>\n<pre><code class=\"lang-js\">BEM.blocks[&#39;name&#39;]\n</code></pre>\n<p>где <code>name</code> — имя блока.</p>\n<p>Доступ к классам блоков необходим для решения двух основных задач:</p>\n<ul>\n<li><a href=\"#bem-events-delegated\">делегирование БЭМ-событий</a>;</li>\n<li>вызов статического метода класса.</li>\n</ul>\n<p><strong>Пример:</strong> Вызов статического метода <code>close</code> блока <code>popup</code> — закрыть\nвсе попапы на странице:</p>\n<pre><code class=\"lang-js\">BEMDOM.decl(&#39;switcher&#39;, {\n    onSetMod : {\n        &#39;popup&#39; : {\n            &#39;disabled&#39; : function() {\n                BEM.blocks[&#39;popup&#39;].close();\n            }\n        }\n    }\n});\n</code></pre>\n<p><a name=\"docs\"></a></p>\n<h2 id=\"Что-дальше-\"><a href=\"#Что-дальше-\" class=\"anchor\"></a>Что дальше?</h2>\n<p>Общую информацию о БЭМ-методологии, инструментарии, новостях в мире\nБЭМ можно найти на сайте <a href=\"https://ru.bem.info/\">bem.info</a>.</p>\n<p>Полную информацию обо всех методах API <code>i-bem.js</code> можно найти в\nисходном коде, который сопровождается структурированными комментариями\nв формате JSDoc:</p>\n<ul>\n<li><a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/i-bem.vanilla.js\">i-bem</a>;</li>\n<li><a href=\"https://github.com/bem/bem-core/blob/v2/common.blocks/i-bem/__dom/i-bem__dom.js\">i-bem__dom</a>.</li>\n</ul>\n<p>Задать вопрос опытным пользователям и разработчикам <code>i-bem.js</code> и\nследить за текущими обсуждениями можно в социальных сетях:</p>\n<ul>\n<li><a href=\"http://clubs.ya.ru/bem/\">Клуб в Я.ру</a>;</li>\n<li><a href=\"https://www.facebook.com/#!/groups/209713935765634/\">Группа в Facebook</a>;</li>\n<li><a href=\"https://twitter.com/bem_ru\">Twitter</a>.</li>\n</ul>\n<p>Прочитать о принципах работы <code>i-bem.js</code> в другом изложении, найти\nобразцы его применения и пошаговые инструкции на примере простых\nпроектов можно в статьях:</p>\n<ul>\n<li><a href=\"https://ru.bem.info/articles/bem-js-main-terms/\">JavaScript по БЭМ: основные понятия</a>;</li>\n<li><a href=\"https://github.com/varya/bem-js-tutorial\">Tutorial on JavaScript in BEM terms</a>;</li>\n<li><a href=\"http://habrahabr.ru/post/162385/\">Попробуй БЭМ на вкус!</a>;</li>\n<li><a href=\"https://ru.bem.info/articles/firm-card-story/\">БЭМ-приложение на Leaflet и API 2GIS</a>.</li>\n</ul>\n<p><strong>NB</strong> Обратите внимание, что в перечисленных статьях может\nиспользоваться устаревший синтаксис, не соответствующий текущей версии\n<code>i-bem.js</code>, включенной в <code>bem-core</code>.</p>\n\n<p>Подключение данного модификатора позволяет работать с элементами почти так же, как и с обычными блоками, т.е. любой (но не обязательно каждый) элемент может иметь свой BEM-инстанс. API инстансов элементов аналогично API блоков с некоторыми различиями, описанными ниже.</p>\n<h3 id=\"Декларация\"><a href=\"#Декларация\" class=\"anchor\"></a>Декларация</h3>\n<p>Декларация элемента</p>\n<pre><code class=\"lang-javascript\">BEMDOM.decl({ block: &#39;menu&#39;, elem: &#39;item&#39; }, { /* properties */ }, { /* static properties */ });\n</code></pre>\n<p>Декларация модификатора элемента:</p>\n<pre><code class=\"lang-javascript\">BEMDOM.decl({\n    block: &#39;menu&#39;,\n    elem: &#39;item&#39;,\n    modName: &#39;state&#39;,\n    modVal: &#39;current&#39;\n}, {\n    /* properties */\n}, {\n    /* static properties */\n});\n</code></pre>\n<p>Модификаторы элементов работают так же, как модификаторы блоков.</p>\n<h3 id=\"BEM-инстансы-элементов\"><a href=\"#BEM-инстансы-элементов\" class=\"anchor\"></a>BEM-инстансы элементов</h3>\n<p>Для доступа к BEM-инстансам элементов используется хелпер <code>findElemInstances</code>, API которого аналогично хелперу <code>findElem</code>:</p>\n<pre><code class=\"lang-javascript\">// поиск всех вложенных элементов &#39;item&#39;\nthis.findElemInstances(&#39;item&#39;);\n\n// строгий поиск всех вложенных элементов &#39;item&#39;\nthis.findElemInstances(&#39;item&#39;, true);\n\n// поиск всех вложенных модификаторов элементов &#39;item&#39;\nthis.findElemInstances(&#39;item&#39;, &#39;state&#39;, &#39;current&#39;);\n\n// строгий поиск всех вложенных модификаторов элементов &#39;item&#39;\nthis.findElemInstances(&#39;item&#39;, &#39;state&#39;, &#39;current&#39;, true);\n\n// поиск всех элементов &#39;item&#39; внутри указанного контекста\nthis.findElemInstances(ctx, &#39;item&#39;);\n\n// строгий поиск всех элементов &#39;item&#39; внутри указанного контекста\nthis.findElemInstances(ctx, &#39;item&#39;, true);\n\n// поиск всех модификаторов элементов &#39;item&#39; внутри указанного контекста\nthis.findElemInstances(ctx, &#39;item&#39;, &#39;state&#39;, &#39;current&#39;);\n\n// строгий поиск всех модификаторов элементов &#39;item&#39; внутри указанного контекста\nthis.findElemInstances(ctx, &#39;item&#39;, &#39;state&#39;, &#39;current&#39;, true);\n</code></pre>\n<p>При необходимости, инстансы найденных элементов инициализируются.</p>\n<p>Строгий поиск подразумевает фильтрацию элементов вложенных блоков с таким же именем, как у текущего блока:</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;menu&#39;,\n    content: [\n        {\n            elem: &#39;item&#39; // (1)\n        },\n        {\n            block: &#39;menu&#39;,\n            content: {\n                elem: &#39;item&#39; // (2)\n            }\n        }\n    ]\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nthis.findElemInstances(&#39;item&#39;);         // найдет инстансы (1) и (2)\nthis.findElemInstances(&#39;item&#39;, true);   // найдет только инстанс (1)\n</code></pre>\n<p>По аналогии с хелпером <code>elem</code>, кэширующим результаты своей работы, для минимизации количества операций с DOM рекомендуется использовать кэширующий поиск BEM-инстансов элементов:</p>\n<pre><code class=\"lang-javascript\">// кэширующий поиск всех вложенных элементов &#39;item&#39;\nthis.elemInstances(&#39;item&#39;);\n\n// кэширующий поиск всех вложенных модификаторов элемента &#39;item&#39;\nthis.elemInstances(&#39;item&#39;, &#39;state&#39;, &#39;current&#39;);\n</code></pre>\n<p>Также с помощью этого хелпера можно вернуть инстансы элементов, расположенных на DOM-нодах указанной jQuery-коллекции:</p>\n<pre><code class=\"lang-javascript\">this.elemInstances(domElem);\n</code></pre>\n<p>Для поиска одного (первого) BEM-инстанса элемента есть дополнительные формы этих хелперов с аналогичным API:</p>\n<pre><code class=\"lang-javascript\">// поиск одного вложенного элемента &#39;item&#39;\nthis.findElemInstance(&#39;item&#39;);\n\n// кэширующий поиск одного вложенного элемента &#39;item&#39;\nthis.elemInstance(&#39;item&#39;);\n\n// вернуть инстанс элемента, расположенного на первой DOM-ноде указанной jQuery-коллекции\nthis.elemInstance(domElem);\n</code></pre>\n<p>Если необходимо вернуть BEM-инстанс элемента, на DOM-ноде которого подмешаны другие элементы того же блока:</p>\n<pre><code class=\"lang-javascript\">this.elemInstance(this.elemify(domElem, &#39;item&#39;));\n</code></pre>\n<h3 id=\"Поиск-снаружи-контекста\"><a href=\"#Поиск-снаружи-контекста\" class=\"anchor\"></a>Поиск снаружи контекста</h3>\n<p>Существует хелпер для поиска элемента снаружи указанного контекста:</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;menu&#39;,\n    content: {\n        elem: &#39;item&#39;,\n        content: {\n            elem: &#39;link&#39;\n        }\n    }\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nthis.closestElem(this.elem(&#39;link&#39;), &#39;item&#39;);\n</code></pre>\n<p>При поиске от имени BEM-инстанса элемента можно не указывать контекст поиска, тогда поиск будет производиться относительно DOM-ноды этого элемента:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__link&#39;\nthis.closestElem(&#39;item&#39;);\n</code></pre>\n<p>По аналогии с хелперами <code>elem</code> и <code>findElem</code>, хелпер <code>closestElem</code> возвращает jQuery-коллекцию. Для доступа к BEM-инстансам элементов снаружи контекста используются хелперы <code>closestElemInstance</code> и <code>closestElemInstances</code>:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nthis.closestElemInstance(this.elem(&#39;link&#39;), &#39;item&#39;);\nthis.closestElemInstances(this.elem(&#39;link&#39;), &#39;item&#39;);\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__link&#39;\nthis.closestElemInstance(&#39;item&#39;);\n</code></pre>\n<h3 id=\"Доступ-к-родительскому-блоку\"><a href=\"#Доступ-к-родительскому-блоку\" class=\"anchor\"></a>Доступ к родительскому блоку</h3>\n<p>По аналогии с методом <code>elem</code> для получения элемента блока существует метод <code>block</code> для получения блока элемента.</p>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nthis.block() // эквивалентно this.findBlockOutside(&#39;menu&#39;) с кэшированием результата поиска\n</code></pre>\n<h3 id=\"Поиск-элементов-и-блоков\"><a href=\"#Поиск-элементов-и-блоков\" class=\"anchor\"></a>Поиск элементов и блоков</h3>\n<p>Элемент ищет только вложенные в него элементы:</p>\n<pre><code class=\"lang-javascript\">{\n    block: &#39;menu&#39;,\n    content: [\n        {\n            elem: &#39;item&#39;,\n            content: {\n                elem: &#39;link&#39; // (1)\n            }\n        },\n        {\n            elem: &#39;link&#39; // (2)\n        }\n    ]\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nthis.findElem(&#39;link&#39;);  // будет найден только элемент (1).\n</code></pre>\n<p>Если нужно найти все элементы <code>&#39;link&#39;</code>, поиск нужно производить от имени блока-родителя:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nthis.block().findElem(&#39;link&#39;);    // будут найдены элементы (1) и (2).\n</code></pre>\n<p>Все это справедливо также для хелпера <code>elem</code>, хелперов поиска блоков (<code>findBlockInside</code> и др.) и описанных выше хелперов для поиска BEM-инстансов элементов.</p>\n<h3 id=\"Реакция-на-установку-модификаторов\"><a href=\"#Реакция-на-установку-модификаторов\" class=\"anchor\"></a>Реакция на установку модификаторов</h3>\n<p>Блок делегирует установку модификаторов тем элементам, у которых есть свои BEM-декларации.\nПоэтому обработчики <code>onSetMod</code> элемента выполнятся, если родительский блок установит этому элементу соответствующие модификаторы:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nonSetMod: {\n    &#39;state&#39;: {\n        &#39;current&#39;: function() {\n            // код обработчика\n        }\n    }\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nthis.setMod(this.elem(&#39;item&#39;), &#39;state&#39;, &#39;current&#39;); // выполнится задекларированный выше обработчик\n</code></pre>\n<p>Обработчики <code>onElemSetMod</code> блока выполнятся, если инстанс элемента сам установит себе соответствующие модификаторы:</p>\n<pre><code class=\"lang-javascript\">// this =&gt; block &#39;menu&#39;\nonElemSetMod: {\n    &#39;item&#39;: {\n        &#39;state&#39;: {\n            &#39;current&#39;: function() {\n                // код обработчика\n            }\n        }\n    }\n}\n</code></pre>\n<pre><code class=\"lang-javascript\">// this =&gt; element &#39;menu__item&#39;\nthis.setMod(&#39;state&#39;, &#39;current&#39;); // выполнится задекларированный выше обработчик\n</code></pre>\n<p>Обработчики <code>onElemSetMod</code> в контексте инстанса элемента не используются.</p>\n<h3 id=\"Отложенная-инициализация-и-live-события\"><a href=\"#Отложенная-инициализация-и-live-события\" class=\"anchor\"></a>Отложенная инициализация и live-события</h3>\n<p>Рекомендуется по возможности всегда использовать отложенную инициализацию BEM-инстансов элементов. Они, как и обычные блоки, поддерживают все хелперы для работы с live-событиями. Кроме того, хелпер <code>liveInitOnBlockEvent</code> имеет дополнительную форму для инициализации по событию родительского блока - для этого просто опускается второй параметр (имя блока):</p>\n<pre><code class=\"lang-javascript\">this.liveInitOnBlockEvent(&#39;switch&#39;, function() { /* обработчик */ });\n</code></pre>\n"},"en":{"name":"i-bem","examples":[],"description":""}},"jsdoc":"<h1 id=\"i-bem-Module\"><a href=\"#i-bem-Module\" class=\"anchor\"></a>i-bem Module</h1>\n<h2 id=\"BEM-Class\"><a href=\"#BEM-Class\" class=\"anchor\"></a>BEM Class</h2>\n<p>Aughtments {BEM}</p>\n<p>Base block for creating BEM blocks</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"params--Object---readonly-\"><a href=\"#params--Object---readonly-\" class=\"anchor\"></a>params {Object} (readonly)</h4>\n<p>Block parameters, taking into account the defaults</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--BEM-\"><a href=\"#on---e,--data-,-fn,--ctx----→--BEM-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {BEM}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | Object}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--BEM-\"><a href=\"#un----e-,--fn-,--ctx----→--BEM-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {BEM}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String | Object}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"emit---e,--data----→--BEM---protected\"><a href=\"#emit---e,--data----→--BEM---protected\" class=\"anchor\"></a>emit ( e, [data] ) → {BEM}  protected</h4>\n<p>Executes the block&#39;s event handlers and live event handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"hasMod----elem-,-modName,--modVal----→--Boolean-\"><a href=\"#hasMod----elem-,-modName,--modVal----→--Boolean-\" class=\"anchor\"></a>hasMod ( [elem], modName, [modVal] ) → {Boolean}</h4>\n<p>Checks whether a block or nested element has a modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getMod----elem-,-modName---→--String-\"><a href=\"#getMod----elem-,-modName---→--String-\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}</h4>\n<p>Returns the value of the modifier of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,-----modNames----→--Object-\"><a href=\"#getMods----elem-,-----modNames----→--Object-\" class=\"anchor\"></a>getMods ( [elem], [...modNames] ) → {Object}</h4>\n<p>Returns values of modifiers of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>[...modNames] {String}<br/>\nModifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}</h4>\n<p>Sets the modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"_onSetMod---modName,-modVal,-oldModVal,--elem-,--elemName-----protected\"><a href=\"#_onSetMod---modName,-modVal,-oldModVal,--elem-,--elemName-----protected\" class=\"anchor\"></a>_onSetMod ( modName, modVal, oldModVal, [elem], [elemName] )  protected</h4>\n<p>Function after successfully changing the modifier of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n<li>oldModVal {String}<br/>\nOld modifier value</li>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>[elemName] {String}<br/>\nElement name</li>\n</ul>\n<h4 id=\"toggleMod----elem-,-modName,-modVal1,--modVal2-,--condition----→--BEM-\"><a href=\"#toggleMod----elem-,-modName,-modVal1,--modVal2-,--condition----→--BEM-\" class=\"anchor\"></a>toggleMod ( [elem], modName, modVal1, [modVal2], [condition] ) → {BEM}</h4>\n<p>Sets a modifier for a block/nested element, depending on conditions.\nIf the condition parameter is passed: when true, modVal1 is set; when false, modVal2 is set.\nIf the condition parameter is not passed: modVal1 is set if modVal2 was set, or vice versa.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal1 {String}<br/>\nFirst modifier value</li>\n<li>[modVal2] {String}<br/>\nSecond modifier value</li>\n<li>[condition] {Boolean}<br/>\nCondition</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"delMod----elem-,-modName---→--BEM---protected\"><a href=\"#delMod----elem-,-modName---→--BEM---protected\" class=\"anchor\"></a>delMod ( [elem], modName ) → {BEM}  protected</h4>\n<p>Removes a modifier from a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"getDefaultParams----→--Object---protected\"><a href=\"#getDefaultParams----→--Object---protected\" class=\"anchor\"></a>getDefaultParams () → {Object}  protected</h4>\n<p>Returns a block&#39;s default parameters</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<h4 id=\"nextTick---fn---→--BEM---protected\"><a href=\"#nextTick---fn---→--BEM---protected\" class=\"anchor\"></a>nextTick ( fn ) → {BEM}  protected</h4>\n<p>Executes given callback on next turn eventloop in block&#39;s context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>fn {Function}<br/>\ncallback</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"blocks--Object-\"><a href=\"#blocks--Object-\" class=\"anchor\"></a>blocks {Object}</h4>\n<p>Storage for block declarations (hash by block name)</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"decl---decl,--props-,--staticProps----→--Function-\"><a href=\"#decl---decl,--props-,--staticProps----→--Function-\" class=\"anchor\"></a>decl ( decl, [props], [staticProps] ) → {Function}</h4>\n<p>Declares blocks and creates a block class</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>decl {String | Object}<br/>\nBlock name (simple syntax) or description</li>\n<li>decl.block | decl.name {String}<br/>\nBlock name</li>\n<li>[decl.baseBlock] {String}<br/>\nName of the parent block</li>\n<li>[decl.baseMix] {Array}<br/>\nMixed block names</li>\n<li>[decl.modName] {String}<br/>\nModifier name</li>\n<li>[decl.modVal] {String | Array}<br/>\nModifier value</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"create---block,--params----→--BEM-\"><a href=\"#create---block,--params----→--BEM-\" class=\"anchor\"></a>create ( block, [params] ) → {BEM}</h4>\n<p>Factory method for creating an instance of the block named</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>block {String | Object}<br/>\nBlock name or description</li>\n<li>[params] {Object}<br/>\nBlock parameters</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"getName----→--String-\"><a href=\"#getName----→--String-\" class=\"anchor\"></a>getName () → {String}</h4>\n<p>Returns the name of the current block</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--Function-\"><a href=\"#on---e,--data-,-fn,--ctx----→--Function-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {Function}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | Object}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--Function-\"><a href=\"#un----e-,--fn-,--ctx----→--Function-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {Function}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String | Object}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"decl---decl,--props-,--staticProps----→--Function---protected\"><a href=\"#decl---decl,--props-,--staticProps----→--Function---protected\" class=\"anchor\"></a>decl ( decl, [props], [staticProps] ) → {Function}  protected</h4>\n<p>Declares elements and creates an elements class</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>decl {Object}<br/>\nElement description</li>\n<li>decl.block {String}<br/>\nBlock name</li>\n<li>decl.elem {String}<br/>\nElement name</li>\n<li>[decl.baseBlock] {String}<br/>\nName of the parent block</li>\n<li>[decl.baseMix] {Array}<br/>\nMixed block names</li>\n<li>[decl.modName] {String}<br/>\nModifier name</li>\n<li>[decl.modVal] {String | Array}<br/>\nModifier value</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"create---desc,--params----→--BEM-\"><a href=\"#create---desc,--params----→--BEM-\" class=\"anchor\"></a>create ( desc, [params] ) → {BEM}</h4>\n<p>Factory method for creating an instance of the element named</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>desc {Object}<br/>\nDescription</li>\n<li>[params] {Object}<br/>\nInstance parameters</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"getName----shortName----→--String---protected\"><a href=\"#getName----shortName----→--String---protected\" class=\"anchor\"></a>getName ( [shortName] ) → {String}  protected</h4>\n<p>Returns the name of the current instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[shortName] {Boolean}<br/>\nreturn the short name of the current instance</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__internal-Module\"><a href=\"#i-bem__internal-Module\" class=\"anchor\"></a>i-bem__internal Module</h1>\n<h2 id=\"buildClass---block,--elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass---block,--elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( block, [elem], [modName], [modVal] ) → {String}</h2>\n<p>Builds the class of a block or element with a modifier</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>block {String}<br/>\nBlock name</li>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String | Number}<br/>\nModifier value</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<p>Class</p>\n<h2 id=\"buildClasses---block,--elem-,--mods----→--String-\"><a href=\"#buildClasses---block,--elem-,--mods----→--String-\" class=\"anchor\"></a>buildClasses ( block, [elem], [mods] ) → {String}</h2>\n<p>Builds full classes for a buffer or element with modifiers</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>block {String}<br/>\nBlock name</li>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[mods] {Object}<br/>\nModifiers</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<p>Class</p>\n<h1 id=\"i-bem-Module\"><a href=\"#i-bem-Module\" class=\"anchor\"></a>i-bem Module</h1>\n<h2 id=\"BEM-Class\"><a href=\"#BEM-Class\" class=\"anchor\"></a>BEM Class</h2>\n<p>Aughtments {BEM}</p>\n<p>Base block for creating BEM blocks</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"params--Object---readonly-\"><a href=\"#params--Object---readonly-\" class=\"anchor\"></a>params {Object} (readonly)</h4>\n<p>Block parameters, taking into account the defaults</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--BEM-\"><a href=\"#on---e,--data-,-fn,--ctx----→--BEM-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {BEM}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | Object}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--BEM-\"><a href=\"#un----e-,--fn-,--ctx----→--BEM-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {BEM}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String | Object}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"emit---e,--data----→--BEM---protected\"><a href=\"#emit---e,--data----→--BEM---protected\" class=\"anchor\"></a>emit ( e, [data] ) → {BEM}  protected</h4>\n<p>Executes the block&#39;s event handlers and live event handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"hasMod----elem-,-modName,--modVal----→--Boolean-\"><a href=\"#hasMod----elem-,-modName,--modVal----→--Boolean-\" class=\"anchor\"></a>hasMod ( [elem], modName, [modVal] ) → {Boolean}</h4>\n<p>Checks whether a block or nested element has a modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getMod----elem-,-modName---→--String-\"><a href=\"#getMod----elem-,-modName---→--String-\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}</h4>\n<p>Returns the value of the modifier of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,-----modNames----→--Object-\"><a href=\"#getMods----elem-,-----modNames----→--Object-\" class=\"anchor\"></a>getMods ( [elem], [...modNames] ) → {Object}</h4>\n<p>Returns values of modifiers of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>[...modNames] {String}<br/>\nModifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}</h4>\n<p>Sets the modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"_onSetMod---modName,-modVal,-oldModVal,--elem-,--elemName-----protected\"><a href=\"#_onSetMod---modName,-modVal,-oldModVal,--elem-,--elemName-----protected\" class=\"anchor\"></a>_onSetMod ( modName, modVal, oldModVal, [elem], [elemName] )  protected</h4>\n<p>Function after successfully changing the modifier of the block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n<li>oldModVal {String}<br/>\nOld modifier value</li>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>[elemName] {String}<br/>\nElement name</li>\n</ul>\n<h4 id=\"toggleMod----elem-,-modName,-modVal1,--modVal2-,--condition----→--BEM-\"><a href=\"#toggleMod----elem-,-modName,-modVal1,--modVal2-,--condition----→--BEM-\" class=\"anchor\"></a>toggleMod ( [elem], modName, modVal1, [modVal2], [condition] ) → {BEM}</h4>\n<p>Sets a modifier for a block/nested element, depending on conditions.\nIf the condition parameter is passed: when true, modVal1 is set; when false, modVal2 is set.\nIf the condition parameter is not passed: modVal1 is set if modVal2 was set, or vice versa.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal1 {String}<br/>\nFirst modifier value</li>\n<li>[modVal2] {String}<br/>\nSecond modifier value</li>\n<li>[condition] {Boolean}<br/>\nCondition</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"delMod----elem-,-modName---→--BEM---protected\"><a href=\"#delMod----elem-,-modName---→--BEM---protected\" class=\"anchor\"></a>delMod ( [elem], modName ) → {BEM}  protected</h4>\n<p>Removes a modifier from a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {Object}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h4 id=\"getDefaultParams----→--Object---protected\"><a href=\"#getDefaultParams----→--Object---protected\" class=\"anchor\"></a>getDefaultParams () → {Object}  protected</h4>\n<p>Returns a block&#39;s default parameters</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<h4 id=\"nextTick---fn---→--BEM---protected\"><a href=\"#nextTick---fn---→--BEM---protected\" class=\"anchor\"></a>nextTick ( fn ) → {BEM}  protected</h4>\n<p>Executes given callback on next turn eventloop in block&#39;s context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>fn {Function}<br/>\ncallback</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<p>this</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"blocks--Object-\"><a href=\"#blocks--Object-\" class=\"anchor\"></a>blocks {Object}</h4>\n<p>Storage for block declarations (hash by block name)</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"decl---decl,--props-,--staticProps----→--Function-\"><a href=\"#decl---decl,--props-,--staticProps----→--Function-\" class=\"anchor\"></a>decl ( decl, [props], [staticProps] ) → {Function}</h4>\n<p>Declares blocks and creates a block class</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>decl {String | Object}<br/>\nBlock name (simple syntax) or description</li>\n<li>decl.block | decl.name {String}<br/>\nBlock name</li>\n<li>[decl.baseBlock] {String}<br/>\nName of the parent block</li>\n<li>[decl.baseMix] {Array}<br/>\nMixed block names</li>\n<li>[decl.modName] {String}<br/>\nModifier name</li>\n<li>[decl.modVal] {String | Array}<br/>\nModifier value</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"create---block,--params----→--BEM-\"><a href=\"#create---block,--params----→--BEM-\" class=\"anchor\"></a>create ( block, [params] ) → {BEM}</h4>\n<p>Factory method for creating an instance of the block named</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>block {String | Object}<br/>\nBlock name or description</li>\n<li>[params] {Object}<br/>\nBlock parameters</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"getName----→--String-\"><a href=\"#getName----→--String-\" class=\"anchor\"></a>getName () → {String}</h4>\n<p>Returns the name of the current block</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"on---e,--data-,-fn,--ctx----→--Function-\"><a href=\"#on---e,--data-,-fn,--ctx----→--Function-\" class=\"anchor\"></a>on ( e, [data], fn, [ctx] ) → {Function}</h4>\n<p>Adds an event handler</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>e {String | Object}<br/>\nEvent type</li>\n<li>[data] {Object}<br/>\nAdditional data that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"un----e-,--fn-,--ctx----→--Function-\"><a href=\"#un----e-,--fn-,--ctx----→--Function-\" class=\"anchor\"></a>un ( [e], [fn], [ctx] ) → {Function}</h4>\n<p>Removes event handler or handlers</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[e] {String | Object}<br/>\nEvent type</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[ctx] {Object}<br/>\nHandler context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"decl---decl,--props-,--staticProps----→--Function---protected\"><a href=\"#decl---decl,--props-,--staticProps----→--Function---protected\" class=\"anchor\"></a>decl ( decl, [props], [staticProps] ) → {Function}  protected</h4>\n<p>Declares elements and creates an elements class</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>decl {Object}<br/>\nElement description</li>\n<li>decl.block {String}<br/>\nBlock name</li>\n<li>decl.elem {String}<br/>\nElement name</li>\n<li>[decl.baseBlock] {String}<br/>\nName of the parent block</li>\n<li>[decl.baseMix] {Array}<br/>\nMixed block names</li>\n<li>[decl.modName] {String}<br/>\nModifier name</li>\n<li>[decl.modVal] {String | Array}<br/>\nModifier value</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"create---desc,--params----→--BEM-\"><a href=\"#create---desc,--params----→--BEM-\" class=\"anchor\"></a>create ( desc, [params] ) → {BEM}</h4>\n<p>Factory method for creating an instance of the element named</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>desc {Object}<br/>\nDescription</li>\n<li>[params] {Object}<br/>\nInstance parameters</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"getName----shortName----→--String---protected\"><a href=\"#getName----shortName----→--String---protected\" class=\"anchor\"></a>getName ( [shortName] ) → {String}  protected</h4>\n<p>Returns the name of the current instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[shortName] {Boolean}<br/>\nreturn the short name of the current instance</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__collection-Module\"><a href=\"#i-bem__collection-Module\" class=\"anchor\"></a>i-bem__collection Module</h1>\n<h2 id=\"BEMCollection-Class\"><a href=\"#BEMCollection-Class\" class=\"anchor\"></a>BEMCollection Class</h2>\n<p>Aughtments {Array}</p>\n<p>Base class for collections. Create collection of similar objects.</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"getMethods----→--Array-\"><a href=\"#getMethods----→--Array-\" class=\"anchor\"></a>getMethods () → {Array}</h4>\n<p>Get method names that will be implemented in collection</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Array}</p>\n<h4 id=\"getBase----→--Object-\"><a href=\"#getBase----→--Object-\" class=\"anchor\"></a>getBase () → {Object}</h4>\n<p>Get base prototype for collection</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<h4 id=\"create---a---→--Object-\"><a href=\"#create---a---→--Object-\" class=\"anchor\"></a>create ( a ) → {Object}</h4>\n<p>Create collection instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>a {Array}<br/>\nlist of similar objects</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<h1 id=\"i-bem__collection_type_dom-Module\"><a href=\"#i-bem__collection_type_dom-Module\" class=\"anchor\"></a>i-bem__collection_type_dom Module</h1>\n<h2 id=\"BEMDOMCollection-Class\"><a href=\"#BEMDOMCollection-Class\" class=\"anchor\"></a>BEMDOMCollection Class</h2>\n<p>Aughtments {i-bem__collection}</p>\n<p>Collection of BEM.DOM blocks. Implementation of BEM.DOM methods for array of blocks.</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"getMethods----→--Array-\"><a href=\"#getMethods----→--Array-\" class=\"anchor\"></a>getMethods () → {Array}</h4>\n<p>Get methods that will be implemented in BEMDOMCollection</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Array}</p>\n<h1 id=\"i-bem__dom-Module\"><a href=\"#i-bem__dom-Module\" class=\"anchor\"></a>i-bem__dom Module</h1>\n<h2 id=\"BEMDOM-Class\"><a href=\"#BEMDOM-Class\" class=\"anchor\"></a>BEMDOM Class</h2>\n<p>Aughtments {BEMDOM}</p>\n<p>Base block for creating BEM blocks that have DOM representation</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"domElem--jQuery---readonly-\"><a href=\"#domElem--jQuery---readonly-\" class=\"anchor\"></a>domElem {jQuery} (readonly)</h4>\n<p>DOM elements of block</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"findBlocksInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDomElem ( domElem, event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler for any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event will be listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToDoc---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDoc---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDoc ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToWin---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToWin---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToWin ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindTo ( [elem], event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nElement</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDomElem ( domElem, event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event was being listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDoc---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDoc---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDoc ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromWin---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromWin---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromWin ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFrom ( [elem], event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nNested element</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEMDOM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEMDOM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEMDOM}</h4>\n<p>Sets a modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\"><a href=\"#findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\" class=\"anchor\"></a>findElem ( [ctx=this.domElem], names, [modName], [modVal], [strictMode=false] ) → {jQuery}</h4>\n<p>Finds elements nested in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elem---names,--modName-,--modVal----→--jQuery-\"><a href=\"#elem---names,--modName-,--modVal----→--jQuery-\" class=\"anchor\"></a>elem ( names, [modName], [modVal] ) → {jQuery}</h4>\n<p>Lazy search for elements nested in a block (caches results)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElem---ctx,-elemName---→--jQuery-\"><a href=\"#closestElem---ctx,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( ctx, elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\ncontext</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\"><a href=\"#dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\" class=\"anchor\"></a>dropElemCache ( [names], [modName], [modVal] ) → {BEMDOM}  protected</h4>\n<p>Clearing the cache for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[names] {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"elemParams---elem---→--Object-\"><a href=\"#elemParams---elem---→--Object-\" class=\"anchor\"></a>elemParams ( elem ) → {Object}</h4>\n<p>Retrieves parameters of a block element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Parameters</p>\n<h4 id=\"elemify---elem,-elemName---→--jQuery-\"><a href=\"#elemify---elem,-elemName---→--jQuery-\" class=\"anchor\"></a>elemify ( elem, elemName ) → {jQuery}</h4>\n<p>Elemify given element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {jQuery}<br/>\nElement</li>\n<li>elemName {String}<br/>\nName</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<h4 id=\"containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\"><a href=\"#containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\" class=\"anchor\"></a>containsDomElem ( [ctx=this.domElem], domElem ) → {Boolean}  protected</h4>\n<p>Checks whether a DOM element is in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where check is being performed</li>\n<li>domElem {jQuery}<br/>\nDOM element</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to a block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getMod----elem-,-modName---→--String---protected\"><a href=\"#getMod----elem-,-modName---→--String---protected\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}  protected</h4>\n<p>Delegates native getMod helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,--modName1----→--Object---protected\"><a href=\"#getMods----elem-,--modName1----→--Object---protected\" class=\"anchor\"></a>getMods ( [elem], [modName1] ) → {Object}  protected</h4>\n<p>Delegates native getMods helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>[modName1] {String}<br/>\n..., modNameN] Modifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM---protected\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM---protected\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}  protected</h4>\n<p>Delegates native setMod helper to element&#39;s instances</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"block----→--BEMDOM-\"><a href=\"#block----→--BEMDOM-\" class=\"anchor\"></a>block () → {BEMDOM}</h4>\n<p>Returns and initializes (if necessary) the own block of current element</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elemInstance---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstance---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstance ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"elemInstances---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstances---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstances ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstance ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstances ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElem----ctx=this-domElem-,-elemName---→--jQuery-\"><a href=\"#closestElem----ctx=this-domElem-,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( [ctx=this.domElem], elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstance ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instance of defined element outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstances ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"scope--jQuery-\"><a href=\"#scope--jQuery-\" class=\"anchor\"></a>scope {jQuery}</h4>\n<p>Scope, will be set on onDomReady to <code>&lt;body&gt;</code></p>\n<h4 id=\"doc--jQuery-\"><a href=\"#doc--jQuery-\" class=\"anchor\"></a>doc {jQuery}</h4>\n<p>Document shortcut</p>\n<h4 id=\"win--jQuery-\"><a href=\"#win--jQuery-\" class=\"anchor\"></a>win {jQuery}</h4>\n<p>Window shortcut</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"init----ctx=scope----→--jQuery-\"><a href=\"#init----ctx=scope----→--jQuery-\" class=\"anchor\"></a>init ( [ctx=scope] ) → {jQuery}</h4>\n<p>Initializes blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=scope] {jQuery | String}<br/>\nRoot DOM node</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>ctx Initialization context</p>\n<h4 id=\"destruct---ctx,--excludeSelf=false---\"><a href=\"#destruct---ctx,--excludeSelf=false---\" class=\"anchor\"></a>destruct ( ctx, [excludeSelf=false] )</h4>\n<p>Destroys blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>[excludeSelf=false] {Boolean}<br/>\nExclude the main domElem</li>\n</ul>\n<h4 id=\"update---ctx,-content---→--jQuery-\"><a href=\"#update---ctx,-content---→--jQuery-\" class=\"anchor\"></a>update ( ctx, content ) → {jQuery}</h4>\n<p>Replaces a fragment of the DOM tree inside the context, destroying old blocks and intializing new ones</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nNew content</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>Updated root DOM node</p>\n<h4 id=\"replace---ctx,-content---→--jQuery-\"><a href=\"#replace---ctx,-content---→--jQuery-\" class=\"anchor\"></a>replace ( ctx, content ) → {jQuery}</h4>\n<p>Changes a fragment of the DOM tree including the context and initializes blocks.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"append---ctx,-content---→--jQuery-\"><a href=\"#append---ctx,-content---→--jQuery-\" class=\"anchor\"></a>append ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the end of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"prepend---ctx,-content---→--jQuery-\"><a href=\"#prepend---ctx,-content---→--jQuery-\" class=\"anchor\"></a>prepend ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the beginning of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"before---ctx,-content---→--jQuery-\"><a href=\"#before---ctx,-content---→--jQuery-\" class=\"anchor\"></a>before ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree before the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"after---ctx,-content---→--jQuery-\"><a href=\"#after---ctx,-content---→--jQuery-\" class=\"anchor\"></a>after ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree after the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"liveInitOnEvent----elemName-,-event,--callback-----protected\"><a href=\"#liveInitOnEvent----elemName-,-event,--callback-----protected\" class=\"anchor\"></a>liveInitOnEvent ( [elemName], event, [callback] )  protected</h4>\n<p>Helper for live initialization for an event on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elemName] {String}<br/>\nElement name or names (separated by spaces)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to call after successful initialization</li>\n</ul>\n<h4 id=\"liveBindTo----to-,-event,--callback-----protected\"><a href=\"#liveBindTo----to-,-event,--callback-----protected\" class=\"anchor\"></a>liveBindTo ( [to], event, [callback] )  protected</h4>\n<p>Helper for subscribing to live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[to] {String | Object}<br/>\nDescription (object with modName, modVal, elem) or name of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveUnbindFrom----elem-,-event,--callback-----protected\"><a href=\"#liveUnbindFrom----elem-,-event,--callback-----protected\" class=\"anchor\"></a>liveUnbindFrom ( [elem], event, [callback] )  protected</h4>\n<p>Helper for unsubscribing from live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nName of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveInitOnBlockEvent---event,-blockName,-callback----protected\"><a href=\"#liveInitOnBlockEvent---event,-blockName,-callback----protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, blockName, callback )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event on the current block&#39;s DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>callback {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\"><a href=\"#liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\" class=\"anchor\"></a>liveInitOnBlockInsideEvent ( event, blockName, [callback] )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event inside the current block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"on----ctx-,-e,--data-,-fn,--fnCtx---\"><a href=\"#on----ctx-,-e,--data-,-fn,--fnCtx---\" class=\"anchor\"></a>on ( [ctx], e, [data], fn, [fnCtx] )</h4>\n<p>Adds a live event handler to a block, based on a specified element where the event will be listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event will be listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler&#39;s context</li>\n</ul>\n<h4 id=\"un----ctx-,-e,--fn-,--fnCtx---\"><a href=\"#un----ctx-,-e,--fn-,--fnCtx---\" class=\"anchor\"></a>un ( [ctx], e, [fn], [fnCtx] )</h4>\n<p>Removes the live event handler from a block, based on a specified element where the event was being listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event was being listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler context</li>\n</ul>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\"><a href=\"#decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\" class=\"anchor\"></a>decl ( name, [props], [staticProps], [_autoDecl] ) → {Function}  protected</h4>\n<p>Auto-declarator for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>name {Object}<br/>\nInstance name</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n<li>[_autoDecl] {Object}<br/>\nAuto-declaration flag</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"liveInitOnBlockEvent---event,--callback----→--Function---protected\"><a href=\"#liveInitOnBlockEvent---event,--callback----→--Function---protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, [callback] ) → {Function}  protected</h4>\n<p>Helper for live initialization for an own block&#39;s event</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new element&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__dom-Module\"><a href=\"#i-bem__dom-Module\" class=\"anchor\"></a>i-bem__dom Module</h1>\n<p>Overrides BEM.DOM.findBlocks* methods that they return i-bem__collection_type_dom</p>\n<h2 id=\"BEMDOM-Class\"><a href=\"#BEMDOM-Class\" class=\"anchor\"></a>BEMDOM Class</h2>\n<p>Aughtments {BEMDOM}</p>\n<p>Base block for creating BEM blocks that have DOM representation</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"domElem--jQuery---readonly-\"><a href=\"#domElem--jQuery---readonly-\" class=\"anchor\"></a>domElem {jQuery} (readonly)</h4>\n<p>DOM elements of block</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"findBlocksInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDomElem ( domElem, event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler for any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event will be listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToDoc---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDoc---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDoc ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToWin---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToWin---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToWin ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindTo ( [elem], event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nElement</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDomElem ( domElem, event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event was being listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDoc---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDoc---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDoc ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromWin---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromWin---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromWin ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFrom ( [elem], event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nNested element</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEMDOM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEMDOM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEMDOM}</h4>\n<p>Sets a modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\"><a href=\"#findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\" class=\"anchor\"></a>findElem ( [ctx=this.domElem], names, [modName], [modVal], [strictMode=false] ) → {jQuery}</h4>\n<p>Finds elements nested in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elem---names,--modName-,--modVal----→--jQuery-\"><a href=\"#elem---names,--modName-,--modVal----→--jQuery-\" class=\"anchor\"></a>elem ( names, [modName], [modVal] ) → {jQuery}</h4>\n<p>Lazy search for elements nested in a block (caches results)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElem---ctx,-elemName---→--jQuery-\"><a href=\"#closestElem---ctx,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( ctx, elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\ncontext</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\"><a href=\"#dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\" class=\"anchor\"></a>dropElemCache ( [names], [modName], [modVal] ) → {BEMDOM}  protected</h4>\n<p>Clearing the cache for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[names] {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"elemParams---elem---→--Object-\"><a href=\"#elemParams---elem---→--Object-\" class=\"anchor\"></a>elemParams ( elem ) → {Object}</h4>\n<p>Retrieves parameters of a block element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Parameters</p>\n<h4 id=\"elemify---elem,-elemName---→--jQuery-\"><a href=\"#elemify---elem,-elemName---→--jQuery-\" class=\"anchor\"></a>elemify ( elem, elemName ) → {jQuery}</h4>\n<p>Elemify given element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {jQuery}<br/>\nElement</li>\n<li>elemName {String}<br/>\nName</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<h4 id=\"containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\"><a href=\"#containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\" class=\"anchor\"></a>containsDomElem ( [ctx=this.domElem], domElem ) → {Boolean}  protected</h4>\n<p>Checks whether a DOM element is in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where check is being performed</li>\n<li>domElem {jQuery}<br/>\nDOM element</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to a block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getMod----elem-,-modName---→--String---protected\"><a href=\"#getMod----elem-,-modName---→--String---protected\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}  protected</h4>\n<p>Delegates native getMod helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,--modName1----→--Object---protected\"><a href=\"#getMods----elem-,--modName1----→--Object---protected\" class=\"anchor\"></a>getMods ( [elem], [modName1] ) → {Object}  protected</h4>\n<p>Delegates native getMods helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>[modName1] {String}<br/>\n..., modNameN] Modifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM---protected\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM---protected\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}  protected</h4>\n<p>Delegates native setMod helper to element&#39;s instances</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"block----→--BEMDOM-\"><a href=\"#block----→--BEMDOM-\" class=\"anchor\"></a>block () → {BEMDOM}</h4>\n<p>Returns and initializes (if necessary) the own block of current element</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elemInstance---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstance---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstance ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"elemInstances---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstances---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstances ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstance ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstances ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElem----ctx=this-domElem-,-elemName---→--jQuery-\"><a href=\"#closestElem----ctx=this-domElem-,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( [ctx=this.domElem], elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstance ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instance of defined element outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstances ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"scope--jQuery-\"><a href=\"#scope--jQuery-\" class=\"anchor\"></a>scope {jQuery}</h4>\n<p>Scope, will be set on onDomReady to <code>&lt;body&gt;</code></p>\n<h4 id=\"doc--jQuery-\"><a href=\"#doc--jQuery-\" class=\"anchor\"></a>doc {jQuery}</h4>\n<p>Document shortcut</p>\n<h4 id=\"win--jQuery-\"><a href=\"#win--jQuery-\" class=\"anchor\"></a>win {jQuery}</h4>\n<p>Window shortcut</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"init----ctx=scope----→--jQuery-\"><a href=\"#init----ctx=scope----→--jQuery-\" class=\"anchor\"></a>init ( [ctx=scope] ) → {jQuery}</h4>\n<p>Initializes blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=scope] {jQuery | String}<br/>\nRoot DOM node</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>ctx Initialization context</p>\n<h4 id=\"destruct---ctx,--excludeSelf=false---\"><a href=\"#destruct---ctx,--excludeSelf=false---\" class=\"anchor\"></a>destruct ( ctx, [excludeSelf=false] )</h4>\n<p>Destroys blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>[excludeSelf=false] {Boolean}<br/>\nExclude the main domElem</li>\n</ul>\n<h4 id=\"update---ctx,-content---→--jQuery-\"><a href=\"#update---ctx,-content---→--jQuery-\" class=\"anchor\"></a>update ( ctx, content ) → {jQuery}</h4>\n<p>Replaces a fragment of the DOM tree inside the context, destroying old blocks and intializing new ones</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nNew content</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>Updated root DOM node</p>\n<h4 id=\"replace---ctx,-content---→--jQuery-\"><a href=\"#replace---ctx,-content---→--jQuery-\" class=\"anchor\"></a>replace ( ctx, content ) → {jQuery}</h4>\n<p>Changes a fragment of the DOM tree including the context and initializes blocks.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"append---ctx,-content---→--jQuery-\"><a href=\"#append---ctx,-content---→--jQuery-\" class=\"anchor\"></a>append ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the end of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"prepend---ctx,-content---→--jQuery-\"><a href=\"#prepend---ctx,-content---→--jQuery-\" class=\"anchor\"></a>prepend ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the beginning of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"before---ctx,-content---→--jQuery-\"><a href=\"#before---ctx,-content---→--jQuery-\" class=\"anchor\"></a>before ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree before the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"after---ctx,-content---→--jQuery-\"><a href=\"#after---ctx,-content---→--jQuery-\" class=\"anchor\"></a>after ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree after the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"liveInitOnEvent----elemName-,-event,--callback-----protected\"><a href=\"#liveInitOnEvent----elemName-,-event,--callback-----protected\" class=\"anchor\"></a>liveInitOnEvent ( [elemName], event, [callback] )  protected</h4>\n<p>Helper for live initialization for an event on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elemName] {String}<br/>\nElement name or names (separated by spaces)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to call after successful initialization</li>\n</ul>\n<h4 id=\"liveBindTo----to-,-event,--callback-----protected\"><a href=\"#liveBindTo----to-,-event,--callback-----protected\" class=\"anchor\"></a>liveBindTo ( [to], event, [callback] )  protected</h4>\n<p>Helper for subscribing to live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[to] {String | Object}<br/>\nDescription (object with modName, modVal, elem) or name of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveUnbindFrom----elem-,-event,--callback-----protected\"><a href=\"#liveUnbindFrom----elem-,-event,--callback-----protected\" class=\"anchor\"></a>liveUnbindFrom ( [elem], event, [callback] )  protected</h4>\n<p>Helper for unsubscribing from live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nName of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveInitOnBlockEvent---event,-blockName,-callback----protected\"><a href=\"#liveInitOnBlockEvent---event,-blockName,-callback----protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, blockName, callback )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event on the current block&#39;s DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>callback {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\"><a href=\"#liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\" class=\"anchor\"></a>liveInitOnBlockInsideEvent ( event, blockName, [callback] )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event inside the current block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"on----ctx-,-e,--data-,-fn,--fnCtx---\"><a href=\"#on----ctx-,-e,--data-,-fn,--fnCtx---\" class=\"anchor\"></a>on ( [ctx], e, [data], fn, [fnCtx] )</h4>\n<p>Adds a live event handler to a block, based on a specified element where the event will be listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event will be listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler&#39;s context</li>\n</ul>\n<h4 id=\"un----ctx-,-e,--fn-,--fnCtx---\"><a href=\"#un----ctx-,-e,--fn-,--fnCtx---\" class=\"anchor\"></a>un ( [ctx], e, [fn], [fnCtx] )</h4>\n<p>Removes the live event handler from a block, based on a specified element where the event was being listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event was being listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler context</li>\n</ul>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\"><a href=\"#decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\" class=\"anchor\"></a>decl ( name, [props], [staticProps], [_autoDecl] ) → {Function}  protected</h4>\n<p>Auto-declarator for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>name {Object}<br/>\nInstance name</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n<li>[_autoDecl] {Object}<br/>\nAuto-declaration flag</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"liveInitOnBlockEvent---event,--callback----→--Function---protected\"><a href=\"#liveInitOnBlockEvent---event,--callback----→--Function---protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, [callback] ) → {Function}  protected</h4>\n<p>Helper for live initialization for an own block&#39;s event</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new element&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__dom-Module\"><a href=\"#i-bem__dom-Module\" class=\"anchor\"></a>i-bem__dom Module</h1>\n<h2 id=\"BEMDOM-Class\"><a href=\"#BEMDOM-Class\" class=\"anchor\"></a>BEMDOM Class</h2>\n<p>Aughtments {BEMDOM}</p>\n<p>Base block for creating BEM blocks that have DOM representation</p>\n<h3 id=\"Instance-properties\"><a href=\"#Instance-properties\" class=\"anchor\"></a>Instance properties</h3>\n<h4 id=\"domElem--jQuery---readonly-\"><a href=\"#domElem--jQuery---readonly-\" class=\"anchor\"></a>domElem {jQuery} (readonly)</h4>\n<p>DOM elements of block</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"findBlocksInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockInside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockInside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockInside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block inside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOutside----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOutside----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOutside ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block outside the current block or its elements (including context)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlocksOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlocksOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlocksOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds blocks on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findBlockOn----elem-,-block---→--BEMDOM-\"><a href=\"#findBlockOn----elem-,-block---→--BEMDOM-\" class=\"anchor\"></a>findBlockOn ( [elem], block ) → {BEMDOM}</h4>\n<p>Finds the first block on DOM elements of the current block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String | jQuery}<br/>\nBlock element</li>\n<li>block {String | Object}<br/>\nName or description (block,modName,modVal) of the block to find</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDomElem---domElem,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDomElem ( domElem, event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler for any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event will be listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToDoc---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToDoc---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToDoc ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindToWin---event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindToWin---event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindToWin ( event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\"><a href=\"#bindTo----elem-,-event,--data-,-fn---→--BEMDOM---protected\" class=\"anchor\"></a>bindTo ( [elem], event, [data], fn ) → {BEMDOM}  protected</h4>\n<p>Adds an event handler to the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nElement</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[data] {Object}<br/>\nAdditional event data</li>\n<li>fn {Function}<br/>\nHandler function, which will be executed in the block&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDomElem---domElem,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDomElem ( domElem, event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from any DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>domElem {jQuery}<br/>\nDOM element where the event was being listened for</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromDoc---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromDoc---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromDoc ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from document</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFromWin---event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFromWin---event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFromWin ( event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handler from window</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\"><a href=\"#unbindFrom----elem-,-event,--fn----→--BEMDOM---protected\" class=\"anchor\"></a>unbindFrom ( [elem], event, [fn] ) → {BEMDOM}  protected</h4>\n<p>Removes event handlers from the block&#39;s main DOM elements or its nested elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery | String}<br/>\nNested element</li>\n<li>event {String | Object}<br/>\nEvent name or event object</li>\n<li>[fn] {Function}<br/>\nHandler function</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEMDOM-\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEMDOM-\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEMDOM}</h4>\n<p>Sets a modifier for a block/nested element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\"><a href=\"#findElem----ctx=this-domElem-,-names,--modName-,--modVal-,--strictMode=false----→--jQuery-\" class=\"anchor\"></a>findElem ( [ctx=this.domElem], names, [modName], [modVal], [strictMode=false] ) → {jQuery}</h4>\n<p>Finds elements nested in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elem---names,--modName-,--modVal----→--jQuery-\"><a href=\"#elem---names,--modName-,--modVal----→--jQuery-\" class=\"anchor\"></a>elem ( names, [modName], [modVal] ) → {jQuery}</h4>\n<p>Lazy search for elements nested in a block (caches results)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>names {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElem---ctx,-elemName---→--jQuery-\"><a href=\"#closestElem---ctx,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( ctx, elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\ncontext</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\"><a href=\"#dropElemCache----names-,--modName-,--modVal----→--BEMDOM---protected\" class=\"anchor\"></a>dropElemCache ( [names], [modName], [modVal] ) → {BEMDOM}  protected</h4>\n<p>Clearing the cache for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[names] {String}<br/>\nNested element name (or names separated by spaces)</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<p>this</p>\n<h4 id=\"elemParams---elem---→--Object-\"><a href=\"#elemParams---elem---→--Object-\" class=\"anchor\"></a>elemParams ( elem ) → {Object}</h4>\n<p>Retrieves parameters of a block element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Parameters</p>\n<h4 id=\"elemify---elem,-elemName---→--jQuery-\"><a href=\"#elemify---elem,-elemName---→--jQuery-\" class=\"anchor\"></a>elemify ( elem, elemName ) → {jQuery}</h4>\n<p>Elemify given element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {jQuery}<br/>\nElement</li>\n<li>elemName {String}<br/>\nName</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<h4 id=\"containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\"><a href=\"#containsDomElem----ctx=this-domElem-,-domElem---→--Boolean---protected\" class=\"anchor\"></a>containsDomElem ( [ctx=this.domElem], domElem ) → {Boolean}  protected</h4>\n<p>Checks whether a DOM element is in a block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where check is being performed</li>\n<li>domElem {jQuery}<br/>\nDOM element</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to a block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getMod----elem-,-modName---→--String---protected\"><a href=\"#getMod----elem-,-modName---→--String---protected\" class=\"anchor\"></a>getMod ( [elem], modName ) → {String}  protected</h4>\n<p>Delegates native getMod helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<p>Modifier value</p>\n<h4 id=\"getMods----elem-,--modName1----→--Object---protected\"><a href=\"#getMods----elem-,--modName1----→--Object---protected\" class=\"anchor\"></a>getMods ( [elem], [modName1] ) → {Object}  protected</h4>\n<p>Delegates native getMods helper to element&#39;s instance</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>[modName1] {String}<br/>\n..., modNameN] Modifier names</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Object}</p>\n<p>Hash of modifier values</p>\n<h4 id=\"setMod----elem-,-modName,-modVal---→--BEM---protected\"><a href=\"#setMod----elem-,-modName,-modVal---→--BEM---protected\" class=\"anchor\"></a>setMod ( [elem], modName, modVal ) → {BEM}  protected</h4>\n<p>Delegates native setMod helper to element&#39;s instances</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {jQuery}<br/>\nNested element</li>\n<li>modName {String}<br/>\nModifier name</li>\n<li>modVal {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEM}</p>\n<h4 id=\"block----→--BEMDOM-\"><a href=\"#block----→--BEMDOM-\" class=\"anchor\"></a>block () → {BEMDOM}</h4>\n<p>Returns and initializes (if necessary) the own block of current element</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"_filterFindElemResults---res---→--jQuery-\"><a href=\"#_filterFindElemResults---res---→--jQuery-\" class=\"anchor\"></a>_filterFindElemResults ( res ) → {jQuery}</h4>\n<p>Filters results of findElem helper execution in strict mode</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>res {jQuery}<br/>\nDOM elements</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"elemInstance---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstance---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstance ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"elemInstances---elem,--modName-,--modVal----→--BEMDOM-\"><a href=\"#elemInstances---elem,--modName-,--modVal----→--BEMDOM-\" class=\"anchor\"></a>elemInstances ( elem, [modName], [modVal] ) → {BEMDOM}</h4>\n<p>Lazy search (caches results) for instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstance----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstance ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds the first instance of defined element and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\"><a href=\"#findElemInstances----ctx=this-domElem-,-elem,--modName-,--modVal-,--strictMode=false----→--BEMDOM-\" class=\"anchor\"></a>findElemInstances ( [ctx=this.domElem], elem, [modName], [modVal], [strictMode=false] ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements and intializes it (if necessary)</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\nElement where search is being performed</li>\n<li>elem {String | jQuery}<br/>\nElement</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n<li>[strictMode=false] {Boolean}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElem----ctx=this-domElem-,-elemName---→--jQuery-\"><a href=\"#closestElem----ctx=this-domElem-,-elemName---→--jQuery-\" class=\"anchor\"></a>closestElem ( [ctx=this.domElem], elemName ) → {jQuery}</h4>\n<p>Finds elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>DOM elements</p>\n<h4 id=\"closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstance----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstance ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instance of defined element outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h4 id=\"closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\"><a href=\"#closestElemInstances----ctx=this-domElem-,-elemName---→--BEMDOM-\" class=\"anchor\"></a>closestElemInstances ( [ctx=this.domElem], elemName ) → {BEMDOM}</h4>\n<p>Finds instances of defined elements outside the context or current element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=this.domElem] {jQuery}<br/>\ncontext (current element by default)</li>\n<li>elemName {String}<br/>\nElement name</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{BEMDOM}</p>\n<h3 id=\"Static-properties\"><a href=\"#Static-properties\" class=\"anchor\"></a>Static properties</h3>\n<h4 id=\"scope--jQuery-\"><a href=\"#scope--jQuery-\" class=\"anchor\"></a>scope {jQuery}</h4>\n<p>Scope, will be set on onDomReady to <code>&lt;body&gt;</code></p>\n<h4 id=\"doc--jQuery-\"><a href=\"#doc--jQuery-\" class=\"anchor\"></a>doc {jQuery}</h4>\n<p>Document shortcut</p>\n<h4 id=\"win--jQuery-\"><a href=\"#win--jQuery-\" class=\"anchor\"></a>win {jQuery}</h4>\n<p>Window shortcut</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"init----ctx=scope----→--jQuery-\"><a href=\"#init----ctx=scope----→--jQuery-\" class=\"anchor\"></a>init ( [ctx=scope] ) → {jQuery}</h4>\n<p>Initializes blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx=scope] {jQuery | String}<br/>\nRoot DOM node</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>ctx Initialization context</p>\n<h4 id=\"destruct---ctx,--excludeSelf=false---\"><a href=\"#destruct---ctx,--excludeSelf=false---\" class=\"anchor\"></a>destruct ( ctx, [excludeSelf=false] )</h4>\n<p>Destroys blocks on a fragment of the DOM tree</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>[excludeSelf=false] {Boolean}<br/>\nExclude the main domElem</li>\n</ul>\n<h4 id=\"update---ctx,-content---→--jQuery-\"><a href=\"#update---ctx,-content---→--jQuery-\" class=\"anchor\"></a>update ( ctx, content ) → {jQuery}</h4>\n<p>Replaces a fragment of the DOM tree inside the context, destroying old blocks and intializing new ones</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nNew content</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>Updated root DOM node</p>\n<h4 id=\"replace---ctx,-content---→--jQuery-\"><a href=\"#replace---ctx,-content---→--jQuery-\" class=\"anchor\"></a>replace ( ctx, content ) → {jQuery}</h4>\n<p>Changes a fragment of the DOM tree including the context and initializes blocks.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"append---ctx,-content---→--jQuery-\"><a href=\"#append---ctx,-content---→--jQuery-\" class=\"anchor\"></a>append ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the end of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"prepend---ctx,-content---→--jQuery-\"><a href=\"#prepend---ctx,-content---→--jQuery-\" class=\"anchor\"></a>prepend ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree at the beginning of the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nRoot DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"before---ctx,-content---→--jQuery-\"><a href=\"#before---ctx,-content---→--jQuery-\" class=\"anchor\"></a>before ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree before the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"after---ctx,-content---→--jQuery-\"><a href=\"#after---ctx,-content---→--jQuery-\" class=\"anchor\"></a>after ( ctx, content ) → {jQuery}</h4>\n<p>Adds a fragment of the DOM tree after the context and initializes blocks</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>ctx {jQuery}<br/>\nContextual DOM node</li>\n<li>content {jQuery | String}<br/>\nContent to be added</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{jQuery}</p>\n<p>New content</p>\n<h4 id=\"liveInitOnEvent----elemName-,-event,--callback-----protected\"><a href=\"#liveInitOnEvent----elemName-,-event,--callback-----protected\" class=\"anchor\"></a>liveInitOnEvent ( [elemName], event, [callback] )  protected</h4>\n<p>Helper for live initialization for an event on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elemName] {String}<br/>\nElement name or names (separated by spaces)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to call after successful initialization</li>\n</ul>\n<h4 id=\"liveBindTo----to-,-event,--callback-----protected\"><a href=\"#liveBindTo----to-,-event,--callback-----protected\" class=\"anchor\"></a>liveBindTo ( [to], event, [callback] )  protected</h4>\n<p>Helper for subscribing to live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[to] {String | Object}<br/>\nDescription (object with modName, modVal, elem) or name of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveUnbindFrom----elem-,-event,--callback-----protected\"><a href=\"#liveUnbindFrom----elem-,-event,--callback-----protected\" class=\"anchor\"></a>liveUnbindFrom ( [elem], event, [callback] )  protected</h4>\n<p>Helper for unsubscribing from live events on DOM elements of a block or its elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nName of the element or elements (space-separated)</li>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler</li>\n</ul>\n<h4 id=\"liveInitOnBlockEvent---event,-blockName,-callback----protected\"><a href=\"#liveInitOnBlockEvent---event,-blockName,-callback----protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, blockName, callback )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event on the current block&#39;s DOM element</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>callback {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\"><a href=\"#liveInitOnBlockInsideEvent---event,-blockName,--callback-----protected\" class=\"anchor\"></a>liveInitOnBlockInsideEvent ( event, blockName, [callback] )  protected</h4>\n<p>Helper for live initialization for a different block&#39;s event inside the current block</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>blockName {String}<br/>\nName of the block that should trigger a reaction when initialized</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new block&#39;s context</li>\n</ul>\n<h4 id=\"on----ctx-,-e,--data-,-fn,--fnCtx---\"><a href=\"#on----ctx-,-e,--data-,-fn,--fnCtx---\" class=\"anchor\"></a>on ( [ctx], e, [data], fn, [fnCtx] )</h4>\n<p>Adds a live event handler to a block, based on a specified element where the event will be listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event will be listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[data] {Object}<br/>\nAdditional information that the handler gets as e.data</li>\n<li>fn {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler&#39;s context</li>\n</ul>\n<h4 id=\"un----ctx-,-e,--fn-,--fnCtx---\"><a href=\"#un----ctx-,-e,--fn-,--fnCtx---\" class=\"anchor\"></a>un ( [ctx], e, [fn], [fnCtx] )</h4>\n<p>Removes the live event handler from a block, based on a specified element where the event was being listened for</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[ctx] {jQuery}<br/>\nThe element in which the event was being listened for</li>\n<li>e {String}<br/>\nEvent name</li>\n<li>[fn] {Function}<br/>\nHandler</li>\n<li>[fnCtx] {Object}<br/>\nHandler context</li>\n</ul>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"buildSelector----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildSelector----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildSelector ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS selector corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h4 id=\"decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\"><a href=\"#decl---name,--props-,--staticProps-,--_autoDecl----→--Function---protected\" class=\"anchor\"></a>decl ( name, [props], [staticProps], [_autoDecl] ) → {Function}  protected</h4>\n<p>Auto-declarator for elements</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>name {Object}<br/>\nInstance name</li>\n<li>[props] {Object}<br/>\nMethods</li>\n<li>[staticProps] {Object}<br/>\nStatic methods</li>\n<li>[_autoDecl] {Object}<br/>\nAuto-declaration flag</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<h4 id=\"liveInitOnBlockEvent---event,--callback----→--Function---protected\"><a href=\"#liveInitOnBlockEvent---event,--callback----→--Function---protected\" class=\"anchor\"></a>liveInitOnBlockEvent ( event, [callback] ) → {Function}  protected</h4>\n<p>Helper for live initialization for an own block&#39;s event</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>event {String}<br/>\nEvent name</li>\n<li>[callback] {Function}<br/>\nHandler to be called after successful initialization in the new element&#39;s context</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Function}</p>\n<p>this</p>\n<h4 id=\"buildClass----elem-,--modName-,--modVal----→--String-\"><a href=\"#buildClass----elem-,--modName-,--modVal----→--String-\" class=\"anchor\"></a>buildClass ( [elem], [modName], [modVal] ) → {String}</h4>\n<p>Builds a CSS class corresponding to the block/element and modifier</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[elem] {String}<br/>\nElement name</li>\n<li>[modName] {String}<br/>\nModifier name</li>\n<li>[modVal] {String}<br/>\nModifier value</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{String}</p>\n<h1 id=\"i-bem__dom_init-Module\"><a href=\"#i-bem__dom_init-Module\" class=\"anchor\"></a>i-bem__dom_init Module</h1>\n<h2 id=\"-function-----ctx=scope----→--jQuery-\"><a href=\"#-function-----ctx=scope----→--jQuery-\" class=\"anchor\"></a><em>function</em> ( [ctx=scope] ) → {jQuery}</h2>\n<p>Initializes blocks on a fragment of the DOM tree</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>[ctx=scope] {jQuery}<br/>\nRoot DOM node</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{jQuery}</p>\n<p>ctx Initialization context</p>\n"},{"name":"identify","data":{"ru":{"name":"identify","examples":[],"description":""},"en":{"name":"identify","examples":[],"description":""}},"jsdoc":"<h1 id=\"identify-Module\"><a href=\"#identify-Module\" class=\"anchor\"></a>identify Module</h1>\n<h2 id=\"-function----obj,--onlyGet=false----→--String-\"><a href=\"#-function----obj,--onlyGet=false----→--String-\" class=\"anchor\"></a><em>function</em> ( obj, [onlyGet=false] ) → {String}</h2>\n<p>Makes unique ID</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {Object}<br/>\nObject that needs to be identified</li>\n<li>[onlyGet=false] {Boolean}<br/>\nReturn a unique value only if it had already been assigned before</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<p>ID</p>\n"},{"name":"idle","data":{"ru":{"name":"idle","examples":[],"description":""},"en":{"name":"idle","examples":[],"description":""}},"jsdoc":"<h1 id=\"idle-Module\"><a href=\"#idle-Module\" class=\"anchor\"></a>idle Module</h1>\n<h2 id=\"Idle-Class\"><a href=\"#Idle-Class\" class=\"anchor\"></a>Idle Class</h2>\n<p>Aughtments {events:Emitter}</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Idle---\"><a href=\"#Idle---\" class=\"anchor\"></a>Idle ()</h4>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"start---\"><a href=\"#start---\" class=\"anchor\"></a>start ()</h4>\n<p>Starts monitoring of idle state</p>\n<h4 id=\"stop---\"><a href=\"#stop---\" class=\"anchor\"></a>stop ()</h4>\n<p>Stops monitoring of idle state</p>\n<h4 id=\"isIdle----→--Boolean-\"><a href=\"#isIdle----→--Boolean-\" class=\"anchor\"></a>isIdle () → {Boolean}</h4>\n<p>Returns whether state is idle</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n"},{"name":"inherit","data":{"ru":{"name":"inherit","examples":[],"description":""},"en":{"name":"inherit","examples":[],"description":""}},"jsdoc":"<h1 id=\"inherit-Module\"><a href=\"#inherit-Module\" class=\"anchor\"></a>inherit Module</h1>\n<p>This module provides some syntax sugar for &quot;class&quot; declarations, constructors, mixins, &quot;super&quot; calls and static members.</p>\n<h2 id=\"-function-----baseClass---baseClassAndMixins-,-prototypeFields,--staticFields----→--Function-\"><a href=\"#-function-----baseClass---baseClassAndMixins-,-prototypeFields,--staticFields----→--Function-\" class=\"anchor\"></a><em>function</em> ( [baseClass | baseClassAndMixins], prototypeFields, [staticFields] ) → {Function}</h2>\n<p>Creates class</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>[baseClass | baseClassAndMixins] {Function | Array}<br/>\nclass (or class and mixins) to inherit from</li>\n<li>prototypeFields {Object}</li>\n<li>[staticFields] {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Function}</p>\n<p>class</p>\n"},{"name":"jquery","data":{"ru":{"name":"jquery","examples":[],"description":"<p>Используется для поставки на страницу нужных плагинов через зависимости блоков от элементов блока ##i-jquery##.</p>\n"},"en":{"name":"jquery","examples":[],"description":""}},"jsdoc":"<h1 id=\"jquery-Module\"><a href=\"#jquery-Module\" class=\"anchor\"></a>jquery Module</h1>\n<p>Provide jQuery (load if it does not exist).</p>\n<h2 id=\"-function----\"><a href=\"#-function----\" class=\"anchor\"></a><em>function</em> ()</h2>\n<h1 id=\"jquery__config-Module\"><a href=\"#jquery__config-Module\" class=\"anchor\"></a>jquery__config Module</h1>\n<p>Configuration for jQuery</p>\n<h2 id=\"url--String-\"><a href=\"#url--String-\" class=\"anchor\"></a>url {String}</h2>\n<p>URL for loading jQuery if it does not exist</p>\n<p>Value: &quot;//yastatic.net/jquery/2.1.1/jquery.min.js&quot;</p>\n"},{"name":"keyboard","data":{"ru":{"name":"keyboard","examples":[],"description":""},"en":{"name":"keyboard","examples":[],"description":""}},"jsdoc":"<h1 id=\"keyboard__codes-Module\"><a href=\"#keyboard__codes-Module\" class=\"anchor\"></a>keyboard__codes Module</h1>\n"},{"name":"loader","data":{"ru":{"name":"loader","examples":[],"description":""},"en":{"name":"loader","examples":[],"description":""}},"jsdoc":"<h1 id=\"loader_type_bundle-Module\"><a href=\"#loader_type_bundle-Module\" class=\"anchor\"></a>loader_type_bundle Module</h1>\n<p>Load BEM bundle (JS+CSS) from external URL.</p>\n<h2 id=\"-function----id,-url,-onSuccess,--onError---\"><a href=\"#-function----id,-url,-onSuccess,--onError---\" class=\"anchor\"></a><em>function</em> ( id, url, onSuccess, [onError] )</h2>\n<p>Loads bundle</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>id {String}</li>\n<li>url {String}</li>\n<li>onSuccess {Function}</li>\n<li>[onError] {Function}</li>\n</ul>\n<h1 id=\"loader_type_js-Module\"><a href=\"#loader_type_js-Module\" class=\"anchor\"></a>loader_type_js Module</h1>\n<p>Load JS from external URL.</p>\n<h2 id=\"-function----path,-success,-error--\"><a href=\"#-function----path,-success,-error--\" class=\"anchor\"></a><em>function</em> ( path, success, error )</h2>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>path {String}<br/>\nresource link</li>\n<li>success {Function}<br/>\nto be called if the script succeeds</li>\n<li>error {Function}<br/>\nto be called if the script fails</li>\n</ul>\n"},{"name":"next-tick","data":{"ru":{"name":"next-tick","examples":[],"description":""},"en":{"name":"next-tick","examples":[],"description":""}},"jsdoc":"<h1 id=\"next-tick-Module\"><a href=\"#next-tick-Module\" class=\"anchor\"></a>next-tick Module</h1>\n<h2 id=\"-function----fn--\"><a href=\"#-function----fn--\" class=\"anchor\"></a><em>function</em> ( fn )</h2>\n<p>Executes given function on next tick.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>fn {Function}</li>\n</ul>\n"},{"name":"objects","data":{"ru":{"name":"objects","examples":[],"description":""},"en":{"name":"objects","examples":[],"description":""}},"jsdoc":"<h1 id=\"objects-Module\"><a href=\"#objects-Module\" class=\"anchor\"></a>objects Module</h1>\n<p>A set of helpers to work with JavaScript objects</p>\n<h2 id=\"extend---target,-source---→--Object-\"><a href=\"#extend---target,-source---→--Object-\" class=\"anchor\"></a>extend ( target, source ) → {Object}</h2>\n<p>Extends a given target by</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>target {Object}<br/>\nobject to extend</li>\n<li>source {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Object}</p>\n<h2 id=\"isEmpty---obj---→--Boolean-\"><a href=\"#isEmpty---obj---→--Boolean-\" class=\"anchor\"></a>isEmpty ( obj ) → {Boolean}</h2>\n<p>Check whether a given object is empty (contains no enumerable properties)</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"each---obj,-fn,--ctx---\"><a href=\"#each---obj,-fn,--ctx---\" class=\"anchor\"></a>each ( obj, fn, [ctx] )</h2>\n<p>Generic iterator function over object</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {Object}<br/>\nobject to iterate</li>\n<li>fn {Function}<br/>\ncallback</li>\n<li>[ctx] {Object}<br/>\ncallbacks&#39;s context</li>\n</ul>\n"},{"name":"page","data":{"ru":{"name":"page","examples":[{"name":"10-simple","path":"touch-phone.examples/page/10-simple","notation":{"block":"10-simple"}},{"name":"20-doctype","path":"touch-phone.examples/page/20-doctype","notation":{"block":"20-doctype"}}],"description":"<p>﻿Блок <code>page</code> создаёт теги верхнего уровня страницы:</p>\n<ul>\n<li><code>&lt;html&gt;</code></li>\n<li><code>&lt;head&gt;</code></li>\n<li><code>&lt;body&gt;</code></li>\n</ul>\n<p>Именно он отвечает за то, какие подключить <code>CSS</code> и <code>JS</code> файлы к странице,\nвыставление <code>meta</code> тегов, заголовка и так далее.</p>\n<p>Декларация блока в <code>BEMJSON</code> начинается объявлением блока и\nуказанием свойства <code>title</code>, которое превращается в тег <code>&lt;title&gt;</code> в <code>HTML</code>.</p>\n<pre><code class=\"lang-javascript\">({\n    block: &#39;page&#39;,\n    title: &#39;Page title&#39;,\n    content: &#39;Блок page&#39;\n})\n</code></pre>\n<p>Указание свойства <code>head</code> дополняет элемент <code>head</code>, соответствующий <code>HTML</code> тегу <code>&lt;head&gt;</code>,\nэлементами для подключения <code>CSS</code> и <code>JS</code> файлов, а также указания <code>meta</code>:</p>\n<pre><code class=\"lang-javascript\">({\n    block: &#39;page&#39;,\n    title: &#39;Page title&#39;,\n    head: [\n        { elem: &#39;css&#39;, url: &#39;example.css&#39;, ie: false },\n        { elem: &#39;css&#39;, url: &#39;example.ie.css&#39;, ie: &#39;lt IE 8&#39; },\n        { elem: &#39;js&#39;, url: &#39;example.js&#39; },\n        { elem: &#39;meta&#39;, attrs: { name: &#39;keywords&#39;, content: &#39;js, css, html&#39; } },\n        { elem: &#39;meta&#39;, attrs: { name: &#39;description&#39;, content: &#39;Yet another webdev blog&#39; } }\n    ],\n    content: &#39;Страница с подключенными CSS, JS и meta-данными&#39;\n})\n</code></pre>\n<p>Элемент <code>css</code> превращается в <code>HTML</code> в тег <code>&lt;link&gt;</code>, подключающий как <code>CSS</code> стиль тот файл,\nчто указан в свойстве <code>url</code> этого элемента. Также у такого элемента может быть свойство <code>ie</code>.\nЕсли это свойство <code>false</code>, то будут использоваться такие <code>conditional comments</code>, которые предотвратят использование этих стилей в <code>IE</code>. При строчном значении этого свойства тег <code>&lt;link&gt;</code> , будет обёрнут в соответствующий <code>conditional comment</code>, и этот стиль будет грузиться и использоваться указанных браузерах.</p>\n<p>Также есть возможность указывать свойство <code>content</code> для содержания тега <code>&lt;style&gt;</code>:</p>\n<pre><code class=\"lang-javascript\">({\n    block: &#39;page&#39;,\n    title: &#39;Page title&#39;,\n    head: [\n        {\n            elem: &#39;css&#39;,\n            content: &#39;.page { color: #f00 }&#39;\n        }\n    ],\n    content: &#39;Страница с тэгом &lt;style&gt;&#39;\n})\n</code></pre>\n<p>Элемент <code>js</code> действует аналогично, подключая к странице <code>JS</code> файлы при помощи тега <code>&lt;script&gt;</code>.</p>\n<p>Свойство <code>head</code> не описывает содержание <code>HTML</code>-тега <code>&lt;head&gt;</code> полностью, а лишь\nдополняет дефолтное, которое блок сам создаёт в своём <code>BEMHTML</code> шаблоне.</p>\n<h3 id=\"Тег-<meta>-с-указанием-кодировки\"><a href=\"#Тег-<meta>-с-указанием-кодировки\" class=\"anchor\"></a>Тег <code>meta</code> с указанием кодировки</h3>\n<p><code>BEMHTML</code>:</p>\n<pre><code class=\"lang-javascript\">content: [\n{\n    tag: &#39;meta&#39;,\n    attrs: { &#39;http-equiv&#39;: &#39;content-type&#39;, content: &#39;text/html; charset=utf-8&#39; }\n},\n// ...\n]\n</code></pre>\n<h3 id=\"Тег-<meta>-для-использования-`IE9`--и-выше--в-максимальном-`compatibility`-режиме\"><a href=\"#Тег-<meta>-для-использования-`IE9`--и-выше--в-максимальном-`compatibility`-режиме\" class=\"anchor\"></a>Тег <code>meta</code> для использования <code>IE9</code> (и выше) в максимальном <code>compatibility</code> режиме</h3>\n<p><code>BEMHTML</code>:</p>\n<pre><code class=\"lang-javascript\">content: [\n// ...\n{\n    tag: &#39;meta&#39;,\n    attrs: { &#39;http-equiv&#39;: &#39;X-UA-Compatible&#39;, content: &#39;IE=EmulateIE7, IE=edge&#39; }\n},\n// ...\n]\n</code></pre>\n<h3 id=\"Выставление-значения-тега-<title>-страницы-из-свойства\"><a href=\"#Выставление-значения-тега-<title>-страницы-из-свойства\" class=\"anchor\"></a>Выставление значения тега <code>&lt;title&gt;</code> страницы из свойства</h3>\n<pre><code class=\"lang-javascript\">content: [\n// ...\n{\n    tag: &#39;title&#39;,\n    content: this.ctx.title\n},\n// ...\n]\n</code></pre>\n<h3 id=\"Выставление-фавиконки\"><a href=\"#Выставление-фавиконки\" class=\"anchor\"></a>Выставление фавиконки</h3>\n<pre><code class=\"lang-javascript\">content: [\n// ...\nthis.ctx.favicon ? {\n    elem: &#39;favicon&#39;,\n    url: this.ctx.favicon\n} : &#39;&#39;,\n// ...\n]\n</code></pre>\n<h3 id=\"Декларация-блока-ua\"><a href=\"#Декларация-блока-ua\" class=\"anchor\"></a>Декларация блока ua</h3>\n<pre><code class=\"lang-javascript\">content: [\n// ...\n{\n    block: &#39;ua&#39;\n},\n// ...\n]\n</code></pre>\n<p>Значением свойства <code>content</code> блока <code>page</code> может быть хеш-описание содержимого\n(если речь идёт лишь об одном блоке) или массив блоков, описанных хешами:</p>\n<pre><code class=\"lang-javascript\">({\n    block: &#39;page&#39;,\n    title: &#39;Page title&#39;,\n    content: {\n        block: &#39;b-link&#39;,\n        mods: { pseudo: &#39;yes&#39;, togcolor: &#39;yes&#39;, color: &#39;green&#39; },\n        url: &#39;#&#39;,\n        target: &#39;_blank&#39;,\n        title: &#39;Кликни меня&#39;,\n        content: &#39;Псевдоссылка, меняющая цвет по клику&#39;\n    }\n})\n</code></pre>\n<p>На блоки, содержащиеся в <code>content</code>, действуют их <code>BEMHTML</code> шаблоны.</p>\n<h3 id=\"Отмена-автоматической-инициализации-блоков\"><a href=\"#Отмена-автоматической-инициализации-блоков\" class=\"anchor\"></a>Отмена автоматической инициализации блоков</h3>\n<pre><code class=\"lang-javascript\">noDeps: [\n    { block: &#39;i-bem&#39;, elem: &#39;dom&#39;, mods: { init: &#39;auto&#39; } }\n]\n</code></pre>\n"},"en":{"name":"page","examples":[{"name":"10-simple","path":"touch-phone.examples/page/10-simple","notation":{"block":"10-simple"}},{"name":"20-doctype","path":"touch-phone.examples/page/20-doctype","notation":{"block":"20-doctype"}}],"description":""}},"jsdoc":""},{"name":"querystring","data":{"ru":{"name":"querystring","examples":[],"description":"<h1 id=\"querystring\"><a href=\"#querystring\" class=\"anchor\"></a>querystring</h1>\n<p>Блок <code>querystring</code> служит для работы с адресной строкой браузера – обработки и формирования запросов.</p>\n<p>Блок реализован в технологии <code>vanilla.js</code> и подходит для использования в серверных и клиентских приложениях.</p>\n<h2 id=\"Публичные-методы-блока\"><a href=\"#Публичные-методы-блока\" class=\"anchor\"></a>Публичные методы блока</h2>\n<p>Блок предоставляет следующий набор публичных методов:</p>\n<ul>\n<li><code>parse</code> – служит для формирования объекта на основании параметров запроса адресной строки. Метод принимает на вход строку с параметрами и возвращает сформированный объект. Параметры передаются в виде пар ключ-значение с символом <code>=</code> в качестве разделителя. Пары отделяются символом <code>&amp;</code>. В ходе работы метода, ключи и значения декодируются из формата <code>URI</code>;</li>\n<li><code>stringify</code> – служит для формирования строки запроса с набором параметров на основании собственных свойств объекта. Метод принимает на вход объект и возвращает сформированную строку запроса. Имена свойств отделяются от значений символом <code>=</code>, пары разделяются символом <code>&amp;</code>. </li>\n</ul>\n<h2 id=\"Элементы-блока\"><a href=\"#Элементы-блока\" class=\"anchor\"></a>Элементы блока</h2>\n<h3 id=\"__uri\"><a href=\"#__uri\" class=\"anchor\"></a>__uri</h3>\n<p>Элемент предназначен для декодирования строки из формата <code>URI</code>. </p>\n<p>Элемент предоставляет следующий набор публичных методов:</p>\n<ul>\n<li><code>decodeURI</code> – декодирование <code>URI</code>. Заменяет каждую эскейпинговую последовательность в строке <code>URI</code> соответствующим символом. Метод поддерживает тот же набор последовательностей, что и стандартный метод JavaScript <code>encodeURI</code>. Символ <code>#</code> не декодируется.</li>\n<li><code>decodeURIComponent</code> – декодирование компонента <code>URI</code>. Заменяет каждую эскейпинговую последовательность в строке <code>URI</code> соответствующим символом. Метод позволяет декодировать компонент <code>URI</code>, сформированный методом <code>encodeURIComponent</code>. Декодируются последовательности, соответствующие символам <code>&amp;</code>, <code>+</code>, и <code>=</code>.</li>\n</ul>\n<p>Оба метода являются оберткой над соответствующими стандартными методами JavaScript <code>decodeURI</code> и <code>decodeURIComponent</code>. В ходе их работы производится проверка входной строки:</p>\n<ul>\n<li>если передана строка в формате, отличном от <code>UTF8</code>, генерируется ошибка;</li>\n<li>если в строке не были найдены эскейпинговые последовательности методы возвращают ее без изменений.</li>\n</ul>\n"},"en":{"name":"querystring","examples":[],"description":""}},"jsdoc":"<h1 id=\"querystring-Module\"><a href=\"#querystring-Module\" class=\"anchor\"></a>querystring Module</h1>\n<p>A set of helpers to work with query strings</p>\n<h2 id=\"parse---str---→--Object-\"><a href=\"#parse---str---→--Object-\" class=\"anchor\"></a>parse ( str ) → {Object}</h2>\n<p>Parse a query string to an object</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Object}</p>\n<h2 id=\"stringify---obj---→--String-\"><a href=\"#stringify---obj---→--String-\" class=\"anchor\"></a>stringify ( obj ) → {String}</h2>\n<p>Serialize an object to a query string</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>obj {Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<h1 id=\"querystring__uri-Module\"><a href=\"#querystring__uri-Module\" class=\"anchor\"></a>querystring__uri Module</h1>\n<p>A set of helpers to work with URI</p>\n<h2 id=\"decodeURI---str---→--String-\"><a href=\"#decodeURI---str---→--String-\" class=\"anchor\"></a>decodeURI ( str ) → {String}</h2>\n<p>Decodes URI string</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<h2 id=\"decodeURIComponent---str---→--String-\"><a href=\"#decodeURIComponent---str---→--String-\" class=\"anchor\"></a>decodeURIComponent ( str ) → {String}</h2>\n<p>Decodes URI component string</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n"},{"name":"strings","data":{"ru":{"name":"strings","examples":[],"description":""},"en":{"name":"strings","examples":[],"description":""}},"jsdoc":"<h1 id=\"strings__escape-Module\"><a href=\"#strings__escape-Module\" class=\"anchor\"></a>strings__escape Module</h1>\n<p>A set of string escaping functions</p>\n<h2 id=\"xml---str---→--String-\"><a href=\"#xml---str---→--String-\" class=\"anchor\"></a>xml ( str ) → {String}</h2>\n<p>Escape string to use in XML</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<h2 id=\"html---str---→--String-\"><a href=\"#html---str---→--String-\" class=\"anchor\"></a>html ( str ) → {String}</h2>\n<p>Escape string to use in HTML</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n<h2 id=\"attr---str---→--String-\"><a href=\"#attr---str---→--String-\" class=\"anchor\"></a>attr ( str ) → {String}</h2>\n<p>Escape string to use in attributes</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>str {String}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{String}</p>\n"},{"name":"tick","data":{"ru":{"name":"tick","examples":[],"description":""},"en":{"name":"tick","examples":[],"description":""}},"jsdoc":"<h1 id=\"tick-Module\"><a href=\"#tick-Module\" class=\"anchor\"></a>tick Module</h1>\n<p>Helpers for polling anything</p>\n<h2 id=\"Tick-Class\"><a href=\"#Tick-Class\" class=\"anchor\"></a>Tick Class</h2>\n<p>Aughtments {events:Emitter}</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Tick---\"><a href=\"#Tick---\" class=\"anchor\"></a>Tick ()</h4>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"start---\"><a href=\"#start---\" class=\"anchor\"></a>start ()</h4>\n<p>Starts polling</p>\n<h4 id=\"stop---\"><a href=\"#stop---\" class=\"anchor\"></a>stop ()</h4>\n<p>Stops polling</p>\n"},{"name":"ua","data":{"ru":{"name":"ua","examples":[],"description":"<p>Блок <code>ua</code> — служебный, не имеет визуального представления на странице.</p>\n<p>Этот блок используется всегда, когда используется блок <code>page</code>, так как вызывается\nвнутри него. Задавать его самостоятельно на странице не нужно.</p>\n<p>В <code>HTML</code> блок представлен в виде инлайнового скрипта, в результате работы которого,\nу тега <code>&lt;html&gt;</code> появляются <code>CSS</code>-классы, идентифицирующие, включен ли <code>JS</code> (<code>ua_js_no</code>/<code>ua_js_yes</code>) и в\nкаком режиме рендеринга находится браузер (<code>ua_css_standart</code>/<code>ua_css_quirks</code>).</p>\n<p>Эти классы можно использовать, чтобы при помощи <code>CSS</code> задавать блокам разный\nвнешний вид в зависимости от ситуации.</p>\n<p>Если такие классы проекту не нужны, можно переопределить <code>BEMHTML</code> шаблон блока <code>ua</code>\nна уровне переопределения проекта:</p>\n<pre><code class=\"lang-js\">block(&#39;ua&#39;).default()()\n</code></pre>\n\n<p>Для тач-платформы блок <code>ua</code> добавляет дополнительные <code>CSS</code>-классы:</p>\n<ul>\n<li>TODO</li>\n</ul>\n"},"en":{"name":"ua","examples":[],"description":""}},"jsdoc":"<h1 id=\"ua-Module\"><a href=\"#ua-Module\" class=\"anchor\"></a>ua Module</h1>\n<p>Detect some user agent features</p>\n<h2 id=\"ua--String-\"><a href=\"#ua--String-\" class=\"anchor\"></a>ua {String}</h2>\n<p>User agent</p>\n<h2 id=\"ios--String---undefined-\"><a href=\"#ios--String---undefined-\" class=\"anchor\"></a>ios {String | undefined}</h2>\n<p>iOS version</p>\n<h2 id=\"iphone--Boolean---undefined-\"><a href=\"#iphone--Boolean---undefined-\" class=\"anchor\"></a>iphone {Boolean | undefined}</h2>\n<p>Is iPhone</p>\n<h2 id=\"ipad--Boolean---undefined-\"><a href=\"#ipad--Boolean---undefined-\" class=\"anchor\"></a>ipad {Boolean | undefined}</h2>\n<p>Is iPad</p>\n<h2 id=\"android--String---undefined-\"><a href=\"#android--String---undefined-\" class=\"anchor\"></a>android {String | undefined}</h2>\n<p>Android version</p>\n<h2 id=\"bada--String---undefined-\"><a href=\"#bada--String---undefined-\" class=\"anchor\"></a>bada {String | undefined}</h2>\n<p>Bada version</p>\n<h2 id=\"wp--String---undefined-\"><a href=\"#wp--String---undefined-\" class=\"anchor\"></a>wp {String | undefined}</h2>\n<p>Windows Phone version</p>\n<h2 id=\"other--Boolean---undefined-\"><a href=\"#other--Boolean---undefined-\" class=\"anchor\"></a>other {Boolean | undefined}</h2>\n<p>Undetected platform</p>\n<h2 id=\"opera--String---undefined-\"><a href=\"#opera--String---undefined-\" class=\"anchor\"></a>opera {String | undefined}</h2>\n<p>Opera version</p>\n<h2 id=\"chrome--String---undefined-\"><a href=\"#chrome--String---undefined-\" class=\"anchor\"></a>chrome {String | undefined}</h2>\n<p>Chrome version</p>\n<h2 id=\"screenSize--String-\"><a href=\"#screenSize--String-\" class=\"anchor\"></a>screenSize {String}</h2>\n<p>Screen size, one of: large, normal, small</p>\n<h2 id=\"dpr--Number-\"><a href=\"#dpr--Number-\" class=\"anchor\"></a>dpr {Number}</h2>\n<p>Device pixel ratio</p>\n<h2 id=\"connection--String-\"><a href=\"#connection--String-\" class=\"anchor\"></a>connection {String}</h2>\n<p>Connection type, one of: wifi, 3g, 2g</p>\n<h2 id=\"flash--String---undefined-\"><a href=\"#flash--String---undefined-\" class=\"anchor\"></a>flash {String | undefined}</h2>\n<p>Flash version</p>\n<h2 id=\"video--Boolean-\"><a href=\"#video--Boolean-\" class=\"anchor\"></a>video {Boolean}</h2>\n<p>Is video supported?</p>\n<h2 id=\"svg--Boolean-\"><a href=\"#svg--Boolean-\" class=\"anchor\"></a>svg {Boolean}</h2>\n<p>Is SVG supported?</p>\n<h2 id=\"width--Number-\"><a href=\"#width--Number-\" class=\"anchor\"></a>width {Number}</h2>\n<p>Viewport width</p>\n<h2 id=\"height--Number-\"><a href=\"#height--Number-\" class=\"anchor\"></a>height {Number}</h2>\n<p>Viewport height</p>\n<h2 id=\"landscape--Boolean-\"><a href=\"#landscape--Boolean-\" class=\"anchor\"></a>landscape {Boolean}</h2>\n<p>Is landscape oriented?</p>\n<h1 id=\"ua-Module\"><a href=\"#ua-Module\" class=\"anchor\"></a>ua Module</h1>\n<p>Use ua module to provide user agent features by modifiers and update some on orient change</p>\n<h2 id=\"-type-----\"><a href=\"#-type-----\" class=\"anchor\"></a><em>type</em> {*}</h2>\n"},{"name":"vow","data":{"ru":{"name":"vow","examples":[],"description":""},"en":{"name":"vow","examples":[],"description":""}},"jsdoc":"<h1 id=\"vow-Module\"><a href=\"#vow-Module\" class=\"anchor\"></a>vow Module</h1>\n<h2 id=\"Deferred-Class\"><a href=\"#Deferred-Class\" class=\"anchor\"></a>Deferred Class</h2>\n<p>The <code>Deferred</code> class is used to encapsulate newly-created promise object along with functions that resolve, reject or notify it.</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Deferred---\"><a href=\"#Deferred---\" class=\"anchor\"></a>Deferred ()</h4>\n<p>You can use <code>vow.defer()</code> instead of using this constructor.</p>\n<p><code>new vow.Deferred()</code> gives the same result as <code>vow.defer()</code>.</p>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"promise----→--vow:Promise-\"><a href=\"#promise----→--vow:Promise-\" class=\"anchor\"></a>promise () → {vow:Promise}</h4>\n<p>Returns corresponding promise.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"resolve---value--\"><a href=\"#resolve---value--\" class=\"anchor\"></a>resolve ( value )</h4>\n<p>Resolves corresponding promise with given <code>value</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>value {*}</li>\n</ul>\n<h4 id=\"reject---reason--\"><a href=\"#reject---reason--\" class=\"anchor\"></a>reject ( reason )</h4>\n<p>Rejects corresponding promise with given <code>reason</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>reason {*}</li>\n</ul>\n<h4 id=\"notify---value--\"><a href=\"#notify---value--\" class=\"anchor\"></a>notify ( value )</h4>\n<p>Notifies corresponding promise with given <code>value</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>value {*}</li>\n</ul>\n<h2 id=\"Promise-Class\"><a href=\"#Promise-Class\" class=\"anchor\"></a>Promise Class</h2>\n<p>The <code>Promise</code> class is used when you want to give to the caller something to subscribe to,\nbut not the ability to resolve or reject the deferred.</p>\n<h3 id=\"Constructor\"><a href=\"#Constructor\" class=\"anchor\"></a>Constructor</h3>\n<h4 id=\"Promise---resolver--\"><a href=\"#Promise---resolver--\" class=\"anchor\"></a>Promise ( resolver )</h4>\n<p>You should use this constructor directly only if you are going to use <code>vow</code> as DOM Promises implementation.\nIn other case you should use <code>vow.defer()</code> and <code>defer.promise()</code> methods.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>resolver {Function}<br/>\nSee <a href=\"https://github.com/domenic/promises-unwrapping/blob/master/README.md#the-promise-constructor\">https://github.com/domenic/promises-unwrapping/blob/master/README.md#the-promise-constructor</a> for details.</li>\n</ul>\n<h3 id=\"Instance-methods\"><a href=\"#Instance-methods\" class=\"anchor\"></a>Instance methods</h3>\n<h4 id=\"valueOf----→----\"><a href=\"#valueOf----→----\" class=\"anchor\"></a>valueOf () → {*}</h4>\n<p>Returns value of fulfilled promise or reason in case of rejection.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{*}</p>\n<h4 id=\"isResolved----→--Boolean-\"><a href=\"#isResolved----→--Boolean-\" class=\"anchor\"></a>isResolved () → {Boolean}</h4>\n<p>Returns <code>true</code> if promise is resolved.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"isFulfilled----→--Boolean-\"><a href=\"#isFulfilled----→--Boolean-\" class=\"anchor\"></a>isFulfilled () → {Boolean}</h4>\n<p>Returns <code>true</code> if promise is fulfilled.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"isRejected----→--Boolean-\"><a href=\"#isRejected----→--Boolean-\" class=\"anchor\"></a>isRejected () → {Boolean}</h4>\n<p>Returns <code>true</code> if promise is rejected.</p>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"then----onFulfilled-,--onRejected-,--onProgress-,--ctx----→--vow:Promise-\"><a href=\"#then----onFulfilled-,--onRejected-,--onProgress-,--ctx----→--vow:Promise-\" class=\"anchor\"></a>then ( [onFulfilled], [onRejected], [onProgress], [ctx] ) → {vow:Promise}</h4>\n<p>Adds reactions to promise.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[onProgress] {Function}<br/>\nCallback that will to be invoked with the value after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<p>A new promise, see <a href=\"https://github.com/promises-aplus/promises-spec\">https://github.com/promises-aplus/promises-spec</a> for details</p>\n<h4 id=\"catch---onRejected,--ctx----→--vow:Promise-\"><a href=\"#catch---onRejected,--ctx----→--vow:Promise-\" class=\"anchor\"></a>catch ( onRejected, [ctx] ) → {vow:Promise}</h4>\n<p>Adds rejection reaction only. It is shortcut for <code>promise.then(undefined, onRejected)</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>onRejected {Function}<br/>\nCallback to be called with the value after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"fail---onRejected,--ctx----→--vow:Promise-\"><a href=\"#fail---onRejected,--ctx----→--vow:Promise-\" class=\"anchor\"></a>fail ( onRejected, [ctx] ) → {vow:Promise}</h4>\n<p>Adds rejection reaction only. It is shortcut for <code>promise.then(null, onRejected)</code>. It&#39;s alias for <code>catch</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>onRejected {Function}<br/>\nCallback to be called with the value after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"always---onResolved,--ctx----→--vow:Promise-\"><a href=\"#always---onResolved,--ctx----→--vow:Promise-\" class=\"anchor\"></a>always ( onResolved, [ctx] ) → {vow:Promise}</h4>\n<p>Adds resolving reaction (to fulfillment and rejection both).</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>onResolved {Function}<br/>\nCallback that to be called with the value after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"progress---onProgress,--ctx----→--vow:Promise-\"><a href=\"#progress---onProgress,--ctx----→--vow:Promise-\" class=\"anchor\"></a>progress ( onProgress, [ctx] ) → {vow:Promise}</h4>\n<p>Adds progress reaction.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>onProgress {Function}<br/>\nCallback to be called with the value when promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"spread----onFulfilled-,--onRejected-,--ctx----→--vow:Promise-\"><a href=\"#spread----onFulfilled-,--onRejected-,--ctx----→--vow:Promise-\" class=\"anchor\"></a>spread ( [onFulfilled], [onRejected], [ctx] ) → {vow:Promise}</h4>\n<p>Like <code>promise.then</code>, but &quot;spreads&quot; the array into a variadic value handler.\nIt is useful with <code>vow.all</code> and <code>vow.allResolved</code> methods.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"done----onFulfilled-,--onRejected-,--onProgress-,--ctx---\"><a href=\"#done----onFulfilled-,--onRejected-,--onProgress-,--ctx---\" class=\"anchor\"></a>done ( [onFulfilled], [onRejected], [onProgress], [ctx] )</h4>\n<p>Like <code>then</code>, but terminates a chain of promises.\nIf the promise has been rejected, throws it as an exception in a future turn of the event loop.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[onProgress] {Function}<br/>\nCallback that will to be invoked with the value after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h4 id=\"delay---delay---→--vow:Promise-\"><a href=\"#delay---delay---→--vow:Promise-\" class=\"anchor\"></a>delay ( delay ) → {vow:Promise}</h4>\n<p>Returns a new promise that will be fulfilled in <code>delay</code> milliseconds if the promise is fulfilled,\nor immediately rejected if promise is rejected.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>delay {Number}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"timeout---timeout---→--vow:Promise-\"><a href=\"#timeout---timeout---→--vow:Promise-\" class=\"anchor\"></a>timeout ( timeout ) → {vow:Promise}</h4>\n<p>Returns a new promise that will be rejected in <code>timeout</code> milliseconds\nif the promise is not resolved beforehand.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>timeout {Number}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h3 id=\"Static-methods\"><a href=\"#Static-methods\" class=\"anchor\"></a>Static methods</h3>\n<h4 id=\"cast---value---→--vow:Promise-\"><a href=\"#cast---value---→--vow:Promise-\" class=\"anchor\"></a>cast ( value ) → {vow:Promise}</h4>\n<p>Coerces given <code>value</code> to a promise, or returns the <code>value</code> if it&#39;s already a promise.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>value {*}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"all---iterable---→--vow:Promise-\"><a href=\"#all---iterable---→--vow:Promise-\" class=\"anchor\"></a>all ( iterable ) → {vow:Promise}</h4>\n<p>Returns a promise to be fulfilled only after all the items in <code>iterable</code> are fulfilled,\nor to be rejected when any of the <code>iterable</code> is rejected.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>iterable {Array | Object}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"race---iterable---→--vow:Promise-\"><a href=\"#race---iterable---→--vow:Promise-\" class=\"anchor\"></a>race ( iterable ) → {vow:Promise}</h4>\n<p>Returns a promise to be fulfilled only when any of the items in <code>iterable</code> are fulfilled,\nor to be rejected when the first item is rejected.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>iterable {Array}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"resolve---value---→--vow:Promise-\"><a href=\"#resolve---value---→--vow:Promise-\" class=\"anchor\"></a>resolve ( value ) → {vow:Promise}</h4>\n<p>Returns a promise that has already been resolved with the given <code>value</code>.\nIf <code>value</code> is a promise, returned promise will be adopted with the state of given promise.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>value {*}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h4 id=\"reject---reason---→--vow:Promise-\"><a href=\"#reject---reason---→--vow:Promise-\" class=\"anchor\"></a>reject ( reason ) → {vow:Promise}</h4>\n<p>Returns a promise that has already been rejected with the given <code>reason</code>.</p>\n<h5 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h5>\n<ul>\n<li>reason {*}</li>\n</ul>\n<h5 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h5>\n<p>{vow:Promise}</p>\n<h2 id=\"defer----→--vow:Deferred-\"><a href=\"#defer----→--vow:Deferred-\" class=\"anchor\"></a>defer () → {vow:Deferred}</h2>\n<p>Creates a new deferred. This method is a factory method for <code>vow:Deferred</code> class.\nIt&#39;s equivalent to <code>new vow.Deferred()</code>.</p>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Deferred}</p>\n<h2 id=\"when---value,--onFulfilled-,--onRejected-,--onProgress-,--ctx----→--vow:Promise-\"><a href=\"#when---value,--onFulfilled-,--onRejected-,--onProgress-,--ctx----→--vow:Promise-\" class=\"anchor\"></a>when ( value, [onFulfilled], [onRejected], [onProgress], [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.then</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[onProgress] {Function}<br/>\nCallback that will to be invoked with the value after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"fail---value,-onRejected,--ctx----→--vow:Promise-\"><a href=\"#fail---value,-onRejected,--ctx----→--vow:Promise-\" class=\"anchor\"></a>fail ( value, onRejected, [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.fail</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>onRejected {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"always---value,-onResolved,--ctx----→--vow:Promise-\"><a href=\"#always---value,-onResolved,--ctx----→--vow:Promise-\" class=\"anchor\"></a>always ( value, onResolved, [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.always</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>onResolved {Function}<br/>\nCallback that will to be invoked with the reason after promise has been resolved</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"progress---value,-onProgress,--ctx----→--vow:Promise-\"><a href=\"#progress---value,-onProgress,--ctx----→--vow:Promise-\" class=\"anchor\"></a>progress ( value, onProgress, [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.progress</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>onProgress {Function}<br/>\nCallback that will to be invoked with the reason after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callback execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"spread---value,--onFulfilled-,--onRejected-,--ctx----→--vow:Promise-\"><a href=\"#spread---value,--onFulfilled-,--onRejected-,--ctx----→--vow:Promise-\" class=\"anchor\"></a>spread ( value, [onFulfilled], [onRejected], [ctx] ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.spread</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"done---value,--onFulfilled-,--onRejected-,--onProgress-,--ctx---\"><a href=\"#done---value,--onFulfilled-,--onRejected-,--onProgress-,--ctx---\" class=\"anchor\"></a>done ( value, [onFulfilled], [onRejected], [onProgress], [ctx] )</h2>\n<p>Static equivalent to <code>promise.done</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>[onFulfilled] {Function}<br/>\nCallback that will to be invoked with the value after promise has been fulfilled</li>\n<li>[onRejected] {Function}<br/>\nCallback that will to be invoked with the reason after promise has been rejected</li>\n<li>[onProgress] {Function}<br/>\nCallback that will to be invoked with the value after promise has been notified</li>\n<li>[ctx] {Object}<br/>\nContext of callbacks execution</li>\n</ul>\n<h2 id=\"isPromise---value---→--Boolean-\"><a href=\"#isPromise---value---→--Boolean-\" class=\"anchor\"></a>isPromise ( value ) → {Boolean}</h2>\n<p>Checks whether the given <code>value</code> is a promise-like object</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"cast---value---→--vow:Promise-\"><a href=\"#cast---value---→--vow:Promise-\" class=\"anchor\"></a>cast ( value ) → {vow:Promise}</h2>\n<p>Coerces given <code>value</code> to a promise, or returns the <code>value</code> if it&#39;s already a promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"valueOf---value---→----\"><a href=\"#valueOf---value---→----\" class=\"anchor\"></a>valueOf ( value ) → {*}</h2>\n<p>Static equivalent to <code>promise.valueOf</code>.\nIf given <code>value</code> is not an instance of <code>vow.Promise</code>, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{*}</p>\n<h2 id=\"isFulfilled---value---→--Boolean-\"><a href=\"#isFulfilled---value---→--Boolean-\" class=\"anchor\"></a>isFulfilled ( value ) → {Boolean}</h2>\n<p>Static equivalent to <code>promise.isFulfilled</code>.\nIf given <code>value</code> is not an instance of <code>vow.Promise</code>, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"isRejected---value---→--Boolean-\"><a href=\"#isRejected---value---→--Boolean-\" class=\"anchor\"></a>isRejected ( value ) → {Boolean}</h2>\n<p>Static equivalent to <code>promise.isRejected</code>.\nIf given <code>value</code> is not an instance of <code>vow.Promise</code>, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"isResolved---value---→--Boolean-\"><a href=\"#isResolved---value---→--Boolean-\" class=\"anchor\"></a>isResolved ( value ) → {Boolean}</h2>\n<p>Static equivalent to <code>promise.isResolved</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{Boolean}</p>\n<h2 id=\"resolve---value---→--vow:Promise-\"><a href=\"#resolve---value---→--vow:Promise-\" class=\"anchor\"></a>resolve ( value ) → {vow:Promise}</h2>\n<p>Returns a promise that has already been resolved with the given <code>value</code>.\nIf <code>value</code> is a promise, returned promise will be adopted with the state of given promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"fulfill---value---→--vow:Promise-\"><a href=\"#fulfill---value---→--vow:Promise-\" class=\"anchor\"></a>fulfill ( value ) → {vow:Promise}</h2>\n<p>Returns a promise that has already been fulfilled with the given <code>value</code>.\nIf <code>value</code> is a promise, returned promise will be fulfilled with fulfill/rejection value of given promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"reject---reason---→--vow:Promise-\"><a href=\"#reject---reason---→--vow:Promise-\" class=\"anchor\"></a>reject ( reason ) → {vow:Promise}</h2>\n<p>Returns a promise that has already been rejected with the given <code>reason</code>.\nIf <code>reason</code> is a promise, returned promise will be rejected with fulfill/rejection value of given promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>reason {*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"invoke---fn,--args----→--vow:Promise-\"><a href=\"#invoke---fn,--args----→--vow:Promise-\" class=\"anchor\"></a>invoke ( fn, [args] ) → {vow:Promise}</h2>\n<p>Invokes a given function <code>fn</code> with arguments <code>args</code></p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>fn {Function}</li>\n<li>[args] {...*}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"all---iterable---→--vow:Promise-\"><a href=\"#all---iterable---→--vow:Promise-\" class=\"anchor\"></a>all ( iterable ) → {vow:Promise}</h2>\n<p>Returns a promise to be fulfilled only after all the items in <code>iterable</code> are fulfilled,\nor to be rejected when any of the <code>iterable</code> is rejected.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>iterable {Array | Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"allResolved---iterable---→--vow:Promise-\"><a href=\"#allResolved---iterable---→--vow:Promise-\" class=\"anchor\"></a>allResolved ( iterable ) → {vow:Promise}</h2>\n<p>Returns a promise to be fulfilled only after all the items in <code>iterable</code> are resolved.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>iterable {Array | Object}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"any---iterable---→--vow:Promise-\"><a href=\"#any---iterable---→--vow:Promise-\" class=\"anchor\"></a>any ( iterable ) → {vow:Promise}</h2>\n<p>Returns a promise to be fulfilled only when any of the items in <code>iterable</code> are fulfilled,\nor to be rejected when all the items are rejected (with the reason of the first rejected item).</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>iterable {Array}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"anyResolved---iterable---→--vow:Promise-\"><a href=\"#anyResolved---iterable---→--vow:Promise-\" class=\"anchor\"></a>anyResolved ( iterable ) → {vow:Promise}</h2>\n<p>Returns a promise to be fulfilled only when any of the items in <code>iterable</code> are fulfilled,\nor to be rejected when the first item is rejected.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>iterable {Array}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"delay---value,-delay---→--vow:Promise-\"><a href=\"#delay---value,-delay---→--vow:Promise-\" class=\"anchor\"></a>delay ( value, delay ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.delay</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>delay {Number}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n<h2 id=\"timeout---value,-timeout---→--vow:Promise-\"><a href=\"#timeout---value,-timeout---→--vow:Promise-\" class=\"anchor\"></a>timeout ( value, timeout ) → {vow:Promise}</h2>\n<p>Static equivalent to <code>promise.timeout</code>.\nIf given <code>value</code> is not a promise, then <code>value</code> is equivalent to fulfilled promise.</p>\n<h3 id=\"Parameters:\"><a href=\"#Parameters:\" class=\"anchor\"></a>Parameters:</h3>\n<ul>\n<li>value {*}</li>\n<li>timeout {Number}</li>\n</ul>\n<h3 id=\"Returns:\"><a href=\"#Returns:\" class=\"anchor\"></a>Returns:</h3>\n<p>{vow:Promise}</p>\n"}]}]}
