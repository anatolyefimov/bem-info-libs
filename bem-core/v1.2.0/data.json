{
    "repo": "bem-core",
    "ref": "v1.2.0",
    "enb": true,
    "url": "http://github.com/bem/bem-core",
    "notes": null,
    "readme": {
        "en": "<h1 id=\"bem-core-library--!-build-status--https:--travis-ci-org-bem-bem-core-png---https:--travis-ci-org-bem-bem-core-\">bem-core Library <a href=\"https://travis-ci.org/bem/bem-core\"><img src=\"https://travis-ci.org/bem/bem-core.png\" alt=\"Build Status\"></a></h1>\n<p>This README is also available <a href=\"http://ru.bem.info/libs/bem-core/\">in Russian</a>.</p>\n<h2 id=\"what-is-this-\">What is this?</h2>\n<p><code>bem-core</code> is a base library for web interface development.\nIt provides the minimal stack for coding client-side JavaScript and templating.</p>\n<h2 id=\"use\">Use</h2>\n<p>The easiest way to run a project with <code>bem-core</code> is to use\nthe <a href=\"https://github.com/bem/project-stub\">project-stub</a>.</p>\n<p>You can use any other way you are familiar with to include the library into\nthe project.</p>\n<h2 id=\"inside\">Inside</h2>\n<h3 id=\"levels\">Levels</h3>\n<ul>\n<li><code>common.blocks</code> — suited for any devices and browsers</li>\n<li><code>desktop.blocks</code> — should be used for desktop browsers</li>\n<li><code>touch.blocks</code> — implement some touch-platforms specifics</li>\n</ul>\n<h3 id=\"blocks\">Blocks</h3>\n<ul>\n<li><code>i-bem</code> — base block with helpers for JS and HTML</li>\n<li><code>ecma</code> — some ES5 polyfils</li>\n<li><code>strings</code> — helpers for JS-strings</li>\n<li><code>objects</code> — helpers for JS-objects</li>\n<li><code>functions</code> — helpers for JS-functions</li>\n<li><code>events</code> — JS-events</li>\n<li><code>querystring</code> — helpers for work with querystring</li>\n<li><code>tick</code> — global timer</li>\n<li><code>idle</code> — IDLE event</li>\n<li><code>next-tick</code> — polyfill for <code>nextTick</code>/<code>setTimeout(0, ...)</code></li>\n<li><code>inherit</code> — OOP helpers</li>\n<li><code>jquery</code> — jQuery</li>\n<li><code>clearfix</code> — CSS clearfix trick</li>\n<li><code>identify</code> — identify JS-objects</li>\n<li><code>cookie</code> — helpers for work with browser cookies</li>\n<li><code>vow</code> — Promises/A+ implementation</li>\n<li><code>dom</code> — helpers for work with DOM</li>\n<li><code>loader</code> — loader for JS files</li>\n<li><code>ua</code> — browser features detection</li>\n<li><code>page</code> — html/head/body scaffold</li>\n</ul>\n<h3 id=\"technologies\">Technologies</h3>\n<ul>\n<li>vanilla.js + browser.js</li>\n<li>bemhtml</li>\n<li>bemtree</li>\n</ul>\n<h2 id=\"changelog\">Changelog</h2>\n<p>You can check the changelog at the <a href=\"http://bem.info/libs/bem-core/changelog/\">changelog page</a>.</p>\n<h2 id=\"migration\">Migration</h2>\n<p>If you used BEM before, check the <a href=\"http://bem.info/libs/bem-core/migration/\">migration instructions</a>.</p>\n<h2 id=\"development\">Development</h2>\n<h3 id=\"working-copy\">Working copy</h3>\n<ol>\n<li><p>Get the needed version code (e.g., <code>v1</code>):</p>\n<pre><code>$ git clone -b v1 git://github.com/bem/bem-core.git\n$ cd bem-core\n</code></pre></li>\n<li><p>Install the dependencies:</p>\n<pre><code>$ npm install\n</code></pre></li>\n</ol>\n<p>You need <code>export PATH=./node_modules/.bin:$PATH</code>\nor an alternative way to run locally-installed <a href=\"https://github.com/bem/bem-tools\">bem-tools</a> and other npm-dependencies.</p>\n<ol>\n<li><p>Install all the necessary libraries:</p>\n<pre><code>$ bower-npm-install\n</code></pre></li>\n<li><p>Build examples and tests:</p>\n<pre><code>$ bem make sets\n</code></pre></li>\n<li><p>Run development server:</p>\n<pre><code>$ bem server\n</code></pre></li>\n</ol>\n<h3 id=\"how-to-contribute\">How to contribute</h3>\n<ol>\n<li><a href=\"https://github.com/bem/bem-core/issues/new\">Create an issue</a> with a proper description.</li>\n<li>Decide which version needs your changes.</li>\n<li>Create a feature-branch with an issue number and a version (<code>issues/&lt;issue_number&gt;@v&lt;version_number&gt;</code>) based on a version branch.\nFor example, for an issue #42 and a version #1: <code>git checkout -b issues/42@v1 v1</code>.\nIf you need changes for several versions, each of them has to have a feature branch.</li>\n<li>Commit changes and <code>push</code>. Rebase your branch on a corresponding version branch if it&#39;s needed.</li>\n<li>Create a pull-request from your feature branch; or several pull-requests if you changed several versions.</li>\n<li>Link your pull request with an issue number any way you like. A comment will work perfectly.</li>\n<li>Wait for your pull request and the issue to be closed ;-)</li>\n</ol>\n<h3 id=\"modular-testing\">Modular testing</h3>\n<p>A default test bundle for <code>ecma_array</code>:</p>\n<pre><code>$ bem make desktop.specs/ecma__array\n</code></pre><p>You can see the results of the tests in the terminal after the building process finishes.\nYou can also watch them in a browser loading <code>desktop.specs/ecma__array/spec-js+browser-js+bemhtml/spec-js+browser-js+bemhtml.html</code>.</p>\n<p>Run tests for other BEM entities in the same way. This will work for those which are equipped with <code>.spec.js</code> file.</p>\n<p>Tests are built with a <a href=\"https://github.com/narqo/bem-pr\">bem-pr</a> library.\nCheck the <a href=\"https://github.com/narqo/bem-pr/blob/master/docs/tests.ru.md\">details</a>\nabout testing infrastructure of the bem-pr.</p>\n<h2 id=\"supported-browsers\">Supported browsers</h2>\n<p>Our browser support policy is based on statistics we get from <a href=\"http://company.yandex.com\">Yandex</a> services.</p>\n<p>Browsers with more than 2% users get full compliant support, more than 0.5% — partially compliant\n(which means that data is accessible but not necessary 100% functional). New features testing\nis not provided by us for  browsers with less than 0.5% users.</p>\n<h3 id=\"desktop\">Desktop</h3>\n<h4 id=\"fully-compliant\">Fully compliant</h4>\n<ul>\n<li>Google Chrome 29+</li>\n<li>Firefox 24+</li>\n<li>Yandex 1.7+</li>\n<li>Opera 12.16</li>\n<li>MSIE 10.0</li>\n<li>MSIE 9.0</li>\n<li>MSIE 8.0</li>\n<li>Opera 12.15</li>\n</ul>\n<h4 id=\"partially-compliant\">Partially compliant</h4>\n<ul>\n<li>Opera 17.0</li>\n<li>Opera 16.0</li>\n<li>Opera 12.14</li>\n<li>Opera 12.2</li>\n<li>Firefox 23</li>\n</ul>\n<h3 id=\"touch\">Touch</h3>\n<h4 id=\"fully-compliant\">Fully compliant</h4>\n<ul>\n<li>iOS 6+</li>\n<li>Android 2.3+</li>\n<li>Opera Mobile 12+</li>\n<li>Windows Phone 7+</li>\n</ul>\n<h4 id=\"partially-compliant\">Partially compliant</h4>\n<ul>\n<li>iOS 5</li>\n<li>Android 2.2</li>\n</ul>\n",
        "ru": "<h1 id=\"bem-core-library--!-build-status--https:--travis-ci-org-bem-bem-core-png---https:--travis-ci-org-bem-bem-core-\">bem-core Library <a href=\"https://travis-ci.org/bem/bem-core\"><img src=\"https://travis-ci.org/bem/bem-core.png\" alt=\"Build Status\"></a></h1>\n<p>This README is also available <a href=\"http://bem.info/libs/bem-core/\">in English</a>.</p>\n<h2 id=\"что-это-\">Что это?</h2>\n<p>Базовая библиотека блоков для разработки веб-интерфейсов.\nСодержит только необходимый минимум для разработки клиентского JS и HTML-шаблонов.</p>\n<h2 id=\"использование\">Использование</h2>\n<p>Наиболее простым способом начать проект с использованием <code>bem-core</code> является\n<a href=\"https://github.com/bem/project-stub\">project-stub</a>.</p>\n<p>Вы также можете добавить библиотеку к себе в проект любым известным вам способом.</p>\n<h2 id=\"состав\">Состав</h2>\n<h3 id=\"уровни\">Уровни</h3>\n<ul>\n<li><code>common.blocks</code> — предназначен для любых устройств и браузеров</li>\n<li><code>desktop.blocks</code> — следует использовать для всех десктопных браузеров</li>\n<li><code>touch.blocks</code> — реализует некоторую специфику для тач-платформ</li>\n</ul>\n<h3 id=\"блоки\">Блоки</h3>\n<ul>\n<li><code>i-bem</code> — базовый блок с хелперами для JS и HTML</li>\n<li><code>ecma</code> — некоторые ES5-полифилы</li>\n<li><code>strings</code> — хелперы для JS-строк</li>\n<li><code>objects</code> — хелперы для JS-объектов</li>\n<li><code>functions</code> — хелперы для JS-функций</li>\n<li><code>events</code> — JS-события</li>\n<li><code>querystring</code> — работа со строкой запроса</li>\n<li><code>tick</code> — глобальный таймер</li>\n<li><code>idle</code> — IDLE-событие</li>\n<li><code>next-tick</code> — полифил для <code>nextTick</code>/<code>setTimeout(0, ...)</code></li>\n<li><code>inherit</code> — ООП-хелперы</li>\n<li><code>jquery</code> — jQuery</li>\n<li><code>clearfix</code> — CSS-трюк clearfix</li>\n<li><code>identify</code> — идентификация JS-объектов</li>\n<li><code>cookie</code> — хелперы для работы с браузерными куками</li>\n<li><code>vow</code> — реализация Promises/A+</li>\n<li><code>dom</code> — хелперы для работы с DOM</li>\n<li><code>loader</code> — загрузчик для JS-файлов</li>\n<li><code>ua</code> — определение возможностей браузера</li>\n<li><code>page</code> — скелет для html/head/body</li>\n</ul>\n<h3 id=\"технологии\">Технологии</h3>\n<ul>\n<li>vanilla.js + browser.js</li>\n<li>bemhtml</li>\n<li>bemtree</li>\n</ul>\n<h2 id=\"история-изменений\">История изменений</h2>\n<p>История изменений доступна на <a href=\"http://ru.bem.info/libs/bem-core/changelog/\">отдельной странице</a>.</p>\n<h2 id=\"миграция\">Миграция</h2>\n<p>Миграция описана на <a href=\"http://ru.bem.info/libs/bem-core/migration/\">отдельной странице</a>.</p>\n<h2 id=\"разработка\">Разработка</h2>\n<h3 id=\"рабочая-копия\">Рабочая копия</h3>\n<ol>\n<li><p>Получаем исходники нужной версии (например, <code>v1</code>):</p>\n<pre><code>$ git clone -b v1 git://github.com/bem/bem-core.git\n$ cd bem-core\n</code></pre></li>\n<li><p>Устанавливаем зависимости:</p>\n<pre><code>$ npm install\n</code></pre><p>Для последующего запуска локально установленных <a href=\"https://github.com/bem/bem-tools\">bem-tools</a> нам потребуется\n<code>export PATH=./node_modules/.bin:$PATH</code> или любой альтернативный способ.</p>\n</li>\n<li><p>Устанавливаем зависимые библиотеки:</p>\n<pre><code>$ bower-npm-install\n</code></pre></li>\n<li><p>Собираем примеры и тесты:</p>\n<pre><code>$ bem make sets\n</code></pre></li>\n<li><p>Запускаем разработческий сервер:</p>\n<pre><code>$ bem server\n</code></pre></li>\n</ol>\n<h3 id=\"внесение-изменений\">Внесение изменений</h3>\n<ol>\n<li><a href=\"https://github.com/bem/bem-core/issues/new\">Создать issue</a> с описанием сути изменений.</li>\n<li>Определить в какую версию необходимо внести изменения.</li>\n<li>Сделать feature-branch с указанием номера issue и версии (<code>issues/&lt;номер_issue&gt;@v&lt;номер_версии&gt;</code>) на основе ветки версии.\nНапример, для issue с номером 42 и версией 1: <code>git checkout -b issues/42@v1 v1</code>. Если изменения нужно внести в несколько версий,\nто для каждой из версий создаётся отдельная ветка.</li>\n<li>Сделать изменения, закоммитить и сделать push. Если это необходимо, то нужно сделать rebase от базовой ветки версии.</li>\n<li>Создать pull-request на основе созданной ветки (или несколько pull-request-ов для случая изменений в нескольких версиях).</li>\n<li>Любым способом связать pull-request и issue (например, c помощью комментария).</li>\n<li>Ждать закрытия pull-request и issue ;-)</li>\n</ol>\n<h3 id=\"модульное-тестирование\">Модульное тестирование</h3>\n<p>Сборка дефолтного тестового бандла для <code>ecma__array</code>: <code>bem make desktop.specs/ecma__array</code>\nПосле сборки тестового бандла вы увидите результаты выполнения тестов в консоли.\nИх также можно посмотреть в браузере, открыв <code>desktop.specs/ecma__array/spec-js+browser-js+bemhtml/spec-js+browser-js+bemhtml.html</code>.</p>\n<p>По аналогии можно запустить тесты для других БЭМ-сущностей, имеющих реализацию в технологии <code>spec.js</code>.</p>\n<p>Для сборки и запуска тестов используется библиотека <a href=\"https://github.com/narqo/bem-pr\">bem-pr</a>.\nСм. <a href=\"https://github.com/narqo/bem-pr/blob/master/docs/tests.ru.md\">подробную информацию</a> про инфраструктуру\nтестирования в bem-pr.</p>\n<h2 id=\"поддерживаемые-браузеры\">Поддерживаемые браузеры</h2>\n<p>Мы поддерживаем браузеры на основе статистики, получаемой на сервисах <a href=\"http://company.yandex.ru\">Яндекса</a>.</p>\n<p>Браузеры с долей более 2% пользователей попадают в полную совместимость, с более 0.5% — в частичную,\nчто означает, что данные будут доступны, но возможна деградация. В браузерах с долей менее 0.5% мы прекращаем\nтестирование.</p>\n<h3 id=\"десктопы\">Десктопы</h3>\n<h4 id=\"полная-совместимость\">Полная совместимость</h4>\n<ul>\n<li>Google Chrome 29+</li>\n<li>Firefox 24+</li>\n<li>Yandex 1.7+</li>\n<li>Opera 12.16</li>\n<li>MSIE 10.0</li>\n<li>MSIE 9.0</li>\n<li>MSIE 8.0</li>\n<li>Opera 12.15</li>\n</ul>\n<h4 id=\"частичная-совместимость\">Частичная совместимость</h4>\n<ul>\n<li>Opera 17.0</li>\n<li>Opera 16.0</li>\n<li>Opera 12.14</li>\n<li>Opera 12.2</li>\n<li>Firefox 23</li>\n</ul>\n<h3 id=\"тач-браузеры\">Тач-браузеры</h3>\n<h4 id=\"полная-совместимость\">Полная совместимость</h4>\n<ul>\n<li>iOS 6+</li>\n<li>Android 2.3+</li>\n<li>Opera Mobile 12+</li>\n<li>Windows Phone 7+</li>\n</ul>\n<h4 id=\"частичная-совместимость\">Частичная совместимость</h4>\n<ul>\n<li>iOS 5</li>\n<li>Android 2.2</li>\n</ul>\n"
    },
    "migration": {
        "en": "<h1 id=\"migration\">Migration</h1>\n<h2 id=\"1-0-0\">1.0.0</h2>\n<p>For 1.0.0 version we assume migration from <a href=\"https://github.com/bem/bem-bl/\">bem-bl</a> to <a href=\"https://github.com/bem/bem-core/\">bem-core</a>.</p>\n<h3 id=\"modules\">Modules</h3>\n<p>From now everything should be under the <a href=\"https://github.com/ymaps/modules\">ym modular system</a>.\nAll the dependencies have to be mentioned in the code, using global variables\nhave to be minimized to 0 if possible.</p>\n<p>Example</p>\n<pre><code class=\"lang-js\">modules.define(\n    &#39;my-module&#39;, // Module name\n    [&#39;module-from-library&#39;, &#39;my-another-module&#39;], // Module&#39;s dependencies\n    function(provide, moduleFromLibrary, myAnotherModule) { // Module declaration, runs when all the dependencies are resolved\n\n//Module providing\nprovide({\n    myModuleMethod : function() {}\n});\n\n});\n</code></pre>\n<p>TODO: add information about changes in build process (usage of special techs for js and instructions for custom builders).</p>\n<h3 id=\"jquery-and-plugins\">jQuery and plugins</h3>\n<p>jQuery is represented with a wrapping module <code>jquery</code> which uses the <code>jQuery</code>\nglobal object if it is available or loads jQuery additionally.\nFrom now jQuery is used only for operations on DOM such as selecting nodes,\nbinding listeners to events, getting and setting attribute values and so on.</p>\n<p>For other operations there are special modules non-dependable on jQuery.</p>\n<ul>\n<li>the <code>objects</code> module to operate on objects (with <code>extend</code>, <code>isEmpty</code> and <code>each</code> methods)\n*the <code>functions</code> module to operate on functions (with <code>isFunction</code> and <code>noop</code> methods)</li>\n</ul>\n<p>All the jQuery plugins which are not fo DOM operation became modules:</p>\n<ul>\n<li>the <code>events</code> module used to be the <code>$.observable</code> jQuery plugin<br/>\nIt works with events, provides &quot;classes&quot; <code>EventsEmitter</code> and <code>Event</code></li>\n<li>the <code>inherit</code> module used to be the <code>$.inherit</code> plugin<br/>\nIt provides an inherit module with classes.</li>\n<li>the <code>cookie</code> module used to be the <code>$.cookie</code> plugin</li>\n<li>the <code>identify</code> module used to be <code>$.identify</code> plugin</li>\n<li>the <code>functions__throttle</code> and <code>functions__debounce</code> used to be the\n<code>$.throttle</code> and the <code>$.debounce</code> plugins</li>\n</ul>\n<p>Before:</p>\n<pre><code class=\"lang-js\">// block code\n$.throttle(...\n// block code\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">module.define(&#39;my-module&#39;, [&#39;functions__throttle&#39;], function(provide, throttle) {\n// module code\nthrottle(...\n// module code\n</code></pre>\n<h3 id=\"bem-dom-blocks\">BEM.DOM blocks</h3>\n<h4 id=\"declaration\">Declaration</h4>\n<p>Blocks represented in DOM were declared with BEM.DOM.decl. Now they must use\n<code>i-bem__dom</code> module and extend it.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, ...);\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, ...);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<h4 id=\"constructor\">Constructor</h4>\n<p>You have to use full notation for the callback for the <code>js</code> modifier in its\n<code>inited</code> value.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : function() {\n        // constructor code\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : {\n        inited : function() {\n            // constructor code\n</code></pre>\n<h4 id=\"destructor\">Destructor</h4>\n<p>Instead of <code>destruct</code> method the destructive callback has to be applyed to the\nempty value of <code>js</code> modifier, which corresponds removing a modifier from a\nblock.\nAlso you do not need to call <code>__base</code> to run a descructor from the basic\n<code>i-bem__dom</code> module.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">destruct : function() {\n    this.__base.apply(this, arguments);\n    // destructor code\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : {\n        &#39;&#39; : function() {\n            // destructor code\n</code></pre>\n<h4 id=\"the-`changethis`-method\">The <code>changeThis</code> method</h4>\n<p>Instead of <code>changeThis</code> method you have to use native <code>bind</code>.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">// block code\nobj.on(&#39;event&#39;, this.changeThis(this._method);\n// block code\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">obj.on(&#39;event&#39;, this._method.bind(this));\n// or better\nobj.on(&#39;event&#39;, this._method, this);\n</code></pre>\n<h4 id=\"the-`aftercurrentevent`-method\">The <code>afterCurrentEvent</code> method</h4>\n<p>Use the <code>nextTick</code> method instead of <code>afterCurrentEvent</code>. The <code>nextTick</code> assures\nthat the block exists at the time of running a callback. If the block is already\ndestructed, the callback will not be run.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        this.afterCurrentEvent(function() { ...\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, DOM) {\n\nDOM.decl(&#39;block&#39;, {\n    method : function() {\n        this.nextTick(function() { ...\n</code></pre>\n<h4 id=\"access-to-a-dom-element-from-an-event-handler-callback\">Access to a DOM element from an event handler callback</h4>\n<p>The callback binded to a DOM element as an event handler is now provided with\nthe link to this DOM element as <code>$(e.currentTarget)</code> instead of <code>e.data.domElem</code>.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">onClick : function(e) {\n    e.data.domElem.attr(...\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">onClick : function(e) {\n    $(e.currentTarget).attr(...\n</code></pre>\n<p>Note: Remember that jQuery is unavailable in global scope and you must use <code>jquery</code> module for access to it.</p>\n<h4 id=\"channels\">Channels</h4>\n<p>Channels are not embedded into BEM any more. Now they are the separate\n<code>events__channels</code> module.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;channel-name&#39;).on(....\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;events__channels&#39;], function(provide, channels, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        channels(&#39;channel-name&#39;).on(....\n</code></pre>\n<h4 id=\"the-`i-system`-block,-the-`sys`-channel-and-the-`tick`,-`idle`-and-`wakeup`-events\">The <code>i-system</code> block, the <code>sys</code> channel and the <code>tick</code>, <code>idle</code> and <code>wakeup</code> events</h4>\n<p>The is no <code>i-system</code> block any more. Instead you can use special modules: \n<code>tick</code> with the tick event and <code>idle</code> with the events idle and wakeup.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;sys&#39;).on(&#39;tick&#39;, ...\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;tick&#39;], function(provide, tick, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        tick.on(&#39;tick&#39;, ...\n</code></pre>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;sys&#39;).on(&#39;wakeup&#39;, ...\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;idle&#39;], function(provide, idle, BEMDOM) {    \n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        idle.on(&#39;wakeup&#39;, ...\n</code></pre>\n<h3 id=\"the-bem-blocks\">The BEM blocks</h3>\n<p>If you have BEM blocks just containing some modules without using BEM\nmethodology in them, you can now rewrite them as modules.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;i-router&#39;, {\n    route : function() { ... }\n});\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;router&#39;, function(provide) {\n\nprovide({\n    route : function() { ... }\n});\n\n});\n</code></pre>\n<p>If you need BEM blocks (not BEM.DOM blocks) anyway, you can extend the <code>i-bem</code>\nmodule.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;my-block&#39;, { ... });\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem&#39;, function(provide, BEM) {\n\nBEM.decl(&#39;my-block&#39;, { ... });\n\nprovide(BEM);\n\n});\n</code></pre>\n<h4 id=\"the-example-of-migration-refactoring-for-the-`b-spin`-block\">The example of migration refactoring for the <code>b-spin</code> block</h4>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;b-spin&#39;, {\n\n    onSetMod : {\n\n        &#39;js&#39; : function() {\n\n            this._size = this.getMod(&#39;size&#39;) || /[\\d]+/.exec(this.getMod(&#39;theme&#39;))[0];\n\n            this._bgProp = &#39;background-position&#39;;\n            this._posPrefix = &#39;0 -&#39;;\n\n            if (this.elem(&#39;icon&#39;).css(&#39;background-position-y&#39;)) { /* A dirty hack for IE which cannot get a background-position property but packground-position-y only */\n                this._bgProp = &#39;background-position-y&#39;;\n                this._posPrefix = &#39;-&#39;;\n            }\n\n            this._curFrame = 0;\n\n            this.hasMod(&#39;progress&#39;) &amp;&amp; this.channel(&#39;sys&#39;).on(&#39;tick&#39;, this._onTick, this);\n\n        },\n\n        &#39;progress&#39; : {\n\n            &#39;yes&#39; : function() {\n\n                this.channel(&#39;sys&#39;).on(&#39;tick&#39;, this._onTick, this);\n\n            },\n\n            &#39;&#39; : function() {\n\n                this.channel(&#39;sys&#39;).un(&#39;tick&#39;, this._onTick, this);\n\n            }\n\n        }\n    },\n\n    _onTick: function(){\n\n        var y = ++this._curFrame * this._size;\n\n        (y &gt;= this._size * 36) &amp;&amp; (this._curFrame = y = 0);\n\n        this.elem(&#39;icon&#39;).css(this._bgProp, this._posPrefix + y +&#39;px&#39;);\n\n    },\n\n    destruct : function() {\n\n        this.channel(&#39;sys&#39;).un(&#39;tick&#39;, this._onTick, this);\n        this.__base.apply(this, arguments);\n\n    }\n\n});\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(\n    &#39;i-bem__dom&#39;,\n    [&#39;tick&#39;],\n    function(provide, tick, BEMDOM) {\n\nvar FRAME_COUNT = 36;\n\nBEMDOM.decl(&#39;b-spin&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39; : function() { // constructor\n                var hasBackgroundPositionY = !!this.elem(&#39;icon&#39;).css(&#39;background-position-y&#39;));\n\n                this._bgProp = hasBackgroundPositionY? &#39;background-position-y&#39; : &#39;background-position&#39;;\n                this._posPrefix = hasBackgroundPositionY? &#39;-&#39; : &#39;0 -&#39;;\n                this._curFrame = 0;\n                this._size = Number(this.getMod(&#39;size&#39;) || /[\\d]+/.exec(this.getMod(&#39;theme&#39;))[0]);\n\n                this.hasMod(&#39;progress&#39;) &amp;&amp; this._bindToTick();\n            },\n\n            &#39;&#39; : function() { // destructor\n                this._unbindFromTick();\n            }\n        },\n\n        &#39;progress&#39; : {\n            &#39;yes&#39; : function() {\n                this._bindToTick();\n            },\n\n            &#39;&#39; : function() {\n                this._unbindFromTick();\n            }\n        }\n    },\n\n    _bindToTick : function() {\n        tick.on(&#39;tick&#39;, this._onTick, this);\n    },\n\n    _unbindFromTick : function() {\n        tick.un(&#39;tick&#39;, this._onTick, this);\n    },\n\n    _onTick : function() {\n        var offset;\n        this._curFrame++ &gt;= FRAME_COUNT?\n            offset = this._curFrame * this._size :\n            this._curFrame = offset = 0;\n\n        this.elem(&#39;icon&#39;).css(this._bgProp, this._posPrefix + offset + &#39;px&#39;);\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n",
        "ru": "<h1 id=\"миграция\">Миграция</h1>\n<h2 id=\"1-0-0\">1.0.0</h2>\n<p>Для версии 1.0.0 миграция подразумевается с использования <a href=\"https://github.com/bem/bem-bl/\">bem-bl</a> на использование <a href=\"https://github.com/bem/bem-core/\">bem-core</a>.</p>\n<h3 id=\"модули\">Модули</h3>\n<p>Весь код теперь пишется в терминах модульной системы <a href=\"https://github.com/ymaps/modules\">https://github.com/ymaps/modules</a>.\nВсе зависимости должны явно указываться в коде, обращения к глобальным объектом необходимо минимизировать, а, по возможности, и полностью исключить.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-javascript\">modules.define(\n    &#39;my-module&#39;, // имя модуля\n    [&#39;module-from-library&#39;, &#39;my-another-module&#39;], // зависимости модуля\n    function(provide, moduleFromLibrary, myAnotherModule) { // декларация модуля, вызывается когда все зависимости &quot;разрезолвлены&quot;\n\n// предоставление модуля\nprovide({\n    myModuleMethod : function() {}\n}); \n\n});\n</code></pre>\n<p>TODO: дописать про изменение сборки (использование специальных технологий для js и как быть с кастомными сборщиками)</p>\n<h3 id=\"jquery-и-jquery-плагины\">jQuery и jQuery-плагины</h3>\n<p>jQuery представлен модулем-оберткой <code>jquery</code>, который использует глобальный объект jQuery,\nв случае если он уже присутствует на странице, в противном случае загружая его самостоятельно.\njQuery теперь используется только для операций, связанных непосредственно с DOM\n(поиск элементов, подписка на события, установка/получение атрибутов элементов, и т.д.).</p>\n<p>Для всех остальных операций написаны соответствующие модули,\nпредоставляющие аналогичный функционал, но, при этом, не зависящие от jQuery:</p>\n<ul>\n<li>модуль <code>objects</code> для работы с объектами (с методами <code>extend</code>, <code>isEmpty</code>, <code>each</code>)</li>\n<li>модуль <code>functions</code> для работы с функциями (с методами <code>isFunction</code> и <code>noop</code>)</li>\n</ul>\n<p>Также, все jQuery-плагины, не связанные непосредственно с jQuery\n(<code>$.observable</code>, <code>$.inherit</code>, <code>$.cookie</code>, <code>$.identify</code>, <code>$.throttle</code>) стали модулями:</p>\n<ul>\n<li>модуль <code>events</code> вместо <code>$.observable</code> для работы с событиями, предоставляющий &quot;классы&quot; <code>EventsEmitter</code> и <code>Event</code>)</li>\n<li>модуль <code>inherit</code> вместо <code>$.inherit</code> для работы с &quot;классами&quot; и наследованием</li>\n<li>модуль <code>cookie</code> вместо <code>$.cookie</code></li>\n<li>модуль <code>identify</code> вместо <code>$.identify</code></li>\n<li>модули <code>functions__throttle</code>, <code>functions__debounce</code> вместо <code>$.throttle</code> и <code>$.debounce</code>, соответственно</li>\n</ul>\n<p>Было:</p>\n<pre><code class=\"lang-js\">// код блока\n$.throttle(...\n// код блока\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">module.define(&#39;my-module&#39;, [&#39;functions__throttle&#39;], function(provide, throttle) {\n// код модуля\nthrottle(...\n// код модуля\n</code></pre>\n<h3 id=\"bem-dom-блоки\">BEM.DOM-блоки</h3>\n<h4 id=\"декларация\">Декларация</h4>\n<p>Вместо декларации через BEM.DOM.decl необходимо доопределять модуль <code>i-bem__dom</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, ...);\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, ...);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<h4 id=\"конструктор\">Конструктор</h4>\n<p>Необходимо использовать полную нотацию для обработчика установки модификатора <code>js</code> в значение <code>inited</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : function() {\n        // код конструктора\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    &#39;js&#39; : {\n        &#39;inited&#39; : function() { \n            // код конструктора\n</code></pre>\n<h4 id=\"деструктор\">Деструктор</h4>\n<p>Вместо метода <code>destruct</code> необходимо использовать обработчик установки модификатора <code>js</code> в пустое значение (удаление модификатора).\nВызывать <code>__base</code> для того, чтобы у блоков работал базовый деструктор, определенный в <code>i-bem__dom</code>, больше не нужно.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">destruct : function() {\n    this.__base.apply(this, arguments);\n    // код деструктора\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : {\n        &#39;&#39; : function() {\n            // код деструктора\n</code></pre>\n<h4 id=\"метод-`changethis`\">Метод <code>changeThis</code></h4>\n<p>Вместо метода <code>changeThis</code> необходимо использовать либо соответствующий параметр, либо нативный метод <code>bind</code>, если такой параметр отсутствует.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">// код блока\nobj.on(&#39;event&#39;, this.changeThis(this._method);\n// код блока\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">obj.on(&#39;event&#39;, this._method.bind(this));\n// или лучше\nobj.on(&#39;event&#39;, this._method, this);\n</code></pre>\n<h4 id=\"метод-`aftercurrentevent`\">Метод <code>afterCurrentEvent</code></h4>\n<p>Вместо метода <code>afterCurrentEvent</code> необходимо использовать метод <code>nextTick</code>,\nкоторый гарантирует, что блок еще существует в момент исполнения колбэка\n(если блок уже уничтожен к этому моменту, то колбэк не исполняется).</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        this.afterCurrentEvent(function() { ...\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {    \n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        this.nextTick(function() { ...\n</code></pre>\n<h4 id=\"доступ-до-dom-элемента-в-обработчике-события\">Доступ до DOM-элемента в обработчике события</h4>\n<p>DOM-элемент, к которому был подвешен обработчик события теперь доступен\nкак <code>$(e.currentTarget)</code>вместо <code>e.data.domElem</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">onClick : function(e) {\n    e.data.domElem.attr(...\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">onClick : function(e) {\n    $(e.currentTarget).attr(...\n</code></pre>\n<h4 id=\"каналы--channels-\">Каналы (channels)</h4>\n<p>Каналы больше не являются встроенными в BEM, теперь они являются самостоятельным модулем <code>events__channels</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;channel-name&#39;).on(....\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;events__channels&#39;], function(provide, channels, BEMDOM) {    \n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        channels(&#39;channel-name&#39;).on(....\n</code></pre>\n<h4 id=\"блок-`i-system`-и-канал-`sys`-событий-`tick`,-`idle`,-`wakeup`\">Блок <code>i-system</code> и канал <code>sys</code> событий <code>tick</code>, <code>idle</code>, <code>wakeup</code></h4>\n<p>Этот блок и канал перестали существовать, вместо них появились отдельные модули: <code>tick</code> с событием tick  и <code>idle</code> с событиями idle и wakeup.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;sys&#39;).on(&#39;tick&#39;, ...\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;tick&#39;], function(provide, tick, BEMDOM) {    \n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        tick.on(&#39;tick&#39;, ...\n</code></pre>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;sys&#39;).on(&#39;wakeup&#39;, ...\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;idle&#39;], function(provide, idle, BEMDOM) {    \n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        idle.on(&#39;wakeup&#39;, ...\n</code></pre>\n<h3 id=\"bem-блоки\">BEM-блоки</h3>\n<p>Те BEM-блоки, которые использовались как хранилище для каких-то методов, при этом никак не использующие BEM-методологию, теперь \nмогут быть написаны как модули.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;i-router&#39;, {\n    route : function() { ... }\n});\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;router&#39;, function(provide) {\n\nprovide({\n    route : function() { ... }\n});\n\n});\n</code></pre>\n<p>Если же, по каким-то причинам, нужны именно BEM-блоки (не BEM.DOM-блоки), то их можно объявлять, доопределяя модуль <code>i-bem</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;my-block&#39;, { ... });\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem&#39;, function(provide, BEM) {\n\nBEM.decl(&#39;my-block&#39;, { ... });\n\nprovide(BEM);\n\n});\n</code></pre>\n<h4 id=\"рефакторинг-на-примере-блока-`b-spin`\">Рефакторинг на примере блока <code>b-spin</code></h4>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;b-spin&#39;, {\n\n    onSetMod : {\n\n        &#39;js&#39; : function() {\n\n            this._size = this.getMod(&#39;size&#39;) || /[\\d]+/.exec(this.getMod(&#39;theme&#39;))[0];\n\n            this._bgProp = &#39;background-position&#39;;\n            this._posPrefix = &#39;0 -&#39;;\n\n            if (this.elem(&#39;icon&#39;).css(&#39;background-position-y&#39;)) { /* В IE нельзя получить свойство background-position, только background-position-y, поэтому костыляем */\n                this._bgProp = &#39;background-position-y&#39;;\n                this._posPrefix = &#39;-&#39;;\n            }\n\n            this._curFrame = 0;\n\n            this.hasMod(&#39;progress&#39;) &amp;&amp; this.channel(&#39;sys&#39;).on(&#39;tick&#39;, this._onTick, this);\n\n        },\n\n        &#39;progress&#39; : {\n\n            &#39;yes&#39; : function() {\n\n                this.channel(&#39;sys&#39;).on(&#39;tick&#39;, this._onTick, this);\n\n            },\n\n            &#39;&#39; : function() {\n\n                this.channel(&#39;sys&#39;).un(&#39;tick&#39;, this._onTick, this);\n\n            }\n\n        }\n    },\n\n    _onTick: function(){\n\n        var y = ++this._curFrame * this._size;\n\n        (y &gt;= this._size * 36) &amp;&amp; (this._curFrame = y = 0);\n\n        this.elem(&#39;icon&#39;).css(this._bgProp, this._posPrefix + y +&#39;px&#39;);\n\n    },\n\n    destruct : function() {\n\n        this.channel(&#39;sys&#39;).un(&#39;tick&#39;, this._onTick, this);\n        this.__base.apply(this, arguments);\n\n    }\n\n});\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(\n    &#39;i-bem__dom&#39;,\n    [&#39;tick&#39;],\n    function(provide, tick, BEMDOM) {\n\nvar FRAME_COUNT = 36;\n\nBEMDOM.decl(&#39;b-spin&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39; : function() { // конструктор\n                var hasBackgroundPositionY = !!this.elem(&#39;icon&#39;).css(&#39;background-position-y&#39;)); /* В IE нельзя получить свойство background-position, только background-position-y */\n\n                this._bgProp = hasBackgroundPositionY? &#39;background-position-y&#39; : &#39;background-position&#39;;\n                this._posPrefix = hasBackgroundPositionY? &#39;-&#39; : &#39;0 -&#39;;\n                this._curFrame = 0;\n                this._size = Number(this.getMod(&#39;size&#39;) || /[\\d]+/.exec(this.getMod(&#39;theme&#39;))[0]);\n\n                this.hasMod(&#39;progress&#39;) &amp;&amp; this._bindToTick();\n            },\n\n            &#39;&#39; : function() { // деструктор\n                this._unbindFromTick();\n            }\n        },\n\n        &#39;progress&#39; : {\n            &#39;true&#39; : function() {\n                this._bindToTick();\n            },\n\n            &#39;&#39; : function() {\n                this._unbindFromTick();\n            }\n        }\n    },\n\n    _bindToTick : function() {\n        tick.on(&#39;tick&#39;, this._onTick, this);\n    },\n\n    _unbindFromTick : function() {\n        tick.un(&#39;tick&#39;, this._onTick, this);\n    },\n\n    _onTick : function() {\n        var offset;\n        this._curFrame++ &gt;= FRAME_COUNT?\n            offset = this._curFrame * this._size :\n            this._curFrame = offset = 0;\n\n        this.elem(&#39;icon&#39;).css(this._bgProp, this._posPrefix + offset + &#39;px&#39;);\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n"
    },
    "changelog": {
        "en": "<h1 id=\"changelog\">Changelog</h1>\n<h2 id=\"1-2-0\">1.2.0</h2>\n<h3 id=\"major-changes\">Major changes</h3>\n<ul>\n<li>BEM-blocks are emit <code>destruct</code> event on destructing (<a href=\"https://github.com/bem/bem-core/issues/370\">#370</a>).</li>\n<li>Improvements of <code>pointerevents</code> polyfills (<a href=\"https://github.com/bem/bem-core/pull/354\">#354</a>).</li>\n</ul>\n<h3 id=\"other-changes\">Other changes</h3>\n<ul>\n<li>All JSDocs were fixed so <a href=\"github.com/bem/bem-jsd\">bem-jsd</a> could parse them (<a href=\"https://github.com/bem/bem-core/issues/335\">#335</a>).</li>\n<li>Russian version of BEMHTML reference was actualized to JavaScript syntax (<a href=\"https://github.com/bem/bem-core/pull/355\">#355</a>).</li>\n<li>Use <a href=\"http://bower.io\">bower</a> for dependency management (<a href=\"https://github.com/bem/bem-core/issues/367\">#367</a>).</li>\n</ul>\n<h2 id=\"1-1-0\">1.1.0</h2>\n<h3 id=\"major-changes\">Major changes</h3>\n<ul>\n<li><code>jquery__config</code> uses jQuery 2.x by default for modern browsers (<a href=\"https://github.com/bem/bem-core/issues/319\">#319</a>).</li>\n<li>Add ability to use any BEMJSON as value of attributes in BEMHTML templates (<a href=\"https://github.com/bem/bem-core/issues/290\">#290</a>).</li>\n<li>Fix dependencies in <code>i-bem__collection</code> (<a href=\"https://github.com/bem/bem-core/issues/292\">#292</a>).</li>\n<li>Remove <code>page</code> block&#39;s touch styles (<a href=\"https://github.com/bem/bem-core/issues/306\">#306</a>).</li>\n<li>Fix <code>page</code> BEMHTML wrapping in production mode (<a href=\"https://github.com/bem/bem-core/issues/309\">#309</a>).</li>\n<li>Fix possible JavaScript error in script injection in IE&lt;9 in <code>next-tick</code> (<a href=\"https://github.com/bem/bem-core/issues/324\">#324</a>).</li>\n<li>Fix <code>FastClick</code> initialisation in <code>jquery__event_type_pointerclick</code> of <code>touch.blocks</code> (<a href=\"https://github.com/bem/bem-core/issues/332\">#332</a>).</li>\n<li>Fix <code>node.js</code> tech bug on Windows systems (<a href=\"https://github.com/bem/bem-core/issues/274\">#274</a>).</li>\n<li>Fix <code>i-bem__dom_elem-instances</code> bug with <code>onElemSetMod</code> (<a href=\"https://github.com/bem/bem-core/issues/340\">#340</a>).</li>\n<li>Use bemhtml from <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a> (<a href=\"https://github.com/bem/bem-core/issues/329\">#329</a>).</li>\n</ul>\n<h3 id=\"other-changes\">Other changes</h3>\n<ul>\n<li><a href=\"https://github.com/ymaps/modules\">ym</a> was updated to 0.0.12 (<a href=\"https://github.com/bem/bem-core/issues/326\">#326</a>).</li>\n<li>Do not flood <code>console</code> with messages if <code>i-bem__i18n</code> is not in debug mode (<a href=\"https://github.com/bem/bem-core/issues/285\">#285</a>).</li>\n<li>Fix jsdoc for <code>dropElemCache()</code> method of <code>i-bem__dom</code> module (<a href=\"https://github.com/bem/bem-core/issues/296\">#296</a>).</li>\n<li>Development infrastructure was updated to\n<a href=\"https://github.com/narqo/bem-pr/blob/0.5.3/HISTORY.md\">bem-pr@v0.5.x</a> (<a href=\"https://github.com/bem/bem-core/issues/323\">#323</a>).</li>\n<li>Russian documentation for <code>i-bem.js</code> was updated.</li>\n<li><a href=\"https://github.com/bem/bem-core/blob/v1/README.md#supported-browsers\">List of supported browsers</a>\nwas specified in project&#39;s README.</li>\n</ul>\n<h2 id=\"1-0-0\">1.0.0</h2>\n<h3 id=\"major-changes\">Major changes</h3>\n<ul>\n<li>Starts using modular system <a href=\"https://github.com/ymaps/modules\">ym</a>.</li>\n<li>Removes all deprecated methods from <code>i-bem</code> and <code>i-bem__dom</code>.</li>\n<li><code>i-bem</code> now has no dependency on jQuery. <code>i-bem__dom</code> still depends on jQuery.</li>\n<li>BEMHTML-template can be written with <a href=\"https://gist.github.com/veged/6150760\">JS-syntax</a>.</li>\n<li>Introduces new tech <code>bemtree</code> (based on <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a>)\nfor describing dynamic generation of BEM-tree.</li>\n<li>Introduces new tech <code>vanilla.js</code> for JS-implementations that does not depend on particular JS-engine.</li>\n<li>Introduces new techs <code>browser.js</code> и <code>node.js</code> for JS-implementations targeted corresponding engines.\nFor backward compatibility we assume that <code>.js</code>-files contains <code>browser.js</code> implementation.</li>\n<li>Introduces polyfill (<code>jquery__event_type_pointer</code> and <code>jquery__event_type_pointerclick</code> as a jQuery-plugins)\nfor universalize desktop and touch pointer events.</li>\n<li>Introduces system for unit testing and blocks examples generation.</li>\n<li>Introduces &quot;simple&quot; modifiers (modifiers without value) support in <code>i-bem</code> and BEMHTML.</li>\n</ul>\n<h3 id=\"other-changes\">Other changes</h3>\n<ul>\n<li>Gets rid of prefixes in all block names (except <code>i-bem</code>).</li>\n<li>Block <code>i-bem__dom</code> becomes a module (in terms of <a href=\"https://github.com/ymaps/modules\">ym</a>)\nand all <code>BEM.DOM</code>-block must define additions to <code>i-bem__dom</code> (<a href=\"https://github.com/bem/bem-core/blob/v1/common.bundles/index/blocks/b-square/b-square.js\">example</a>).</li>\n<li>Method for blocks declaration (<code>.decl()</code>) does not accept object with <code>name</code> field as first parameter.\nRequired form with <code>block</code> field: <code>BEM.decl({ block: &#39;b1&#39;, modName: &#39;m&#39;, modVal: &#39;v&#39; }, ...)</code>.</li>\n<li>Introduces <code>nextTick</code> method as replacement for <code>afterCurrentEvent</code> method\nfor ensure of block existence in callback invocation time.\n<code>BEM.afterCurrentEvent</code> is <strong>deprecated</strong>.</li>\n<li>Introduces new <code>channels</code> module instead of <code>BEM.channel</code>. <code>BEM.channel</code> is <strong>deprecated</strong>.</li>\n<li><code>changeThis</code> is <strong>deprecated</strong>. Use native <code>bind</code> instead.</li>\n<li>Removes <code>del</code> method from <code>i-bem</code> block.</li>\n<li>Removes <code>getWindowSize</code> method from <code>i-bem__dom</code> block. Use <code>BEMDOM.win.width()</code> and <code>BEMDOM.win.height()</code>.</li>\n<li>Introduces <code>jquery</code> module-wrapper for providing jQuery.\nIf jQuery already included into the page module-wrapper provides it. Otherwise it loads jQuery (version 1.10.1) on its own.</li>\n<li><code>$.observable</code> becomes <code>events</code> module and not longer depends on jQuery.</li>\n<li><code>$.inherit</code> becomes <code>inherit</code> module and not longer depends on jQuery.</li>\n<li><code>$.identify</code> becomes <code>identify</code> module and not longer depends on jQuery.</li>\n<li><code>$.throttle</code> splits into two modules: <code>functions__throttle</code> and <code>functions__debounce</code>, they both not longer depend on jQuery.</li>\n<li><code>$.decodeURI</code>, <code>$.decodeURIComponent</code> moves to <code>querystring__uri</code> module and not longer depends on jQuery.</li>\n<li><code>$.cookie</code> becomes <code>cookie</code> module and not longer depends on jQuery.</li>\n<li>Introduces <code>ua</code> module instead of <code>$.browser</code> (with same interface).</li>\n<li>Use <code>pointerclick</code> instead of <code>leftclick</code>. It provides by <code>jquery__event_type_pointerclick</code> polyfill.</li>\n<li><code>i-system</code> block splits into two modules: <code>idle</code> and <code>tick</code>.</li>\n<li>Triggers for modifiers changes now splitted into two groups:\nbefore setting new value (<code>beforeSetMod</code> and <code>beforeElemSetMod</code>)\nand after the value has been set (<code>onSetMod</code> and <code>onElemSetMod</code>).\nCancellation of modifiers change is possible only from <code>before*</code>-triggers.</li>\n<li>Using of <code>{ onSetMod : { js : function() { ... } } }</code> is <strong>deprecated</strong>, use <code>onSetMod: { js : { inited : ... } } }</code>.</li>\n<li><code>destruct</code> method from <code>i-bem</code> block is <strong>deprecated</strong>.\nUse supplementary trigger for <code>_js</code> modifiers:\n<code>onSetMod: { js : { inited : ... } } }</code> — <code>{ onSetMod : { js : { &#39;&#39; : ... } } }</code>.</li>\n<li><code>exractParams</code> method from <code>i-bem__dom</code> block is <strong>deprecated</strong>.\nUse <code>elemParams</code> method for access to elements params.</li>\n<li><code>trigger</code> method from <code>i-bem</code> block is <strong>deprecated</strong> in flavor of <code>emit</code> method.</li>\n<li><code>onFirst</code> method from <code>i-bem</code> block is <strong>deprecated</strong> in flavor of <code>once</code> method.</li>\n<li><strong>Deprecated</strong> field <code>e.block</code> that provided block-target of BEM-events was removed. Use <code>e.target</code> field instead.</li>\n<li>Field <code>e.data.domElem</code> that provided DOM-element of block in DOM-events was removed. Use <code>$(e.currentTarget)</code> (provided by jQuery).</li>\n<li>Introduces parameter for <code>findElem</code> method that allows to search elements\nof particular block instance (in case of nested blocks with same name).</li>\n<li>Introduces possibility to point particular function in <code>unbindFrom*</code> methods.</li>\n<li>Introduces <code>objects</code> module for work with JS-objects. It contains methods: <code>extend</code>, <code>isEmpty</code>, <code>each</code>.</li>\n<li>Introduces <code>functions</code> module for work with JS-functions. It contains methods: <code>isFunction</code>, <code>noop</code>.</li>\n<li>Introduces <code>dom</code> module for work with DOM-tree.</li>\n<li>Introduces <code>querystring</code> module for work with URL-based strings.</li>\n<li>Introduces <code>loader_type_js</code> module for JS loading.</li>\n<li>Introduces <code>vow</code> module for Promises/A+.</li>\n<li>Introduces <code>next-tick</code> module as polyfill for <code>nextTick</code>, <code>setImmediate</code>, <code>setTimeout(0, ...</code> and etc.</li>\n<li>Introduces <code>strings__escape</code> module for XML, HTML and attributes escaping.</li>\n<li><code>inherit</code> module now supports mixins.</li>\n<li>Introduces <code>invokeAsap</code> parameter for <code>functions__throttle</code> module that allows to delay first invocation.</li>\n</ul>\n",
        "ru": "<h1 id=\"история-изменений\">История изменений</h1>\n<h2 id=\"1-2-0\">1.2.0</h2>\n<h3 id=\"крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>BEM-блоки инициируют событие <code>destruct</code> в процессе удаления (<a href=\"https://github.com/bem/bem-core/issues/370\">#370</a>).</li>\n<li>Исправлены полифилы для <code>pointerevents</code> (<a href=\"https://github.com/bem/bem-core/pull/354\">#354</a>).</li>\n</ul>\n<h3 id=\"также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>JSDoc блоков исправлен в соответствии с поддержкой <a href=\"github.com/bem/bem-jsd\">bem-jsd</a> (<a href=\"https://github.com/bem/bem-core/issues/335\">#335</a>).</li>\n<li>Референс на BEMHTML обновлен для соответствия JavaScript-синтаксису шаблонизатора (<a href=\"https://github.com/bem/bem-core/pull/355\">#355</a>).</li>\n<li>Переход на менеджер зависимостей <a href=\"http://bower.io\">bower</a> (<a href=\"https://github.com/bem/bem-core/issues/367\">#367</a>).</li>\n</ul>\n<h2 id=\"1-1-0\">1.1.0</h2>\n<h3 id=\"крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Для современных браузеров <code>jquery__config</code> подключает jQuery 2.x (<a href=\"https://github.com/bem/bem-core/issues/319\">#319</a>).</li>\n<li>Добавлена возможность использовать произвольный BEMJSON в качестве значения атрибутов в BEMHTML (<a href=\"https://github.com/bem/bem-core/issues/290\">#290</a>).</li>\n<li>Исправлены зависимости в <code>i-bem__collection</code> (<a href=\"https://github.com/bem/bem-core/issues/292\">#292</a>).</li>\n<li>Удалены CSS-стили блока <code>page</code> из уровня <code>touch.blocks</code> (<a href=\"https://github.com/bem/bem-core/issues/306\">#306</a>).</li>\n<li>Исправлена ошибка в BEMHTML-шаблоне блока <code>page</code>, приводящая к зацикливанию шаблонизатора\nв production-режиме (<a href=\"https://github.com/bem/bem-core/issues/309\">#309</a>).</li>\n<li>Исправлена возможная ошибка в <code>next-tick</code>, возникающая при вставке скрипта в DOM в IE&lt;9 (<a href=\"https://github.com/bem/bem-core/issues/324\">#324</a>).</li>\n<li>Исправлена ошибка в инициализации плагина <code>FastClick</code> в модуле <code>jquery__event_type_pointerclick</code>\nна уровне <code>touch.blocks</code> (<a href=\"https://github.com/bem/bem-core/issues/332\">#332</a>).</li>\n<li>Исправлена ошибка в технологии <code>node.js</code> в Windows (<a href=\"https://github.com/bem/bem-core/issues/274\">#274</a>).</li>\n<li>Исправлена ошибка в <code>onElemSetMod</code> в <code>i-bem__dom_elem-instances</code> (<a href=\"https://github.com/bem/bem-core/issues/340\">#340</a>).</li>\n<li>В технологии <code>bemhtml</code> используется <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a> (<a href=\"https://github.com/bem/bem-core/issues/329\">#329</a>).</li>\n</ul>\n<h3 id=\"также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>Модуль <a href=\"https://github.com/ymaps/modules\">ym</a> обновлен до версии 0.0.12 (<a href=\"https://github.com/bem/bem-core/issues/326\">#326</a>).</li>\n<li>В ядре локализации <code>i-bem__i18n</code> отключен вывод сообщений о неизвестных ключах, если не включен\ndebug-режим (<a href=\"https://github.com/bem/bem-core/issues/285\">#285</a>).</li>\n<li>Инфраструктура сборки тестов и примеров переведена\nна <a href=\"https://github.com/narqo/bem-pr/blob/0.5.3/HISTORY.md\">bem-pr@v0.5.x</a> (<a href=\"https://github.com/bem/bem-core/issues/323\">#323</a>).</li>\n<li>Исправлен jsdoc для метода <code>dropElemCache()</code> в <code>i-bem__dom</code> (<a href=\"https://github.com/bem/bem-core/issues/296\">#296</a>).</li>\n<li>Доработана документация для блока <code>i-bem.js</code> на русском языке.</li>\n<li>В README проекта добавлен <a href=\"https://github.com/bem/bem-core/blob/v1/README.ru.md#%D0%9F%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%B8%D0%B2%D0%B0%D0%B5%D0%BC%D1%8B%D0%B5-%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80%D1%8B\">список поддерживаемых браузеров</a>.</li>\n</ul>\n<h2 id=\"1-0-0\">1.0.0</h2>\n<h3 id=\"крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Переход на модульную систему <a href=\"https://github.com/ymaps/modules\">ym</a>.</li>\n<li>Из <code>i-bem</code>, <code>i-bem__dom</code> убраны все deprecated-методы.</li>\n<li><code>i-bem</code> больше не зависит от jQuery. <code>i-bem__dom</code> продолжает зависеть от jQuery.</li>\n<li>BEMHTML-шаблоны можно писать с использованием <a href=\"https://gist.github.com/veged/6150760\">JS-синтаксиса</a>.</li>\n<li>Новая технология <code>bemtree</code> (на базе <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a>) для описания процесса\nдинамического построения БЭМ-дерева.</li>\n<li>Новая технология <code>vanilla.js</code> для описания JS-реализации модулей, не зависящей от конкретного JavaScript движка.</li>\n<li>Новые технологии <code>browser.js</code> и <code>node.js</code> для описания JS-реализаций модулей (блоков) в соответствующих движках.\nДля совместимости с существующим кодом считаем, что файлы с расширением <code>.js</code> содержат реализацию блоков\nв технологии <code>browser.js</code>.</li>\n<li>Система модульного тестирования и примеров для блоков в библиотеке.</li>\n<li>Появились полифилы (<code>jquery__event_type_pointer</code> и <code>jquery__event_type_pointerclick</code> как jQuery-плагины),\nпозволяющие использовать универсальные события для десктопных и тач-интерфейсов.</li>\n<li>Плагин для jQuery, позволяющий навешивать обработчик события на нажатие левой кнопки мыши, становится модулем <code>jquery__pointerclick</code>.</li>\n<li>В <code>i-bem</code> и BEMHTML добавлена поддержка простых модификаторов (модификаторов без значений).</li>\n</ul>\n<h3 id=\"также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>Все блоки-модули, кроме <code>i-bem</code>, избавились от префиксов.</li>\n<li>Блок <code>i-bem__dom</code> становится модулем <code>i-bem__dom</code>. Все BEM.DOM-блоки должны теперь доопределять\nэтот модуль (<a href=\"https://github.com/bem/bem-core/blob/v1/common.bundles/index/blocks/b-square/b-square.js\">пример</a>).</li>\n<li>Метод для декларации блоков (<code>.decl()</code>) больше не принимает первым параметром объект с полем <code>name</code>.\nТеперь обязательная форма записи с полем <code>block</code>: <code>BEM.decl({ block: &#39;b1&#39;, modName: &#39;m&#39;, modVal: &#39;v&#39; }, ...)</code>.</li>\n<li>Вместо метода <code>afterCurrentEvent</code> у блоков появился метод <code>nextTick</code>, который проверят существование блока в момент исполнения колбэка. <code>BEM.afterCurrentEvent</code> теперь <strong>deprecated</strong>.</li>\n<li>Вместо <code>BEM.channel</code> появился отдельный модуль <code>channels</code>. <code>BEM.channel</code> теперь <strong>deprecated</strong>.</li>\n<li>Метод <code>changeThis</code> помечен как <strong>deprecated</strong>. Используйте нативный <code>bind</code>.</li>\n<li>Метод <code>del</code> удален из блока <code>i-bem</code>.</li>\n<li>Метод <code>getWindowSize</code> удален из блока <code>i-bem__dom</code>. Используйте <code>BEMDOM.win.width()</code> и <code>BEMDOM.win.height()</code>.</li>\n<li>Добавлен модуль-обертка <code>jquery</code>, предоставляющий jQuery. Модуль либо предоставляет jQuery, уже присутствующий на странице, либо сам его загружает (версию 1.10.1).</li>\n<li><code>$.observable</code> становится модулем <code>events</code> и больше не зависит от jQuery.</li>\n<li><code>$.inherit</code> становится модулем <code>inherit</code> и больше не зависит от jQuery.</li>\n<li><code>$.identify</code> становится модулем <code>identify</code> и больше не зависит от jQuery.</li>\n<li><code>$.throttle</code> разбивается на два модуля: <code>functions__throttle</code> и <code>functions__debounce</code>, которые больше не зависят от jQuery.</li>\n<li><code>$.decodeURI</code>, <code>$.decodeURIComponent</code> переезжают в модуль <code>querystring__uri</code> и больше не зависят от jQuery.</li>\n<li><code>$.cookie</code> становится модулем <code>cookie</code> и больше не зависит от jQuery.</li>\n<li>Вместо <code>$.browser</code> появился модуль <code>ua</code> с аналогичным интерфейсом.</li>\n<li>Блок <code>i-system</code> разбит на 2 модуля: <code>idle</code> и <code>tick</code>.</li>\n<li>Вместо события <code>leftclick</code> следует использовать <code>pointerclick</code> (предоставляемый полифилом <code>jquery__event_type_pointerclick</code>).</li>\n<li>Триггеры на установку модификаторов теперь разделены на две группы: до установки модификатора (<code>beforeSetMod</code> и <code>beforeElemSetMod</code>) и после (<code>onSetMod</code> и <code>onElemSetMod</code>). Отмена установки модификатора теперь возможна только из триггеров первой группы.</li>\n<li>Использовать конструкцию <code>{ onSetMod : { js : function() { ... } } }</code> в качестве конструктора теперь <strong>deprecated</strong>, необходимо использовать <code>onSetMod: { js : { inited : ... } } }</code>.</li>\n<li>Вместо метода <code>destruct</code> в <code>i-bem</code> появился зеркальный метод\nдля <code>onSetMod: { js : { inited : ... } } }</code> — <code>{ onSetMod : { js : { &#39;&#39; : ... } } }</code>.\nМетод <code>destruct</code> теперь <strong>deprecated</strong>.</li>\n<li>Метод <code>exractParams</code> в <code>i-bem__dom</code> теперь <strong>deprecated</strong>, для доступа к параметрам элементов нужно использовать метод <code>elemParams</code>.</li>\n<li>Метод <code>trigger</code> в <code>i-bem</code> теперь <strong>deprecated</strong>, нужно использовать <code>emit</code>.</li>\n<li>Метод <code>onFirst</code> в <code>i-bem</code> теперь <strong>deprecated</strong>, нужно использовать <code>once</code>.</li>\n<li>Удалено <strong>deprecated</strong> поле <code>e.block</code>, представляющее блок-источник события для BEM-событий. Вместо него следует использовать поле <code>e.target</code>.</li>\n<li>Для доступа к DOM-элементу блока в обработчике DOM-событий теперь нужно использовать поле <code>currentTarget</code>, предоставляемое jQuery. Вместо <code>e.data.domElem</code>нужно писать <code>$(e.currentTarget)</code>.</li>\n<li>В методе <code>findElem</code> добавлен параметр, позволяющий находить элемента блока с учетом вложенных блоков.</li>\n<li>Добавлена возможность указывать конкретную функцию для отписки от событий в методах <code>unbindFrom*</code>.</li>\n<li>Добавлен модуль <code>objects</code> для работы с JS-объектами (содержит методы <code>extend</code>, <code>isEmpty</code>, <code>each</code>).</li>\n<li>Добавлен модуль <code>functions</code> для работы с JS-функциями (содержит методы <code>isFunction</code>, <code>noop</code>).</li>\n<li>Добавлен модуль <code>dom</code> для хелперов при работе с DOM.</li>\n<li>Добавлен модуль <code>querystring</code> для работы с урлами.</li>\n<li>Добавлен модуль <code>loader_type_js</code> для загрузки JS.</li>\n<li>Добавлен модуль <code>vow</code> для работы с промисами.</li>\n<li>Добавлен модуль <code>next-tick</code> для полифила <code>nextTick</code>, <code>setImmediate</code>, <code>setTimeout(0, ...</code> и т.п..</li>\n<li>Добавлен модуль <code>strings__escape</code>, содержащий методы для эскейпинга XML, HTML и атрибутов.</li>\n<li>Модуль <code>inherit</code> теперь поддерживает миксины.</li>\n<li>В модуле <code>functions__throttle</code> добавлен параметр <code>invokeAsap</code>, позволяющий отложить первое исполнение.</li>\n</ul>\n"
    }
}