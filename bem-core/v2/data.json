{"repo":"bem-core","ref":"v2","enb":true,"url":"http://github.com/bem/bem-core","custom":[{"title":{"en":"Documentation","ru":"Документация"},"url":"/tags/bem-core-v2.3.0"}],"docs":{"migration":{"title":{"en":"Migration","ru":"Миграция"},"content":{"en":"<h1 id=\"Migration\">Migration</h1>\n<h2 id=\"1-0-0\">1.0.0</h2>\n<p>For 1.0.0 version we assume migration from <a href=\"https://github.com/bem/bem-bl/\">bem-bl</a> to <a href=\"https://github.com/bem/bem-core/\">bem-core</a>.</p>\n<h3 id=\"Modules\">Modules</h3>\n<p>From now everything should be under the <a href=\"https://github.com/ymaps/modules\">ym modular system</a>.\nAll the dependencies have to be mentioned in the code, using global variables\nhave to be minimized to 0 if possible.</p>\n<p>Example</p>\n<pre><code class=\"lang-js\">modules.define(\n    &#39;my-module&#39;, // Module name\n    [&#39;module-from-library&#39;, &#39;my-another-module&#39;], // Module&#39;s dependencies\n    function(provide, moduleFromLibrary, myAnotherModule) { // Module declaration, runs when all the dependencies are resolved\n\n//Module providing\nprovide({\n    myModuleMethod : function() {}\n});\n\n});\n</code></pre>\n<p>TODO: add information about changes in build process (usage of special techs for js and instructions for custom builders).</p>\n<h3 id=\"jQuery-and-plugins\">jQuery and plugins</h3>\n<p>jQuery is represented with a wrapping module <code>jquery</code> which uses the <code>jQuery</code>\nglobal object if it is available or loads jQuery additionally.\nFrom now jQuery is used only for operations on DOM such as selecting nodes,\nbinding listeners to events, getting and setting attribute values and so on.</p>\n<p>For other operations there are special modules non-dependable on jQuery.</p>\n<ul>\n<li>the <code>objects</code> module to operate on objects (with <code>extend</code>, <code>isEmpty</code> and <code>each</code> methods)\n*the <code>functions</code> module to operate on functions (with <code>isFunction</code> and <code>noop</code> methods)</li>\n</ul>\n<p>All the jQuery plugins which are not fo DOM operation became modules:</p>\n<ul>\n<li>the <code>events</code> module used to be the <code>$.observable</code> jQuery plugin<br/>\nIt works with events, provides &quot;classes&quot; <code>EventsEmitter</code> and <code>Event</code></li>\n<li>the <code>inherit</code> module used to be the <code>$.inherit</code> plugin<br/>\nIt provides an inherit module with classes.</li>\n<li>the <code>cookie</code> module used to be the <code>$.cookie</code> plugin</li>\n<li>the <code>identify</code> module used to be <code>$.identify</code> plugin</li>\n<li>the <code>functions__throttle</code> and <code>functions__debounce</code> used to be the\n<code>$.throttle</code> and the <code>$.debounce</code> plugins</li>\n</ul>\n<p>Before:</p>\n<pre><code class=\"lang-js\">// block code\n$.throttle(...\n// block code\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">module.define(&#39;my-module&#39;, [&#39;functions__throttle&#39;], function(provide, throttle) {\n// module code\nthrottle(...\n// module code\n</code></pre>\n<h3 id=\"BEM-DOM-blocks\">BEM.DOM blocks</h3>\n<h4 id=\"Declaration\">Declaration</h4>\n<p>Blocks represented in DOM were declared with BEM.DOM.decl. Now they must use\n<code>i-bem__dom</code> module and extend it.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, ...);\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, ...);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<h4 id=\"Constructor\">Constructor</h4>\n<p>You have to use full notation for the callback for the <code>js</code> modifier in its\n<code>inited</code> value.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : function() {\n        // constructor code\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : {\n        inited : function() {\n            // constructor code\n</code></pre>\n<h4 id=\"Destructor\">Destructor</h4>\n<p>Instead of <code>destruct</code> method the destructive callback has to be applyed to the\nempty value of <code>js</code> modifier, which corresponds removing a modifier from a\nblock.\nAlso you do not need to call <code>__base</code> to run a descructor from the basic\n<code>i-bem__dom</code> module.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">destruct : function() {\n    this.__base.apply(this, arguments);\n    // destructor code\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : {\n        &#39;&#39; : function() {\n            // destructor code\n</code></pre>\n<h4 id=\"The-`changeThis`-method\">The <code>changeThis</code> method</h4>\n<p>Instead of <code>changeThis</code> method you have to use native <code>bind</code>.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">// block code\nobj.on(&#39;event&#39;, this.changeThis(this._method);\n// block code\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">obj.on(&#39;event&#39;, this._method.bind(this));\n// or better\nobj.on(&#39;event&#39;, this._method, this);\n</code></pre>\n<h4 id=\"The-`afterCurrentEvent`-method\">The <code>afterCurrentEvent</code> method</h4>\n<p>Use the <code>nextTick</code> method instead of <code>afterCurrentEvent</code>. The <code>nextTick</code> assures\nthat the block exists at the time of running a callback. If the block is already\ndestructed, the callback will not be run.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        this.afterCurrentEvent(function() { ...\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, DOM) {\n\nDOM.decl(&#39;block&#39;, {\n    method : function() {\n        this.nextTick(function() { ...\n</code></pre>\n<h4 id=\"Access-to-a-DOM-element-from-an-event-handler-callback\">Access to a DOM element from an event handler callback</h4>\n<p>The callback binded to a DOM element as an event handler is now provided with\nthe link to this DOM element as <code>$(e.currentTarget)</code> instead of <code>e.data.domElem</code>.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">onClick : function(e) {\n    e.data.domElem.attr(...\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">onClick : function(e) {\n    $(e.currentTarget).attr(...\n</code></pre>\n<p>Note: Remember that jQuery is unavailable in global scope and you must use <code>jquery</code> module for access to it.</p>\n<h4 id=\"Channels\">Channels</h4>\n<p>Channels are not embedded into BEM any more. Now they are the separate\n<code>events__channels</code> module.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;channel-name&#39;).on(....\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;events__channels&#39;], function(provide, channels, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        channels(&#39;channel-name&#39;).on(....\n</code></pre>\n<h4 id=\"The-`i-system`-block,-the-`sys`-channel-and-the-`tick`,-`idle`-and-`wakeup`-events\">The <code>i-system</code> block, the <code>sys</code> channel and the <code>tick</code>, <code>idle</code> and <code>wakeup</code> events</h4>\n<p>The is no <code>i-system</code> block any more. Instead you can use special modules:\n<code>tick</code> with the tick event and <code>idle</code> with the events idle and wakeup.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;sys&#39;).on(&#39;tick&#39;, ...\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;tick&#39;], function(provide, tick, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        tick.on(&#39;tick&#39;, ...\n</code></pre>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;sys&#39;).on(&#39;wakeup&#39;, ...\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;idle&#39;], function(provide, idle, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        idle.on(&#39;wakeup&#39;, ...\n</code></pre>\n<h3 id=\"The-BEM-blocks\">The BEM blocks</h3>\n<p>If you have BEM blocks just containing some modules without using BEM\nmethodology in them, you can now rewrite them as modules.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;i-router&#39;, {\n    route : function() { ... }\n});\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;router&#39;, function(provide) {\n\nprovide({\n    route : function() { ... }\n});\n\n});\n</code></pre>\n<p>If you need BEM blocks (not BEM.DOM blocks) anyway, you can extend the <code>i-bem</code>\nmodule.</p>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;my-block&#39;, { ... });\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem&#39;, function(provide, BEM) {\n\nBEM.decl(&#39;my-block&#39;, { ... });\n\nprovide(BEM);\n\n});\n</code></pre>\n<h4 id=\"The-example-of-migration-refactoring-for-the-`b-spin`-block\">The example of migration refactoring for the <code>b-spin</code> block</h4>\n<p>Before:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;b-spin&#39;, {\n\n    onSetMod : {\n\n        &#39;js&#39; : function() {\n\n            this._size = this.getMod(&#39;size&#39;) || /[\\d]+/.exec(this.getMod(&#39;theme&#39;))[0];\n\n            this._bgProp = &#39;background-position&#39;;\n            this._posPrefix = &#39;0 -&#39;;\n\n            if (this.elem(&#39;icon&#39;).css(&#39;background-position-y&#39;)) { /* A dirty hack for IE which cannot get a background-position property but packground-position-y only */\n                this._bgProp = &#39;background-position-y&#39;;\n                this._posPrefix = &#39;-&#39;;\n            }\n\n            this._curFrame = 0;\n\n            this.hasMod(&#39;progress&#39;) &amp;&amp; this.channel(&#39;sys&#39;).on(&#39;tick&#39;, this._onTick, this);\n\n        },\n\n        &#39;progress&#39; : {\n\n            &#39;yes&#39; : function() {\n\n                this.channel(&#39;sys&#39;).on(&#39;tick&#39;, this._onTick, this);\n\n            },\n\n            &#39;&#39; : function() {\n\n                this.channel(&#39;sys&#39;).un(&#39;tick&#39;, this._onTick, this);\n\n            }\n\n        }\n    },\n\n    _onTick: function(){\n\n        var y = ++this._curFrame * this._size;\n\n        (y &gt;= this._size * 36) &amp;&amp; (this._curFrame = y = 0);\n\n        this.elem(&#39;icon&#39;).css(this._bgProp, this._posPrefix + y +&#39;px&#39;);\n\n    },\n\n    destruct : function() {\n\n        this.channel(&#39;sys&#39;).un(&#39;tick&#39;, this._onTick, this);\n        this.__base.apply(this, arguments);\n\n    }\n\n});\n</code></pre>\n<p>After:</p>\n<pre><code class=\"lang-js\">modules.define(\n    &#39;i-bem__dom&#39;,\n    [&#39;tick&#39;],\n    function(provide, tick, BEMDOM) {\n\nvar FRAME_COUNT = 36;\n\nBEMDOM.decl(&#39;b-spin&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39; : function() { // constructor\n                var hasBackgroundPositionY = !!this.elem(&#39;icon&#39;).css(&#39;background-position-y&#39;));\n\n                this._bgProp = hasBackgroundPositionY? &#39;background-position-y&#39; : &#39;background-position&#39;;\n                this._posPrefix = hasBackgroundPositionY? &#39;-&#39; : &#39;0 -&#39;;\n                this._curFrame = 0;\n                this._size = Number(this.getMod(&#39;size&#39;) || /[\\d]+/.exec(this.getMod(&#39;theme&#39;))[0]);\n\n                this.hasMod(&#39;progress&#39;) &amp;&amp; this._bindToTick();\n            },\n\n            &#39;&#39; : function() { // destructor\n                this._unbindFromTick();\n            }\n        },\n\n        &#39;progress&#39; : {\n            &#39;yes&#39; : function() {\n                this._bindToTick();\n            },\n\n            &#39;&#39; : function() {\n                this._unbindFromTick();\n            }\n        }\n    },\n\n    _bindToTick : function() {\n        tick.on(&#39;tick&#39;, this._onTick, this);\n    },\n\n    _unbindFromTick : function() {\n        tick.un(&#39;tick&#39;, this._onTick, this);\n    },\n\n    _onTick : function() {\n        var offset;\n        this._curFrame++ &gt;= FRAME_COUNT?\n            offset = this._curFrame * this._size :\n            this._curFrame = offset = 0;\n\n        this.elem(&#39;icon&#39;).css(this._bgProp, this._posPrefix + offset + &#39;px&#39;);\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n","ru":"<h1 id=\"Миграция\">Миграция</h1>\n<h2 id=\"1-0-0\">1.0.0</h2>\n<p>Для версии 1.0.0 миграция подразумевается с использования <a href=\"https://github.com/bem/bem-bl/\">bem-bl</a> на использование <a href=\"https://github.com/bem/bem-core/\">bem-core</a>.</p>\n<h3 id=\"Модули\">Модули</h3>\n<p>Весь код теперь пишется в терминах модульной системы <a href=\"https://github.com/ymaps/modules\">https://github.com/ymaps/modules</a>.\nВсе зависимости должны явно указываться в коде, обращения к глобальным объектом необходимо минимизировать, а, по возможности, и полностью исключить.</p>\n<p>Пример:</p>\n<pre><code class=\"lang-javascript\">modules.define(\n    &#39;my-module&#39;, // имя модуля\n    [&#39;module-from-library&#39;, &#39;my-another-module&#39;], // зависимости модуля\n    function(provide, moduleFromLibrary, myAnotherModule) { // декларация модуля, вызывается когда все зависимости &quot;разрезолвлены&quot;\n\n// предоставление модуля\nprovide({\n    myModuleMethod : function() {}\n});\n\n});\n</code></pre>\n<p>TODO: дописать про изменение сборки (использование специальных технологий для js и как быть с кастомными сборщиками)</p>\n<h3 id=\"jQuery-и-jQuery-плагины\">jQuery и jQuery-плагины</h3>\n<p>jQuery представлен модулем-оберткой <code>jquery</code>, который использует глобальный объект jQuery,\nв случае если он уже присутствует на странице, в противном случае загружая его самостоятельно.\njQuery теперь используется только для операций, связанных непосредственно с DOM\n(поиск элементов, подписка на события, установка/получение атрибутов элементов, и т.д.).</p>\n<p>Для всех остальных операций написаны соответствующие модули,\nпредоставляющие аналогичный функционал, но, при этом, не зависящие от jQuery:</p>\n<ul>\n<li>модуль <code>objects</code> для работы с объектами (с методами <code>extend</code>, <code>isEmpty</code>, <code>each</code>)</li>\n<li>модуль <code>functions</code> для работы с функциями (с методами <code>isFunction</code> и <code>noop</code>)</li>\n</ul>\n<p>Также, все jQuery-плагины, не связанные непосредственно с jQuery\n(<code>$.observable</code>, <code>$.inherit</code>, <code>$.cookie</code>, <code>$.identify</code>, <code>$.throttle</code>) стали модулями:</p>\n<ul>\n<li>модуль <code>events</code> вместо <code>$.observable</code> для работы с событиями, предоставляющий &quot;классы&quot; <code>EventsEmitter</code> и <code>Event</code>)</li>\n<li>модуль <code>inherit</code> вместо <code>$.inherit</code> для работы с &quot;классами&quot; и наследованием</li>\n<li>модуль <code>cookie</code> вместо <code>$.cookie</code></li>\n<li>модуль <code>identify</code> вместо <code>$.identify</code></li>\n<li>модули <code>functions__throttle</code>, <code>functions__debounce</code> вместо <code>$.throttle</code> и <code>$.debounce</code>, соответственно</li>\n</ul>\n<p>Было:</p>\n<pre><code class=\"lang-js\">// код блока\n$.throttle(...\n// код блока\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">module.define(&#39;my-module&#39;, [&#39;functions__throttle&#39;], function(provide, throttle) {\n// код модуля\nthrottle(...\n// код модуля\n</code></pre>\n<h3 id=\"BEM-DOM-блоки\">BEM.DOM-блоки</h3>\n<h4 id=\"Декларация\">Декларация</h4>\n<p>Вместо декларации через BEM.DOM.decl необходимо доопределять модуль <code>i-bem__dom</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, ...);\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, ...);\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n<h4 id=\"Конструктор\">Конструктор</h4>\n<p>Необходимо использовать полную нотацию для обработчика установки модификатора <code>js</code> в значение <code>inited</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : function() {\n        // код конструктора\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    &#39;js&#39; : {\n        &#39;inited&#39; : function() {\n            // код конструктора\n</code></pre>\n<h4 id=\"Деструктор\">Деструктор</h4>\n<p>Вместо метода <code>destruct</code> необходимо использовать обработчик установки модификатора <code>js</code> в пустое значение (удаление модификатора).\nВызывать <code>__base</code> для того, чтобы у блоков работал базовый деструктор, определенный в <code>i-bem__dom</code>, больше не нужно.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">destruct : function() {\n    this.__base.apply(this, arguments);\n    // код деструктора\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">onSetMod : {\n    js : {\n        &#39;&#39; : function() {\n            // код деструктора\n</code></pre>\n<h4 id=\"Метод-`changeThis`\">Метод <code>changeThis</code></h4>\n<p>Вместо метода <code>changeThis</code> необходимо использовать либо соответствующий параметр, либо нативный метод <code>bind</code>, если такой параметр отсутствует.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">// код блока\nobj.on(&#39;event&#39;, this.changeThis(this._method);\n// код блока\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">obj.on(&#39;event&#39;, this._method.bind(this));\n// или лучше\nobj.on(&#39;event&#39;, this._method, this);\n</code></pre>\n<h4 id=\"Метод-`afterCurrentEvent`\">Метод <code>afterCurrentEvent</code></h4>\n<p>Вместо метода <code>afterCurrentEvent</code> необходимо использовать метод <code>nextTick</code>,\nкоторый гарантирует, что блок еще существует в момент исполнения колбэка\n(если блок уже уничтожен к этому моменту, то колбэк не исполняется).</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        this.afterCurrentEvent(function() { ...\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, function(provide, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        this.nextTick(function() { ...\n</code></pre>\n<h4 id=\"Доступ-до-DOM-элемента-в-обработчике-события\">Доступ до DOM-элемента в обработчике события</h4>\n<p>DOM-элемент, к которому был подвешен обработчик события теперь доступен\nкак <code>$(e.currentTarget)</code>вместо <code>e.data.domElem</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">onClick : function(e) {\n    e.data.domElem.attr(...\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">onClick : function(e) {\n    $(e.currentTarget).attr(...\n</code></pre>\n<h4 id=\"Каналы--channels-\">Каналы (channels)</h4>\n<p>Каналы больше не являются встроенными в BEM, теперь они являются самостоятельным модулем <code>events__channels</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;channel-name&#39;).on(....\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;events__channels&#39;], function(provide, channels, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        channels(&#39;channel-name&#39;).on(....\n</code></pre>\n<h4 id=\"Блок-`i-system`-и-канал-`sys`-событий-`tick`,-`idle`,-`wakeup`\">Блок <code>i-system</code> и канал <code>sys</code> событий <code>tick</code>, <code>idle</code>, <code>wakeup</code></h4>\n<p>Этот блок и канал перестали существовать, вместо них появились отдельные модули: <code>tick</code> с событием tick  и <code>idle</code> с событиями idle и wakeup.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;sys&#39;).on(&#39;tick&#39;, ...\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;tick&#39;], function(provide, tick, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        tick.on(&#39;tick&#39;, ...\n</code></pre>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;block&#39;, {\n    method : function() {\n        BEM.channel(&#39;sys&#39;).on(&#39;wakeup&#39;, ...\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem__dom&#39;, [&#39;idle&#39;], function(provide, idle, BEMDOM) {\n\nBEMDOM.decl(&#39;block&#39;, {\n    method : function() {\n        idle.on(&#39;wakeup&#39;, ...\n</code></pre>\n<h3 id=\"BEM-блоки\">BEM-блоки</h3>\n<p>Те BEM-блоки, которые использовались как хранилище для каких-то методов, при этом никак не использующие BEM-методологию, теперь\nмогут быть написаны как модули.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;i-router&#39;, {\n    route : function() { ... }\n});\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;router&#39;, function(provide) {\n\nprovide({\n    route : function() { ... }\n});\n\n});\n</code></pre>\n<p>Если же, по каким-то причинам, нужны именно BEM-блоки (не BEM.DOM-блоки), то их можно объявлять, доопределяя модуль <code>i-bem</code>.</p>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.decl(&#39;my-block&#39;, { ... });\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;i-bem&#39;, function(provide, BEM) {\n\nBEM.decl(&#39;my-block&#39;, { ... });\n\nprovide(BEM);\n\n});\n</code></pre>\n<h4 id=\"Рефакторинг-на-примере-блока-`b-spin`\">Рефакторинг на примере блока <code>b-spin</code></h4>\n<p>Было:</p>\n<pre><code class=\"lang-js\">BEM.DOM.decl(&#39;b-spin&#39;, {\n\n    onSetMod : {\n\n        &#39;js&#39; : function() {\n\n            this._size = this.getMod(&#39;size&#39;) || /[\\d]+/.exec(this.getMod(&#39;theme&#39;))[0];\n\n            this._bgProp = &#39;background-position&#39;;\n            this._posPrefix = &#39;0 -&#39;;\n\n            if (this.elem(&#39;icon&#39;).css(&#39;background-position-y&#39;)) { /* В IE нельзя получить свойство background-position, только background-position-y, поэтому костыляем */\n                this._bgProp = &#39;background-position-y&#39;;\n                this._posPrefix = &#39;-&#39;;\n            }\n\n            this._curFrame = 0;\n\n            this.hasMod(&#39;progress&#39;) &amp;&amp; this.channel(&#39;sys&#39;).on(&#39;tick&#39;, this._onTick, this);\n\n        },\n\n        &#39;progress&#39; : {\n\n            &#39;yes&#39; : function() {\n\n                this.channel(&#39;sys&#39;).on(&#39;tick&#39;, this._onTick, this);\n\n            },\n\n            &#39;&#39; : function() {\n\n                this.channel(&#39;sys&#39;).un(&#39;tick&#39;, this._onTick, this);\n\n            }\n\n        }\n    },\n\n    _onTick: function(){\n\n        var y = ++this._curFrame * this._size;\n\n        (y &gt;= this._size * 36) &amp;&amp; (this._curFrame = y = 0);\n\n        this.elem(&#39;icon&#39;).css(this._bgProp, this._posPrefix + y +&#39;px&#39;);\n\n    },\n\n    destruct : function() {\n\n        this.channel(&#39;sys&#39;).un(&#39;tick&#39;, this._onTick, this);\n        this.__base.apply(this, arguments);\n\n    }\n\n});\n</code></pre>\n<p>Стало:</p>\n<pre><code class=\"lang-js\">modules.define(\n    &#39;i-bem__dom&#39;,\n    [&#39;tick&#39;],\n    function(provide, tick, BEMDOM) {\n\nvar FRAME_COUNT = 36;\n\nBEMDOM.decl(&#39;b-spin&#39;, {\n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39; : function() { // конструктор\n                var hasBackgroundPositionY = !!this.elem(&#39;icon&#39;).css(&#39;background-position-y&#39;)); /* В IE нельзя получить свойство background-position, только background-position-y */\n\n                this._bgProp = hasBackgroundPositionY? &#39;background-position-y&#39; : &#39;background-position&#39;;\n                this._posPrefix = hasBackgroundPositionY? &#39;-&#39; : &#39;0 -&#39;;\n                this._curFrame = 0;\n                this._size = Number(this.getMod(&#39;size&#39;) || /[\\d]+/.exec(this.getMod(&#39;theme&#39;))[0]);\n\n                this.hasMod(&#39;progress&#39;) &amp;&amp; this._bindToTick();\n            },\n\n            &#39;&#39; : function() { // деструктор\n                this._unbindFromTick();\n            }\n        },\n\n        &#39;progress&#39; : {\n            &#39;true&#39; : function() {\n                this._bindToTick();\n            },\n\n            &#39;&#39; : function() {\n                this._unbindFromTick();\n            }\n        }\n    },\n\n    _bindToTick : function() {\n        tick.on(&#39;tick&#39;, this._onTick, this);\n    },\n\n    _unbindFromTick : function() {\n        tick.un(&#39;tick&#39;, this._onTick, this);\n    },\n\n    _onTick : function() {\n        var offset;\n        this._curFrame++ &gt;= FRAME_COUNT?\n            offset = this._curFrame * this._size :\n            this._curFrame = offset = 0;\n\n        this.elem(&#39;icon&#39;).css(this._bgProp, this._posPrefix + offset + &#39;px&#39;);\n    }\n});\n\nprovide(BEMDOM);\n\n});\n</code></pre>\n"}},"changelog":{"title":{"en":"Сhangelog","ru":"История изменений"},"content":{"en":"<h1 id=\"Changelog\">Changelog</h1>\n<h2 id=\"2-4-0\">2.4.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li><a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a> was updated to 0.8.0; <a href=\"https://github.com/bem/bemhtml-compat\">bemhtml-compat</a> was updated to 0.0.11.</li>\n</ul>\n<h3 id=\"Bug-fixes\">Bug fixes</h3>\n<ul>\n<li>An issue in <code>jquery__event_type_pointerpressrelease</code> was fixed. <code>pointerpress</code>/<code>pointerrelease</code> events fired for any press/release\nof mouse button (<a href=\"https://github.com/bem/bem-core/issues/607\">#607</a>).</li>\n<li>An issue in <code>i-bem__dom.js</code> was fixed. Base <code>live</code> method was not properly called in some edge cases (<a href=\"https://github.com/bem/bem-core/issues/608\">#608</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li>English documentation for JS-syntax of BEMHTML was added.</li>\n</ul>\n<h2 id=\"2-3-0\">2.3.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>New implementation of pointer events was added. Based on pointer events polyfills from <a href=\"http://www.polymer-project.org/\">Polymer</a> (<a href=\"https://github.com/bem/bem-core/pull/567\">#567</a>).</li>\n<li>Ability to specify additional data for event was added to <code>bindTo*</code> methods of <code>i-bem__dom.js</code> (<a href=\"https://github.com/bem/bem-core/issues/568\">#568</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li>An issue in <code>i-bem.bemhtml</code> was fixed. There was an error when mix was used as an object (not an array) in BEMJSON and BEMHTML simultaneously (<a href=\"https://github.com/bem/bem-core/issues/555\">#555</a>).</li>\n<li>An issue in <code>page</code> was fixed. There was no possibility to apply standard modes to <code>page</code> in BEMHTML template and touch template was broken (<a href=\"https://github.com/bem/bem-core/issues/516\">516</a>).</li>\n</ul>\n<h2 id=\"2-2-4\">2.2.4</h2>\n<h3 id=\"Bug-fixes\">Bug fixes</h3>\n<ul>\n<li>An issue in <code>i-bem.js</code> was fixed. Modifier change event has been emitted even if <code>beforeSetMod</code> handler\nhad prevented change (<a href=\"https://github.com/bem/bem-core/pull/546\">#546</a>).</li>\n<li>String decoding process of <code>querystring__uri</code> module was fixed to return original string\nif decode failed (<a href=\"https://github.com/bem/bem-core/pull/554\">#554</a>).</li>\n</ul>\n<h2 id=\"2-2-3\">2.2.3</h2>\n<h3 id=\"Bug-fixes\">Bug fixes</h3>\n<ul>\n<li>Destruction process of blocks was fixed to prevent unexpected block reinitialization (<a href=\"https://github.com/bem/bem-core/issues/540\">#540</a>).</li>\n<li>An issue in <code>jquery__event_type_pointer</code> was fixed. Native mouse events were replaced with pointer events\nin unexpected cases (<a href=\"https://github.com/bem/bem-core/issues/534\">#534</a>).</li>\n<li><code>unbindFrom*</code> methods of <code>i-bem__dom</code> now support multiple events to be passed in arguments (<a href=\"https://github.com/bem/bem-core/issues/533\">#533</a>).</li>\n<li>Lost <code>functions</code> dependency in <code>events</code> module was restored (<a href=\"https://github.com/bem/bem-core/issues/532\">#532</a>).</li>\n</ul>\n<h2 id=\"2-2-2\">2.2.2</h2>\n<h3 id=\"Bug-fixes\">Bug fixes</h3>\n<ul>\n<li>An issue with block reinitialization on the DOM node, that has been processed with destructor, was fixed\nin <code>i-bem__dom</code> (<a href=\"https://github.com/bem/bem-core/issues/518\">#518</a>).</li>\n<li>An issue in mod events subscription was fixed in <code>i-bem</code>. <code>false</code> could be used as <code>modVal</code> (<a href=\"https://github.com/bem/bem-core/issues/529\">#529</a>).</li>\n<li><code>jquery</code> was updated to the latest minor releases 2.1.1 and 1.11.1 (<a href=\"https://github.com/bem/bem-core/issues/515\">#515</a>).</li>\n</ul>\n<h2 id=\"2-2-1\">2.2.1</h2>\n<ul>\n<li>An issue in <code>jquery__event_type_pointerpressrelease</code> was fixed. <code>pointerpress</code> event has been triggered twice on each mousedown\nin IE10 (<a href=\"https://github.com/bem/bem-core/issues/505\">#505</a>).</li>\n</ul>\n<h2 id=\"2-2-0\">2.2.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>New <code>keyboard__codes</code> module has been added (<a href=\"https://github.com/bem/bem-core/issues/431\">#431</a>).</li>\n<li><code>BEMContext</code> class was added to oninit&#39;s export context in <code>i-bem.bemhtml</code> (<a href=\"https://github.com/bem/bem-core/pull/485\">#485</a>).</li>\n<li>Ability to declare elements with block class has been added (<a href=\"https://github.com/bem/bem-core/issues/481\">#481</a>).</li>\n<li>Behaviour of <code>isSimple</code> method of <code>BEMContext</code> was fixed in <code>i-bem.bemhtml</code> (<a href=\"https://github.com/bem/bem-core/pull/432\">#432</a>).</li>\n<li>An issue with <code>liveUnbindFrom</code> method of <code>BEMDOM</code> was fixed in <code>i-bem__dom</code> (<a href=\"https://github.com/bem/bem-core/pull/476\">#476</a>).</li>\n<li>An issue with <code>isFocusable</code> method of <code>dom</code> module was fixed for cases where <code>domElem</code> is a link with <code>tabindex</code> attribute,\nbut without <code>href</code> (<a href=\"https://github.com/bem/bem-core/issues/501\">#501</a>).</li>\n<li>Short way of module declaration was fixed for <code>i-bem__dom_elem-instances</code> (<a href=\"https://github.com/bem/bem-core/issues/479\">#479</a>).</li>\n<li>A workaround for rendering performance of blocks initialisation in Chrome-based browsers was added\nto <code>i-bem__dom_init_auto</code> (<a href=\"https://github.com/bem/bem-core/issues/486\">#486</a>).</li>\n<li><code>vow.js</code> module has been moved to <code>vow.vanilla.js</code> (<a href=\"https://github.com/bem/bem-core/issues/412\">#412</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li><code>vow</code> module has been updated to 0.4.3 (<a href=\"https://github.com/bem/bem-core/pull/504\">#504</a>).</li>\n<li>Russian documentation about BEMTREE technology was added (<a href=\"https://github.com/bem/bem-core/pull/500\">#500</a>).</li>\n<li>Russian documentation for JS-syntax of BEMHTML was updated (<a href=\"https://github.com/bem/bem-core/pull/471\">#471</a>).</li>\n<li>API references for JS-modules has been added as a separate branch <code>v2-jsdoc</code> (<a href=\"https://github.com/bem/bem-core/pull/478\">#478</a>).</li>\n</ul>\n<h2 id=\"2-1-0\">2.1.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>An issue in <code>i-bem.js</code> when modifiers change event had been emitted before <code>onSetMod</code> handlers have been called was fixed (<a href=\"https://github.com/bem/bem-core/issues/454\">#454</a>).</li>\n<li>An issue in <code>i-bem.bemhtml</code> was fixed. Since now <code>this.mods</code> and <code>this.ctx.mods</code> use the same object (<a href=\"https://github.com/bem/bem-core/issues/441\">#441</a>).</li>\n<li>Error in modular declaration of element&#39;s modifiers was fixed in <code>i-bem__dom_elem-instances</code> (<a href=\"https://github.com/bem/bem-core/issues/447\">#447</a>).</li>\n<li><a href=\"https://github.com/dfilatov/inherit\">inherit</a> module was updated to 2.2.1 (<a href=\"https://github.com/bem/bem-core/issues/466\">#466</a>).</li>\n<li>An order of tags in <code>head</code> section of <code>page.bemhtml</code> was fixed (<a href=\"https://github.com/bem/bem-core/pull/465\">#465</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li><code>baseMix</code> field description of <code>i-bem.js</code> was added to russian docs (<a href=\"https://github.com/bem/bem-core/pull/461\">#461</a>).</li>\n<li>CDN host was changed to <code>yastatic.net</code> (<a href=\"https://github.com/bem/bem-core/issues/444\">#444</a>).\nPrevious CDN host <code>yandex.st</code> is still accessible. Physically they both are the same web servers. DNS records is the only difference.</li>\n<li>BEMHTML template for <code>bem create</code> command was added (<a href=\"https://github.com/bem/bem-core/issues/277\">#277</a>).</li>\n<li>We do not support autobuilding of our tests with Node.js 0.8 in <a href=\"http://travis-ci.com\">Travis CI</a> any longer (<a href=\"https://github.com/bem/bem-core/issues/455\">#455</a>).</li>\n<li>Travis&#39;s build status badge <a href=\"http://blog.travis-ci.com/2014-03-20-build-status-badges-support-svg/\">was changed to SVG version</a> :)</li>\n</ul>\n<h2 id=\"2-0-0\">2.0.0</h2>\n<h3 id=\"Breaking-changes\">Breaking changes</h3>\n<ul>\n<li><p>All deprecated methods have been removed from <code>i-bem.js</code> and <code>i-bem__dom.js</code> (<a href=\"https://github.com/bem/bem-core/issues/318\">#318</a>).\nThe following methods were removed:</p>\n<ul>\n<li><code>destruct</code>, use <code>onSetMod js &#39;&#39;</code>;</li>\n<li><code>extractParams</code>, use <code>elemParams</code>;</li>\n<li><code>trigger</code>, use <code>emit</code>;</li>\n<li><code>afterCurrentEvent</code>, use <code>next-tick</code> module;</li>\n<li><code>channel</code>, use <code>events__channels</code> module;</li>\n<li><code>changeThis</code>, use native <code>Function.prototype.bind</code>.</li>\n</ul>\n</li>\n<li><p><code>init</code> and <code>destruct</code> events have been removed from <code>i-bem.js</code> in favor of modifiers changes events (see &quot;Major changes&quot; section below).</p>\n</li>\n<li><code>ecma</code> was moved to <a href=\"http://github.com/bem/es5-shims\">separate repo</a>; ES5-shims should be used\nfor IE &lt; 9 (<a href=\"https://github.com/bem/bem-core/issues/230\">#230</a>).</li>\n<li><code>vow</code> module has been updated to 0.4.1 (<a href=\"https://github.com/bem/bem-core/issues/350\">#350</a>).\nSee <a href=\"https://github.com/dfilatov/vow/blob/0.4.1/CHANGELOG.md\">Vow&#39;s changelog</a> for changes.</li>\n<li>Support for vow@0.4 has been added to <code>i-bem.bemhtml</code> (<a href=\"https://github.com/bem/bem-core/issues/385\">#385</a>).</li>\n</ul>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>Support for defining BEMDOM-blocks as <a href=\"https://github.com/ymaps/modules\">ym</a> modules has been added (<a href=\"https://github.com/bem/bem-core/issues/382\">#382</a>).</li>\n<li>Events for modifiers changes have been added to <code>i-bem.js</code> (<a href=\"https://github.com/bem/bem-core/issues/357\">#357</a>).</li>\n<li>Support for passing string values has been added to <code>BEMDOM.init</code>\n(<a href=\"https://github.com/bem/bem-core/issues/419\">#419</a>).\nand <code>BEMDOM.update</code> methods (<a href=\"https://github.com/bem/bem-core/issues/420\">#420</a>).</li>\n<li>DOM helpers from <code>i-bem__dom.js</code> <code>replace</code>, <code>append</code>, <code>prepend</code>, <code>before</code>, <code>after</code> now return new context and <code>update</code> returns\nupdated context as a jQuery object (<a href=\"https://github.com/bem/bem-core/issues/410\">#410</a>).</li>\n<li>New <code>loader_type_bundle</code> has been added (<a href=\"https://github.com/bem/bem-core/issues/358\">#358</a>).</li>\n<li>Default jQuery versions were updated to 2.1.0 and to 1.11.0, for IE &lt; 9 (<a href=\"https://github.com/bem/bem-core/issues/356\">#356</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li><code>i-bem.bemhtml</code> now uses strings concatination instead of pushing to buffer in it&#39;s internals (<a href=\"https://github.com/bem/bem-core/issues/401\">#401</a>).</li>\n<li>jQuery no longer removes itself from global scope if it exists (<a href=\"https://github.com/bem/bem-core/issues/349\">#349</a>).</li>\n<li><code>jquery__event_type_pointerclick.js</code> has been moved from touch level to common (<a href=\"https://github.com/bem/bem-core/issues/393\">#393</a>).</li>\n<li>Modifiers <code>i-bem_elem-instances_yes</code> and <code>i-bem__dom_elem-instances_yes</code> were renamed to boolean style (<a href=\"https://github.com/bem/bem-core/issues/352\">#352</a>).</li>\n<li>Runtime error in <code>page</code> template in development mode has been fixed (<a href=\"https://github.com/bem/bem-core/issues/417\">#417</a>).</li>\n<li>Usage of <code>Function.prototype.bind</code> has been droped from <code>i-bem.js</code> internals in favor of support\nfor Android 2.3 (<a href=\"https://github.com/bem/bem-core/issues/404\">#404</a>).</li>\n<li>Some bugs in <code>browser-js+bemhtml</code> tech have been fixed (<a href=\"https://github.com/bem/bem-core/issues/392\">#392</a>).</li>\n<li>Up to <a href=\"https://github.com/ymaps/modules/releases\">ym@0.0.15</a> (<a href=\"https://github.com/bem/bem-core/issues/414\">#414</a>).</li>\n</ul>\n<h2 id=\"1-2-0\">1.2.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>BEM-blocks are emit <code>destruct</code> event on destructing (<a href=\"https://github.com/bem/bem-core/issues/370\">#370</a>).</li>\n<li>Improvements of <code>pointerevents</code> polyfills (<a href=\"https://github.com/bem/bem-core/pull/354\">#354</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li>All JSDocs were fixed so <a href=\"github.com/bem/bem-jsd\">bem-jsd</a> could parse them (<a href=\"https://github.com/bem/bem-core/issues/335\">#335</a>).</li>\n<li>Russian version of BEMHTML reference was actualized to JavaScript syntax (<a href=\"https://github.com/bem/bem-core/pull/355\">#355</a>).</li>\n<li>Use <a href=\"http://bower.io\">bower</a> for dependency management (<a href=\"https://github.com/bem/bem-core/issues/367\">#367</a>).</li>\n</ul>\n<h2 id=\"1-1-0\">1.1.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li><code>jquery__config</code> uses jQuery 2.x by default for modern browsers (<a href=\"https://github.com/bem/bem-core/issues/319\">#319</a>).</li>\n<li>Add ability to use any BEMJSON as value of attributes in BEMHTML templates (<a href=\"https://github.com/bem/bem-core/issues/290\">#290</a>).</li>\n<li>Fix dependencies in <code>i-bem__collection</code> (<a href=\"https://github.com/bem/bem-core/issues/292\">#292</a>).</li>\n<li>Remove <code>page</code> block&#39;s touch styles (<a href=\"https://github.com/bem/bem-core/issues/306\">#306</a>).</li>\n<li>Fix <code>page</code> BEMHTML wrapping in production mode (<a href=\"https://github.com/bem/bem-core/issues/309\">#309</a>).</li>\n<li>Fix possible JavaScript error in script injection in IE&lt;9 in <code>next-tick</code> (<a href=\"https://github.com/bem/bem-core/issues/324\">#324</a>).</li>\n<li>Fix <code>FastClick</code> initialisation in <code>jquery__event_type_pointerclick</code> of <code>touch.blocks</code> (<a href=\"https://github.com/bem/bem-core/issues/332\">#332</a>).</li>\n<li>Fix <code>node.js</code> tech bug on Windows systems (<a href=\"https://github.com/bem/bem-core/issues/274\">#274</a>).</li>\n<li>Fix <code>i-bem__dom_elem-instances</code> bug with <code>onElemSetMod</code> (<a href=\"https://github.com/bem/bem-core/issues/340\">#340</a>).</li>\n<li>Use bemhtml from <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a> (<a href=\"https://github.com/bem/bem-core/issues/329\">#329</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li><a href=\"https://github.com/ymaps/modules\">ym</a> was updated to 0.0.12 (<a href=\"https://github.com/bem/bem-core/issues/326\">#326</a>).</li>\n<li>Do not flood <code>console</code> with messages if <code>i-bem__i18n</code> is not in debug mode (<a href=\"https://github.com/bem/bem-core/issues/285\">#285</a>).</li>\n<li>Fix jsdoc for <code>dropElemCache()</code> method of <code>i-bem__dom</code> module (<a href=\"https://github.com/bem/bem-core/issues/296\">#296</a>).</li>\n<li>Development infrastructure was updated to\n<a href=\"https://github.com/narqo/bem-pr/blob/0.5.3/HISTORY.md\">bem-pr@v0.5.x</a> (<a href=\"https://github.com/bem/bem-core/issues/323\">#323</a>).</li>\n<li>Russian documentation for <code>i-bem.js</code> was updated.</li>\n<li><a href=\"https://github.com/bem/bem-core/blob/v1/README.md#supported-browsers\">List of supported browsers</a>\nwas specified in project&#39;s README.</li>\n</ul>\n<h2 id=\"1-0-0\">1.0.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>Starts using modular system <a href=\"https://github.com/ymaps/modules\">ym</a>.</li>\n<li>Removes all deprecated methods from <code>i-bem</code> and <code>i-bem__dom</code>.</li>\n<li><code>i-bem</code> now has no dependency on jQuery. <code>i-bem__dom</code> still depends on jQuery.</li>\n<li>BEMHTML-template can be written with <a href=\"https://gist.github.com/veged/6150760\">JS-syntax</a>.</li>\n<li>Introduces new tech <code>bemtree</code> (based on <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a>)\nfor describing dynamic generation of BEM-tree.</li>\n<li>Introduces new tech <code>vanilla.js</code> for JS-implementations that does not depend on particular JS-engine.</li>\n<li>Introduces new techs <code>browser.js</code> и <code>node.js</code> for JS-implementations targeted corresponding engines.\nFor backward compatibility we assume that <code>.js</code>-files contains <code>browser.js</code> implementation.</li>\n<li>Introduces polyfill (<code>jquery__event_type_pointer</code> and <code>jquery__event_type_pointerclick</code> as a jQuery-plugins)\nfor universalize desktop and touch pointer events.</li>\n<li>Introduces system for unit testing and blocks examples generation.</li>\n<li>Introduces &quot;simple&quot; modifiers (modifiers without value) support in <code>i-bem</code> and BEMHTML.</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li>Gets rid of prefixes in all block names (except <code>i-bem</code>).</li>\n<li>Block <code>i-bem__dom</code> becomes a module (in terms of <a href=\"https://github.com/ymaps/modules\">ym</a>)\nand all <code>BEM.DOM</code>-block must define additions to <code>i-bem__dom</code> (<a href=\"https://github.com/bem/bem-core/blob/v1/common.bundles/index/blocks/b-square/b-square.js\">example</a>).</li>\n<li>Method for blocks declaration (<code>.decl()</code>) does not accept object with <code>name</code> field as first parameter.\nRequired form with <code>block</code> field: <code>BEM.decl({ block: &#39;b1&#39;, modName: &#39;m&#39;, modVal: &#39;v&#39; }, ...)</code>.</li>\n<li>Introduces <code>nextTick</code> method as replacement for <code>afterCurrentEvent</code> method\nfor ensure of block existence in callback invocation time.\n<code>BEM.afterCurrentEvent</code> is <strong>deprecated</strong>.</li>\n<li>Introduces new <code>channels</code> module instead of <code>BEM.channel</code>. <code>BEM.channel</code> is <strong>deprecated</strong>.</li>\n<li><code>changeThis</code> is <strong>deprecated</strong>. Use native <code>bind</code> instead.</li>\n<li>Removes <code>del</code> method from <code>i-bem</code> block.</li>\n<li>Removes <code>getWindowSize</code> method from <code>i-bem__dom</code> block. Use <code>BEMDOM.win.width()</code> and <code>BEMDOM.win.height()</code>.</li>\n<li>Introduces <code>jquery</code> module-wrapper for providing jQuery.\nIf jQuery already included into the page module-wrapper provides it. Otherwise it loads jQuery (version 1.10.1) on its own.</li>\n<li><code>$.observable</code> becomes <code>events</code> module and not longer depends on jQuery.</li>\n<li><code>$.inherit</code> becomes <code>inherit</code> module and not longer depends on jQuery.</li>\n<li><code>$.identify</code> becomes <code>identify</code> module and not longer depends on jQuery.</li>\n<li><code>$.throttle</code> splits into two modules: <code>functions__throttle</code> and <code>functions__debounce</code>, they both not longer depend on jQuery.</li>\n<li><code>$.decodeURI</code>, <code>$.decodeURIComponent</code> moves to <code>querystring__uri</code> module and not longer depends on jQuery.</li>\n<li><code>$.cookie</code> becomes <code>cookie</code> module and not longer depends on jQuery.</li>\n<li>Introduces <code>ua</code> module instead of <code>$.browser</code> (with same interface).</li>\n<li>Use <code>pointerclick</code> instead of <code>leftclick</code>. It provides by <code>jquery__event_type_pointerclick</code> polyfill.</li>\n<li><code>i-system</code> block splits into two modules: <code>idle</code> and <code>tick</code>.</li>\n<li>Triggers for modifiers changes now splitted into two groups:\nbefore setting new value (<code>beforeSetMod</code> and <code>beforeElemSetMod</code>)\nand after the value has been set (<code>onSetMod</code> and <code>onElemSetMod</code>).\nCancellation of modifiers change is possible only from <code>before*</code>-triggers.</li>\n<li>Using of <code>{ onSetMod : { js : function() { ... } } }</code> is <strong>deprecated</strong>, use <code>onSetMod: { js : { inited : ... } } }</code>.</li>\n<li><code>destruct</code> method from <code>i-bem</code> block is <strong>deprecated</strong>.\nUse supplementary trigger for <code>_js</code> modifiers:\n<code>onSetMod: { js : { inited : ... } } }</code> — <code>{ onSetMod : { js : { &#39;&#39; : ... } } }</code>.</li>\n<li><code>exractParams</code> method from <code>i-bem__dom</code> block is <strong>deprecated</strong>.\nUse <code>elemParams</code> method for access to elements params.</li>\n<li><code>trigger</code> method from <code>i-bem</code> block is <strong>deprecated</strong> in flavor of <code>emit</code> method.</li>\n<li><code>onFirst</code> method from <code>i-bem</code> block is <strong>deprecated</strong> in flavor of <code>once</code> method.</li>\n<li><strong>Deprecated</strong> field <code>e.block</code> that provided block-target of BEM-events was removed. Use <code>e.target</code> field instead.</li>\n<li>Field <code>e.data.domElem</code> that provided DOM-element of block in DOM-events was removed. Use <code>$(e.currentTarget)</code> (provided by jQuery).</li>\n<li>Introduces parameter for <code>findElem</code> method that allows to search elements\nof particular block instance (in case of nested blocks with same name).</li>\n<li>Introduces possibility to point particular function in <code>unbindFrom*</code> methods.</li>\n<li>Introduces <code>objects</code> module for work with JS-objects. It contains methods: <code>extend</code>, <code>isEmpty</code>, <code>each</code>.</li>\n<li>Introduces <code>functions</code> module for work with JS-functions. It contains methods: <code>isFunction</code>, <code>noop</code>.</li>\n<li>Introduces <code>dom</code> module for work with DOM-tree.</li>\n<li>Introduces <code>querystring</code> module for work with URL-based strings.</li>\n<li>Introduces <code>loader_type_js</code> module for JS loading.</li>\n<li>Introduces <code>vow</code> module for Promises/A+.</li>\n<li>Introduces <code>next-tick</code> module as polyfill for <code>nextTick</code>, <code>setImmediate</code>, <code>setTimeout(0, ...</code> and etc.</li>\n<li>Introduces <code>strings__escape</code> module for XML, HTML and attributes escaping.</li>\n<li><code>inherit</code> module now supports mixins.</li>\n<li>Introduces <code>invokeAsap</code> parameter for <code>functions__throttle</code> module that allows to delay first invocation.</li>\n</ul>\n","ru":"<h1 id=\"История-изменений\">История изменений</h1>\n<h2 id=\"2-4-0\">2.4.0</h2>\n<h3 id=\"Major-changes\">Major changes</h3>\n<ul>\n<li>npm-модуль <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a> обновлен до версии 0.8.0; <a href=\"https://github.com/bem/bemhtml-compat\">bemhtml-compat</a>\nобновлен до 0.0.11.</li>\n</ul>\n<h3 id=\"Bug-fixes\">Bug fixes</h3>\n<ul>\n<li>Исправлена ошибка в <code>jquery__event_type_pointerpressrelease</code>, из-за которой события <code>pointerpress</code> / <code>pointerrelease</code> генерировались\nна нажатие любой кнопки мыши (<a href=\"https://github.com/bem/bem-core/issues/607\">#607</a>).</li>\n<li>Исправлена ошибка в <code>i-bem__dom.js</code>, из-за которой в некоторых случаях не происходил вызов базового метода\n<code>live</code> (<a href=\"https://github.com/bem/bem-core/issues/608\">#608</a>).</li>\n</ul>\n<h3 id=\"Other-changes\">Other changes</h3>\n<ul>\n<li>Добавлена английская документация на JS-синтаксис BEMHTML.</li>\n</ul>\n<h2 id=\"2-3-0\">2.3.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Добавлена новая реализация pointer-событий на основе полифилов из <a href=\"http://www.polymer-project.org/\">Polymer</a> (<a href=\"https://github.com/bem/bem-core/pull/567\">#567</a>).</li>\n<li>Добавлена возможность в <code>i-bem__dom.js</code> указывать дополнительные данные о событии в методах <code>bindTo*</code> (<a href=\"https://github.com/bem/bem-core/issues/568\">#568</a>).</li>\n</ul>\n<h3 id=\"В-релиз-вошли-следующие-исправления-ошибок\">В релиз вошли следующие исправления ошибок</h3>\n<ul>\n<li>Исправлена ошибка в <code>i-bem.bemhtml</code>, из-за которой было невозможно использовать микс в виде одного объекта (не массива) одновременно в BEMJSON и BEMHTML (<a href=\"https://github.com/bem/bem-core/issues/555\">#555</a>).</li>\n<li>Исправлена ошибка в BEMHTML-шаблоне блока <code>page</code>, из-за которой не выполнялись стандартные моды, и исправлена регрессия в шаблоне на touch-уровне (<a href=\"https://github.com/bem/bem-core/issues/516\">516</a>).</li>\n</ul>\n<h2 id=\"2-2-4\">2.2.4</h2>\n<h3 id=\"В-релиз-вошли-следующие-исправления-ошибок\">В релиз вошли следующие исправления ошибок</h3>\n<ul>\n<li>Исправлена ошибка в <code>i-bem.js</code>, из-за которой событие об изменении модификатора генерировалось,\nдаже если обработчик <code>beforeSetMod</code> предотвращал изменение (<a href=\"https://github.com/bem/bem-core/pull/546\">#546</a>).</li>\n<li>В случае возникновения ошибки в процессе декодирования строки, модуль <code>querystring__uri</code> теперь возвращает\nоригинальную строку (<a href=\"https://github.com/bem/bem-core/pull/554\">#554</a>).</li>\n</ul>\n<h2 id=\"2-2-3\">2.2.3</h2>\n<h3 id=\"В-релиз-вошли-следующие-исправления-ошибок\">В релиз вошли следующие исправления ошибок</h3>\n<ul>\n<li>В модуле <code>i-bem__dom</code> был исправлен процесс удаления блока для предотвращения нежелательной повторной\nинициализации блока (<a href=\"https://github.com/bem/bem-core/issues/540\">#540</a>).</li>\n<li>Исправлена ошибка в модуле <code>jquery__event_type_pointer</code>, из-за которой нативные события мыши ошибочно замещались\nна pointer-события (<a href=\"https://github.com/bem/bem-core/issues/534\">#534</a>).</li>\n<li><code>unbindFrom*</code>-методы в модуле <code>i-bem__dom</code> теперь поддерживают отписывание от нескольких событий\nза вызов (<a href=\"https://github.com/bem/bem-core/issues/533\">#533</a>).</li>\n<li>Добавлена недостающая зависимость от модуля <code>functions</code> в модуле <code>events</code> (<a href=\"https://github.com/bem/bem-core/issues/532\">#532</a>).</li>\n</ul>\n<h2 id=\"2-2-2\">2.2.2</h2>\n<h3 id=\"В-релиз-вошли-следующие-исправления-ошибок\">В релиз вошли следующие исправления ошибок</h3>\n<ul>\n<li>Исправлена ошибка в модуле <code>i-bem__dom</code> приводящая к повторной инициализации блока на DOM-узле, отмеченном как\nудаленный (<a href=\"https://github.com/bem/bem-core/issues/518\">#518</a>).</li>\n<li>Исправлена ошибка в модуле <code>i-bem</code>, из-за которой невозможно было подписаться на событие о выставлении модификатора в\nзначение <code>false</code> (<a href=\"https://github.com/bem/bem-core/issues/529\">#529</a>).</li>\n<li>Модуль <code>jquery</code> обновлен до версий 2.1.1 и 1.11.1 (<a href=\"https://github.com/bem/bem-core/issues/515\">#515</a>).</li>\n</ul>\n<h2 id=\"2-2-1\">2.2.1</h2>\n<ul>\n<li>Исправлена ошибка в модуле <code>jquery__event_type_pointerpressrelease</code>, из-за которой событие <code>pointerpress</code> генерировалось\nдважды на каждое событие <code>mousedown</code> в IE10 (<a href=\"https://github.com/bem/bem-core/issues/505\">#505</a>).</li>\n</ul>\n<h2 id=\"2-2-0\">2.2.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Добавлен новый модуль <code>keyboard__codes</code> (<a href=\"https://github.com/bem/bem-core/issues/431\">#431</a>).</li>\n<li>Класс <code>BEMContext</code> добавлен в export-параметры функции <code>oninit</code> в базовых шаблонах <code>i-bem.bemhtml</code> (<a href=\"https://github.com/bem/bem-core/pull/485\">#485</a>).</li>\n<li>Добавлена возможность декларировать инстанс элемента используя класс блока (<a href=\"https://github.com/bem/bem-core/issues/481\">#481</a>).</li>\n<li>Исправлено поведение метода <code>isSimple</code> класса BEMContext в  в базовых шаблонах <code>i-bem.bemhtml</code> (<a href=\"https://github.com/bem/bem-core/pull/432\">#432</a>).</li>\n<li>Исправлена ошибка в методе <code>liveUnbindFrom</code> модуля <code>BEMDOM</code> (<a href=\"https://github.com/bem/bem-core/pull/476\">#476</a>).</li>\n<li>Исправлена ошибка в методе <code>isFocusable</code> модуля <code>dom</code>, возникающая если переданный <code>domElem</code> является сслыкой\nс атрибутом <code>tabindex</code>, но без атрибута <code>href</code> (<a href=\"https://github.com/bem/bem-core/issues/501\">#501</a>).</li>\n<li>Исправлена ошибка возникающая в процессе декларации БЭМ-блока как модуля, если был подключен\nмодуль <code>i-bem__dom_elem-instances</code> (<a href=\"https://github.com/bem/bem-core/issues/479\">#479</a>).</li>\n<li>В модуле <code>i-bem__dom_init_auto</code> добавлено временное решение для проблем с производительностью ренедеринга при инициализции блоков\nв Chrome-браузерах (<a href=\"https://github.com/bem/bem-core/issues/486\">#486</a>).</li>\n<li>Модуль <code>vow.js</code> перенесен в <code>vow.vanilla.js</code> (<a href=\"https://github.com/bem/bem-core/issues/412\">#412</a>).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>Модуль <code>vow</code> обновлен до версии 0.4.3 (<a href=\"https://github.com/bem/bem-core/pull/504\">#504</a>).</li>\n<li>Добавлена русская документация на технологию BEMTREE (<a href=\"https://github.com/bem/bem-core/pull/500\">#500</a>).</li>\n<li>Обновлена русская документация на JavaScript-синтаксис BEMHTML (<a href=\"https://github.com/bem/bem-core/pull/471\">#471</a>).</li>\n<li>Добавлен референс на API JavaScript-модулей. См. ветку <code>v2-jsdoc</code> (<a href=\"https://github.com/bem/bem-core/pull/478\">#478</a>).</li>\n</ul>\n<h2 id=\"2-1-0\">2.1.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Исправлена ошибка в <code>i-bem.js</code>, из-за которой событие об изменении модификатора происходило до того, как будет\nвызван обработчик реакции на изменение этого модификатора в <code>onSetMod</code> (<a href=\"https://github.com/bem/bem-core/issues/454\">#454</a>).</li>\n<li>Свойства <code>this.mods</code> и <code>this.ctx.mods</code> базового шаблона <code>i-bem.bemhtml</code> теперь используют\nодин и тот же объект (<a href=\"https://github.com/bem/bem-core/issues/441\">#441</a>).</li>\n<li>Модуль <a href=\"https://github.com/dfilatov/inherit\">inherit</a> обновлен до версии 2.2.1 (<a href=\"https://github.com/bem/bem-core/issues/466\">#466</a>).</li>\n<li>Исправлен порядок тегов секции <code>head</code> в шаблоне <code>page.bemhtml</code> (<a href=\"https://github.com/bem/bem-core/pull/465\">#465</a>).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>В русскую документацию к <code>i-bem.js</code> добавлено описание поля <code>baseMix</code> (<a href=\"https://github.com/bem/bem-core/pull/461\">#461</a>).</li>\n<li>CDN-хост внешних ресурсов изменен на <code>yastatic.net</code> (<a href=\"https://github.com/bem/bem-core/issues/444\">#444</a>).\nВсе ресурсы все так же доступны с хоста <code>yandex.st</code>. Физически <code>yandex.st</code> и <code>yastatic.net</code> находятся на\nодних и тех же серверах. Различие только в DNS-записях.</li>\n<li>Добавлен базовый BEMHTML-шаблон для команды <code>bem create</code> технологии <code>bemhtml</code> (<a href=\"https://github.com/bem/bem-core/issues/277\">#277</a>).</li>\n<li>Прекращен автоматический запуск тестов под Node.js 0.8 в <a href=\"http://travis-ci.com\">Travis CI</a> (<a href=\"https://github.com/bem/bem-core/issues/455\">#455</a>).</li>\n<li>Иконка статуса автосборки Travis <a href=\"http://blog.travis-ci.com/2014-03-20-build-status-badges-support-svg/\">заменена на SVG</a> :)</li>\n</ul>\n<h2 id=\"2-0-0\">2.0.0</h2>\n<h3 id=\"Изменения,-ломающие-обратную-совместимость\">Изменения, ломающие обратную совместимость</h3>\n<ul>\n<li><p>Из <code>i-bem.js</code> и <code>i-bem__dom.js</code> удалены все <strong>deprecated</strong> методы (<a href=\"https://github.com/bem/bem-core/issues/318\">#318</a>):</p>\n<ul>\n<li><code>destruct</code>, используйте <code>onSetMod js &#39;&#39;</code>;</li>\n<li><code>extractParams</code>, используйте <code>elemParams</code>;</li>\n<li><code>trigger</code>, используйте <code>emit</code>;</li>\n<li><code>afterCurrentEvent</code>, используйте модуль <code>next-tick</code>;</li>\n<li><code>channel</code>, используйте модуль <code>events__channels</code>;</li>\n<li><code>changeThis</code>, используйте нативный <code>Function.prototype.bind</code>.</li>\n</ul>\n</li>\n<li><p>Из <code>i-bem.js</code> убраны события <code>init</code> и <code>destruct</code>. Вместо них следует использовать события об изменении модификатора\n(см. «Крупные изменения»).</p>\n</li>\n<li>Блок <code>ecma</code> перенесен <a href=\"http://github.com/bem/es5-shims\">в отдельный репозиторий</a>; ES5-shims следует использовать\nдля IE &lt; 9 (<a href=\"https://github.com/bem/bem-core/issues/230\">#230</a>).</li>\n<li>Модуль <code>vow</code> обновлен до мажорной версии 0.4.1 (<a href=\"https://github.com/bem/bem-core/issues/350\">#350</a>).\nСм. <a href=\"https://github.com/dfilatov/vow/blob/0.4.1/CHANGELOG.md\">изменения в Vow</a>.</li>\n<li>В <code>i-bem.bemhtml</code> добавлена поддержка vow@0.4 (<a href=\"https://github.com/bem/bem-core/issues/385\">#385</a>).</li>\n</ul>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Добавлена возможность декларировать BEMDOM-блоки как модули <a href=\"https://github.com/ymaps/modules\">ym</a> (<a href=\"https://github.com/bem/bem-core/issues/382\">#382</a>).</li>\n<li>В <code>i-bem.js</code> добавлены события об изменении модификатора (<a href=\"https://github.com/bem/bem-core/issues/357\">#357</a>).</li>\n<li>Добавлена поддержка использования строковых значений в качестве аргумента в методах <code>BEMDOM.init</code> (<a href=\"https://github.com/bem/bem-core/issues/419\">#419</a>)\nи <code>BEMDOM.update</code> (<a href=\"https://github.com/bem/bem-core/issues/420\">#420</a>).</li>\n<li>Методы <code>i-bem__dom.js</code> <code>replace</code>, <code>append</code>, <code>prepend</code>, <code>before</code>, <code>after</code> теперь возвращают новый контекст,\nа <code>update</code> – изменённый (<a href=\"https://github.com/bem/bem-core/issues/410\">#410</a>).</li>\n<li>В <code>loader</code> добавлен модификатор <code>_type_bundle</code> (<a href=\"https://github.com/bem/bem-core/issues/358\">#358</a>).</li>\n<li>jQuery обновлен до версии 2.1.0. Для IE &lt; 9 — до версии 1.11.0 (<a href=\"https://github.com/bem/bem-core/issues/356\">#356</a>).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>Базовые шаблоны в <code>i-bem.bemhtml</code> используют конкатенацию строк вместо наполнения внутреннего буфера (<a href=\"https://github.com/bem/bem-core/issues/401\">#401</a>).</li>\n<li>jQuery больше не удаляет себя из глобавльной области видимости, если присутствует на странице (<a href=\"https://github.com/bem/bem-core/issues/349\">#349</a>).</li>\n<li><code>jquery__event_type_pointerclick.js</code> перемещен с уровня <code>touch.blocks</code> на уровень <code>common.blocks</code> (<a href=\"https://github.com/bem/bem-core/issues/393\">#393</a>).</li>\n<li>Модификаторы <code>i-bem_elem-instances_yes</code> и <code>i-bem__dom_elem-instances_yes</code> приведены к булевому стилю (<a href=\"https://github.com/bem/bem-core/issues/352\">#352</a>).</li>\n<li>Исправлена ошибка в шаблоне блока <code>page</code>, возникающая при использовании development-режима BEMHTML (<a href=\"https://github.com/bem/bem-core/issues/417\">#417</a>).</li>\n<li>Для поддержки Android 2.3 внутри <code>i-bem.js</code> отказались от использований <code>Function.prototype.bind</code> (<a href=\"https://github.com/bem/bem-core/issues/404\">#404</a>).</li>\n<li>Исправлены ошибки в модуле технологии <code>browser-js+bemhtml</code> (<a href=\"https://github.com/bem/bem-core/issues/392\">#392</a>).</li>\n<li>NPM-модуль <code>ym</code> обновлен до версии <a href=\"https://github.com/ymaps/modules/releases\">0.0.15</a> (<a href=\"https://github.com/bem/bem-core/issues/414\">#414</a>).</li>\n</ul>\n<h2 id=\"1-2-0\">1.2.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>BEM-блоки инициируют событие <code>destruct</code> в процессе удаления (<a href=\"https://github.com/bem/bem-core/issues/370\">#370</a>).</li>\n<li>Исправлены полифилы для <code>pointerevents</code> (<a href=\"https://github.com/bem/bem-core/pull/354\">#354</a>).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>JSDoc блоков исправлен в соответствии с поддержкой <a href=\"github.com/bem/bem-jsd\">bem-jsd</a> (<a href=\"https://github.com/bem/bem-core/issues/335\">#335</a>).</li>\n<li>Референс на BEMHTML обновлен для соответствия JavaScript-синтаксису шаблонизатора (<a href=\"https://github.com/bem/bem-core/pull/355\">#355</a>).</li>\n<li>Переход на менеджер зависимостей <a href=\"http://bower.io\">bower</a> (<a href=\"https://github.com/bem/bem-core/issues/367\">#367</a>).</li>\n</ul>\n<h2 id=\"1-1-0\">1.1.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Для современных браузеров <code>jquery__config</code> подключает jQuery 2.x (<a href=\"https://github.com/bem/bem-core/issues/319\">#319</a>).</li>\n<li>Добавлена возможность использовать произвольный BEMJSON в качестве значения атрибутов в BEMHTML (<a href=\"https://github.com/bem/bem-core/issues/290\">#290</a>).</li>\n<li>Исправлены зависимости в <code>i-bem__collection</code> (<a href=\"https://github.com/bem/bem-core/issues/292\">#292</a>).</li>\n<li>Удалены CSS-стили блока <code>page</code> из уровня <code>touch.blocks</code> (<a href=\"https://github.com/bem/bem-core/issues/306\">#306</a>).</li>\n<li>Исправлена ошибка в BEMHTML-шаблоне блока <code>page</code>, приводящая к зацикливанию шаблонизатора\nв production-режиме (<a href=\"https://github.com/bem/bem-core/issues/309\">#309</a>).</li>\n<li>Исправлена возможная ошибка в <code>next-tick</code>, возникающая при вставке скрипта в DOM в IE&lt;9 (<a href=\"https://github.com/bem/bem-core/issues/324\">#324</a>).</li>\n<li>Исправлена ошибка в инициализации плагина <code>FastClick</code> в модуле <code>jquery__event_type_pointerclick</code>\nна уровне <code>touch.blocks</code> (<a href=\"https://github.com/bem/bem-core/issues/332\">#332</a>).</li>\n<li>Исправлена ошибка в технологии <code>node.js</code> в Windows (<a href=\"https://github.com/bem/bem-core/issues/274\">#274</a>).</li>\n<li>Исправлена ошибка в <code>onElemSetMod</code> в <code>i-bem__dom_elem-instances</code> (<a href=\"https://github.com/bem/bem-core/issues/340\">#340</a>).</li>\n<li>В технологии <code>bemhtml</code> используется <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a> (<a href=\"https://github.com/bem/bem-core/issues/329\">#329</a>).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>Модуль <a href=\"https://github.com/ymaps/modules\">ym</a> обновлен до версии 0.0.12 (<a href=\"https://github.com/bem/bem-core/issues/326\">#326</a>).</li>\n<li>В ядре локализации <code>i-bem__i18n</code> отключен вывод сообщений о неизвестных ключах, если не включен\ndebug-режим (<a href=\"https://github.com/bem/bem-core/issues/285\">#285</a>).</li>\n<li>Инфраструктура сборки тестов и примеров переведена\nна <a href=\"https://github.com/narqo/bem-pr/blob/0.5.3/HISTORY.md\">bem-pr@v0.5.x</a> (<a href=\"https://github.com/bem/bem-core/issues/323\">#323</a>).</li>\n<li>Исправлен jsdoc для метода <code>dropElemCache()</code> в <code>i-bem__dom</code> (<a href=\"https://github.com/bem/bem-core/issues/296\">#296</a>).</li>\n<li>Доработана документация для блока <code>i-bem.js</code> на русском языке.</li>\n<li>В README проекта добавлен <a href=\"https://github.com/bem/bem-core/blob/v1/README.ru.md#%D0%9F%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%B8%D0%B2%D0%B0%D0%B5%D0%BC%D1%8B%D0%B5-%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80%D1%8B\">список поддерживаемых браузеров</a>.</li>\n</ul>\n<h2 id=\"1-0-0\">1.0.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Переход на модульную систему <a href=\"https://github.com/ymaps/modules\">ym</a>.</li>\n<li>Из <code>i-bem</code>, <code>i-bem__dom</code> убраны все deprecated-методы.</li>\n<li><code>i-bem</code> больше не зависит от jQuery. <code>i-bem__dom</code> продолжает зависеть от jQuery.</li>\n<li>BEMHTML-шаблоны можно писать с использованием <a href=\"https://gist.github.com/veged/6150760\">JS-синтаксиса</a>.</li>\n<li>Новая технология <code>bemtree</code> (на базе <a href=\"https://github.com/bem/bem-xjst\">bem-xjst</a>) для описания процесса\nдинамического построения БЭМ-дерева.</li>\n<li>Новая технология <code>vanilla.js</code> для описания JS-реализации модулей, не зависящей от конкретного JavaScript движка.</li>\n<li>Новые технологии <code>browser.js</code> и <code>node.js</code> для описания JS-реализаций модулей (блоков) в соответствующих движках.\nДля совместимости с существующим кодом считаем, что файлы с расширением <code>.js</code> содержат реализацию блоков\nв технологии <code>browser.js</code>.</li>\n<li>Система модульного тестирования и примеров для блоков в библиотеке.</li>\n<li>Появились полифилы (<code>jquery__event_type_pointer</code> и <code>jquery__event_type_pointerclick</code> как jQuery-плагины),\nпозволяющие использовать универсальные события для десктопных и тач-интерфейсов.</li>\n<li>Плагин для jQuery, позволяющий навешивать обработчик события на нажатие левой кнопки мыши, становится модулем <code>jquery__pointerclick</code>.</li>\n<li>В <code>i-bem</code> и BEMHTML добавлена поддержка простых модификаторов (модификаторов без значений).</li>\n</ul>\n<h3 id=\"Также-в-релиз-вошли-следующие-изменения\">Также в релиз вошли следующие изменения</h3>\n<ul>\n<li>Все блоки-модули, кроме <code>i-bem</code>, избавились от префиксов.</li>\n<li>Блок <code>i-bem__dom</code> становится модулем <code>i-bem__dom</code>. Все BEM.DOM-блоки должны теперь доопределять\nэтот модуль (<a href=\"https://github.com/bem/bem-core/blob/v1/common.bundles/index/blocks/b-square/b-square.js\">пример</a>).</li>\n<li>Метод для декларации блоков (<code>.decl()</code>) больше не принимает первым параметром объект с полем <code>name</code>.\nТеперь обязательная форма записи с полем <code>block</code>: <code>BEM.decl({ block: &#39;b1&#39;, modName: &#39;m&#39;, modVal: &#39;v&#39; }, ...)</code>.</li>\n<li>Вместо метода <code>afterCurrentEvent</code> у блоков появился метод <code>nextTick</code>, который проверят существование блока в момент исполнения колбэка. <code>BEM.afterCurrentEvent</code> теперь <strong>deprecated</strong>.</li>\n<li>Вместо <code>BEM.channel</code> появился отдельный модуль <code>channels</code>. <code>BEM.channel</code> теперь <strong>deprecated</strong>.</li>\n<li>Метод <code>changeThis</code> помечен как <strong>deprecated</strong>. Используйте нативный <code>bind</code>.</li>\n<li>Метод <code>del</code> удален из блока <code>i-bem</code>.</li>\n<li>Метод <code>getWindowSize</code> удален из блока <code>i-bem__dom</code>. Используйте <code>BEMDOM.win.width()</code> и <code>BEMDOM.win.height()</code>.</li>\n<li>Добавлен модуль-обертка <code>jquery</code>, предоставляющий jQuery. Модуль либо предоставляет jQuery, уже присутствующий на странице, либо сам его загружает (версию 1.10.1).</li>\n<li><code>$.observable</code> становится модулем <code>events</code> и больше не зависит от jQuery.</li>\n<li><code>$.inherit</code> становится модулем <code>inherit</code> и больше не зависит от jQuery.</li>\n<li><code>$.identify</code> становится модулем <code>identify</code> и больше не зависит от jQuery.</li>\n<li><code>$.throttle</code> разбивается на два модуля: <code>functions__throttle</code> и <code>functions__debounce</code>, которые больше не зависят от jQuery.</li>\n<li><code>$.decodeURI</code>, <code>$.decodeURIComponent</code> переезжают в модуль <code>querystring__uri</code> и больше не зависят от jQuery.</li>\n<li><code>$.cookie</code> становится модулем <code>cookie</code> и больше не зависит от jQuery.</li>\n<li>Вместо <code>$.browser</code> появился модуль <code>ua</code> с аналогичным интерфейсом.</li>\n<li>Блок <code>i-system</code> разбит на 2 модуля: <code>idle</code> и <code>tick</code>.</li>\n<li>Вместо события <code>leftclick</code> следует использовать <code>pointerclick</code> (предоставляемый полифилом <code>jquery__event_type_pointerclick</code>).</li>\n<li>Триггеры на установку модификаторов теперь разделены на две группы: до установки модификатора (<code>beforeSetMod</code> и <code>beforeElemSetMod</code>) и после (<code>onSetMod</code> и <code>onElemSetMod</code>). Отмена установки модификатора теперь возможна только из триггеров первой группы.</li>\n<li>Использовать конструкцию <code>{ onSetMod : { js : function() { ... } } }</code> в качестве конструктора теперь <strong>deprecated</strong>, необходимо использовать <code>onSetMod: { js : { inited : ... } } }</code>.</li>\n<li>Вместо метода <code>destruct</code> в <code>i-bem</code> появился зеркальный метод\nдля <code>onSetMod: { js : { inited : ... } } }</code> — <code>{ onSetMod : { js : { &#39;&#39; : ... } } }</code>.\nМетод <code>destruct</code> теперь <strong>deprecated</strong>.</li>\n<li>Метод <code>exractParams</code> в <code>i-bem__dom</code> теперь <strong>deprecated</strong>, для доступа к параметрам элементов нужно использовать метод <code>elemParams</code>.</li>\n<li>Метод <code>trigger</code> в <code>i-bem</code> теперь <strong>deprecated</strong>, нужно использовать <code>emit</code>.</li>\n<li>Метод <code>onFirst</code> в <code>i-bem</code> теперь <strong>deprecated</strong>, нужно использовать <code>once</code>.</li>\n<li>Удалено <strong>deprecated</strong> поле <code>e.block</code>, представляющее блок-источник события для BEM-событий. Вместо него следует использовать поле <code>e.target</code>.</li>\n<li>Для доступа к DOM-элементу блока в обработчике DOM-событий теперь нужно использовать поле <code>currentTarget</code>, предоставляемое jQuery. Вместо <code>e.data.domElem</code>нужно писать <code>$(e.currentTarget)</code>.</li>\n<li>В методе <code>findElem</code> добавлен параметр, позволяющий находить элемента блока с учетом вложенных блоков.</li>\n<li>Добавлена возможность указывать конкретную функцию для отписки от событий в методах <code>unbindFrom*</code>.</li>\n<li>Добавлен модуль <code>objects</code> для работы с JS-объектами (содержит методы <code>extend</code>, <code>isEmpty</code>, <code>each</code>).</li>\n<li>Добавлен модуль <code>functions</code> для работы с JS-функциями (содержит методы <code>isFunction</code>, <code>noop</code>).</li>\n<li>Добавлен модуль <code>dom</code> для хелперов при работе с DOM.</li>\n<li>Добавлен модуль <code>querystring</code> для работы с урлами.</li>\n<li>Добавлен модуль <code>loader_type_js</code> для загрузки JS.</li>\n<li>Добавлен модуль <code>vow</code> для работы с промисами.</li>\n<li>Добавлен модуль <code>next-tick</code> для полифила <code>nextTick</code>, <code>setImmediate</code>, <code>setTimeout(0, ...</code> и т.п..</li>\n<li>Добавлен модуль <code>strings__escape</code>, содержащий методы для эскейпинга XML, HTML и атрибутов.</li>\n<li>Модуль <code>inherit</code> теперь поддерживает миксины.</li>\n<li>В модуле <code>functions__throttle</code> добавлен параметр <code>invokeAsap</code>, позволяющий отложить первое исполнение.</li>\n</ul>\n"}},"readme":{"title":{"en":"Readme","ru":"Readme"},"content":{"en":"<h1 id=\"bem-core-Library--!-Build-Status--https:--travis-ci-org-bem-bem-core-svg-branch=v2---https:--travis-ci-org-bem-bem-core---!-GitHub-Release--http:--img-shields-io-github-release-bem-bem-core-svg---https:--github-com-bem-bem-core-releases-\">bem-core Library <a href=\"https://travis-ci.org/bem/bem-core\"><img src=\"https://travis-ci.org/bem/bem-core.svg?branch=v2\" alt=\"Build Status\"></a> <a href=\"https://github.com/bem/bem-core/releases\"><img src=\"http://img.shields.io/github/release/bem/bem-core.svg\" alt=\"GitHub Release\"></a></h1>\n<p>This README is also available <a href=\"http://ru.bem.info/libs/bem-core/\">in Russian</a>.</p>\n<h2 id=\"What-is-this-\">What is this?</h2>\n<p><code>bem-core</code> is a base library for web interface development.\nIt provides the minimal stack for coding client-side JavaScript and templating.</p>\n<h2 id=\"Use\">Use</h2>\n<p>The easiest way to run a project with <code>bem-core</code> is to use\nthe <a href=\"https://github.com/bem/project-stub\">project-stub</a>.</p>\n<p>You can use any other way you are familiar with to include the library into\nthe project.</p>\n<h2 id=\"Inside\">Inside</h2>\n<h3 id=\"Levels\">Levels</h3>\n<ul>\n<li><code>common.blocks</code> — suited for any devices and browsers</li>\n<li><code>desktop.blocks</code> — should be used for desktop browsers</li>\n<li><code>touch.blocks</code> — implement some touch-platforms specifics</li>\n</ul>\n<h3 id=\"Blocks\">Blocks</h3>\n<ul>\n<li><code>i-bem</code> — base block with helpers for JS and HTML</li>\n<li><code>strings</code> — helpers for JS-strings</li>\n<li><code>objects</code> — helpers for JS-objects</li>\n<li><code>functions</code> — helpers for JS-functions</li>\n<li><code>events</code> — JS-events</li>\n<li><code>querystring</code> — helpers for work with querystring</li>\n<li><code>tick</code> — global timer</li>\n<li><code>idle</code> — IDLE event</li>\n<li><code>next-tick</code> — polyfill for <code>nextTick</code>/<code>setTimeout(0, ...)</code></li>\n<li><code>inherit</code> — OOP helpers</li>\n<li><code>jquery</code> — jQuery</li>\n<li><code>clearfix</code> — CSS clearfix trick</li>\n<li><code>identify</code> — identify JS-objects</li>\n<li><code>cookie</code> — helpers for work with browser cookies</li>\n<li><code>vow</code> — Promises/A+ implementation</li>\n<li><code>dom</code> — helpers for work with DOM</li>\n<li><code>loader</code> — loader for JS files</li>\n<li><code>ua</code> — browser features detection</li>\n<li><code>keyboard</code> — keyboard helpers</li>\n<li><code>page</code> — html/head/body scaffold</li>\n</ul>\n<h3 id=\"Technologies\">Technologies</h3>\n<ul>\n<li>vanilla.js + browser.js</li>\n<li>bemhtml</li>\n<li>bemtree</li>\n</ul>\n<h2 id=\"API\">API</h2>\n<p>The autogenerated JSDoc API can be found on the separate branch <a href=\"http://github.com/bem/bem-core/tree/v2-jsdoc\">v2-jsdoc</a>.</p>\n<p>Please note that &quot;v2-jsdoc&quot;&#39;s content is updated automatically. Any fixes should go to the &quot;v2&quot; branch to the concrete\nblock&#39;s source code, as described in the &quot;Contribution&quot; section below.</p>\n<h2 id=\"Changelog\">Changelog</h2>\n<p>You can check the changelog at the <a href=\"http://bem.info/libs/bem-core/changelog/\">changelog page</a>.</p>\n<h2 id=\"Migration\">Migration</h2>\n<p>If you used BEM before, check the <a href=\"http://bem.info/libs/bem-core/migration/\">migration instructions</a>.</p>\n<h2 id=\"Development\">Development</h2>\n<h3 id=\"Working-copy\">Working copy</h3>\n<ol>\n<li><p>Get the needed version code (e.g., <code>v2</code>):</p>\n<pre><code class=\"lang-shell\">$ git clone -b v2 git://github.com/bem/bem-core.git\n$ cd bem-core\n</code></pre>\n</li>\n<li><p>Install the dependencies:</p>\n<pre><code class=\"lang-shell\">$ npm install\n</code></pre>\n<p>You need <code>export PATH=./node_modules/.bin:$PATH</code>\nor an alternative way to run locally-installed <a href=\"https://github.com/bem/bem-tools\">bem-tools</a> and other npm-dependencies.</p>\n</li>\n<li><p>Install all necessary libraries:</p>\n<pre><code class=\"lang-shell\">$ bower-npm-install\n</code></pre>\n</li>\n<li><p>Build and run tests (specs):</p>\n<pre><code class=\"lang-shell\">$ bem make desktop.specs touch.specs\n</code></pre>\n</li>\n<li><p>Run development server:</p>\n<pre><code class=\"lang-shell\">$ bem server\n</code></pre>\n</li>\n</ol>\n<h3 id=\"How-to-contribute\">How to contribute</h3>\n<ol>\n<li><a href=\"https://github.com/bem/bem-core/issues/new\">Create an issue</a> with a proper description.</li>\n<li>Decide which version needs your changes.</li>\n<li>Create a feature-branch with an issue number and a version (<code>issues/&lt;issue_number&gt;@v&lt;version_number&gt;</code>) based on a version branch.\nFor example, for an issue #42 and a version #1: <code>git checkout -b issues/42@v1 v1</code>.\nIf you need changes for several versions, each of them has to have a feature branch.</li>\n<li>Commit changes and <code>push</code>. Rebase your branch on a corresponding version branch if it&#39;s needed.</li>\n<li>Create a pull-request from your feature branch; or several pull-requests if you changed several versions.</li>\n<li>Link your pull request with an issue number any way you like. A comment will work perfectly.</li>\n<li>Wait for your pull request and the issue to be closed ;-)</li>\n</ol>\n<h3 id=\"Modular-testing\">Modular testing</h3>\n<p>A default test bundle for <code>functions__debounce</code>:</p>\n<pre><code class=\"lang-shell\">$ bem make desktop.specs/functions__debounce\n</code></pre>\n<p>You can see the results of the tests in the terminal after the building process finishes.</p>\n<p>You can also watch them in a browser loading <code>desktop.specs/functions__debounce/spec-js+browser-js+bemhtml/spec-js+browser-js+bemhtml.html</code>.</p>\n<p>Run tests for other BEM entities in the same way. This will work for those which are equipped with <code>.spec.js</code> file.</p>\n<h3 id=\"Code-coverage\">Code coverage</h3>\n<p>To build code coverage report add <code>ISTANBUL_COVERAGE=yes</code> environment variable to the tests run command:</p>\n<pre><code class=\"lang-shell\">$ ISTANBUL_COVERAGE=yes bem make desktop.specs &amp;&amp; istanbul report html\n</code></pre>\n<p>You can run modular testing with coverage as well by using more concrete build target as was described above.</p>\n<pre><code>$ ISTANBUL_COVERAGE=yes bem make desktop.specs/functions__debounce &amp;&amp; istanbul report html\n</code></pre><p>After tests finish, you can view coverage HTML report by opening <code>coverage/index.html</code> in your favorite\nbrowser.</p>\n<p>The whole code coverage statistics can be found on the <a href=\"https://coveralls.io/r/bem/bem-core\">bem-core profile page</a> on\n<a href=\"https://coveralls.io\">Coveralls</a>.</p>\n<p>Tests are built with a <a href=\"https://github.com/narqo/bem-pr\">bem-pr</a> library.\nCheck the <a href=\"https://github.com/narqo/bem-pr/blob/master/docs/tests.ru.md\">details</a> about testing infrastructure of the bem-pr.</p>\n<h2 id=\"Supported-browsers\">Supported browsers</h2>\n<p>Our browser support policy is based on statistics we get from <a href=\"http://company.yandex.com\">Yandex</a> services.</p>\n<p>Browsers with more than 2% users get full compliant support, more than 0.5% — partially compliant\n(which means that data is accessible but not necessary 100% functional). New features testing\nis not provided by us for  browsers with less than 0.5% users.</p>\n<h3 id=\"Desktop\">Desktop</h3>\n<h4 id=\"Fully-compliant\">Fully compliant</h4>\n<ul>\n<li>Google Chrome 29+</li>\n<li>Firefox 24+</li>\n<li>Yandex 1.7+</li>\n<li>Opera 12.16</li>\n<li>MSIE 10.0</li>\n<li>MSIE 9.0</li>\n<li>MSIE 8.0</li>\n<li>Opera 12.15</li>\n</ul>\n<h4 id=\"Partially-compliant\">Partially compliant</h4>\n<ul>\n<li>Opera 17.0</li>\n<li>Opera 16.0</li>\n<li>Opera 12.14</li>\n<li>Opera 12.2</li>\n<li>Firefox 23</li>\n</ul>\n<h3 id=\"Touch\">Touch</h3>\n<h4 id=\"Fully-compliant\">Fully compliant</h4>\n<ul>\n<li>iOS 6+</li>\n<li>Android 2.3+</li>\n<li>Opera Mobile 12+</li>\n<li>Windows Phone 7+</li>\n</ul>\n<h4 id=\"Partially-compliant\">Partially compliant</h4>\n<ul>\n<li>iOS 5</li>\n<li>Android 2.2</li>\n</ul>\n","ru":"<h1 id=\"bem-core-Library--!-Build-Status--https:--travis-ci-org-bem-bem-core-svg-branch=v2---https:--travis-ci-org-bem-bem-core---!-GitHub-Release--http:--img-shields-io-github-release-bem-bem-core-svg---https:--github-com-bem-bem-core-releases-\">bem-core Library <a href=\"https://travis-ci.org/bem/bem-core\"><img src=\"https://travis-ci.org/bem/bem-core.svg?branch=v2\" alt=\"Build Status\"></a> <a href=\"https://github.com/bem/bem-core/releases\"><img src=\"http://img.shields.io/github/release/bem/bem-core.svg\" alt=\"GitHub Release\"></a></h1>\n<p>This README is also available <a href=\"http://bem.info/libs/bem-core/\">in English</a>.</p>\n<h2 id=\"Что-это-\">Что это?</h2>\n<p>Базовая библиотека блоков для разработки веб-интерфейсов.\nСодержит только необходимый минимум для разработки клиентского JS и HTML-шаблонов.</p>\n<h2 id=\"Использование\">Использование</h2>\n<p>Наиболее простым способом начать проект с использованием <code>bem-core</code> является\n<a href=\"https://github.com/bem/project-stub\">project-stub</a>.</p>\n<p>Вы также можете добавить библиотеку к себе в проект любым известным вам способом.</p>\n<h2 id=\"Состав\">Состав</h2>\n<h3 id=\"Уровни\">Уровни</h3>\n<ul>\n<li><code>common.blocks</code> — предназначен для любых устройств и браузеров</li>\n<li><code>desktop.blocks</code> — следует использовать для всех десктопных браузеров</li>\n<li><code>touch.blocks</code> — реализует некоторую специфику для тач-платформ</li>\n</ul>\n<h3 id=\"Блоки\">Блоки</h3>\n<ul>\n<li><code>i-bem</code> — базовый блок с хелперами для JS и HTML</li>\n<li><code>strings</code> — хелперы для JS-строк</li>\n<li><code>objects</code> — хелперы для JS-объектов</li>\n<li><code>functions</code> — хелперы для JS-функций</li>\n<li><code>events</code> — JS-события</li>\n<li><code>querystring</code> — работа со строкой запроса</li>\n<li><code>tick</code> — глобальный таймер</li>\n<li><code>idle</code> — IDLE-событие</li>\n<li><code>next-tick</code> — полифил для <code>nextTick</code>/<code>setTimeout(0, ...)</code></li>\n<li><code>inherit</code> — ООП-хелперы</li>\n<li><code>jquery</code> — jQuery</li>\n<li><code>clearfix</code> — CSS-трюк clearfix</li>\n<li><code>identify</code> — идентификация JS-объектов</li>\n<li><code>cookie</code> — хелперы для работы с браузерными куками</li>\n<li><code>vow</code> — реализация Promises/A+</li>\n<li><code>dom</code> — хелперы для работы с DOM</li>\n<li><code>loader</code> — загрузчик для JS-файлов</li>\n<li><code>ua</code> — определение возможностей браузера</li>\n<li><code>keyboard</code> — хелперы для работы с клавиатурой</li>\n<li><code>page</code> — скелет для html/head/body</li>\n</ul>\n<h3 id=\"Технологии\">Технологии</h3>\n<ul>\n<li>vanilla.js + browser.js</li>\n<li>bemhtml</li>\n<li>bemtree</li>\n</ul>\n<h2 id=\"API\">API</h2>\n<p>Автосгенерированная документация на JavaScript API блоков (JSDoc) можно посмотреть в отдельной ветке <a href=\"http://github.com/bem/bem-core/tree/v2-jsdoc\">v2-jsdoc</a>.</p>\n<p>Обратите внимание, содержимое ветки «v2-jsdoc» обновляется автоматически. Любые изменения необходимо отправлять\nв код соответствующих блоков в ветке «v2», как описано в разделе «Внесение изменений» ниже.</p>\n<h2 id=\"История-изменений\">История изменений</h2>\n<p>История изменений доступна на <a href=\"http://ru.bem.info/libs/bem-core/changelog/\">отдельной странице</a>.</p>\n<h2 id=\"Миграция\">Миграция</h2>\n<p>Миграция описана на <a href=\"http://ru.bem.info/libs/bem-core/migration/\">отдельной странице</a>.</p>\n<h2 id=\"Разработка\">Разработка</h2>\n<h3 id=\"Рабочая-копия\">Рабочая копия</h3>\n<ol>\n<li><p>Получаем исходники нужной версии (например, <code>v1</code>):</p>\n<pre><code class=\"lang-shell\">$ git clone -b v1 git://github.com/bem/bem-core.git\n$ cd bem-core\n</code></pre>\n</li>\n<li><p>Устанавливаем зависимости:</p>\n<pre><code class=\"lang-shell\">$ npm install\n</code></pre>\n<p>Для последующего запуска локально установленных <a href=\"https://github.com/bem/bem-tools\">bem-tools</a> нам потребуется\n<code>export PATH=./node_modules/.bin:$PATH</code> или любой альтернативный способ.</p>\n</li>\n<li><p>Устанавливаем зависимые библиотеки:</p>\n<pre><code class=\"lang-shell\">$ bower-npm-install\n</code></pre>\n</li>\n<li><p>Собираем примеры и тесты:</p>\n<pre><code class=\"lang-shell\">$ bem make sets\n</code></pre>\n</li>\n<li><p>Запускаем разработческий сервер:</p>\n<pre><code>$ bem server\n</code></pre></li>\n</ol>\n<h3 id=\"Внесение-изменений\">Внесение изменений</h3>\n<ol>\n<li><a href=\"https://github.com/bem/bem-core/issues/new\">Создать issue</a> с описанием сути изменений.</li>\n<li>Определить в какую версию необходимо внести изменения.</li>\n<li>Сделать feature-branch с указанием номера issue и версии (<code>issues/&lt;номер_issue&gt;@v&lt;номер_версии&gt;</code>) на основе ветки версии.\nНапример, для issue с номером 42 и версией 1: <code>git checkout -b issues/42@v1 v1</code>. Если изменения нужно внести в несколько версий,\nто для каждой из версий создаётся отдельная ветка.</li>\n<li>Сделать изменения, закоммитить и сделать push. Если это необходимо, то нужно сделать rebase от базовой ветки версии.</li>\n<li>Создать pull-request на основе созданной ветки (или несколько pull-request-ов для случая изменений в нескольких версиях).</li>\n<li>Любым способом связать pull-request и issue (например, c помощью комментария).</li>\n<li>Ждать закрытия pull-request и issue ;-)</li>\n</ol>\n<h3 id=\"Модульное-тестирование\">Модульное тестирование</h3>\n<p>Сборка дефолтного тестового бандла для <code>functions__debounce</code>:</p>\n<pre><code class=\"lang-shell\">$ bem make desktop.specs/functions__debounce\n</code></pre>\n<p>После сборки тестового бандла вы увидите результаты выполнения тестов в консоли.\nИх также можно посмотреть в браузере, открыв <code>desktop.specs/functions__debounce/spec-js+browser-js+bemhtml/spec-js+browser-js+bemhtml.html</code>.</p>\n<p>По аналогии можно запустить тесты для других БЭМ-сущностей, имеющих реализацию в технологии <code>spec.js</code>.</p>\n<h3 id=\"Покрытие-кода-тестами\">Покрытие кода тестами</h3>\n<p>Чтобы собрать статистику покрытия кода тестами, необходимо добавить переменную окружения <code>ISTANBUL_COVERAGE=yes</code>\nв сборке тестового бандла:</p>\n<pre><code class=\"lang-shell\">$ ISTANBUL_COVERAGE=yes bem make desktop.specs &amp;&amp; istanbul report html\n</code></pre>\n<p>Сбор статиски покрытия тестами так же работает для запуска тестов конкретной БЭМ-сущности.\nПример для <code>functions__debounce</code></p>\n<pre><code>$ ISTANBUL_COVERAGE=yes bem make desktop.specs/functions__debounce &amp;&amp; istanbul report html\n</code></pre><p>После завершения выполнения тестов, можно посмотреть отчет о покрытии кода тестами, открыв в браузере страницу\n<code>coverage/index.html</code>.</p>\n<p>Полный отчет и статистику покрытия кода библиотеки тестами можно посмотреть\n<a href=\"https://coveralls.io/r/bem/bem-core\">на странице профиля bem-core</a> в проекте <a href=\"https://coveralls.io\">Coveralls</a>.</p>\n<p>Для сборки и запуска тестов используется библиотека <a href=\"https://github.com/narqo/bem-pr\">bem-pr</a>.\nСм. <a href=\"https://github.com/narqo/bem-pr/blob/master/docs/tests.ru.md\">подробную информацию</a> про инфраструктуру\nтестирования в bem-pr.</p>\n<h2 id=\"Поддерживаемые-браузеры\">Поддерживаемые браузеры</h2>\n<p>Мы поддерживаем браузеры на основе статистики, получаемой на сервисах <a href=\"http://company.yandex.ru\">Яндекса</a>.</p>\n<p>Браузеры с долей более 2% пользователей попадают в полную совместимость, с более 0.5% — в частичную,\nчто означает, что данные будут доступны, но возможна деградация. В браузерах с долей менее 0.5% мы прекращаем\nтестирование.</p>\n<h3 id=\"Десктопы\">Десктопы</h3>\n<h4 id=\"Полная-совместимость\">Полная совместимость</h4>\n<ul>\n<li>Google Chrome 29+</li>\n<li>Firefox 24+</li>\n<li>Yandex 1.7+</li>\n<li>Opera 12.16</li>\n<li>MSIE 10.0</li>\n<li>MSIE 9.0</li>\n<li>MSIE 8.0</li>\n<li>Opera 12.15</li>\n</ul>\n<h4 id=\"Частичная-совместимость\">Частичная совместимость</h4>\n<ul>\n<li>Opera 17.0</li>\n<li>Opera 16.0</li>\n<li>Opera 12.14</li>\n<li>Opera 12.2</li>\n<li>Firefox 23</li>\n</ul>\n<h3 id=\"Тач-браузеры\">Тач-браузеры</h3>\n<h4 id=\"Полная-совместимость\">Полная совместимость</h4>\n<ul>\n<li>iOS 6+</li>\n<li>Android 2.3+</li>\n<li>Opera Mobile 12+</li>\n<li>Windows Phone 7+</li>\n</ul>\n<h4 id=\"Частичная-совместимость\">Частичная совместимость</h4>\n<ul>\n<li>iOS 5</li>\n<li>Android 2.2</li>\n</ul>\n"}}},"levels":[{"name":"desktop.docs","blocks":[{"name":"clearfix","jsdoc":null,"data":{"ru":{"name":"clearfix","examples":[],"description":"<div class=\"shmakowiki\"><p>Для использования блока необходимо подмешать его к нужному html-элементу, например:</p><pre><code class=\"xml\">    &lt;div style=&quot;background: #ada;&quot;&gt;\n        top\n    &lt;/div&gt;\n\n    &lt;div class=&quot;clearfix&quot; style=&quot;background: #eda;&quot;&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item1&lt;/div&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item2&lt;/div&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item3&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div style=&quot;background: #ada;&quot;&gt;\n        bottom\n    &lt;/div&gt;</code></pre></div>"},"en":{"name":"clearfix","examples":[],"description":""}}},{"name":"cookie","jsdoc":null,"data":{"ru":{"name":"cookie","examples":[],"description":""},"en":{"name":"cookie","examples":[],"description":""}}},{"name":"dom","jsdoc":null,"data":{"ru":{"name":"dom","examples":[],"description":""},"en":{"name":"dom","examples":[],"description":""}}},{"name":"events","jsdoc":null,"data":{"ru":{"name":"events","examples":[],"description":""},"en":{"name":"events","examples":[],"description":""}}},{"name":"functions","jsdoc":null,"data":{"ru":{"name":"functions","examples":[],"description":""},"en":{"name":"functions","examples":[],"description":""}}},{"name":"i-bem","jsdoc":null,"data":{"ru":{"name":"i-bem","examples":[],"description":"<div class=\"shmakowiki\"><p>Блок <tt>i-bem</tt> — это блок-хелпер, позволяющий создавать другие блоки. Блок реализован в технологиях <tt>BEMHTML</tt> и <tt>JS</tt>. Обе эти реализации являются ядром библиотеки блоков в соответствующих технологиях.</p><h2 id=\"jsrealizaciyablokaibem\">js-реализация блока i-bem</h2><p>Реализация блока <tt>i-bem</tt> в <tt>JS</tt> обеспечивает хелперы для представления блока в виде <tt>JS</tt> объекта с определёнными методами и свойствами. Это нужно, чтобы писать клиентский <tt>JS</tt> в терминах <tt>BEM</tt>. То есть <tt>JS</tt> оперирует более высоким уровнем абстракции, чем <tt>DOM</tt> представление.</p><p>Для того, чтобы js-представление блока использовало ядро <tt>i-bem</tt>, оно должно быть написано с соблюдением специальных правил.</p><h4 id=\"Chtoopisanonaetojstranice\">Что описано на этой странице?</h4><ul><li>Какие бывают блоки<ul><li><a href=\"#dom.blocks\">Блоки с DOM-представлением</a></li><li><a href=\"#abstract.blocks\">Блоки без DOM-представления</a></li></ul></li><li>Принципы и особенности подхода<ul><li><a href=\"#decl\">Декларативный принцип</a></li><li><a href=\"#block.getting\">Доступ к другим блокам</a></li><li><a href=\"#mods\">Работа с модификаторами</a></li><li><a href=\"#customization\">Кастомизация блоков</a></li></ul></li><li><a href=\"#creation\">Создание собственного bem-js блока</a></li><li>Подробнее о понятиях<ul><li><a href=\"#init\">Инициализация</a></li><li><a href=\"#liveinit\">Инициализация по требованию (live-инициализация<span>)</span></a></li><li><a href=\"#finding\">Методы доступа к блокам и элементам</a></li><li><a href=\"#events\">Работа с событиями</a></li></ul></li></ul><pre><code class=\"xml\">&lt;a name=&quot;dom.blocks&quot;&gt;&lt;/a&gt;</code></pre><h4 id=\"BlokisDOMpredstavleniem\">Блоки с DOM-представлением</h4><p>Блокам, реализованным на <tt>bem-js</tt>, могут соответствовать ноды в <tt>HTML</tt>. В этом случае говорится о том, что блоки имеют <tt>DOM</tt> представление.<br/> В <tt>HTML</tt> блоки на <tt>bem-js</tt> отличаются дополнительным <tt>CSS</tt> классом <tt>i-bem</tt> и специальным форматом записи параметров блока в <tt>onclick</tt>:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block i-bem&quot; onclick=&quot;return { &apos;b-my-block&apos; : { name : &apos;b-my-block&apos;}}&quot;&gt;\n...\n&lt;/div&gt;</code></pre><p>Ниже подробно рассказано о <a href=\"#onclick.params\">формате параметров в onclick</a>.</p><pre><code class=\"xml\">&lt;a name=&quot;abstract.blocks&quot;&gt;&lt;/a&gt;</code></pre><h4 id=\"BlokibezDOMpredstavleniya\">Блоки без DOM-представления</h4><p>Технология <tt>bem-js</tt> позволяет также создавать блоки, не имеющие <tt>DOM</tt> представления. Такие блоки тем не менее существуют в <tt>JS</tt> в виде объектов, манипулировать ими можно так же, как и блоками с <tt>DOM</tt> представлением.</p><p>О том, как создавать такие блоки, написано под заголовком <a href=\"#dom.decl\">Декларация блока</a>.</p><p>Блоки, реализованные на <tt>bem-js</tt>,  после инициализации представлены в <tt>js</tt> объектами, имеющими свои методы. Эти методы необходимо использовать, если нужно повлиять на внешний вид или поведение блока.<br/> Технология <tt>bem-js</tt> использует предметную область <a href=\"http://wiki.yandex-team.ru/lento4ka/bem\">концепции <tt>BEM</tt></a>. Все сущности являются блоками или их элементами, управление их состояниями реализуется при помощи модификаторов.<br/> Представление блока в <tt>js</tt> не обязано иметь взаимное соответствие с одной <tt>DOM</tt>-нодой. Можно разместить несколько блоков на одной <tt>DOM</tt>-ноде (это называется <tt>mix</tt>), а также реализовать один блок на нескольких <tt>DOM</tt>-нодах.<br/> Далее блок, использующий технологию <tt>bem-js</tt>, будет называться <tt>блок, реализованный на bem-js</tt>, или <tt>bem-js-блок</tt>. Примером такого блока в библиотеке может служить <tt>b-link</tt>.</p><pre><code class=\"xml\">&lt;a name=&quot;decl&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Deklarativnyjprincip\">Декларативный принцип</h2><p>Важной особенностью технологии <tt>bem-js</tt> является декларативный принцип. Подобно работе декларативных языков программирования, <tt>js</tt>-код содержит не последовательный алгоритм работы блока, а набор действий и условий, при которых эти действия необходимо выполнять.</p><h3 id=\"Deklaraciyabloka\">Декларация блока</h3><p>Декларативность проявляется в объявлении того, к каким блокам или их модификациям применим код компонента:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-link&apos;, {\n...</code></pre><pre><code class=\"js\">BEM.DOM.decl({ name : &apos;b-domik&apos;, modName : &apos;type&apos;, modVal : &apos;popup&apos; }, {\n...</code></pre><p><a href=\"#dom.decl\">Подробнее о декларации блока</a></p><pre><code class=\"xml\">&lt;a name=&quot;mods.reaction&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Reakciyanaizmeneniemodifikatorov\">Реакция на изменение модификаторов</h3><p>Согласно концепции, состояния блока или его элементов определяются модификаторами. Поэтому, чтобы динамически изменять состояния блоков и элементов, в <tt>bem-js</tt> есть специальные методы для установки и снятия модификаторов.</p><p>В коде компонента можно записать, как блок или элемент должен отреагировать на изменение модификатора. Эта запись тоже декларативна.<br/> Например, блок <tt>b-dropdowna</tt> при установке модификатора <tt>disabled</tt> прячет показанный попап:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-dropdowna&apos;, {\n\n    onSetMod : {\n\n        &apos;disabled&apos; : function(modName, modVal) {\n\n            this._getSwitcher().setMod(modName, modVal);\n            modVal == &apos;yes&apos; &amp;&amp; this.getPopup().hide();\n\n        }\n\n    },\n...</code></pre><p>Подробно <a href=\"#mods.callbacks\">о декларации обработки модификаторов</a> рассказано в пункте про создание собственного блока.</p><pre><code class=\"xml\">&lt;a name=&quot;block.getting&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Dostupkdrugimblokam\">Доступ к другим блокам</h2><p>Может возникнуть необходимость управлять другим блоком. Для любых манипуляций с блоком необходимо получить доступ к <tt>js</tt>-объекту этого блока и вызывать его методы.</p><pre><code class=\"xml\">&lt;a name=&quot;blocks.finding&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Dostupkbemjsblokuizdrugogobemjsbloka\">Доступ к bem-js-блоку из другого bem-js-блока.</h3><p>В случае <a href=\"#creation\">реализации собственного кастомного блока на технологии <tt>bem-js</tt></a>, блоку соответствует <tt>js</tt>-объект. Он наследует общие для всех блоков методы, позволяющие работать с <tt>DOM</tt> документа в терминах <tt>BEM</tt>. Среди этих методов есть методы поиска других блоков относительно текущего (<tt>findBlock*</tt>-методы). Они возвращают <tt>js</tt>-объект искомого блока, что позволяет затем напрямую вызывать его методы.<br/> <b>Не используйте <tt>jQuery</tt>-селекторы для поиска блоков и элементов.</b></p><p>В этом примере вызывается метод <tt>val()</tt> у блока <tt>b-form-checkbox</tt>:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-checkbox-example&apos;, {\n\n    onSetMod: {\n        &apos;js&apos;: function() {\n            var checkbox = this.findBlockInside({ blockName : &apos;b-form-checkbox&apos;, modName : &apos;type&apos;, modVal : &apos;my-checkbox&apos;});\n            this.domElem.append(&apos;Значение checkbox: &apos; + checkbox.val());\n        }\n    }\n}\n);</code></pre><h3 id=\"Dostupkbemjsblokuneizbemjsbloka\">Доступ к bem-js-блоку не из bem-js-блока</h3><p>В случае работы не из <tt>bem-js-блока</tt>, методы <tt>findBlock*</tt> недоступны. <tt>js</tt>-объект блока можно получить, используя метод <tt>.bem()</tt> <tt>jQuery</tt> коллекции:</p><pre><code class=\"js\">$(уникальный селектор).bem(&apos;b-link&apos;);</code></pre><p>Этот способ <b>не рекомендован</b>. Лучшим вариантом работы с блоками, реализованными на <tt>i-bem</tt>, является создание собственного компонента на <tt>i-bem</tt>. Подробнее о <a href=\"#creation\">создании собственного bem-js-компонента</a> написано ниже.</p><pre><code class=\"xml\">&lt;a name=&quot;mods&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Rabotasmodifikatoramibloka\">Работа с модификаторами блока</h2><p>Модификатор задаёт блоку определённое состояние. Каждому блоку можно присвоить один или несколько модификаторов (у блока также может не быть модификаторов вообще). У модификатора есть имя и значение.</p><p>Любой перевод блока в другое состояние должен производиться при помощи установки модификатора. Например, для того, чтобы сделать чекбокс выделенным в блоке <tt>b-form-checkbox</tt>, ему нужно установить модификатор <tt>checked</tt> в значение <tt>yes</tt>.<br/> На странице документации каждого блока есть список его элементов и модификаторов. Из этого списка можно однозначно определять, какие состояния блока доступны для использования.</p><p>Модификаторы нельзя устанавливать, напрямую меняя <tt>CSS</tt> класс на соответствующей <tt>DOM</tt>-ноде. Для корректной работы <tt>js</tt> все манипуляции с модификаторами должны производиться при помощи метода-хелпера <tt>setMod()</tt>. Также существуют методы <tt>hasMod()</tt>, <tt>getMod</tt>/<tt>getMods()</tt>, <tt>toggleMod()</tt> и <tt>delMod()</tt>. Сигнатуры этих методов доступны в <a href=\"/blocks/i-bem/i-bem.jsdoc.wiki\">референсе по BEM</a>.</p><pre><code class=\"xml\">&lt;a name=&quot;customization&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Izmeneniepovedeniyasushhestvuyushhixblokov\">Изменение поведения существующих блоков</h2><p>Используя <tt>bem-js</tt>, можно переопределять и доопределять методы блока и функций реакции на изменения модификаторов. Это делается аналогично кастомизации блоков на <tt>CSS</tt> или <tt>BEMHTML</tt>.</p><h3 id=\"Pereopredeleniepovedeniya\">Переопределение поведения</h3><p>Например, на сервисе существует необходимость модифицировать все блоки <tt>b-dropdowna</tt> так, чтобы они не закрывались по второму клику на псевдо-ссылку. В этом случае на уровне переопределения сервиса нужно сделать файл <tt>blocks/b-dropdowna/b-dropdowna.js</tt>, кастомизирующий поведение блока из библиотеки:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-dropdowna&apos;, {\n\n    onSetMod : {\n\n        &apos;js&apos; : function() {\n\n            this._getSwitcher().on(&apos;click&apos;, this._on, this);\n\n        }\n    },\n    _on : function() {\n        this.getPopup().show(this.elem(&apos;switcher&apos;));\n    }\n});</code></pre><h3 id=\"Rasshireniepovedeniya\">Расширение поведения</h3><p>В предыдущем примере код кастомизации полностью переопределяет поведение блока. Технология <tt>bem-js</tt> позволяет также реализовывать «доопределение» блока. Для этого в методах кастомизирующего кода можно вызывать <tt>this._<span>_</span>base.apply()</tt>, передавая в качестве аргументов <tt>this</tt> и <tt>arguments</tt>. Вызов такого метода аналогичен использованию <tt>&lt;xsl:apply-imports/&gt;</tt>.</p><p>Например, можно доопределить реакцию на клик всех блоков <tt>b-link</tt> на проекте, так, чтобы после первого клика на псевдо-ссылку она приобретала красный цвет.</p><p>Содержание файла <tt>blocks/b-link/_pseudo/b-link_pseudo_yes.js</tt></p><pre><code class=\"js\">BEM.DOM.decl({&apos;name&apos;: &apos;b-link&apos;, &apos;modName&apos;: &apos;pseudo&apos;, &apos;modVal&apos;: &apos;yes&apos;}, {\n    _onClick : function() {\n         this\n            .__base.apply(this, arguments) // выполнить метод _onClick основного b-link\n            .setMod(&apos;status&apos;, &apos;clicked&apos;);\n    }\n});</code></pre><p>Содержание файла <tt>blocks/b-link/_status/b-link_status_clicked.css</tt></p><pre><code class=\"xml\">.b-link_status_clicked\n{\n    color: red;\n}</code></pre><h3 id=\"Kastomizaciyasispolyzovaniemmodifikatorov\">Кастомизация с использованием модификаторов</h3><p>Предыдущие примеры кастомизации изменяют поведение <i>всех</i> определенных блоков на странице. Но очень часто возникает задача кастомизации конкретного блока без влияния на поведение всех таких блоков. Согласно концепции <tt>BEM</tt>, если блок чем-то отличается от других похожих, это выражается модификатором. Так что нужно реализовывать поведение для блока с таким модификатором.</p><p>Возвращаясь к примеру про псевдоссылку, приобретающую красный цвет после первого клика, сделаем модификацию <tt>reaction_odd</tt>. Псевдоссылка с таким модификатором приобретает красный цвет после каждого нечётного клика, а после каждого чётного возвращается к исходному цвету .</p><p>Содержание файла <tt>blocks/b-link/_reaction/b-link_reaction_odd.js</tt>:</p><pre><code class=\"js\">BEM.DOM.decl({name : &apos;b-link&apos;, modName : &apos;reaction&apos;, &apos;modVal&apos; : &apos;odd&apos;}, {\n    _onClick : function() {\n         this\n            .__base.apply(this, arguments) // выполнить метод _onClick основного b-link\n            .toggleMod(&apos;status&apos;, &apos;clicked&apos;);\n    }\n});</code></pre><pre><code class=\"xml\">&lt;a name=&quot;creation&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Sozdaniejskomponentadlyasobstvennogoblokailisobstvennojmodifikacii\">Создание js-компонента для собственного блока или собственной модификации</h2><p>Рекомендованным способом работы с <tt>bem-js-блоками</tt> является создание собственных <tt>bem-js-блоков</tt> (чаще всего — контейнеров), реагирующих на события других блоков страницы. Собственные <tt>bem-js-блоки</tt> могут вызывать методы других блоков (если нужно) и реализовывать свой функционал.<br/> <tt>js-код</tt> блока принято размещать в папке блока в файле с именем, соответствующим имени блока, и расширением <tt>.js</tt>. Если <tt>js-реализация</tt> относится не к блоку, а лишь к одной из его модификаций, можно разместить код в <tt>js-файле</tt>, соответствующем данному модификатору.</p><pre><code class=\"xml\">&lt;a name=&quot;dom.decl&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Deklaraciyabloka\">Декларация блока</h3><p>Создание <tt>js-компонента</tt> блока сводится к его декларации с помощью специальных хелперов. Существуют два хелпера для декларации блоков: один для блоков, которые имеют <tt>DOM</tt>-представление, второй — для блоков, не имеющих <tt>DOM</tt> представления (например <tt>i-request</tt>, <tt>i-update-session</tt>).</p><p>В первом случае блоки декларируются с помощью <tt>BEM.DOM.decl</tt>, во втором — с помощью <tt>BEM.decl</tt>.</p><p>Хелпер декларации блока принимает 3 параметра:</p><ol><li>Матчащий параметр<br/>\n    Первым параметром может быть либо строка с именем\nблока, либо хеш. Хеш кроме имени блока содержит дополнительную информацию о том, к какому\nтипу блоков применять компонент.</li><li>Методы и свойства экземляра блока<br/>\n    Методы и свойства, предметной областью которых является конкретный инстанс блока\n    на странице. Это как <a href=\"#mods.callbacks\">функции обработки модификаторов</a>,\n    так и <a href=\"#methods\">кастомные методы блока</a>.</li><li>Статические методы и свойства<br/>\n    Методы и свойства, не относящиеся к конкретному инстансу блока. <a href=\"#static.methods\">Подробнее</a></li></ol><p>Например:</p><pre><code class=\"js\">BEM.DOM.decl(\n    &apos;b-link&apos;, // имя блока\n    {\n        // методы и свойства экземпляра блока\n    },\n    {\n        // статические методы и свойства блока\n    });</code></pre><p>и</p><pre><code class=\"js\">BEM.decl(&apos;i-request&apos;, {\n    {\n        // методы и свойства экземпляра блока\n    },\n    {\n        // статические методы и свойства блока\n});</code></pre><p>Вместо имени блока может быть указано более сложное описание, например, информация о предке:</p><pre><code class=\"js\">BEM.decl({ name : &apos;b-dataprovider&apos;, baseBlock : &apos;i-request&apos; }, {\n\n    get : function() {\n        this.__base(); // вызов одноименного метода из i-request\n        doSomething();\n    }\n\n});</code></pre><p>Тут указано, что блок <tt>b-dataprovider</tt> наследуется от блока <tt>i-request</tt> и переопределяет его метод <tt>get</tt>.</p><p>В первом параметре (хеше) декларации может быть указано не только то, к какому блоку применить компонент, но и уточнён модификатор и/или его значение:</p><pre><code class=\"js\">BEM.decl({ name : &apos;b-popup&apos;, modName : &apos;type&apos;, modVal : &apos;inplace&apos; }, {\n\n    show : function() {\n        doSomething();\n    }\n\n});</code></pre><p>Все методы, описанные в такой декларации, будут вызываться для таких блоков <tt>b-popup</tt>, которые в данный момент имеют модификатор <tt>type</tt>, установленный в <tt>inplace</tt>.</p><pre><code class=\"xml\">&lt;a name=&quot;mods.callbacks&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Reakciyanaizmeneniemodifikatorov\">Реакция на изменение модификаторов</h3><p>Согласно концепции <tt>BEM</tt> состояния блоков и его элементов определяются модификаторами. Блок может сам назначать себе или своему элементу модификатор, или получать это назначение из другого блока.<br/> Во время того, как блок или элемент получил определённый модификатор, может возникнуть необходимость отреагировать на установку (или снятие) модификатора.</p><p>Для этого в декларации в части описании методов и свойств экземпляра блока зарезервировано два специальных свойства: <tt>onSetMod</tt> и <tt>onElemSetMod</tt>, где описываются <tt>callback</tt>-функции, вызываемые при установке модификаторов для блока или его элементов.</p><p>Описание <tt>callback</tt>-функций для <tt>onSetMod</tt> представляет собой хеш вида:</p><pre><code class=\"js\">{\n    &apos;модификатор1&apos; : {\n\n        &apos;значение1-модификатора1&apos; : function() { ... }, // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в значение &apos;значение1&apos;\n\n        ...\n\n        &apos;значениеN-модификатора1&apos; : function() { ... }, // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в значение &apos;значениеN&apos;\n\n        &apos;*&apos; : function() { ... } // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в любое из значений\n\n    },\n\n    &apos;модификатор2&apos; : function() {}, // функция, которая будет вызвана при установке модификатора &apos;модификатор2&apos; в любое из значений\n\n    ...\n\n    &apos;модификаторN&apos; : {\n\n        &apos;значение1-модификатораN&apos; : function() { ... },\n\n        ...\n\n        &apos;значениеN-модификатораN&apos; : function() { ... }\n\n    }\n\n}</code></pre><p>Описание <tt>callback</tt>-функций для <tt>onElemSetMod</tt> аналогично, за исключением того, что на верхнем уровне указывается имя элемента:</p><pre><code class=\"js\">{\n\n    &apos;элемент1&apos; : {\n\n        &apos;модификатор1&apos; : {\n\n            &apos;значение1-модификатора1&apos; : function() { ... }, // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в значение &apos;значение1&apos; для элемента &apos;элемент1&apos;\n\n            ...\n\n            &apos;значениеN-модификатора1&apos; : function() { ... }, // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в значение &apos;значениеN&apos; для элемента &apos;элемент1&apos;\n\n            &apos;*&apos; : function() { ... } // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в любое из значений  для элемента &apos;элемент1&apos;\n\n        }\n\n    },\n\n    ...\n\n    &apos;элементN&apos; : function() { }, // функция, которая будет вызвана при установке любого модификатора в любое из значений для элемента &apos;элементN&apos;\n\n}</code></pre><p>Параметры <tt>callback</tt>-функций:</p><ul><li><tt>{jQuery} [elem]</tt> — элемент блока (если установка модификатора была для элемента)</li><li><tt>{String} modName</tt> — имя модификатора</li><li><tt>{String} modVal</tt> — устанавливаемое значение модификатора</li><li><tt>{String} curModVal</tt> — текущее значение модификатора</li></ul><p>Порядок вызовов <tt>callback</tt>-функций при установке модификатора <tt>modVal</tt> в значение <tt>modName</tt>:</p><ul><li>вызывается <tt>callback</tt>-функция на установку любого модификатора в любое значение (если она существует)</li><li>вызывается <tt>callback</tt>-функция на установку модификатора <tt>modVal</tt> в любое значение (если она существует)</li><li>вызывается <tt>callback</tt>-функция на установку модификатора <tt>modVal</tt> в значение <tt>modName</tt> (если она существует)</li></ul><p>Если хоть один из вызовов этих функций вернет <tt>false</tt>, то установки модификатора не произойдет.</p><p>Например:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-menu&apos;, {\n\n    onElemSetMod : {\n\n        &apos;trigger&apos; : {\n\n            &apos;state&apos; : function(elem, modName, modVal) {\n\n                // тут описаны действия, которые нужно совершить при установке элементу &apos;trigger&apos; модификатора с именем &apos;state&apos; в любое значение\n                this\n                    .toggleMod(\n                        this.findElem(elem.closest(this.buildSelector(&apos;layout-cell&apos;)), &apos;item-content&apos;).eq(0),\n                        &apos;visibility&apos;,\n                        &apos;visible&apos;,\n                        modVal == &apos;opened&apos;)\n                    .trigger(&apos;trigger&apos;, {\n                        domElem : elem,\n                        state : modVal\n                    });\n\n            }\n\n        }\n\n    },\n\n    onTriggerClick : function(e) { // при клике на триггер\n\n        e.preventDefault();\n        this.toggleMod(e.data.domElem, &apos;state&apos;, &apos;opened&apos;); // устанавливаем или снимаем значение &apos;opened&apos; у модификатор &apos;state&apos; для элемента &apos;trigger&apos;\n\n    }\n\n}, {\n\n    live : function() {\n\n        this\n            .liveBindTo(&apos;trigger&apos;, &apos;click&apos;, function(e) { // слушаем live-клик на элементах &apos;trigger&apos;\n                this.onTriggerClick(e);\n            });\n\n    }\n\n});</code></pre><p><tt>В данном примере при вызове </tt>toggleMod<tt> внутри </tt>onTriggerClick<tt> будет вызвана соответствущая ей </tt>callback<tt>-функция из </tt>onElemSetMod<tt>.</tt></p><p><tt>Callback</tt> функции, реагирующие на изменение модификатора, выполняются до установки модификатора. Если существует необходимость выполнить часть кода после установки модификатора, нужно воспользоваться методом <tt>.afterCurrentEvent()</tt>.</p><p>Пример ниже демонстрирует, что квадратик становится больше только после установки модификатора:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-square2&apos;, {\n\n    onSetMod : {\n\n        &apos;js&apos; : function() {\n\n            var square = this;\n\n            this.bindTo(&apos;click&apos;, function(){\n                square.setMod(&apos;size&apos;, &apos;big&apos;);\n            });\n\n        },\n        &apos;size&apos; : function() {\n            this.domElem.append(&apos;размер1: &apos;, this.domElem.width() + &apos;&lt;br/&gt;&apos;); // напишет 200\n\n            this.afterCurrentEvent(function(){\n                this.domElem.append(&apos;размер2: &apos;, this.domElem.width()); // напишет 400\n            });\n        }\n    }\n\n});</code></pre><h4 id=\"Nachalorabotysblokommodifikatorjs\">Начало работы с блоком (модификатор <tt>js</tt>)</h4><p>Блок начинает свою работу с действий, описанных в <tt>callback</tt>-функции на установку его модификатора <tt>js</tt> в значение <tt>inited</tt>:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-form-input&apos;, {\n\n    onSetMod : {\n\n        &apos;js&apos; : {\n\n            &apos;inited&apos; : function() {\n\n                this\n                    .bindTo(this.elem(&apos;input&apos;), {\n                        &apos;focus&apos; : this.onFocus,\n                        &apos;blur&apos;  : this.onBlur\n                    })\n\n            }\n\n        }\n\n    }\n\n});</code></pre><p>Этот модификатор присваивается блоку в момент инициализации. Поскольку код обработчика модификатора выполняется до установки модификатора, эта функция-обработчик и является первой выполняющейся функцией блока.</p><p>Модификаторы могут без ограничения присваиваться как блокам, имеющим <tt>DOM</tt> представление, так и блокам без него. Так что, у блоков без <tt>DOM</tt> представления первый исполняемый метод также задаётся как <tt>callback</tt> модификатора <tt>js_inited</tt>.</p><p>В коде блоков можно встретить <tt>callback</tt> функцию не на значение <tt>inited</tt> модификатора <tt>js</tt>, а на установку модификатора <tt>js</tt> в любое значение:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-form-input&apos;, {\n\n    onSetMod : {\n\n    &apos;js&apos; : function() { // конструктор b-form-input\n        ...\n        }\n\n    }\n});</code></pre><p>Это краткая декларация, возможная из-за того, что до инициализации блок не имеет модификатора <tt>js</tt>, а в момент инциализации приобретает значение <tt>inited</tt>. Другие значения модификатора сейчас не предусмотрены.</p><pre><code class=\"xml\">&lt;a name=&quot;methods&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Metodybloka\">Методы блока</h3><p>Кроме реакции на модификаторы, в блоке могут быть определены его собственные методы. Определённые в блоке методы могут быть вызваны им самим или другими блоками.</p><p>Например, так выглядит метод <tt>.toggle()</tt> блока <a href=\"/blocks/b-form-checkbox/b-form/checkbox.wiki\">b-form-checkbox</a>:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-form-checkbox&apos;, {\n    ...\n    toggle : function() {\n        this.toggleMod(&apos;checked&apos;, &apos;yes&apos;, &apos;&apos;);\n    }\n    ...\n});</code></pre><h4 id=\"Pereopredelenieidoopredeleniemetodovbloka\">Переопределение и доопределение методов блока</h4><p>Любой метод блока (в том числе и методы обработки модификаторов) может быть переопределён. Об этом написано выше в пункте <a href=\"#customization\">Изменение поведения существующих блоков</a>.</p><pre><code class=\"xml\">&lt;a name=&quot;static.methods&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Staticheskiemetodybloka\">Статические методы блока</h3><p>Третий параметр, передаваемый в функцию декларации блока, – это хеш статических методов блока.</p><p>Примером блока, использующего статические методы, может служить <a href=\"/blocks/b-flash/b-flash.wiki\">/blocks/b-flash/b-flash.wiki</a>.</p><p>Для каждого блока может быть определен статический метод <tt>live</tt>, позвляющий реализовать <a href=\"#liveinit\">инициализацию по требованию (liveinit<span>)</span></a>.</p><pre><code class=\"xml\">&lt;a name=&quot;init&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Inicializaciya\">Инициализация</h2><p>Для того, чтобы у блока появился <tt>js-объект</tt>, описанный в декларации, происходит процесс инициализации блока. Инициализация блоков производится функцией <tt>BEM.DOM.init()</tt> на фрагменте <tt>DOM</tt> дерева. Если элемент <tt>i-bem_<span>_</span>dom</tt> задекларирован с модификатором <tt>init_auto</tt> (подключается файл <tt>i-bem_<span>_</span>dom_init_auto.js</tt>), то инициализация блоков происходит на всём документе по событию domReady. Также функцию <tt>BEM.DOM.init</tt> можно вызвать самостоятельно. Например, это делается для инициализации блоков после динамического изменения страницы, если появились новые блоки с js-представлением.</p><h3 id=\"InicializaciyablokovsDOMpredstavleniem\">Инициализация блоков с DOM-представлением</h3><p>Для инициализации блоков, представленных в <tt>DOM</tt>, на фрагменте дерева ищутся все блоки, помеченные классом <tt>i-bem</tt>, у них считываются параметры из атрибута <tt>onclick</tt>, и создаётся <tt>js-объект</tt> такого блока.</p><pre><code class=\"xml\">&lt;a name=&quot;onclick.params&quot;&gt;&lt;/a&gt;</code></pre><h4 id=\"Formatparametrovblokavonclick\">Формат параметров блока в onclick</h4><p>Параметры для блока записываются в виде возвращаемого атрибутом <tt>onclick</tt> хеша. Этот хеш должен содержать элементы с названиями, соответствующими названиям блоков, к которым они относятся. Значением каждого элемента должен быть вложенный хеш c параметрами.<br/> Такая запись позволяет задавать параметры для нескольких блоков в том случае, если они представлены в <tt>HTML</tt> одной и той же <tt>DOM-нодой</tt>.</p><p>Вот как выглядит <tt>DOM-нода</tt> произвольного блока, реализованного на <tt>bem-js</tt>:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {}\n}&quot;&gt;\n..\n&lt;/div&gt;</code></pre><p>В случае, если блоку необходим параметр, он указывается на том же уровне, что и элемент <tt>name</tt>. Формат параметра может быть любым: строка, число, массив, хеш, функция. Количество параметров также не ограничено.</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;points&apos; : [\n            [1.67, 2.5],\n            [-30, 2.07],\n            [290, -0.39]\n        ],\n        &apos;title&apos; : &apos;Какое-то название&apos;,\n    }\n}&quot;&gt;\n..\n&lt;/div&gt;</code></pre><p>Для нескольких блоков на одной <tt>DOM-ноде</tt> <tt>HTML</tt> представление будет аналогично следующему:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block b-my-second-block i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;title&apos; : &apos;Какое-то название&apos;, // Этот блок имеет опцинальный параметр title\n    },\n    &apos;b-my-second-block&apos; : {\n        // У этого блока нет никаких опциональных параметров\n    }\n}&quot;&gt;\n..\n&lt;/div&gt;</code></pre><h4 id=\"DOMpredstavlenieinicializirovannogobloka\">DOM-представление инициализированного блока</h4><p>После инициализации <tt>DOM</tt> представление блока изменяется: у блока появляется дополнительный модификатор <tt>js_inited</tt>.<br/> Если <tt>DOM-ноде</tt> соответствуют несколько блоков, то появление модификатора у одного из них свидетельствует об инициализации только этого блока и не влияет на инициализацию другого (других).</p><p>DOM-представление блока после инициализации:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block b-my-block_js_inited i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;name&apos; : &apos;b-my-block&apos;\n    }\n}&quot;&gt;\n..\n&lt;/div&gt;</code></pre><p><tt>DOM</tt> представление двух блоков после инициализации:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block b-my-second-block b-my-block_js_inited b-my-second-block_js_inited i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;name&apos; : &apos;b-my-block&apos;,\n    },\n    &apos;b-my-second-block&apos; : {\n        &apos;name&apos; : &apos;b-my-second-block&apos;\n    }\n}&quot;&gt;</code></pre><p><tt>DOM</tt> представление двух блоков, но инициализован только один из них:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block b-my-second-block b-my-second-block_js_inited i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;name&apos; : &apos;b-my-block&apos;,\n    },\n    &apos;b-my-second-block&apos; : {\n        &apos;name&apos; : &apos;b-my-second-block&apos;\n    }\n}&quot;&gt;</code></pre><h3 id=\"InicializaciyablokovbezDOMpredstavleniya\">Инициализация блоков без DOM-представления</h3><p>В том случае, если у блока нет <tt>DOM</tt> представления, в процессе инициализации просто возникает <tt>js-объект</tt>, соответствующий этому блоку. Дальнейшее зависит от кода блока.</p><pre><code class=\"xml\">&lt;a name=&quot;liveinit&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"InicializaciyapotrebovaniyuliveInit\">Инициализация по требованию (liveInit)</h2><p>Многим блокам (например, <tt>b-link</tt>, <tt>b-dropdown</tt>, <tt>b-smart-help</tt>) нет необходимости делать сразу же полную инициализацию. Инициализация может происходить только на ключевые события для этого блока, например, клик по элементу этого блока. Рассмотрим на примере блока <tt>b-link</tt>:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-link&apos;, {\n\n    _onClick : function(e) {\n\n        e.preventDefault();\n        this.trigger(&apos;click&apos;);\n\n    }\n\n}, {\n\n    live : function() {\n\n        this.liveBindTo(&apos;click&apos;, function(e) {\n            this._onClick(e);\n        });\n\n    }\n\n});</code></pre><p>В статических свойствах блока предусмотрено специальное свойство <tt>live</tt> (<tt>Function</tt>|<tt>Boolean</tt>), отвечающее за инициализацию по требованию и за подписку на <tt>live</tt> события на <tt>DOM</tt> элементах внутри такого блока.</p><p>Если <tt>live</tt> определено как <tt>Function</tt>, то эта функция будет выполнена один раз — при попытке инициализации первого такого блока.</p><p>Существует несколько хелперов для <tt>live</tt> событий:</p><ul><li><tt>liveInitOnEvent</tt> — хелпер для инициализации блока по событию на блоке или его внутреннем элементе</li><li><tt>liveBindTo</tt> — подписка на события на блоке или его внутреннем элементе</li></ul><p>Оба этих хелпера инициализируют блок при возникновении первого такого события. Различие же заключается в том, что <tt>callback</tt> функция в <tt>liveInitOnEvent</tt> вызывается только один раз после инициализации блока, а в <tt>liveBindTo</tt> она будет вызываться при каждом событии. Контекстом такой <tt>callback</tt> функции является тот блок, в котором произошло событие.</p><p>В вышеприведенном примере блок <tt>b-link</tt> будет инициализирован при первом клике на себе и будет реагировать на каждый последующий клик.</p><p>Если же <tt>live</tt> определено как <tt>Boolean</tt> и установлено в <tt>true</tt>, то такой блок будет инициализирован только при попытке доступа к нему, например, из методов поиска <tt>findBlockInside</tt>/<tt>findBlockOutside</tt>.</p><p>&lt;a name=&quot;finding&quot;&gt;&lt;/a&gt;</p><h2 id=\"Metodydostupakblokamielementam\">Методы доступа к блокам и элементам</h2><p>Работая с блоками, реализованными на <tt>bem-js</tt>, необходимо использовать встроенные методы для поиска блоков и их элементов. Эти методы доступны в каждом блоке и умеют возвращать другой блок или <tt>jQuery</tt> коллекцию (в случае поиска элементов).</p><h3 id=\"Metodypoiskablokov\">Методы поиска блоков</h3><p>Поиск блоков осуществляется относительно текущего блока при помощи методов <tt>findBlock*</tt>.</p><p>Реализуем блок <tt>b-my-block</tt>, который находит первый из блоков <tt>b-form-checkbox</tt> внутри себя и вызывает у него метод <tt>toggle()</tt> для переключения чекбокса.</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-my-block&apos;, {\n    onSetMod : {\n        &apos;js&apos; : function() {\n            var checkbox = this.findBlockInside(&apos;b-form-checkbox&apos;);\n            checkbox.toggle();\n        }\n    }\n});</code></pre><p>Поиск блока или блоков может быть выполнен одним из следующих методов:</p><ul><li><tt>findBlockInside/findBlocksInside</tt> — поиск блока/блоков внутри <tt>DOM</tt> элементов текущего блока или его элементов</li><li><tt>findBlockOn/findBlocksOn</tt> — поиск блока/блоков на <tt>DOM</tt> элементах текущего блока или его элементов</li><li><tt>findBlockOutside/findBlocksOutside</tt> — поиск блока/блоков снаружи <tt>DOM</tt> элементов текущего блока или его элементов</li></ul><p>Список методов поиска блоков и их сигнатуры можно посмотреть в <a href=\"/blocks/i-bem/dom/i-bem__dom.jsdoc.wiki\">референсе по BEM.DOM</a>.</p><p>Примерами блоков, использующих методы поиска других блоков, могут быть: <a href=\"/blocks/b-smart-help/b-smart-help.wiki\">b-smart-help</a>, <a href=\"blocks/b-screenshot/b-screenshot.wiki\">b-screenshot</a> и <a href=\"blocks/b-dropdowna/b-dropdowna.wiki\">b-dropdowna</a>.</p><h3 id=\"Metodydostupakelementam\">Методы доступа к элементам</h3><p>Для поиска элементов внутри блока используется метод <tt>elem</tt>. Результат этого метода кэшируется.</p><p>Например:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-form-input&apos;, {\n\n    doSomething : function() {\n\n        this.elem(&apos;hint&apos;); // тут будут найдены элементы b-form-input__hint\n\n    }\n\n});</code></pre><p>Можно искать элементы внутри блока с учетом модификатора:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-menu&apos;, {\n\n    doSomething : function() {\n\n        this.elem(&apos;item&apos;, &apos;state&apos;, &apos;current&apos;); // тут будут найдены элементы b-menu__item_state_current\n\n    }\n\n});</code></pre><p>Некэширующий метод поиска элементов называется <tt>findElem()</tt>.</p><p>Полный список методов для поиска элементов и их сигнатуры можно найти в <a href=\"/blocks/i-bem/dom/i-bem__dom.jsdoc.wiki\">референсе по BEM.DOM</a>.</p><pre><code class=\"xml\">&lt;a name=&quot;events&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Rabotassobytiyami\">Работа с событиями</h2><h3 id=\"Sobytiyanablokax\">События на блоках</h3><p>Блоки предоставляют интерфейс для подписки/отписки/нотификации своих собственных (не <tt>DOM</tt>) событий:</p><ul><li><tt>on(e, [data], fn, [ctx])</tt> — подписка на событие <tt>e</tt></li><li><tt>onFirst(e, [data], fn, [ctx])</tt> — подписка только на первое событие <tt>e</tt></li><li><tt>un([e], [fn], [ctx])</tt> — отписка от конкретного события <tt>e</tt> или всех событий</li><li><tt>trigger(e, [data])</tt> — нотификация о событии  <tt>e</tt></li></ul><h3 id=\"livesobytiyanablokax\">live-события на блоках</h3><p>В <tt>bem-js</tt> есть события, реализованные по паттерну делегированных событий, они называются <tt>live</tt> события.</p><p>Следующий пример демонстрирует работу с live-событием <tt>click</tt> для блоков <tt>b-link</tt>, содержащихся в определённой <tt>DOM-ноде</tt>. В данном случае контейнер и блок совпадают:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-link-example&apos;, {\n\n    onSetMod: {\n        &apos;js&apos;: function() {\n            var link = this.findBlockInside(&apos;b-link&apos;);\n            BEM.blocks[&apos;b-link&apos;]\n                .liveCtxBind(link.domElem,\n                            &apos;click&apos;,\n                            function(){\n                                link.domElem.text(&apos;Кликнутая ссылка&apos;);\n                            },\n                            this);\n        }\n    }\n},\n{\n    live: function() {\n        this.liveInitOnBlockInsideInit(&apos;b-link&apos;);\n    }\n}\n);</code></pre><p>Метод <tt>.liveCtxBind()</tt> реализует возможность реакции на bem-события блоков, вложенных в какой-либо <tt>DOM</tt> элемент. <b>Это не DOM-события</b><br/> Использование <tt>live</tt> событий позволяет избежать лишнего поиска блоков в <tt>DOM</tt> дереве. Кроме того, при такой привязке к событию реакция на событие блока из контейнера будет происходить даже в том случае, если на момент привязки блока в контейнере не было, а он появился позже в результате динамического изменения документа.</p><p>Кроме возможности привязки к <tt>live</tt> событию блока, здесь также продемонстрированы <a href=\"#blocks.finding\">поиск блока относительно текущего</a> и <a href=\"#liveinit\">live-инициалиация</a>.<br/></p></div>"},"en":{"name":"i-bem","examples":[],"description":""}}},{"name":"identify","jsdoc":null,"data":{"ru":{"name":"identify","examples":[],"description":""},"en":{"name":"identify","examples":[],"description":""}}},{"name":"idle","jsdoc":null,"data":{"ru":{"name":"idle","examples":[],"description":""},"en":{"name":"idle","examples":[],"description":""}}},{"name":"inherit","jsdoc":null,"data":{"ru":{"name":"inherit","examples":[],"description":""},"en":{"name":"inherit","examples":[],"description":""}}},{"name":"jquery","jsdoc":null,"data":{"ru":{"name":"jquery","examples":[],"description":"<div class=\"shmakowiki\"><p>Используется для поставки на страницу нужных плагинов через зависимости блоков от элементов блока <tt>i-jquery</tt>.</p></div>"},"en":{"name":"jquery","examples":[],"description":""}}},{"name":"keyboard","jsdoc":null,"data":{"ru":{"name":"keyboard","examples":[],"description":""},"en":{"name":"keyboard","examples":[],"description":""}}},{"name":"loader","jsdoc":null,"data":{"ru":{"name":"loader","examples":[],"description":""},"en":{"name":"loader","examples":[],"description":""}}},{"name":"next-tick","jsdoc":null,"data":{"ru":{"name":"next-tick","examples":[],"description":""},"en":{"name":"next-tick","examples":[],"description":""}}},{"name":"objects","jsdoc":null,"data":{"ru":{"name":"objects","examples":[],"description":""},"en":{"name":"objects","examples":[],"description":""}}},{"name":"page","jsdoc":null,"data":{"ru":{"name":"page","examples":[{"name":"10-simple","path":"desktop.examples/page/10-simple","notation":{"block":"10-simple"}},{"name":"20-doctype","path":"desktop.examples/page/20-doctype","notation":{"block":"20-doctype"}},{"name":"30-css-ie","path":"desktop.examples/page/30-css-ie","notation":{"block":"30-css-ie"}},{"name":"40-es5-shims","path":"desktop.examples/page/40-es5-shims","notation":{"block":"40-es5-shims"}}],"description":"<div class=\"shmakowiki\"><p>﻿Блок <tt>page</tt> создаёт теги верхнего уровня страницы:</p><ul><li><tt>&lt;html&gt;</tt></li><li><tt>&lt;head&gt;</tt></li><li><tt>&lt;body&gt;</tt></li></ul><p>Именно он отвечает за то, какие подключить <tt>CSS</tt> и <tt>JS</tt> файлы к странице, выставление <tt>meta</tt> тегов, заголовка и так далее.</p><p>Декларация блока в <tt>BEMJSON</tt> начинается объявлением блока и указанием свойства <tt>title</tt>, которое превращается в тег <tt>&lt;title&gt;</tt> в <tt>HTML</tt>.</p><pre><code class=\"js\">({\nblock: &apos;page&apos;,\ntitle: &apos;Page with link&apos;,\n...\n})</code></pre><p>Указание свойства <tt>head</tt> дополняет элемент <tt>head</tt>, соответствующий <tt>HTML</tt> тегу <tt>&lt;head&gt;</tt>, элементами для подключения <tt>CSS</tt> и <tt>JS</tt> файлов, а также указания <tt>meta</tt>:</p><pre><code class=\"js\">({\n...\nhead: [\n    { elem: &apos;css&apos;, url: &apos;example.css&apos;, ie: false },\n    { elem: &apos;css&apos;, url: &apos;example.ie.css&apos;, ie: &apos;lt IE 8&apos; },\n    { elem: &apos;js&apos;, url: &apos;example.js&apos; },\n    { elem: &apos;meta&apos;, attrs: { name: &apos;keywords&apos;, content: &apos;js, css, html&apos; } },\n    { elem: &apos;meta&apos;, attrs: { name: &apos;description&apos;, content: &apos;Yet another webdev blog&apos; } }\n],\n...\n})</code></pre><p>Элемент <tt>css</tt> превращается в <tt>HTML</tt> в тег <tt>&lt;link&gt;</tt>, подключающий как <tt>CSS</tt> стиль тот файл, что указан в свойстве <tt>url</tt> этого элемента. Также у такого элемента может быть свойство <tt>ie</tt>. Если это свойство <tt>false</tt>, то будут использоваться такие <tt>conditional comments</tt>, которые предотвратят использование этих стилей в <tt>IE</tt>. При строчном значении этого свойства тег <tt>&lt;link&gt;</tt> , будет обёрнут в соответствующий <tt>conditional comment</tt>, и этот стиль будет грузиться и использоваться указанных браузерах.<br/> Также есть возможность указывать свойство <tt>content</tt> для содержания тега <tt>&lt;style&gt;</tt>:</p><pre><code class=\"js\">({\n...\nhead: [\n    {\n        elem: &apos;css&apos;,\n        content: &apos;.b-blah { color: #f00&apos; }\n    },\n    ...\n],\n...\n})</code></pre><p>Элемент <tt>js</tt> действует аналогично, подключая к странице <tt>JS</tt> файлы при помощи тега <tt>&lt;script&gt;</tt>.</p><p>Свойство <tt>head</tt> не описывает содержание <tt>HTML</tt>-тега <tt>&lt;head&gt;</tt> полностью, а лишь дополняет дефолтное, которое блок сам создаёт в своём <tt>BEMHTML</tt> шаблоне.</p><h3 id=\"Tegmetasukazaniemkodirovki\">Тег &lt;meta&gt; с указанием кодировки</h3><p><tt>BEMHTML</tt>:</p><pre><code class=\"js\">content: [\n{\n    tag: &apos;meta&apos;,\n    attrs: { &apos;http-equiv&apos;: &apos;content-type&apos;, content: &apos;text/html; charset=utf-8&apos; }\n},\n...</code></pre><h3 id=\"TegmetadlyaispolyzovaniyaIE9ivyshevmaksimalynomcompatibilityrezhime\">Тег &lt;meta&gt; для использования <tt>IE9</tt> (и выше) в максимальном <tt>compatibility</tt> режиме</h3><p><tt>BEMHTML</tt>:</p><pre><code class=\"js\">content: [\n...\n{\n    tag: &apos;meta&apos;,\n    attrs: { &apos;http-equiv&apos;: &apos;X-UA-Compatible&apos;, content: &apos;IE=EmulateIE7, IE=edge&apos; }\n},\n...</code></pre><h3 id=\"Vystavlenieznacheniyategatitlestranicyizsvojstva\">Выставление значения тега &lt;title&gt; страницы из свойства</h3><pre><code class=\"js\">content: [\n...\n{\n    tag: &apos;title&apos;,\n    content: this.ctx.title\n},\n...</code></pre><h3 id=\"Vystavleniefavikonki\">Выставление фавиконки</h3><pre><code class=\"js\">content: [\n...\nthis.ctx.favicon ? {\n    elem: &apos;favicon&apos;,\n    url: this.ctx.favicon\n} : &apos;&apos;,\n...</code></pre><h3 id=\"Deklaraciyablokaua\">Декларация блока ua</h3><pre><code class=\"js\">content: [\n...\n{\n    block: &apos;ua&apos;\n},\n...</code></pre><p>Значением свойства <tt>content</tt> блока <tt>page</tt> может быть хеш-описание содержимого (если речь идёт лишь об одном блоке) или массив блоков, описанных хешами:</p><pre><code class=\"js\">({\n...\ncontent: {\n    block: &apos;b-link&apos;,\n    mods: { pseudo: &apos;yes&apos;, togcolor: &apos;yes&apos;, color: &apos;green&apos; },\n    url: &apos;#&apos;,\n    target: &apos;_blank&apos;,\n    title: &apos;Кликни меня&apos;,\n    content: &apos;Псевдоссылка, меняющая цвет по клику&apos;\n}\n})</code></pre><p>На блоки, содержащиеся в <tt>content</tt>, действуют их <tt>BEMHTML</tt> шаблоны.</p><h3 id=\"Otmenaavtomaticheskojinicializaciiblokov\">Отмена автоматической инициализации блоков</h3><pre><code class=\"js\">noDeps: [\n    { block: &apos;i-bem&apos;, elem: &apos;dom&apos;, mods: { init: &apos;auto&apos; } }\n]</code></pre></div>"},"en":{"name":"page","examples":[{"name":"10-simple","path":"desktop.examples/page/10-simple","notation":{"block":"10-simple"}},{"name":"20-doctype","path":"desktop.examples/page/20-doctype","notation":{"block":"20-doctype"}},{"name":"30-css-ie","path":"desktop.examples/page/30-css-ie","notation":{"block":"30-css-ie"}},{"name":"40-es5-shims","path":"desktop.examples/page/40-es5-shims","notation":{"block":"40-es5-shims"}}],"description":""}}},{"name":"querystring","jsdoc":null,"data":{"ru":{"name":"querystring","examples":[],"description":"<h1 id=\"querystring\">querystring</h1>\n<p>Блок <code>querystring</code> служит для работы с адресной строкой браузера – обработки и формирования запросов.</p>\n<p>Блок реализован в технологии <code>vanilla.js</code> и подходит для использования в серверных и клиентских приложениях.</p>\n<h2 id=\"Публичные-методы-блока\">Публичные методы блока</h2>\n<p>Блок предоставляет следующий набор публичных методов:</p>\n<ul>\n<li><code>parse</code> – служит для формирования объекта на основании параметров запроса адресной строки. Метод принимает на вход строку с параметрами и возвращает сформированный объект. Параметры передаются в виде пар ключ-значение с символом <code>=</code> в качестве разделителя. Пары отделяются символом <code>&amp;</code>. В ходе работы метода, ключи и значения декодируются из формата <code>URI</code>;</li>\n<li><code>stringify</code> – служит для формирования строки запроса с набором параметров на основании собственных свойств объекта. Метод принимает на вход объект и возвращает сформированную строку запроса. Имена свойств отделяются от значений символом <code>=</code>, пары разделяются символом <code>&amp;</code>. </li>\n</ul>\n<h2 id=\"Элементы-блока\">Элементы блока</h2>\n<h3 id=\"__uri\">__uri</h3>\n<p>Элемент предназначен для декодирования строки из формата <code>URI</code>. </p>\n<p>Элемент предоставляет следующий набор публичных методов:</p>\n<ul>\n<li><code>decodeURI</code> – декодирование <code>URI</code>. Заменяет каждую эскейпинговую последовательность в строке <code>URI</code> соответствующим символом. Метод поддерживает тот же набор последовательностей, что и стандартный метод JavaScript <code>encodeURI</code>. Символ <code>#</code> не декодируется.</li>\n<li><code>decodeURIComponent</code> – декодирование компонента <code>URI</code>. Заменяет каждую эскейпинговую последовательность в строке <code>URI</code> соответствующим символом. Метод позволяет декодировать компонент <code>URI</code>, сформированный методом <code>encodeURIComponent</code>. Декодируются последовательности, соответствующие символам <code>&amp;</code>, <code>+</code>, и <code>=</code>.</li>\n</ul>\n<p>Оба метода являются оберткой над соответствующими стандартными методами JavaScript <code>decodeURI</code> и <code>decodeURIComponent</code>. В ходе их работы производится проверка входной строки:</p>\n<ul>\n<li>если передана строка в формате, отличном от <code>UTF8</code>, генерируется ошибка;</li>\n<li>если в строке не были найдены эскейпинговые последовательности методы возвращают ее без изменений.</li>\n</ul>\n"},"en":{"name":"querystring","examples":[],"description":""}}},{"name":"strings","jsdoc":null,"data":{"ru":{"name":"strings","examples":[],"description":""},"en":{"name":"strings","examples":[],"description":""}}},{"name":"tick","jsdoc":null,"data":{"ru":{"name":"tick","examples":[],"description":""},"en":{"name":"tick","examples":[],"description":""}}},{"name":"ua","jsdoc":null,"data":{"ru":{"name":"ua","examples":[],"description":"<div class=\"shmakowiki\"><p>Блок <tt>ua</tt> — служебный, не имеет визуального представления на странице.</p><p>Этот блок используется всегда, когда используется блок <tt>page</tt>, так как вызывается внутри него. Задавать его самостоятельно на странице не нужно.</p><p>В <tt>HTML</tt> блок представлен в виде инлайнового скрипта, в результате работы которого, у тега <tt>&lt;html&gt;</tt> появляются <tt>CSS</tt>-классы, идентифицирующие, включен ли <tt>JS</tt> (<tt>ua_js_no</tt>/<tt>ua_js_yes</tt>) и в каком режиме рендеринга находится браузер (<tt>ua_css_standart</tt>/<tt>ua_css_quirks</tt>).</p><p>Эти классы можно использовать, чтобы при помощи <tt>CSS</tt> задавать блокам разный внешний вид в зависимости от ситуации.</p><p>Если такие классы проекту не нужны, можно переопределить <tt>BEMHTML</tt> шаблон блока <tt>ua</tt> на уровне переопределения проекта:</p><pre><code class=\"js\">block(&apos;ua&apos;).default()()</code></pre></div>"},"en":{"name":"ua","examples":[],"description":""}}},{"name":"vow","jsdoc":null,"data":{"ru":{"name":"vow","examples":[],"description":""},"en":{"name":"vow","examples":[],"description":""}}}]},{"name":"touch-pad.docs","blocks":[{"name":"clearfix","jsdoc":null,"data":{"ru":{"name":"clearfix","examples":[],"description":"<div class=\"shmakowiki\"><p>Для использования блока необходимо подмешать его к нужному html-элементу, например:</p><pre><code class=\"xml\">    &lt;div style=&quot;background: #ada;&quot;&gt;\n        top\n    &lt;/div&gt;\n\n    &lt;div class=&quot;clearfix&quot; style=&quot;background: #eda;&quot;&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item1&lt;/div&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item2&lt;/div&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item3&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div style=&quot;background: #ada;&quot;&gt;\n        bottom\n    &lt;/div&gt;</code></pre></div>"},"en":{"name":"clearfix","examples":[],"description":""}}},{"name":"cookie","jsdoc":null,"data":{"ru":{"name":"cookie","examples":[],"description":""},"en":{"name":"cookie","examples":[],"description":""}}},{"name":"dom","jsdoc":null,"data":{"ru":{"name":"dom","examples":[],"description":""},"en":{"name":"dom","examples":[],"description":""}}},{"name":"events","jsdoc":null,"data":{"ru":{"name":"events","examples":[],"description":""},"en":{"name":"events","examples":[],"description":""}}},{"name":"functions","jsdoc":null,"data":{"ru":{"name":"functions","examples":[],"description":""},"en":{"name":"functions","examples":[],"description":""}}},{"name":"i-bem","jsdoc":null,"data":{"ru":{"name":"i-bem","examples":[],"description":"<div class=\"shmakowiki\"><p>Блок <tt>i-bem</tt> — это блок-хелпер, позволяющий создавать другие блоки. Блок реализован в технологиях <tt>BEMHTML</tt> и <tt>JS</tt>. Обе эти реализации являются ядром библиотеки блоков в соответствующих технологиях.</p><h2 id=\"jsrealizaciyablokaibem\">js-реализация блока i-bem</h2><p>Реализация блока <tt>i-bem</tt> в <tt>JS</tt> обеспечивает хелперы для представления блока в виде <tt>JS</tt> объекта с определёнными методами и свойствами. Это нужно, чтобы писать клиентский <tt>JS</tt> в терминах <tt>BEM</tt>. То есть <tt>JS</tt> оперирует более высоким уровнем абстракции, чем <tt>DOM</tt> представление.</p><p>Для того, чтобы js-представление блока использовало ядро <tt>i-bem</tt>, оно должно быть написано с соблюдением специальных правил.</p><h4 id=\"Chtoopisanonaetojstranice\">Что описано на этой странице?</h4><ul><li>Какие бывают блоки<ul><li><a href=\"#dom.blocks\">Блоки с DOM-представлением</a></li><li><a href=\"#abstract.blocks\">Блоки без DOM-представления</a></li></ul></li><li>Принципы и особенности подхода<ul><li><a href=\"#decl\">Декларативный принцип</a></li><li><a href=\"#block.getting\">Доступ к другим блокам</a></li><li><a href=\"#mods\">Работа с модификаторами</a></li><li><a href=\"#customization\">Кастомизация блоков</a></li></ul></li><li><a href=\"#creation\">Создание собственного bem-js блока</a></li><li>Подробнее о понятиях<ul><li><a href=\"#init\">Инициализация</a></li><li><a href=\"#liveinit\">Инициализация по требованию (live-инициализация<span>)</span></a></li><li><a href=\"#finding\">Методы доступа к блокам и элементам</a></li><li><a href=\"#events\">Работа с событиями</a></li></ul></li></ul><pre><code class=\"xml\">&lt;a name=&quot;dom.blocks&quot;&gt;&lt;/a&gt;</code></pre><h4 id=\"BlokisDOMpredstavleniem\">Блоки с DOM-представлением</h4><p>Блокам, реализованным на <tt>bem-js</tt>, могут соответствовать ноды в <tt>HTML</tt>. В этом случае говорится о том, что блоки имеют <tt>DOM</tt> представление.<br/> В <tt>HTML</tt> блоки на <tt>bem-js</tt> отличаются дополнительным <tt>CSS</tt> классом <tt>i-bem</tt> и специальным форматом записи параметров блока в <tt>onclick</tt>:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block i-bem&quot; onclick=&quot;return { &apos;b-my-block&apos; : { name : &apos;b-my-block&apos;}}&quot;&gt;\n...\n&lt;/div&gt;</code></pre><p>Ниже подробно рассказано о <a href=\"#onclick.params\">формате параметров в onclick</a>.</p><pre><code class=\"xml\">&lt;a name=&quot;abstract.blocks&quot;&gt;&lt;/a&gt;</code></pre><h4 id=\"BlokibezDOMpredstavleniya\">Блоки без DOM-представления</h4><p>Технология <tt>bem-js</tt> позволяет также создавать блоки, не имеющие <tt>DOM</tt> представления. Такие блоки тем не менее существуют в <tt>JS</tt> в виде объектов, манипулировать ими можно так же, как и блоками с <tt>DOM</tt> представлением.</p><p>О том, как создавать такие блоки, написано под заголовком <a href=\"#dom.decl\">Декларация блока</a>.</p><p>Блоки, реализованные на <tt>bem-js</tt>,  после инициализации представлены в <tt>js</tt> объектами, имеющими свои методы. Эти методы необходимо использовать, если нужно повлиять на внешний вид или поведение блока.<br/> Технология <tt>bem-js</tt> использует предметную область <a href=\"http://wiki.yandex-team.ru/lento4ka/bem\">концепции <tt>BEM</tt></a>. Все сущности являются блоками или их элементами, управление их состояниями реализуется при помощи модификаторов.<br/> Представление блока в <tt>js</tt> не обязано иметь взаимное соответствие с одной <tt>DOM</tt>-нодой. Можно разместить несколько блоков на одной <tt>DOM</tt>-ноде (это называется <tt>mix</tt>), а также реализовать один блок на нескольких <tt>DOM</tt>-нодах.<br/> Далее блок, использующий технологию <tt>bem-js</tt>, будет называться <tt>блок, реализованный на bem-js</tt>, или <tt>bem-js-блок</tt>. Примером такого блока в библиотеке может служить <tt>b-link</tt>.</p><pre><code class=\"xml\">&lt;a name=&quot;decl&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Deklarativnyjprincip\">Декларативный принцип</h2><p>Важной особенностью технологии <tt>bem-js</tt> является декларативный принцип. Подобно работе декларативных языков программирования, <tt>js</tt>-код содержит не последовательный алгоритм работы блока, а набор действий и условий, при которых эти действия необходимо выполнять.</p><h3 id=\"Deklaraciyabloka\">Декларация блока</h3><p>Декларативность проявляется в объявлении того, к каким блокам или их модификациям применим код компонента:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-link&apos;, {\n...</code></pre><pre><code class=\"js\">BEM.DOM.decl({ name : &apos;b-domik&apos;, modName : &apos;type&apos;, modVal : &apos;popup&apos; }, {\n...</code></pre><p><a href=\"#dom.decl\">Подробнее о декларации блока</a></p><pre><code class=\"xml\">&lt;a name=&quot;mods.reaction&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Reakciyanaizmeneniemodifikatorov\">Реакция на изменение модификаторов</h3><p>Согласно концепции, состояния блока или его элементов определяются модификаторами. Поэтому, чтобы динамически изменять состояния блоков и элементов, в <tt>bem-js</tt> есть специальные методы для установки и снятия модификаторов.</p><p>В коде компонента можно записать, как блок или элемент должен отреагировать на изменение модификатора. Эта запись тоже декларативна.<br/> Например, блок <tt>b-dropdowna</tt> при установке модификатора <tt>disabled</tt> прячет показанный попап:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-dropdowna&apos;, {\n\n    onSetMod : {\n\n        &apos;disabled&apos; : function(modName, modVal) {\n\n            this._getSwitcher().setMod(modName, modVal);\n            modVal == &apos;yes&apos; &amp;&amp; this.getPopup().hide();\n\n        }\n\n    },\n...</code></pre><p>Подробно <a href=\"#mods.callbacks\">о декларации обработки модификаторов</a> рассказано в пункте про создание собственного блока.</p><pre><code class=\"xml\">&lt;a name=&quot;block.getting&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Dostupkdrugimblokam\">Доступ к другим блокам</h2><p>Может возникнуть необходимость управлять другим блоком. Для любых манипуляций с блоком необходимо получить доступ к <tt>js</tt>-объекту этого блока и вызывать его методы.</p><pre><code class=\"xml\">&lt;a name=&quot;blocks.finding&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Dostupkbemjsblokuizdrugogobemjsbloka\">Доступ к bem-js-блоку из другого bem-js-блока.</h3><p>В случае <a href=\"#creation\">реализации собственного кастомного блока на технологии <tt>bem-js</tt></a>, блоку соответствует <tt>js</tt>-объект. Он наследует общие для всех блоков методы, позволяющие работать с <tt>DOM</tt> документа в терминах <tt>BEM</tt>. Среди этих методов есть методы поиска других блоков относительно текущего (<tt>findBlock*</tt>-методы). Они возвращают <tt>js</tt>-объект искомого блока, что позволяет затем напрямую вызывать его методы.<br/> <b>Не используйте <tt>jQuery</tt>-селекторы для поиска блоков и элементов.</b></p><p>В этом примере вызывается метод <tt>val()</tt> у блока <tt>b-form-checkbox</tt>:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-checkbox-example&apos;, {\n\n    onSetMod: {\n        &apos;js&apos;: function() {\n            var checkbox = this.findBlockInside({ blockName : &apos;b-form-checkbox&apos;, modName : &apos;type&apos;, modVal : &apos;my-checkbox&apos;});\n            this.domElem.append(&apos;Значение checkbox: &apos; + checkbox.val());\n        }\n    }\n}\n);</code></pre><h3 id=\"Dostupkbemjsblokuneizbemjsbloka\">Доступ к bem-js-блоку не из bem-js-блока</h3><p>В случае работы не из <tt>bem-js-блока</tt>, методы <tt>findBlock*</tt> недоступны. <tt>js</tt>-объект блока можно получить, используя метод <tt>.bem()</tt> <tt>jQuery</tt> коллекции:</p><pre><code class=\"js\">$(уникальный селектор).bem(&apos;b-link&apos;);</code></pre><p>Этот способ <b>не рекомендован</b>. Лучшим вариантом работы с блоками, реализованными на <tt>i-bem</tt>, является создание собственного компонента на <tt>i-bem</tt>. Подробнее о <a href=\"#creation\">создании собственного bem-js-компонента</a> написано ниже.</p><pre><code class=\"xml\">&lt;a name=&quot;mods&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Rabotasmodifikatoramibloka\">Работа с модификаторами блока</h2><p>Модификатор задаёт блоку определённое состояние. Каждому блоку можно присвоить один или несколько модификаторов (у блока также может не быть модификаторов вообще). У модификатора есть имя и значение.</p><p>Любой перевод блока в другое состояние должен производиться при помощи установки модификатора. Например, для того, чтобы сделать чекбокс выделенным в блоке <tt>b-form-checkbox</tt>, ему нужно установить модификатор <tt>checked</tt> в значение <tt>yes</tt>.<br/> На странице документации каждого блока есть список его элементов и модификаторов. Из этого списка можно однозначно определять, какие состояния блока доступны для использования.</p><p>Модификаторы нельзя устанавливать, напрямую меняя <tt>CSS</tt> класс на соответствующей <tt>DOM</tt>-ноде. Для корректной работы <tt>js</tt> все манипуляции с модификаторами должны производиться при помощи метода-хелпера <tt>setMod()</tt>. Также существуют методы <tt>hasMod()</tt>, <tt>getMod</tt>/<tt>getMods()</tt>, <tt>toggleMod()</tt> и <tt>delMod()</tt>. Сигнатуры этих методов доступны в <a href=\"/blocks/i-bem/i-bem.jsdoc.wiki\">референсе по BEM</a>.</p><pre><code class=\"xml\">&lt;a name=&quot;customization&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Izmeneniepovedeniyasushhestvuyushhixblokov\">Изменение поведения существующих блоков</h2><p>Используя <tt>bem-js</tt>, можно переопределять и доопределять методы блока и функций реакции на изменения модификаторов. Это делается аналогично кастомизации блоков на <tt>CSS</tt> или <tt>BEMHTML</tt>.</p><h3 id=\"Pereopredeleniepovedeniya\">Переопределение поведения</h3><p>Например, на сервисе существует необходимость модифицировать все блоки <tt>b-dropdowna</tt> так, чтобы они не закрывались по второму клику на псевдо-ссылку. В этом случае на уровне переопределения сервиса нужно сделать файл <tt>blocks/b-dropdowna/b-dropdowna.js</tt>, кастомизирующий поведение блока из библиотеки:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-dropdowna&apos;, {\n\n    onSetMod : {\n\n        &apos;js&apos; : function() {\n\n            this._getSwitcher().on(&apos;click&apos;, this._on, this);\n\n        }\n    },\n    _on : function() {\n        this.getPopup().show(this.elem(&apos;switcher&apos;));\n    }\n});</code></pre><h3 id=\"Rasshireniepovedeniya\">Расширение поведения</h3><p>В предыдущем примере код кастомизации полностью переопределяет поведение блока. Технология <tt>bem-js</tt> позволяет также реализовывать «доопределение» блока. Для этого в методах кастомизирующего кода можно вызывать <tt>this._<span>_</span>base.apply()</tt>, передавая в качестве аргументов <tt>this</tt> и <tt>arguments</tt>. Вызов такого метода аналогичен использованию <tt>&lt;xsl:apply-imports/&gt;</tt>.</p><p>Например, можно доопределить реакцию на клик всех блоков <tt>b-link</tt> на проекте, так, чтобы после первого клика на псевдо-ссылку она приобретала красный цвет.</p><p>Содержание файла <tt>blocks/b-link/_pseudo/b-link_pseudo_yes.js</tt></p><pre><code class=\"js\">BEM.DOM.decl({&apos;name&apos;: &apos;b-link&apos;, &apos;modName&apos;: &apos;pseudo&apos;, &apos;modVal&apos;: &apos;yes&apos;}, {\n    _onClick : function() {\n         this\n            .__base.apply(this, arguments) // выполнить метод _onClick основного b-link\n            .setMod(&apos;status&apos;, &apos;clicked&apos;);\n    }\n});</code></pre><p>Содержание файла <tt>blocks/b-link/_status/b-link_status_clicked.css</tt></p><pre><code class=\"xml\">.b-link_status_clicked\n{\n    color: red;\n}</code></pre><h3 id=\"Kastomizaciyasispolyzovaniemmodifikatorov\">Кастомизация с использованием модификаторов</h3><p>Предыдущие примеры кастомизации изменяют поведение <i>всех</i> определенных блоков на странице. Но очень часто возникает задача кастомизации конкретного блока без влияния на поведение всех таких блоков. Согласно концепции <tt>BEM</tt>, если блок чем-то отличается от других похожих, это выражается модификатором. Так что нужно реализовывать поведение для блока с таким модификатором.</p><p>Возвращаясь к примеру про псевдоссылку, приобретающую красный цвет после первого клика, сделаем модификацию <tt>reaction_odd</tt>. Псевдоссылка с таким модификатором приобретает красный цвет после каждого нечётного клика, а после каждого чётного возвращается к исходному цвету .</p><p>Содержание файла <tt>blocks/b-link/_reaction/b-link_reaction_odd.js</tt>:</p><pre><code class=\"js\">BEM.DOM.decl({name : &apos;b-link&apos;, modName : &apos;reaction&apos;, &apos;modVal&apos; : &apos;odd&apos;}, {\n    _onClick : function() {\n         this\n            .__base.apply(this, arguments) // выполнить метод _onClick основного b-link\n            .toggleMod(&apos;status&apos;, &apos;clicked&apos;);\n    }\n});</code></pre><pre><code class=\"xml\">&lt;a name=&quot;creation&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Sozdaniejskomponentadlyasobstvennogoblokailisobstvennojmodifikacii\">Создание js-компонента для собственного блока или собственной модификации</h2><p>Рекомендованным способом работы с <tt>bem-js-блоками</tt> является создание собственных <tt>bem-js-блоков</tt> (чаще всего — контейнеров), реагирующих на события других блоков страницы. Собственные <tt>bem-js-блоки</tt> могут вызывать методы других блоков (если нужно) и реализовывать свой функционал.<br/> <tt>js-код</tt> блока принято размещать в папке блока в файле с именем, соответствующим имени блока, и расширением <tt>.js</tt>. Если <tt>js-реализация</tt> относится не к блоку, а лишь к одной из его модификаций, можно разместить код в <tt>js-файле</tt>, соответствующем данному модификатору.</p><pre><code class=\"xml\">&lt;a name=&quot;dom.decl&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Deklaraciyabloka\">Декларация блока</h3><p>Создание <tt>js-компонента</tt> блока сводится к его декларации с помощью специальных хелперов. Существуют два хелпера для декларации блоков: один для блоков, которые имеют <tt>DOM</tt>-представление, второй — для блоков, не имеющих <tt>DOM</tt> представления (например <tt>i-request</tt>, <tt>i-update-session</tt>).</p><p>В первом случае блоки декларируются с помощью <tt>BEM.DOM.decl</tt>, во втором — с помощью <tt>BEM.decl</tt>.</p><p>Хелпер декларации блока принимает 3 параметра:</p><ol><li>Матчащий параметр<br/>\n    Первым параметром может быть либо строка с именем\nблока, либо хеш. Хеш кроме имени блока содержит дополнительную информацию о том, к какому\nтипу блоков применять компонент.</li><li>Методы и свойства экземляра блока<br/>\n    Методы и свойства, предметной областью которых является конкретный инстанс блока\n    на странице. Это как <a href=\"#mods.callbacks\">функции обработки модификаторов</a>,\n    так и <a href=\"#methods\">кастомные методы блока</a>.</li><li>Статические методы и свойства<br/>\n    Методы и свойства, не относящиеся к конкретному инстансу блока. <a href=\"#static.methods\">Подробнее</a></li></ol><p>Например:</p><pre><code class=\"js\">BEM.DOM.decl(\n    &apos;b-link&apos;, // имя блока\n    {\n        // методы и свойства экземпляра блока\n    },\n    {\n        // статические методы и свойства блока\n    });</code></pre><p>и</p><pre><code class=\"js\">BEM.decl(&apos;i-request&apos;, {\n    {\n        // методы и свойства экземпляра блока\n    },\n    {\n        // статические методы и свойства блока\n});</code></pre><p>Вместо имени блока может быть указано более сложное описание, например, информация о предке:</p><pre><code class=\"js\">BEM.decl({ name : &apos;b-dataprovider&apos;, baseBlock : &apos;i-request&apos; }, {\n\n    get : function() {\n        this.__base(); // вызов одноименного метода из i-request\n        doSomething();\n    }\n\n});</code></pre><p>Тут указано, что блок <tt>b-dataprovider</tt> наследуется от блока <tt>i-request</tt> и переопределяет его метод <tt>get</tt>.</p><p>В первом параметре (хеше) декларации может быть указано не только то, к какому блоку применить компонент, но и уточнён модификатор и/или его значение:</p><pre><code class=\"js\">BEM.decl({ name : &apos;b-popup&apos;, modName : &apos;type&apos;, modVal : &apos;inplace&apos; }, {\n\n    show : function() {\n        doSomething();\n    }\n\n});</code></pre><p>Все методы, описанные в такой декларации, будут вызываться для таких блоков <tt>b-popup</tt>, которые в данный момент имеют модификатор <tt>type</tt>, установленный в <tt>inplace</tt>.</p><pre><code class=\"xml\">&lt;a name=&quot;mods.callbacks&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Reakciyanaizmeneniemodifikatorov\">Реакция на изменение модификаторов</h3><p>Согласно концепции <tt>BEM</tt> состояния блоков и его элементов определяются модификаторами. Блок может сам назначать себе или своему элементу модификатор, или получать это назначение из другого блока.<br/> Во время того, как блок или элемент получил определённый модификатор, может возникнуть необходимость отреагировать на установку (или снятие) модификатора.</p><p>Для этого в декларации в части описании методов и свойств экземпляра блока зарезервировано два специальных свойства: <tt>onSetMod</tt> и <tt>onElemSetMod</tt>, где описываются <tt>callback</tt>-функции, вызываемые при установке модификаторов для блока или его элементов.</p><p>Описание <tt>callback</tt>-функций для <tt>onSetMod</tt> представляет собой хеш вида:</p><pre><code class=\"js\">{\n    &apos;модификатор1&apos; : {\n\n        &apos;значение1-модификатора1&apos; : function() { ... }, // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в значение &apos;значение1&apos;\n\n        ...\n\n        &apos;значениеN-модификатора1&apos; : function() { ... }, // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в значение &apos;значениеN&apos;\n\n        &apos;*&apos; : function() { ... } // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в любое из значений\n\n    },\n\n    &apos;модификатор2&apos; : function() {}, // функция, которая будет вызвана при установке модификатора &apos;модификатор2&apos; в любое из значений\n\n    ...\n\n    &apos;модификаторN&apos; : {\n\n        &apos;значение1-модификатораN&apos; : function() { ... },\n\n        ...\n\n        &apos;значениеN-модификатораN&apos; : function() { ... }\n\n    }\n\n}</code></pre><p>Описание <tt>callback</tt>-функций для <tt>onElemSetMod</tt> аналогично, за исключением того, что на верхнем уровне указывается имя элемента:</p><pre><code class=\"js\">{\n\n    &apos;элемент1&apos; : {\n\n        &apos;модификатор1&apos; : {\n\n            &apos;значение1-модификатора1&apos; : function() { ... }, // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в значение &apos;значение1&apos; для элемента &apos;элемент1&apos;\n\n            ...\n\n            &apos;значениеN-модификатора1&apos; : function() { ... }, // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в значение &apos;значениеN&apos; для элемента &apos;элемент1&apos;\n\n            &apos;*&apos; : function() { ... } // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в любое из значений  для элемента &apos;элемент1&apos;\n\n        }\n\n    },\n\n    ...\n\n    &apos;элементN&apos; : function() { }, // функция, которая будет вызвана при установке любого модификатора в любое из значений для элемента &apos;элементN&apos;\n\n}</code></pre><p>Параметры <tt>callback</tt>-функций:</p><ul><li><tt>{jQuery} [elem]</tt> — элемент блока (если установка модификатора была для элемента)</li><li><tt>{String} modName</tt> — имя модификатора</li><li><tt>{String} modVal</tt> — устанавливаемое значение модификатора</li><li><tt>{String} curModVal</tt> — текущее значение модификатора</li></ul><p>Порядок вызовов <tt>callback</tt>-функций при установке модификатора <tt>modVal</tt> в значение <tt>modName</tt>:</p><ul><li>вызывается <tt>callback</tt>-функция на установку любого модификатора в любое значение (если она существует)</li><li>вызывается <tt>callback</tt>-функция на установку модификатора <tt>modVal</tt> в любое значение (если она существует)</li><li>вызывается <tt>callback</tt>-функция на установку модификатора <tt>modVal</tt> в значение <tt>modName</tt> (если она существует)</li></ul><p>Если хоть один из вызовов этих функций вернет <tt>false</tt>, то установки модификатора не произойдет.</p><p>Например:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-menu&apos;, {\n\n    onElemSetMod : {\n\n        &apos;trigger&apos; : {\n\n            &apos;state&apos; : function(elem, modName, modVal) {\n\n                // тут описаны действия, которые нужно совершить при установке элементу &apos;trigger&apos; модификатора с именем &apos;state&apos; в любое значение\n                this\n                    .toggleMod(\n                        this.findElem(elem.closest(this.buildSelector(&apos;layout-cell&apos;)), &apos;item-content&apos;).eq(0),\n                        &apos;visibility&apos;,\n                        &apos;visible&apos;,\n                        modVal == &apos;opened&apos;)\n                    .trigger(&apos;trigger&apos;, {\n                        domElem : elem,\n                        state : modVal\n                    });\n\n            }\n\n        }\n\n    },\n\n    onTriggerClick : function(e) { // при клике на триггер\n\n        e.preventDefault();\n        this.toggleMod(e.data.domElem, &apos;state&apos;, &apos;opened&apos;); // устанавливаем или снимаем значение &apos;opened&apos; у модификатор &apos;state&apos; для элемента &apos;trigger&apos;\n\n    }\n\n}, {\n\n    live : function() {\n\n        this\n            .liveBindTo(&apos;trigger&apos;, &apos;click&apos;, function(e) { // слушаем live-клик на элементах &apos;trigger&apos;\n                this.onTriggerClick(e);\n            });\n\n    }\n\n});</code></pre><p><tt>В данном примере при вызове </tt>toggleMod<tt> внутри </tt>onTriggerClick<tt> будет вызвана соответствущая ей </tt>callback<tt>-функция из </tt>onElemSetMod<tt>.</tt></p><p><tt>Callback</tt> функции, реагирующие на изменение модификатора, выполняются до установки модификатора. Если существует необходимость выполнить часть кода после установки модификатора, нужно воспользоваться методом <tt>.afterCurrentEvent()</tt>.</p><p>Пример ниже демонстрирует, что квадратик становится больше только после установки модификатора:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-square2&apos;, {\n\n    onSetMod : {\n\n        &apos;js&apos; : function() {\n\n            var square = this;\n\n            this.bindTo(&apos;click&apos;, function(){\n                square.setMod(&apos;size&apos;, &apos;big&apos;);\n            });\n\n        },\n        &apos;size&apos; : function() {\n            this.domElem.append(&apos;размер1: &apos;, this.domElem.width() + &apos;&lt;br/&gt;&apos;); // напишет 200\n\n            this.afterCurrentEvent(function(){\n                this.domElem.append(&apos;размер2: &apos;, this.domElem.width()); // напишет 400\n            });\n        }\n    }\n\n});</code></pre><h4 id=\"Nachalorabotysblokommodifikatorjs\">Начало работы с блоком (модификатор <tt>js</tt>)</h4><p>Блок начинает свою работу с действий, описанных в <tt>callback</tt>-функции на установку его модификатора <tt>js</tt> в значение <tt>inited</tt>:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-form-input&apos;, {\n\n    onSetMod : {\n\n        &apos;js&apos; : {\n\n            &apos;inited&apos; : function() {\n\n                this\n                    .bindTo(this.elem(&apos;input&apos;), {\n                        &apos;focus&apos; : this.onFocus,\n                        &apos;blur&apos;  : this.onBlur\n                    })\n\n            }\n\n        }\n\n    }\n\n});</code></pre><p>Этот модификатор присваивается блоку в момент инициализации. Поскольку код обработчика модификатора выполняется до установки модификатора, эта функция-обработчик и является первой выполняющейся функцией блока.</p><p>Модификаторы могут без ограничения присваиваться как блокам, имеющим <tt>DOM</tt> представление, так и блокам без него. Так что, у блоков без <tt>DOM</tt> представления первый исполняемый метод также задаётся как <tt>callback</tt> модификатора <tt>js_inited</tt>.</p><p>В коде блоков можно встретить <tt>callback</tt> функцию не на значение <tt>inited</tt> модификатора <tt>js</tt>, а на установку модификатора <tt>js</tt> в любое значение:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-form-input&apos;, {\n\n    onSetMod : {\n\n    &apos;js&apos; : function() { // конструктор b-form-input\n        ...\n        }\n\n    }\n});</code></pre><p>Это краткая декларация, возможная из-за того, что до инициализации блок не имеет модификатора <tt>js</tt>, а в момент инциализации приобретает значение <tt>inited</tt>. Другие значения модификатора сейчас не предусмотрены.</p><pre><code class=\"xml\">&lt;a name=&quot;methods&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Metodybloka\">Методы блока</h3><p>Кроме реакции на модификаторы, в блоке могут быть определены его собственные методы. Определённые в блоке методы могут быть вызваны им самим или другими блоками.</p><p>Например, так выглядит метод <tt>.toggle()</tt> блока <a href=\"/blocks/b-form-checkbox/b-form/checkbox.wiki\">b-form-checkbox</a>:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-form-checkbox&apos;, {\n    ...\n    toggle : function() {\n        this.toggleMod(&apos;checked&apos;, &apos;yes&apos;, &apos;&apos;);\n    }\n    ...\n});</code></pre><h4 id=\"Pereopredelenieidoopredeleniemetodovbloka\">Переопределение и доопределение методов блока</h4><p>Любой метод блока (в том числе и методы обработки модификаторов) может быть переопределён. Об этом написано выше в пункте <a href=\"#customization\">Изменение поведения существующих блоков</a>.</p><pre><code class=\"xml\">&lt;a name=&quot;static.methods&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Staticheskiemetodybloka\">Статические методы блока</h3><p>Третий параметр, передаваемый в функцию декларации блока, – это хеш статических методов блока.</p><p>Примером блока, использующего статические методы, может служить <a href=\"/blocks/b-flash/b-flash.wiki\">/blocks/b-flash/b-flash.wiki</a>.</p><p>Для каждого блока может быть определен статический метод <tt>live</tt>, позвляющий реализовать <a href=\"#liveinit\">инициализацию по требованию (liveinit<span>)</span></a>.</p><pre><code class=\"xml\">&lt;a name=&quot;init&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Inicializaciya\">Инициализация</h2><p>Для того, чтобы у блока появился <tt>js-объект</tt>, описанный в декларации, происходит процесс инициализации блока. Инициализация блоков производится функцией <tt>BEM.DOM.init()</tt> на фрагменте <tt>DOM</tt> дерева. Если элемент <tt>i-bem_<span>_</span>dom</tt> задекларирован с модификатором <tt>init_auto</tt> (подключается файл <tt>i-bem_<span>_</span>dom_init_auto.js</tt>), то инициализация блоков происходит на всём документе по событию domReady. Также функцию <tt>BEM.DOM.init</tt> можно вызвать самостоятельно. Например, это делается для инициализации блоков после динамического изменения страницы, если появились новые блоки с js-представлением.</p><h3 id=\"InicializaciyablokovsDOMpredstavleniem\">Инициализация блоков с DOM-представлением</h3><p>Для инициализации блоков, представленных в <tt>DOM</tt>, на фрагменте дерева ищутся все блоки, помеченные классом <tt>i-bem</tt>, у них считываются параметры из атрибута <tt>onclick</tt>, и создаётся <tt>js-объект</tt> такого блока.</p><pre><code class=\"xml\">&lt;a name=&quot;onclick.params&quot;&gt;&lt;/a&gt;</code></pre><h4 id=\"Formatparametrovblokavonclick\">Формат параметров блока в onclick</h4><p>Параметры для блока записываются в виде возвращаемого атрибутом <tt>onclick</tt> хеша. Этот хеш должен содержать элементы с названиями, соответствующими названиям блоков, к которым они относятся. Значением каждого элемента должен быть вложенный хеш c параметрами.<br/> Такая запись позволяет задавать параметры для нескольких блоков в том случае, если они представлены в <tt>HTML</tt> одной и той же <tt>DOM-нодой</tt>.</p><p>Вот как выглядит <tt>DOM-нода</tt> произвольного блока, реализованного на <tt>bem-js</tt>:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {}\n}&quot;&gt;\n..\n&lt;/div&gt;</code></pre><p>В случае, если блоку необходим параметр, он указывается на том же уровне, что и элемент <tt>name</tt>. Формат параметра может быть любым: строка, число, массив, хеш, функция. Количество параметров также не ограничено.</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;points&apos; : [\n            [1.67, 2.5],\n            [-30, 2.07],\n            [290, -0.39]\n        ],\n        &apos;title&apos; : &apos;Какое-то название&apos;,\n    }\n}&quot;&gt;\n..\n&lt;/div&gt;</code></pre><p>Для нескольких блоков на одной <tt>DOM-ноде</tt> <tt>HTML</tt> представление будет аналогично следующему:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block b-my-second-block i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;title&apos; : &apos;Какое-то название&apos;, // Этот блок имеет опцинальный параметр title\n    },\n    &apos;b-my-second-block&apos; : {\n        // У этого блока нет никаких опциональных параметров\n    }\n}&quot;&gt;\n..\n&lt;/div&gt;</code></pre><h4 id=\"DOMpredstavlenieinicializirovannogobloka\">DOM-представление инициализированного блока</h4><p>После инициализации <tt>DOM</tt> представление блока изменяется: у блока появляется дополнительный модификатор <tt>js_inited</tt>.<br/> Если <tt>DOM-ноде</tt> соответствуют несколько блоков, то появление модификатора у одного из них свидетельствует об инициализации только этого блока и не влияет на инициализацию другого (других).</p><p>DOM-представление блока после инициализации:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block b-my-block_js_inited i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;name&apos; : &apos;b-my-block&apos;\n    }\n}&quot;&gt;\n..\n&lt;/div&gt;</code></pre><p><tt>DOM</tt> представление двух блоков после инициализации:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block b-my-second-block b-my-block_js_inited b-my-second-block_js_inited i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;name&apos; : &apos;b-my-block&apos;,\n    },\n    &apos;b-my-second-block&apos; : {\n        &apos;name&apos; : &apos;b-my-second-block&apos;\n    }\n}&quot;&gt;</code></pre><p><tt>DOM</tt> представление двух блоков, но инициализован только один из них:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block b-my-second-block b-my-second-block_js_inited i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;name&apos; : &apos;b-my-block&apos;,\n    },\n    &apos;b-my-second-block&apos; : {\n        &apos;name&apos; : &apos;b-my-second-block&apos;\n    }\n}&quot;&gt;</code></pre><h3 id=\"InicializaciyablokovbezDOMpredstavleniya\">Инициализация блоков без DOM-представления</h3><p>В том случае, если у блока нет <tt>DOM</tt> представления, в процессе инициализации просто возникает <tt>js-объект</tt>, соответствующий этому блоку. Дальнейшее зависит от кода блока.</p><pre><code class=\"xml\">&lt;a name=&quot;liveinit&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"InicializaciyapotrebovaniyuliveInit\">Инициализация по требованию (liveInit)</h2><p>Многим блокам (например, <tt>b-link</tt>, <tt>b-dropdown</tt>, <tt>b-smart-help</tt>) нет необходимости делать сразу же полную инициализацию. Инициализация может происходить только на ключевые события для этого блока, например, клик по элементу этого блока. Рассмотрим на примере блока <tt>b-link</tt>:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-link&apos;, {\n\n    _onClick : function(e) {\n\n        e.preventDefault();\n        this.trigger(&apos;click&apos;);\n\n    }\n\n}, {\n\n    live : function() {\n\n        this.liveBindTo(&apos;click&apos;, function(e) {\n            this._onClick(e);\n        });\n\n    }\n\n});</code></pre><p>В статических свойствах блока предусмотрено специальное свойство <tt>live</tt> (<tt>Function</tt>|<tt>Boolean</tt>), отвечающее за инициализацию по требованию и за подписку на <tt>live</tt> события на <tt>DOM</tt> элементах внутри такого блока.</p><p>Если <tt>live</tt> определено как <tt>Function</tt>, то эта функция будет выполнена один раз — при попытке инициализации первого такого блока.</p><p>Существует несколько хелперов для <tt>live</tt> событий:</p><ul><li><tt>liveInitOnEvent</tt> — хелпер для инициализации блока по событию на блоке или его внутреннем элементе</li><li><tt>liveBindTo</tt> — подписка на события на блоке или его внутреннем элементе</li></ul><p>Оба этих хелпера инициализируют блок при возникновении первого такого события. Различие же заключается в том, что <tt>callback</tt> функция в <tt>liveInitOnEvent</tt> вызывается только один раз после инициализации блока, а в <tt>liveBindTo</tt> она будет вызываться при каждом событии. Контекстом такой <tt>callback</tt> функции является тот блок, в котором произошло событие.</p><p>В вышеприведенном примере блок <tt>b-link</tt> будет инициализирован при первом клике на себе и будет реагировать на каждый последующий клик.</p><p>Если же <tt>live</tt> определено как <tt>Boolean</tt> и установлено в <tt>true</tt>, то такой блок будет инициализирован только при попытке доступа к нему, например, из методов поиска <tt>findBlockInside</tt>/<tt>findBlockOutside</tt>.</p><p>&lt;a name=&quot;finding&quot;&gt;&lt;/a&gt;</p><h2 id=\"Metodydostupakblokamielementam\">Методы доступа к блокам и элементам</h2><p>Работая с блоками, реализованными на <tt>bem-js</tt>, необходимо использовать встроенные методы для поиска блоков и их элементов. Эти методы доступны в каждом блоке и умеют возвращать другой блок или <tt>jQuery</tt> коллекцию (в случае поиска элементов).</p><h3 id=\"Metodypoiskablokov\">Методы поиска блоков</h3><p>Поиск блоков осуществляется относительно текущего блока при помощи методов <tt>findBlock*</tt>.</p><p>Реализуем блок <tt>b-my-block</tt>, который находит первый из блоков <tt>b-form-checkbox</tt> внутри себя и вызывает у него метод <tt>toggle()</tt> для переключения чекбокса.</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-my-block&apos;, {\n    onSetMod : {\n        &apos;js&apos; : function() {\n            var checkbox = this.findBlockInside(&apos;b-form-checkbox&apos;);\n            checkbox.toggle();\n        }\n    }\n});</code></pre><p>Поиск блока или блоков может быть выполнен одним из следующих методов:</p><ul><li><tt>findBlockInside/findBlocksInside</tt> — поиск блока/блоков внутри <tt>DOM</tt> элементов текущего блока или его элементов</li><li><tt>findBlockOn/findBlocksOn</tt> — поиск блока/блоков на <tt>DOM</tt> элементах текущего блока или его элементов</li><li><tt>findBlockOutside/findBlocksOutside</tt> — поиск блока/блоков снаружи <tt>DOM</tt> элементов текущего блока или его элементов</li></ul><p>Список методов поиска блоков и их сигнатуры можно посмотреть в <a href=\"/blocks/i-bem/dom/i-bem__dom.jsdoc.wiki\">референсе по BEM.DOM</a>.</p><p>Примерами блоков, использующих методы поиска других блоков, могут быть: <a href=\"/blocks/b-smart-help/b-smart-help.wiki\">b-smart-help</a>, <a href=\"blocks/b-screenshot/b-screenshot.wiki\">b-screenshot</a> и <a href=\"blocks/b-dropdowna/b-dropdowna.wiki\">b-dropdowna</a>.</p><h3 id=\"Metodydostupakelementam\">Методы доступа к элементам</h3><p>Для поиска элементов внутри блока используется метод <tt>elem</tt>. Результат этого метода кэшируется.</p><p>Например:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-form-input&apos;, {\n\n    doSomething : function() {\n\n        this.elem(&apos;hint&apos;); // тут будут найдены элементы b-form-input__hint\n\n    }\n\n});</code></pre><p>Можно искать элементы внутри блока с учетом модификатора:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-menu&apos;, {\n\n    doSomething : function() {\n\n        this.elem(&apos;item&apos;, &apos;state&apos;, &apos;current&apos;); // тут будут найдены элементы b-menu__item_state_current\n\n    }\n\n});</code></pre><p>Некэширующий метод поиска элементов называется <tt>findElem()</tt>.</p><p>Полный список методов для поиска элементов и их сигнатуры можно найти в <a href=\"/blocks/i-bem/dom/i-bem__dom.jsdoc.wiki\">референсе по BEM.DOM</a>.</p><pre><code class=\"xml\">&lt;a name=&quot;events&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Rabotassobytiyami\">Работа с событиями</h2><h3 id=\"Sobytiyanablokax\">События на блоках</h3><p>Блоки предоставляют интерфейс для подписки/отписки/нотификации своих собственных (не <tt>DOM</tt>) событий:</p><ul><li><tt>on(e, [data], fn, [ctx])</tt> — подписка на событие <tt>e</tt></li><li><tt>onFirst(e, [data], fn, [ctx])</tt> — подписка только на первое событие <tt>e</tt></li><li><tt>un([e], [fn], [ctx])</tt> — отписка от конкретного события <tt>e</tt> или всех событий</li><li><tt>trigger(e, [data])</tt> — нотификация о событии  <tt>e</tt></li></ul><h3 id=\"livesobytiyanablokax\">live-события на блоках</h3><p>В <tt>bem-js</tt> есть события, реализованные по паттерну делегированных событий, они называются <tt>live</tt> события.</p><p>Следующий пример демонстрирует работу с live-событием <tt>click</tt> для блоков <tt>b-link</tt>, содержащихся в определённой <tt>DOM-ноде</tt>. В данном случае контейнер и блок совпадают:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-link-example&apos;, {\n\n    onSetMod: {\n        &apos;js&apos;: function() {\n            var link = this.findBlockInside(&apos;b-link&apos;);\n            BEM.blocks[&apos;b-link&apos;]\n                .liveCtxBind(link.domElem,\n                            &apos;click&apos;,\n                            function(){\n                                link.domElem.text(&apos;Кликнутая ссылка&apos;);\n                            },\n                            this);\n        }\n    }\n},\n{\n    live: function() {\n        this.liveInitOnBlockInsideInit(&apos;b-link&apos;);\n    }\n}\n);</code></pre><p>Метод <tt>.liveCtxBind()</tt> реализует возможность реакции на bem-события блоков, вложенных в какой-либо <tt>DOM</tt> элемент. <b>Это не DOM-события</b><br/> Использование <tt>live</tt> событий позволяет избежать лишнего поиска блоков в <tt>DOM</tt> дереве. Кроме того, при такой привязке к событию реакция на событие блока из контейнера будет происходить даже в том случае, если на момент привязки блока в контейнере не было, а он появился позже в результате динамического изменения документа.</p><p>Кроме возможности привязки к <tt>live</tt> событию блока, здесь также продемонстрированы <a href=\"#blocks.finding\">поиск блока относительно текущего</a> и <a href=\"#liveinit\">live-инициалиация</a>.<br/></p></div>"},"en":{"name":"i-bem","examples":[],"description":""}}},{"name":"identify","jsdoc":null,"data":{"ru":{"name":"identify","examples":[],"description":""},"en":{"name":"identify","examples":[],"description":""}}},{"name":"idle","jsdoc":null,"data":{"ru":{"name":"idle","examples":[],"description":""},"en":{"name":"idle","examples":[],"description":""}}},{"name":"inherit","jsdoc":null,"data":{"ru":{"name":"inherit","examples":[],"description":""},"en":{"name":"inherit","examples":[],"description":""}}},{"name":"jquery","jsdoc":null,"data":{"ru":{"name":"jquery","examples":[],"description":"<div class=\"shmakowiki\"><p>Используется для поставки на страницу нужных плагинов через зависимости блоков от элементов блока <tt>i-jquery</tt>.</p></div>"},"en":{"name":"jquery","examples":[],"description":""}}},{"name":"keyboard","jsdoc":null,"data":{"ru":{"name":"keyboard","examples":[],"description":""},"en":{"name":"keyboard","examples":[],"description":""}}},{"name":"loader","jsdoc":null,"data":{"ru":{"name":"loader","examples":[],"description":""},"en":{"name":"loader","examples":[],"description":""}}},{"name":"next-tick","jsdoc":null,"data":{"ru":{"name":"next-tick","examples":[],"description":""},"en":{"name":"next-tick","examples":[],"description":""}}},{"name":"objects","jsdoc":null,"data":{"ru":{"name":"objects","examples":[],"description":""},"en":{"name":"objects","examples":[],"description":""}}},{"name":"page","jsdoc":null,"data":{"ru":{"name":"page","examples":[{"name":"10-simple","path":"touch-pad.examples/page/10-simple","notation":{"block":"10-simple"}},{"name":"20-doctype","path":"touch-pad.examples/page/20-doctype","notation":{"block":"20-doctype"}}],"description":"<div class=\"shmakowiki\"><p>﻿Блок <tt>page</tt> создаёт теги верхнего уровня страницы:</p><ul><li><tt>&lt;html&gt;</tt></li><li><tt>&lt;head&gt;</tt></li><li><tt>&lt;body&gt;</tt></li></ul><p>Именно он отвечает за то, какие подключить <tt>CSS</tt> и <tt>JS</tt> файлы к странице, выставление <tt>meta</tt> тегов, заголовка и так далее.</p><p>Декларация блока в <tt>BEMJSON</tt> начинается объявлением блока и указанием свойства <tt>title</tt>, которое превращается в тег <tt>&lt;title&gt;</tt> в <tt>HTML</tt>.</p><pre><code class=\"js\">({\nblock: &apos;page&apos;,\ntitle: &apos;Page with link&apos;,\n...\n})</code></pre><p>Указание свойства <tt>head</tt> дополняет элемент <tt>head</tt>, соответствующий <tt>HTML</tt> тегу <tt>&lt;head&gt;</tt>, элементами для подключения <tt>CSS</tt> и <tt>JS</tt> файлов, а также указания <tt>meta</tt>:</p><pre><code class=\"js\">({\n...\nhead: [\n    { elem: &apos;css&apos;, url: &apos;example.css&apos;, ie: false },\n    { elem: &apos;css&apos;, url: &apos;example.ie.css&apos;, ie: &apos;lt IE 8&apos; },\n    { elem: &apos;js&apos;, url: &apos;example.js&apos; },\n    { elem: &apos;meta&apos;, attrs: { name: &apos;keywords&apos;, content: &apos;js, css, html&apos; } },\n    { elem: &apos;meta&apos;, attrs: { name: &apos;description&apos;, content: &apos;Yet another webdev blog&apos; } }\n],\n...\n})</code></pre><p>Элемент <tt>css</tt> превращается в <tt>HTML</tt> в тег <tt>&lt;link&gt;</tt>, подключающий как <tt>CSS</tt> стиль тот файл, что указан в свойстве <tt>url</tt> этого элемента. Также у такого элемента может быть свойство <tt>ie</tt>. Если это свойство <tt>false</tt>, то будут использоваться такие <tt>conditional comments</tt>, которые предотвратят использование этих стилей в <tt>IE</tt>. При строчном значении этого свойства тег <tt>&lt;link&gt;</tt> , будет обёрнут в соответствующий <tt>conditional comment</tt>, и этот стиль будет грузиться и использоваться указанных браузерах.<br/> Также есть возможность указывать свойство <tt>content</tt> для содержания тега <tt>&lt;style&gt;</tt>:</p><pre><code class=\"js\">({\n...\nhead: [\n    {\n        elem: &apos;css&apos;,\n        content: &apos;.b-blah { color: #f00&apos; }\n    },\n    ...\n],\n...\n})</code></pre><p>Элемент <tt>js</tt> действует аналогично, подключая к странице <tt>JS</tt> файлы при помощи тега <tt>&lt;script&gt;</tt>.</p><p>Свойство <tt>head</tt> не описывает содержание <tt>HTML</tt>-тега <tt>&lt;head&gt;</tt> полностью, а лишь дополняет дефолтное, которое блок сам создаёт в своём <tt>BEMHTML</tt> шаблоне.</p><h3 id=\"Tegmetasukazaniemkodirovki\">Тег &lt;meta&gt; с указанием кодировки</h3><p><tt>BEMHTML</tt>:</p><pre><code class=\"js\">content: [\n{\n    tag: &apos;meta&apos;,\n    attrs: { &apos;http-equiv&apos;: &apos;content-type&apos;, content: &apos;text/html; charset=utf-8&apos; }\n},\n...</code></pre><h3 id=\"TegmetadlyaispolyzovaniyaIE9ivyshevmaksimalynomcompatibilityrezhime\">Тег &lt;meta&gt; для использования <tt>IE9</tt> (и выше) в максимальном <tt>compatibility</tt> режиме</h3><p><tt>BEMHTML</tt>:</p><pre><code class=\"js\">content: [\n...\n{\n    tag: &apos;meta&apos;,\n    attrs: { &apos;http-equiv&apos;: &apos;X-UA-Compatible&apos;, content: &apos;IE=EmulateIE7, IE=edge&apos; }\n},\n...</code></pre><h3 id=\"Vystavlenieznacheniyategatitlestranicyizsvojstva\">Выставление значения тега &lt;title&gt; страницы из свойства</h3><pre><code class=\"js\">content: [\n...\n{\n    tag: &apos;title&apos;,\n    content: this.ctx.title\n},\n...</code></pre><h3 id=\"Vystavleniefavikonki\">Выставление фавиконки</h3><pre><code class=\"js\">content: [\n...\nthis.ctx.favicon ? {\n    elem: &apos;favicon&apos;,\n    url: this.ctx.favicon\n} : &apos;&apos;,\n...</code></pre><h3 id=\"Deklaraciyablokaua\">Декларация блока ua</h3><pre><code class=\"js\">content: [\n...\n{\n    block: &apos;ua&apos;\n},\n...</code></pre><p>Значением свойства <tt>content</tt> блока <tt>page</tt> может быть хеш-описание содержимого (если речь идёт лишь об одном блоке) или массив блоков, описанных хешами:</p><pre><code class=\"js\">({\n...\ncontent: {\n    block: &apos;b-link&apos;,\n    mods: { pseudo: &apos;yes&apos;, togcolor: &apos;yes&apos;, color: &apos;green&apos; },\n    url: &apos;#&apos;,\n    target: &apos;_blank&apos;,\n    title: &apos;Кликни меня&apos;,\n    content: &apos;Псевдоссылка, меняющая цвет по клику&apos;\n}\n})</code></pre><p>На блоки, содержащиеся в <tt>content</tt>, действуют их <tt>BEMHTML</tt> шаблоны.</p><h3 id=\"Otmenaavtomaticheskojinicializaciiblokov\">Отмена автоматической инициализации блоков</h3><pre><code class=\"js\">noDeps: [\n    { block: &apos;i-bem&apos;, elem: &apos;dom&apos;, mods: { init: &apos;auto&apos; } }\n]</code></pre></div>"},"en":{"name":"page","examples":[{"name":"10-simple","path":"touch-pad.examples/page/10-simple","notation":{"block":"10-simple"}},{"name":"20-doctype","path":"touch-pad.examples/page/20-doctype","notation":{"block":"20-doctype"}}],"description":""}}},{"name":"querystring","jsdoc":null,"data":{"ru":{"name":"querystring","examples":[],"description":"<h1 id=\"querystring\">querystring</h1>\n<p>Блок <code>querystring</code> служит для работы с адресной строкой браузера – обработки и формирования запросов.</p>\n<p>Блок реализован в технологии <code>vanilla.js</code> и подходит для использования в серверных и клиентских приложениях.</p>\n<h2 id=\"Публичные-методы-блока\">Публичные методы блока</h2>\n<p>Блок предоставляет следующий набор публичных методов:</p>\n<ul>\n<li><code>parse</code> – служит для формирования объекта на основании параметров запроса адресной строки. Метод принимает на вход строку с параметрами и возвращает сформированный объект. Параметры передаются в виде пар ключ-значение с символом <code>=</code> в качестве разделителя. Пары отделяются символом <code>&amp;</code>. В ходе работы метода, ключи и значения декодируются из формата <code>URI</code>;</li>\n<li><code>stringify</code> – служит для формирования строки запроса с набором параметров на основании собственных свойств объекта. Метод принимает на вход объект и возвращает сформированную строку запроса. Имена свойств отделяются от значений символом <code>=</code>, пары разделяются символом <code>&amp;</code>. </li>\n</ul>\n<h2 id=\"Элементы-блока\">Элементы блока</h2>\n<h3 id=\"__uri\">__uri</h3>\n<p>Элемент предназначен для декодирования строки из формата <code>URI</code>. </p>\n<p>Элемент предоставляет следующий набор публичных методов:</p>\n<ul>\n<li><code>decodeURI</code> – декодирование <code>URI</code>. Заменяет каждую эскейпинговую последовательность в строке <code>URI</code> соответствующим символом. Метод поддерживает тот же набор последовательностей, что и стандартный метод JavaScript <code>encodeURI</code>. Символ <code>#</code> не декодируется.</li>\n<li><code>decodeURIComponent</code> – декодирование компонента <code>URI</code>. Заменяет каждую эскейпинговую последовательность в строке <code>URI</code> соответствующим символом. Метод позволяет декодировать компонент <code>URI</code>, сформированный методом <code>encodeURIComponent</code>. Декодируются последовательности, соответствующие символам <code>&amp;</code>, <code>+</code>, и <code>=</code>.</li>\n</ul>\n<p>Оба метода являются оберткой над соответствующими стандартными методами JavaScript <code>decodeURI</code> и <code>decodeURIComponent</code>. В ходе их работы производится проверка входной строки:</p>\n<ul>\n<li>если передана строка в формате, отличном от <code>UTF8</code>, генерируется ошибка;</li>\n<li>если в строке не были найдены эскейпинговые последовательности методы возвращают ее без изменений.</li>\n</ul>\n"},"en":{"name":"querystring","examples":[],"description":""}}},{"name":"strings","jsdoc":null,"data":{"ru":{"name":"strings","examples":[],"description":""},"en":{"name":"strings","examples":[],"description":""}}},{"name":"tick","jsdoc":null,"data":{"ru":{"name":"tick","examples":[],"description":""},"en":{"name":"tick","examples":[],"description":""}}},{"name":"ua","jsdoc":null,"data":{"ru":{"name":"ua","examples":[],"description":"<div class=\"shmakowiki\"><p>Блок <tt>ua</tt> — служебный, не имеет визуального представления на странице.</p><p>Этот блок используется всегда, когда используется блок <tt>page</tt>, так как вызывается внутри него. Задавать его самостоятельно на странице не нужно.</p><p>В <tt>HTML</tt> блок представлен в виде инлайнового скрипта, в результате работы которого, у тега <tt>&lt;html&gt;</tt> появляются <tt>CSS</tt>-классы, идентифицирующие, включен ли <tt>JS</tt> (<tt>ua_js_no</tt>/<tt>ua_js_yes</tt>) и в каком режиме рендеринга находится браузер (<tt>ua_css_standart</tt>/<tt>ua_css_quirks</tt>).</p><p>Эти классы можно использовать, чтобы при помощи <tt>CSS</tt> задавать блокам разный внешний вид в зависимости от ситуации.</p><p>Если такие классы проекту не нужны, можно переопределить <tt>BEMHTML</tt> шаблон блока <tt>ua</tt> на уровне переопределения проекта:</p><pre><code class=\"js\">block(&apos;ua&apos;).default()()</code></pre></div>\n<div class=\"shmakowiki\"><p>Для тач-платформы блок <tt>ua</tt> добавляет дополнительные <tt>CSS</tt>-классы: - TODO</p></div>"},"en":{"name":"ua","examples":[],"description":""}}},{"name":"vow","jsdoc":null,"data":{"ru":{"name":"vow","examples":[],"description":""},"en":{"name":"vow","examples":[],"description":""}}}]},{"name":"touch-phone.docs","blocks":[{"name":"clearfix","jsdoc":null,"data":{"ru":{"name":"clearfix","examples":[],"description":"<div class=\"shmakowiki\"><p>Для использования блока необходимо подмешать его к нужному html-элементу, например:</p><pre><code class=\"xml\">    &lt;div style=&quot;background: #ada;&quot;&gt;\n        top\n    &lt;/div&gt;\n\n    &lt;div class=&quot;clearfix&quot; style=&quot;background: #eda;&quot;&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item1&lt;/div&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item2&lt;/div&gt;\n        &lt;div style=&quot;float: left; height: 100px;&quot;&gt;item3&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div style=&quot;background: #ada;&quot;&gt;\n        bottom\n    &lt;/div&gt;</code></pre></div>"},"en":{"name":"clearfix","examples":[],"description":""}}},{"name":"cookie","jsdoc":null,"data":{"ru":{"name":"cookie","examples":[],"description":""},"en":{"name":"cookie","examples":[],"description":""}}},{"name":"dom","jsdoc":null,"data":{"ru":{"name":"dom","examples":[],"description":""},"en":{"name":"dom","examples":[],"description":""}}},{"name":"events","jsdoc":null,"data":{"ru":{"name":"events","examples":[],"description":""},"en":{"name":"events","examples":[],"description":""}}},{"name":"functions","jsdoc":null,"data":{"ru":{"name":"functions","examples":[],"description":""},"en":{"name":"functions","examples":[],"description":""}}},{"name":"i-bem","jsdoc":null,"data":{"ru":{"name":"i-bem","examples":[],"description":"<div class=\"shmakowiki\"><p>Блок <tt>i-bem</tt> — это блок-хелпер, позволяющий создавать другие блоки. Блок реализован в технологиях <tt>BEMHTML</tt> и <tt>JS</tt>. Обе эти реализации являются ядром библиотеки блоков в соответствующих технологиях.</p><h2 id=\"jsrealizaciyablokaibem\">js-реализация блока i-bem</h2><p>Реализация блока <tt>i-bem</tt> в <tt>JS</tt> обеспечивает хелперы для представления блока в виде <tt>JS</tt> объекта с определёнными методами и свойствами. Это нужно, чтобы писать клиентский <tt>JS</tt> в терминах <tt>BEM</tt>. То есть <tt>JS</tt> оперирует более высоким уровнем абстракции, чем <tt>DOM</tt> представление.</p><p>Для того, чтобы js-представление блока использовало ядро <tt>i-bem</tt>, оно должно быть написано с соблюдением специальных правил.</p><h4 id=\"Chtoopisanonaetojstranice\">Что описано на этой странице?</h4><ul><li>Какие бывают блоки<ul><li><a href=\"#dom.blocks\">Блоки с DOM-представлением</a></li><li><a href=\"#abstract.blocks\">Блоки без DOM-представления</a></li></ul></li><li>Принципы и особенности подхода<ul><li><a href=\"#decl\">Декларативный принцип</a></li><li><a href=\"#block.getting\">Доступ к другим блокам</a></li><li><a href=\"#mods\">Работа с модификаторами</a></li><li><a href=\"#customization\">Кастомизация блоков</a></li></ul></li><li><a href=\"#creation\">Создание собственного bem-js блока</a></li><li>Подробнее о понятиях<ul><li><a href=\"#init\">Инициализация</a></li><li><a href=\"#liveinit\">Инициализация по требованию (live-инициализация<span>)</span></a></li><li><a href=\"#finding\">Методы доступа к блокам и элементам</a></li><li><a href=\"#events\">Работа с событиями</a></li></ul></li></ul><pre><code class=\"xml\">&lt;a name=&quot;dom.blocks&quot;&gt;&lt;/a&gt;</code></pre><h4 id=\"BlokisDOMpredstavleniem\">Блоки с DOM-представлением</h4><p>Блокам, реализованным на <tt>bem-js</tt>, могут соответствовать ноды в <tt>HTML</tt>. В этом случае говорится о том, что блоки имеют <tt>DOM</tt> представление.<br/> В <tt>HTML</tt> блоки на <tt>bem-js</tt> отличаются дополнительным <tt>CSS</tt> классом <tt>i-bem</tt> и специальным форматом записи параметров блока в <tt>onclick</tt>:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block i-bem&quot; onclick=&quot;return { &apos;b-my-block&apos; : { name : &apos;b-my-block&apos;}}&quot;&gt;\n...\n&lt;/div&gt;</code></pre><p>Ниже подробно рассказано о <a href=\"#onclick.params\">формате параметров в onclick</a>.</p><pre><code class=\"xml\">&lt;a name=&quot;abstract.blocks&quot;&gt;&lt;/a&gt;</code></pre><h4 id=\"BlokibezDOMpredstavleniya\">Блоки без DOM-представления</h4><p>Технология <tt>bem-js</tt> позволяет также создавать блоки, не имеющие <tt>DOM</tt> представления. Такие блоки тем не менее существуют в <tt>JS</tt> в виде объектов, манипулировать ими можно так же, как и блоками с <tt>DOM</tt> представлением.</p><p>О том, как создавать такие блоки, написано под заголовком <a href=\"#dom.decl\">Декларация блока</a>.</p><p>Блоки, реализованные на <tt>bem-js</tt>,  после инициализации представлены в <tt>js</tt> объектами, имеющими свои методы. Эти методы необходимо использовать, если нужно повлиять на внешний вид или поведение блока.<br/> Технология <tt>bem-js</tt> использует предметную область <a href=\"http://wiki.yandex-team.ru/lento4ka/bem\">концепции <tt>BEM</tt></a>. Все сущности являются блоками или их элементами, управление их состояниями реализуется при помощи модификаторов.<br/> Представление блока в <tt>js</tt> не обязано иметь взаимное соответствие с одной <tt>DOM</tt>-нодой. Можно разместить несколько блоков на одной <tt>DOM</tt>-ноде (это называется <tt>mix</tt>), а также реализовать один блок на нескольких <tt>DOM</tt>-нодах.<br/> Далее блок, использующий технологию <tt>bem-js</tt>, будет называться <tt>блок, реализованный на bem-js</tt>, или <tt>bem-js-блок</tt>. Примером такого блока в библиотеке может служить <tt>b-link</tt>.</p><pre><code class=\"xml\">&lt;a name=&quot;decl&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Deklarativnyjprincip\">Декларативный принцип</h2><p>Важной особенностью технологии <tt>bem-js</tt> является декларативный принцип. Подобно работе декларативных языков программирования, <tt>js</tt>-код содержит не последовательный алгоритм работы блока, а набор действий и условий, при которых эти действия необходимо выполнять.</p><h3 id=\"Deklaraciyabloka\">Декларация блока</h3><p>Декларативность проявляется в объявлении того, к каким блокам или их модификациям применим код компонента:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-link&apos;, {\n...</code></pre><pre><code class=\"js\">BEM.DOM.decl({ name : &apos;b-domik&apos;, modName : &apos;type&apos;, modVal : &apos;popup&apos; }, {\n...</code></pre><p><a href=\"#dom.decl\">Подробнее о декларации блока</a></p><pre><code class=\"xml\">&lt;a name=&quot;mods.reaction&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Reakciyanaizmeneniemodifikatorov\">Реакция на изменение модификаторов</h3><p>Согласно концепции, состояния блока или его элементов определяются модификаторами. Поэтому, чтобы динамически изменять состояния блоков и элементов, в <tt>bem-js</tt> есть специальные методы для установки и снятия модификаторов.</p><p>В коде компонента можно записать, как блок или элемент должен отреагировать на изменение модификатора. Эта запись тоже декларативна.<br/> Например, блок <tt>b-dropdowna</tt> при установке модификатора <tt>disabled</tt> прячет показанный попап:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-dropdowna&apos;, {\n\n    onSetMod : {\n\n        &apos;disabled&apos; : function(modName, modVal) {\n\n            this._getSwitcher().setMod(modName, modVal);\n            modVal == &apos;yes&apos; &amp;&amp; this.getPopup().hide();\n\n        }\n\n    },\n...</code></pre><p>Подробно <a href=\"#mods.callbacks\">о декларации обработки модификаторов</a> рассказано в пункте про создание собственного блока.</p><pre><code class=\"xml\">&lt;a name=&quot;block.getting&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Dostupkdrugimblokam\">Доступ к другим блокам</h2><p>Может возникнуть необходимость управлять другим блоком. Для любых манипуляций с блоком необходимо получить доступ к <tt>js</tt>-объекту этого блока и вызывать его методы.</p><pre><code class=\"xml\">&lt;a name=&quot;blocks.finding&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Dostupkbemjsblokuizdrugogobemjsbloka\">Доступ к bem-js-блоку из другого bem-js-блока.</h3><p>В случае <a href=\"#creation\">реализации собственного кастомного блока на технологии <tt>bem-js</tt></a>, блоку соответствует <tt>js</tt>-объект. Он наследует общие для всех блоков методы, позволяющие работать с <tt>DOM</tt> документа в терминах <tt>BEM</tt>. Среди этих методов есть методы поиска других блоков относительно текущего (<tt>findBlock*</tt>-методы). Они возвращают <tt>js</tt>-объект искомого блока, что позволяет затем напрямую вызывать его методы.<br/> <b>Не используйте <tt>jQuery</tt>-селекторы для поиска блоков и элементов.</b></p><p>В этом примере вызывается метод <tt>val()</tt> у блока <tt>b-form-checkbox</tt>:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-checkbox-example&apos;, {\n\n    onSetMod: {\n        &apos;js&apos;: function() {\n            var checkbox = this.findBlockInside({ blockName : &apos;b-form-checkbox&apos;, modName : &apos;type&apos;, modVal : &apos;my-checkbox&apos;});\n            this.domElem.append(&apos;Значение checkbox: &apos; + checkbox.val());\n        }\n    }\n}\n);</code></pre><h3 id=\"Dostupkbemjsblokuneizbemjsbloka\">Доступ к bem-js-блоку не из bem-js-блока</h3><p>В случае работы не из <tt>bem-js-блока</tt>, методы <tt>findBlock*</tt> недоступны. <tt>js</tt>-объект блока можно получить, используя метод <tt>.bem()</tt> <tt>jQuery</tt> коллекции:</p><pre><code class=\"js\">$(уникальный селектор).bem(&apos;b-link&apos;);</code></pre><p>Этот способ <b>не рекомендован</b>. Лучшим вариантом работы с блоками, реализованными на <tt>i-bem</tt>, является создание собственного компонента на <tt>i-bem</tt>. Подробнее о <a href=\"#creation\">создании собственного bem-js-компонента</a> написано ниже.</p><pre><code class=\"xml\">&lt;a name=&quot;mods&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Rabotasmodifikatoramibloka\">Работа с модификаторами блока</h2><p>Модификатор задаёт блоку определённое состояние. Каждому блоку можно присвоить один или несколько модификаторов (у блока также может не быть модификаторов вообще). У модификатора есть имя и значение.</p><p>Любой перевод блока в другое состояние должен производиться при помощи установки модификатора. Например, для того, чтобы сделать чекбокс выделенным в блоке <tt>b-form-checkbox</tt>, ему нужно установить модификатор <tt>checked</tt> в значение <tt>yes</tt>.<br/> На странице документации каждого блока есть список его элементов и модификаторов. Из этого списка можно однозначно определять, какие состояния блока доступны для использования.</p><p>Модификаторы нельзя устанавливать, напрямую меняя <tt>CSS</tt> класс на соответствующей <tt>DOM</tt>-ноде. Для корректной работы <tt>js</tt> все манипуляции с модификаторами должны производиться при помощи метода-хелпера <tt>setMod()</tt>. Также существуют методы <tt>hasMod()</tt>, <tt>getMod</tt>/<tt>getMods()</tt>, <tt>toggleMod()</tt> и <tt>delMod()</tt>. Сигнатуры этих методов доступны в <a href=\"/blocks/i-bem/i-bem.jsdoc.wiki\">референсе по BEM</a>.</p><pre><code class=\"xml\">&lt;a name=&quot;customization&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Izmeneniepovedeniyasushhestvuyushhixblokov\">Изменение поведения существующих блоков</h2><p>Используя <tt>bem-js</tt>, можно переопределять и доопределять методы блока и функций реакции на изменения модификаторов. Это делается аналогично кастомизации блоков на <tt>CSS</tt> или <tt>BEMHTML</tt>.</p><h3 id=\"Pereopredeleniepovedeniya\">Переопределение поведения</h3><p>Например, на сервисе существует необходимость модифицировать все блоки <tt>b-dropdowna</tt> так, чтобы они не закрывались по второму клику на псевдо-ссылку. В этом случае на уровне переопределения сервиса нужно сделать файл <tt>blocks/b-dropdowna/b-dropdowna.js</tt>, кастомизирующий поведение блока из библиотеки:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-dropdowna&apos;, {\n\n    onSetMod : {\n\n        &apos;js&apos; : function() {\n\n            this._getSwitcher().on(&apos;click&apos;, this._on, this);\n\n        }\n    },\n    _on : function() {\n        this.getPopup().show(this.elem(&apos;switcher&apos;));\n    }\n});</code></pre><h3 id=\"Rasshireniepovedeniya\">Расширение поведения</h3><p>В предыдущем примере код кастомизации полностью переопределяет поведение блока. Технология <tt>bem-js</tt> позволяет также реализовывать «доопределение» блока. Для этого в методах кастомизирующего кода можно вызывать <tt>this._<span>_</span>base.apply()</tt>, передавая в качестве аргументов <tt>this</tt> и <tt>arguments</tt>. Вызов такого метода аналогичен использованию <tt>&lt;xsl:apply-imports/&gt;</tt>.</p><p>Например, можно доопределить реакцию на клик всех блоков <tt>b-link</tt> на проекте, так, чтобы после первого клика на псевдо-ссылку она приобретала красный цвет.</p><p>Содержание файла <tt>blocks/b-link/_pseudo/b-link_pseudo_yes.js</tt></p><pre><code class=\"js\">BEM.DOM.decl({&apos;name&apos;: &apos;b-link&apos;, &apos;modName&apos;: &apos;pseudo&apos;, &apos;modVal&apos;: &apos;yes&apos;}, {\n    _onClick : function() {\n         this\n            .__base.apply(this, arguments) // выполнить метод _onClick основного b-link\n            .setMod(&apos;status&apos;, &apos;clicked&apos;);\n    }\n});</code></pre><p>Содержание файла <tt>blocks/b-link/_status/b-link_status_clicked.css</tt></p><pre><code class=\"xml\">.b-link_status_clicked\n{\n    color: red;\n}</code></pre><h3 id=\"Kastomizaciyasispolyzovaniemmodifikatorov\">Кастомизация с использованием модификаторов</h3><p>Предыдущие примеры кастомизации изменяют поведение <i>всех</i> определенных блоков на странице. Но очень часто возникает задача кастомизации конкретного блока без влияния на поведение всех таких блоков. Согласно концепции <tt>BEM</tt>, если блок чем-то отличается от других похожих, это выражается модификатором. Так что нужно реализовывать поведение для блока с таким модификатором.</p><p>Возвращаясь к примеру про псевдоссылку, приобретающую красный цвет после первого клика, сделаем модификацию <tt>reaction_odd</tt>. Псевдоссылка с таким модификатором приобретает красный цвет после каждого нечётного клика, а после каждого чётного возвращается к исходному цвету .</p><p>Содержание файла <tt>blocks/b-link/_reaction/b-link_reaction_odd.js</tt>:</p><pre><code class=\"js\">BEM.DOM.decl({name : &apos;b-link&apos;, modName : &apos;reaction&apos;, &apos;modVal&apos; : &apos;odd&apos;}, {\n    _onClick : function() {\n         this\n            .__base.apply(this, arguments) // выполнить метод _onClick основного b-link\n            .toggleMod(&apos;status&apos;, &apos;clicked&apos;);\n    }\n});</code></pre><pre><code class=\"xml\">&lt;a name=&quot;creation&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Sozdaniejskomponentadlyasobstvennogoblokailisobstvennojmodifikacii\">Создание js-компонента для собственного блока или собственной модификации</h2><p>Рекомендованным способом работы с <tt>bem-js-блоками</tt> является создание собственных <tt>bem-js-блоков</tt> (чаще всего — контейнеров), реагирующих на события других блоков страницы. Собственные <tt>bem-js-блоки</tt> могут вызывать методы других блоков (если нужно) и реализовывать свой функционал.<br/> <tt>js-код</tt> блока принято размещать в папке блока в файле с именем, соответствующим имени блока, и расширением <tt>.js</tt>. Если <tt>js-реализация</tt> относится не к блоку, а лишь к одной из его модификаций, можно разместить код в <tt>js-файле</tt>, соответствующем данному модификатору.</p><pre><code class=\"xml\">&lt;a name=&quot;dom.decl&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Deklaraciyabloka\">Декларация блока</h3><p>Создание <tt>js-компонента</tt> блока сводится к его декларации с помощью специальных хелперов. Существуют два хелпера для декларации блоков: один для блоков, которые имеют <tt>DOM</tt>-представление, второй — для блоков, не имеющих <tt>DOM</tt> представления (например <tt>i-request</tt>, <tt>i-update-session</tt>).</p><p>В первом случае блоки декларируются с помощью <tt>BEM.DOM.decl</tt>, во втором — с помощью <tt>BEM.decl</tt>.</p><p>Хелпер декларации блока принимает 3 параметра:</p><ol><li>Матчащий параметр<br/>\n    Первым параметром может быть либо строка с именем\nблока, либо хеш. Хеш кроме имени блока содержит дополнительную информацию о том, к какому\nтипу блоков применять компонент.</li><li>Методы и свойства экземляра блока<br/>\n    Методы и свойства, предметной областью которых является конкретный инстанс блока\n    на странице. Это как <a href=\"#mods.callbacks\">функции обработки модификаторов</a>,\n    так и <a href=\"#methods\">кастомные методы блока</a>.</li><li>Статические методы и свойства<br/>\n    Методы и свойства, не относящиеся к конкретному инстансу блока. <a href=\"#static.methods\">Подробнее</a></li></ol><p>Например:</p><pre><code class=\"js\">BEM.DOM.decl(\n    &apos;b-link&apos;, // имя блока\n    {\n        // методы и свойства экземпляра блока\n    },\n    {\n        // статические методы и свойства блока\n    });</code></pre><p>и</p><pre><code class=\"js\">BEM.decl(&apos;i-request&apos;, {\n    {\n        // методы и свойства экземпляра блока\n    },\n    {\n        // статические методы и свойства блока\n});</code></pre><p>Вместо имени блока может быть указано более сложное описание, например, информация о предке:</p><pre><code class=\"js\">BEM.decl({ name : &apos;b-dataprovider&apos;, baseBlock : &apos;i-request&apos; }, {\n\n    get : function() {\n        this.__base(); // вызов одноименного метода из i-request\n        doSomething();\n    }\n\n});</code></pre><p>Тут указано, что блок <tt>b-dataprovider</tt> наследуется от блока <tt>i-request</tt> и переопределяет его метод <tt>get</tt>.</p><p>В первом параметре (хеше) декларации может быть указано не только то, к какому блоку применить компонент, но и уточнён модификатор и/или его значение:</p><pre><code class=\"js\">BEM.decl({ name : &apos;b-popup&apos;, modName : &apos;type&apos;, modVal : &apos;inplace&apos; }, {\n\n    show : function() {\n        doSomething();\n    }\n\n});</code></pre><p>Все методы, описанные в такой декларации, будут вызываться для таких блоков <tt>b-popup</tt>, которые в данный момент имеют модификатор <tt>type</tt>, установленный в <tt>inplace</tt>.</p><pre><code class=\"xml\">&lt;a name=&quot;mods.callbacks&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Reakciyanaizmeneniemodifikatorov\">Реакция на изменение модификаторов</h3><p>Согласно концепции <tt>BEM</tt> состояния блоков и его элементов определяются модификаторами. Блок может сам назначать себе или своему элементу модификатор, или получать это назначение из другого блока.<br/> Во время того, как блок или элемент получил определённый модификатор, может возникнуть необходимость отреагировать на установку (или снятие) модификатора.</p><p>Для этого в декларации в части описании методов и свойств экземпляра блока зарезервировано два специальных свойства: <tt>onSetMod</tt> и <tt>onElemSetMod</tt>, где описываются <tt>callback</tt>-функции, вызываемые при установке модификаторов для блока или его элементов.</p><p>Описание <tt>callback</tt>-функций для <tt>onSetMod</tt> представляет собой хеш вида:</p><pre><code class=\"js\">{\n    &apos;модификатор1&apos; : {\n\n        &apos;значение1-модификатора1&apos; : function() { ... }, // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в значение &apos;значение1&apos;\n\n        ...\n\n        &apos;значениеN-модификатора1&apos; : function() { ... }, // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в значение &apos;значениеN&apos;\n\n        &apos;*&apos; : function() { ... } // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в любое из значений\n\n    },\n\n    &apos;модификатор2&apos; : function() {}, // функция, которая будет вызвана при установке модификатора &apos;модификатор2&apos; в любое из значений\n\n    ...\n\n    &apos;модификаторN&apos; : {\n\n        &apos;значение1-модификатораN&apos; : function() { ... },\n\n        ...\n\n        &apos;значениеN-модификатораN&apos; : function() { ... }\n\n    }\n\n}</code></pre><p>Описание <tt>callback</tt>-функций для <tt>onElemSetMod</tt> аналогично, за исключением того, что на верхнем уровне указывается имя элемента:</p><pre><code class=\"js\">{\n\n    &apos;элемент1&apos; : {\n\n        &apos;модификатор1&apos; : {\n\n            &apos;значение1-модификатора1&apos; : function() { ... }, // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в значение &apos;значение1&apos; для элемента &apos;элемент1&apos;\n\n            ...\n\n            &apos;значениеN-модификатора1&apos; : function() { ... }, // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в значение &apos;значениеN&apos; для элемента &apos;элемент1&apos;\n\n            &apos;*&apos; : function() { ... } // функция, которая будет вызвана при установке модификатора &apos;модификатор1&apos; в любое из значений  для элемента &apos;элемент1&apos;\n\n        }\n\n    },\n\n    ...\n\n    &apos;элементN&apos; : function() { }, // функция, которая будет вызвана при установке любого модификатора в любое из значений для элемента &apos;элементN&apos;\n\n}</code></pre><p>Параметры <tt>callback</tt>-функций:</p><ul><li><tt>{jQuery} [elem]</tt> — элемент блока (если установка модификатора была для элемента)</li><li><tt>{String} modName</tt> — имя модификатора</li><li><tt>{String} modVal</tt> — устанавливаемое значение модификатора</li><li><tt>{String} curModVal</tt> — текущее значение модификатора</li></ul><p>Порядок вызовов <tt>callback</tt>-функций при установке модификатора <tt>modVal</tt> в значение <tt>modName</tt>:</p><ul><li>вызывается <tt>callback</tt>-функция на установку любого модификатора в любое значение (если она существует)</li><li>вызывается <tt>callback</tt>-функция на установку модификатора <tt>modVal</tt> в любое значение (если она существует)</li><li>вызывается <tt>callback</tt>-функция на установку модификатора <tt>modVal</tt> в значение <tt>modName</tt> (если она существует)</li></ul><p>Если хоть один из вызовов этих функций вернет <tt>false</tt>, то установки модификатора не произойдет.</p><p>Например:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-menu&apos;, {\n\n    onElemSetMod : {\n\n        &apos;trigger&apos; : {\n\n            &apos;state&apos; : function(elem, modName, modVal) {\n\n                // тут описаны действия, которые нужно совершить при установке элементу &apos;trigger&apos; модификатора с именем &apos;state&apos; в любое значение\n                this\n                    .toggleMod(\n                        this.findElem(elem.closest(this.buildSelector(&apos;layout-cell&apos;)), &apos;item-content&apos;).eq(0),\n                        &apos;visibility&apos;,\n                        &apos;visible&apos;,\n                        modVal == &apos;opened&apos;)\n                    .trigger(&apos;trigger&apos;, {\n                        domElem : elem,\n                        state : modVal\n                    });\n\n            }\n\n        }\n\n    },\n\n    onTriggerClick : function(e) { // при клике на триггер\n\n        e.preventDefault();\n        this.toggleMod(e.data.domElem, &apos;state&apos;, &apos;opened&apos;); // устанавливаем или снимаем значение &apos;opened&apos; у модификатор &apos;state&apos; для элемента &apos;trigger&apos;\n\n    }\n\n}, {\n\n    live : function() {\n\n        this\n            .liveBindTo(&apos;trigger&apos;, &apos;click&apos;, function(e) { // слушаем live-клик на элементах &apos;trigger&apos;\n                this.onTriggerClick(e);\n            });\n\n    }\n\n});</code></pre><p><tt>В данном примере при вызове </tt>toggleMod<tt> внутри </tt>onTriggerClick<tt> будет вызвана соответствущая ей </tt>callback<tt>-функция из </tt>onElemSetMod<tt>.</tt></p><p><tt>Callback</tt> функции, реагирующие на изменение модификатора, выполняются до установки модификатора. Если существует необходимость выполнить часть кода после установки модификатора, нужно воспользоваться методом <tt>.afterCurrentEvent()</tt>.</p><p>Пример ниже демонстрирует, что квадратик становится больше только после установки модификатора:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-square2&apos;, {\n\n    onSetMod : {\n\n        &apos;js&apos; : function() {\n\n            var square = this;\n\n            this.bindTo(&apos;click&apos;, function(){\n                square.setMod(&apos;size&apos;, &apos;big&apos;);\n            });\n\n        },\n        &apos;size&apos; : function() {\n            this.domElem.append(&apos;размер1: &apos;, this.domElem.width() + &apos;&lt;br/&gt;&apos;); // напишет 200\n\n            this.afterCurrentEvent(function(){\n                this.domElem.append(&apos;размер2: &apos;, this.domElem.width()); // напишет 400\n            });\n        }\n    }\n\n});</code></pre><h4 id=\"Nachalorabotysblokommodifikatorjs\">Начало работы с блоком (модификатор <tt>js</tt>)</h4><p>Блок начинает свою работу с действий, описанных в <tt>callback</tt>-функции на установку его модификатора <tt>js</tt> в значение <tt>inited</tt>:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-form-input&apos;, {\n\n    onSetMod : {\n\n        &apos;js&apos; : {\n\n            &apos;inited&apos; : function() {\n\n                this\n                    .bindTo(this.elem(&apos;input&apos;), {\n                        &apos;focus&apos; : this.onFocus,\n                        &apos;blur&apos;  : this.onBlur\n                    })\n\n            }\n\n        }\n\n    }\n\n});</code></pre><p>Этот модификатор присваивается блоку в момент инициализации. Поскольку код обработчика модификатора выполняется до установки модификатора, эта функция-обработчик и является первой выполняющейся функцией блока.</p><p>Модификаторы могут без ограничения присваиваться как блокам, имеющим <tt>DOM</tt> представление, так и блокам без него. Так что, у блоков без <tt>DOM</tt> представления первый исполняемый метод также задаётся как <tt>callback</tt> модификатора <tt>js_inited</tt>.</p><p>В коде блоков можно встретить <tt>callback</tt> функцию не на значение <tt>inited</tt> модификатора <tt>js</tt>, а на установку модификатора <tt>js</tt> в любое значение:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-form-input&apos;, {\n\n    onSetMod : {\n\n    &apos;js&apos; : function() { // конструктор b-form-input\n        ...\n        }\n\n    }\n});</code></pre><p>Это краткая декларация, возможная из-за того, что до инициализации блок не имеет модификатора <tt>js</tt>, а в момент инциализации приобретает значение <tt>inited</tt>. Другие значения модификатора сейчас не предусмотрены.</p><pre><code class=\"xml\">&lt;a name=&quot;methods&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Metodybloka\">Методы блока</h3><p>Кроме реакции на модификаторы, в блоке могут быть определены его собственные методы. Определённые в блоке методы могут быть вызваны им самим или другими блоками.</p><p>Например, так выглядит метод <tt>.toggle()</tt> блока <a href=\"/blocks/b-form-checkbox/b-form/checkbox.wiki\">b-form-checkbox</a>:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-form-checkbox&apos;, {\n    ...\n    toggle : function() {\n        this.toggleMod(&apos;checked&apos;, &apos;yes&apos;, &apos;&apos;);\n    }\n    ...\n});</code></pre><h4 id=\"Pereopredelenieidoopredeleniemetodovbloka\">Переопределение и доопределение методов блока</h4><p>Любой метод блока (в том числе и методы обработки модификаторов) может быть переопределён. Об этом написано выше в пункте <a href=\"#customization\">Изменение поведения существующих блоков</a>.</p><pre><code class=\"xml\">&lt;a name=&quot;static.methods&quot;&gt;&lt;/a&gt;</code></pre><h3 id=\"Staticheskiemetodybloka\">Статические методы блока</h3><p>Третий параметр, передаваемый в функцию декларации блока, – это хеш статических методов блока.</p><p>Примером блока, использующего статические методы, может служить <a href=\"/blocks/b-flash/b-flash.wiki\">/blocks/b-flash/b-flash.wiki</a>.</p><p>Для каждого блока может быть определен статический метод <tt>live</tt>, позвляющий реализовать <a href=\"#liveinit\">инициализацию по требованию (liveinit<span>)</span></a>.</p><pre><code class=\"xml\">&lt;a name=&quot;init&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Inicializaciya\">Инициализация</h2><p>Для того, чтобы у блока появился <tt>js-объект</tt>, описанный в декларации, происходит процесс инициализации блока. Инициализация блоков производится функцией <tt>BEM.DOM.init()</tt> на фрагменте <tt>DOM</tt> дерева. Если элемент <tt>i-bem_<span>_</span>dom</tt> задекларирован с модификатором <tt>init_auto</tt> (подключается файл <tt>i-bem_<span>_</span>dom_init_auto.js</tt>), то инициализация блоков происходит на всём документе по событию domReady. Также функцию <tt>BEM.DOM.init</tt> можно вызвать самостоятельно. Например, это делается для инициализации блоков после динамического изменения страницы, если появились новые блоки с js-представлением.</p><h3 id=\"InicializaciyablokovsDOMpredstavleniem\">Инициализация блоков с DOM-представлением</h3><p>Для инициализации блоков, представленных в <tt>DOM</tt>, на фрагменте дерева ищутся все блоки, помеченные классом <tt>i-bem</tt>, у них считываются параметры из атрибута <tt>onclick</tt>, и создаётся <tt>js-объект</tt> такого блока.</p><pre><code class=\"xml\">&lt;a name=&quot;onclick.params&quot;&gt;&lt;/a&gt;</code></pre><h4 id=\"Formatparametrovblokavonclick\">Формат параметров блока в onclick</h4><p>Параметры для блока записываются в виде возвращаемого атрибутом <tt>onclick</tt> хеша. Этот хеш должен содержать элементы с названиями, соответствующими названиям блоков, к которым они относятся. Значением каждого элемента должен быть вложенный хеш c параметрами.<br/> Такая запись позволяет задавать параметры для нескольких блоков в том случае, если они представлены в <tt>HTML</tt> одной и той же <tt>DOM-нодой</tt>.</p><p>Вот как выглядит <tt>DOM-нода</tt> произвольного блока, реализованного на <tt>bem-js</tt>:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {}\n}&quot;&gt;\n..\n&lt;/div&gt;</code></pre><p>В случае, если блоку необходим параметр, он указывается на том же уровне, что и элемент <tt>name</tt>. Формат параметра может быть любым: строка, число, массив, хеш, функция. Количество параметров также не ограничено.</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;points&apos; : [\n            [1.67, 2.5],\n            [-30, 2.07],\n            [290, -0.39]\n        ],\n        &apos;title&apos; : &apos;Какое-то название&apos;,\n    }\n}&quot;&gt;\n..\n&lt;/div&gt;</code></pre><p>Для нескольких блоков на одной <tt>DOM-ноде</tt> <tt>HTML</tt> представление будет аналогично следующему:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block b-my-second-block i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;title&apos; : &apos;Какое-то название&apos;, // Этот блок имеет опцинальный параметр title\n    },\n    &apos;b-my-second-block&apos; : {\n        // У этого блока нет никаких опциональных параметров\n    }\n}&quot;&gt;\n..\n&lt;/div&gt;</code></pre><h4 id=\"DOMpredstavlenieinicializirovannogobloka\">DOM-представление инициализированного блока</h4><p>После инициализации <tt>DOM</tt> представление блока изменяется: у блока появляется дополнительный модификатор <tt>js_inited</tt>.<br/> Если <tt>DOM-ноде</tt> соответствуют несколько блоков, то появление модификатора у одного из них свидетельствует об инициализации только этого блока и не влияет на инициализацию другого (других).</p><p>DOM-представление блока после инициализации:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block b-my-block_js_inited i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;name&apos; : &apos;b-my-block&apos;\n    }\n}&quot;&gt;\n..\n&lt;/div&gt;</code></pre><p><tt>DOM</tt> представление двух блоков после инициализации:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block b-my-second-block b-my-block_js_inited b-my-second-block_js_inited i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;name&apos; : &apos;b-my-block&apos;,\n    },\n    &apos;b-my-second-block&apos; : {\n        &apos;name&apos; : &apos;b-my-second-block&apos;\n    }\n}&quot;&gt;</code></pre><p><tt>DOM</tt> представление двух блоков, но инициализован только один из них:</p><pre><code class=\"xml\">&lt;div class=&quot;b-my-block b-my-second-block b-my-second-block_js_inited i-bem&quot; onclick=&quot;return {\n    &apos;b-my-block&apos; : {\n        &apos;name&apos; : &apos;b-my-block&apos;,\n    },\n    &apos;b-my-second-block&apos; : {\n        &apos;name&apos; : &apos;b-my-second-block&apos;\n    }\n}&quot;&gt;</code></pre><h3 id=\"InicializaciyablokovbezDOMpredstavleniya\">Инициализация блоков без DOM-представления</h3><p>В том случае, если у блока нет <tt>DOM</tt> представления, в процессе инициализации просто возникает <tt>js-объект</tt>, соответствующий этому блоку. Дальнейшее зависит от кода блока.</p><pre><code class=\"xml\">&lt;a name=&quot;liveinit&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"InicializaciyapotrebovaniyuliveInit\">Инициализация по требованию (liveInit)</h2><p>Многим блокам (например, <tt>b-link</tt>, <tt>b-dropdown</tt>, <tt>b-smart-help</tt>) нет необходимости делать сразу же полную инициализацию. Инициализация может происходить только на ключевые события для этого блока, например, клик по элементу этого блока. Рассмотрим на примере блока <tt>b-link</tt>:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-link&apos;, {\n\n    _onClick : function(e) {\n\n        e.preventDefault();\n        this.trigger(&apos;click&apos;);\n\n    }\n\n}, {\n\n    live : function() {\n\n        this.liveBindTo(&apos;click&apos;, function(e) {\n            this._onClick(e);\n        });\n\n    }\n\n});</code></pre><p>В статических свойствах блока предусмотрено специальное свойство <tt>live</tt> (<tt>Function</tt>|<tt>Boolean</tt>), отвечающее за инициализацию по требованию и за подписку на <tt>live</tt> события на <tt>DOM</tt> элементах внутри такого блока.</p><p>Если <tt>live</tt> определено как <tt>Function</tt>, то эта функция будет выполнена один раз — при попытке инициализации первого такого блока.</p><p>Существует несколько хелперов для <tt>live</tt> событий:</p><ul><li><tt>liveInitOnEvent</tt> — хелпер для инициализации блока по событию на блоке или его внутреннем элементе</li><li><tt>liveBindTo</tt> — подписка на события на блоке или его внутреннем элементе</li></ul><p>Оба этих хелпера инициализируют блок при возникновении первого такого события. Различие же заключается в том, что <tt>callback</tt> функция в <tt>liveInitOnEvent</tt> вызывается только один раз после инициализации блока, а в <tt>liveBindTo</tt> она будет вызываться при каждом событии. Контекстом такой <tt>callback</tt> функции является тот блок, в котором произошло событие.</p><p>В вышеприведенном примере блок <tt>b-link</tt> будет инициализирован при первом клике на себе и будет реагировать на каждый последующий клик.</p><p>Если же <tt>live</tt> определено как <tt>Boolean</tt> и установлено в <tt>true</tt>, то такой блок будет инициализирован только при попытке доступа к нему, например, из методов поиска <tt>findBlockInside</tt>/<tt>findBlockOutside</tt>.</p><p>&lt;a name=&quot;finding&quot;&gt;&lt;/a&gt;</p><h2 id=\"Metodydostupakblokamielementam\">Методы доступа к блокам и элементам</h2><p>Работая с блоками, реализованными на <tt>bem-js</tt>, необходимо использовать встроенные методы для поиска блоков и их элементов. Эти методы доступны в каждом блоке и умеют возвращать другой блок или <tt>jQuery</tt> коллекцию (в случае поиска элементов).</p><h3 id=\"Metodypoiskablokov\">Методы поиска блоков</h3><p>Поиск блоков осуществляется относительно текущего блока при помощи методов <tt>findBlock*</tt>.</p><p>Реализуем блок <tt>b-my-block</tt>, который находит первый из блоков <tt>b-form-checkbox</tt> внутри себя и вызывает у него метод <tt>toggle()</tt> для переключения чекбокса.</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-my-block&apos;, {\n    onSetMod : {\n        &apos;js&apos; : function() {\n            var checkbox = this.findBlockInside(&apos;b-form-checkbox&apos;);\n            checkbox.toggle();\n        }\n    }\n});</code></pre><p>Поиск блока или блоков может быть выполнен одним из следующих методов:</p><ul><li><tt>findBlockInside/findBlocksInside</tt> — поиск блока/блоков внутри <tt>DOM</tt> элементов текущего блока или его элементов</li><li><tt>findBlockOn/findBlocksOn</tt> — поиск блока/блоков на <tt>DOM</tt> элементах текущего блока или его элементов</li><li><tt>findBlockOutside/findBlocksOutside</tt> — поиск блока/блоков снаружи <tt>DOM</tt> элементов текущего блока или его элементов</li></ul><p>Список методов поиска блоков и их сигнатуры можно посмотреть в <a href=\"/blocks/i-bem/dom/i-bem__dom.jsdoc.wiki\">референсе по BEM.DOM</a>.</p><p>Примерами блоков, использующих методы поиска других блоков, могут быть: <a href=\"/blocks/b-smart-help/b-smart-help.wiki\">b-smart-help</a>, <a href=\"blocks/b-screenshot/b-screenshot.wiki\">b-screenshot</a> и <a href=\"blocks/b-dropdowna/b-dropdowna.wiki\">b-dropdowna</a>.</p><h3 id=\"Metodydostupakelementam\">Методы доступа к элементам</h3><p>Для поиска элементов внутри блока используется метод <tt>elem</tt>. Результат этого метода кэшируется.</p><p>Например:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-form-input&apos;, {\n\n    doSomething : function() {\n\n        this.elem(&apos;hint&apos;); // тут будут найдены элементы b-form-input__hint\n\n    }\n\n});</code></pre><p>Можно искать элементы внутри блока с учетом модификатора:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-menu&apos;, {\n\n    doSomething : function() {\n\n        this.elem(&apos;item&apos;, &apos;state&apos;, &apos;current&apos;); // тут будут найдены элементы b-menu__item_state_current\n\n    }\n\n});</code></pre><p>Некэширующий метод поиска элементов называется <tt>findElem()</tt>.</p><p>Полный список методов для поиска элементов и их сигнатуры можно найти в <a href=\"/blocks/i-bem/dom/i-bem__dom.jsdoc.wiki\">референсе по BEM.DOM</a>.</p><pre><code class=\"xml\">&lt;a name=&quot;events&quot;&gt;&lt;/a&gt;</code></pre><h2 id=\"Rabotassobytiyami\">Работа с событиями</h2><h3 id=\"Sobytiyanablokax\">События на блоках</h3><p>Блоки предоставляют интерфейс для подписки/отписки/нотификации своих собственных (не <tt>DOM</tt>) событий:</p><ul><li><tt>on(e, [data], fn, [ctx])</tt> — подписка на событие <tt>e</tt></li><li><tt>onFirst(e, [data], fn, [ctx])</tt> — подписка только на первое событие <tt>e</tt></li><li><tt>un([e], [fn], [ctx])</tt> — отписка от конкретного события <tt>e</tt> или всех событий</li><li><tt>trigger(e, [data])</tt> — нотификация о событии  <tt>e</tt></li></ul><h3 id=\"livesobytiyanablokax\">live-события на блоках</h3><p>В <tt>bem-js</tt> есть события, реализованные по паттерну делегированных событий, они называются <tt>live</tt> события.</p><p>Следующий пример демонстрирует работу с live-событием <tt>click</tt> для блоков <tt>b-link</tt>, содержащихся в определённой <tt>DOM-ноде</tt>. В данном случае контейнер и блок совпадают:</p><pre><code class=\"js\">BEM.DOM.decl(&apos;b-link-example&apos;, {\n\n    onSetMod: {\n        &apos;js&apos;: function() {\n            var link = this.findBlockInside(&apos;b-link&apos;);\n            BEM.blocks[&apos;b-link&apos;]\n                .liveCtxBind(link.domElem,\n                            &apos;click&apos;,\n                            function(){\n                                link.domElem.text(&apos;Кликнутая ссылка&apos;);\n                            },\n                            this);\n        }\n    }\n},\n{\n    live: function() {\n        this.liveInitOnBlockInsideInit(&apos;b-link&apos;);\n    }\n}\n);</code></pre><p>Метод <tt>.liveCtxBind()</tt> реализует возможность реакции на bem-события блоков, вложенных в какой-либо <tt>DOM</tt> элемент. <b>Это не DOM-события</b><br/> Использование <tt>live</tt> событий позволяет избежать лишнего поиска блоков в <tt>DOM</tt> дереве. Кроме того, при такой привязке к событию реакция на событие блока из контейнера будет происходить даже в том случае, если на момент привязки блока в контейнере не было, а он появился позже в результате динамического изменения документа.</p><p>Кроме возможности привязки к <tt>live</tt> событию блока, здесь также продемонстрированы <a href=\"#blocks.finding\">поиск блока относительно текущего</a> и <a href=\"#liveinit\">live-инициалиация</a>.<br/></p></div>"},"en":{"name":"i-bem","examples":[],"description":""}}},{"name":"identify","jsdoc":null,"data":{"ru":{"name":"identify","examples":[],"description":""},"en":{"name":"identify","examples":[],"description":""}}},{"name":"idle","jsdoc":null,"data":{"ru":{"name":"idle","examples":[],"description":""},"en":{"name":"idle","examples":[],"description":""}}},{"name":"inherit","jsdoc":null,"data":{"ru":{"name":"inherit","examples":[],"description":""},"en":{"name":"inherit","examples":[],"description":""}}},{"name":"jquery","jsdoc":null,"data":{"ru":{"name":"jquery","examples":[],"description":"<div class=\"shmakowiki\"><p>Используется для поставки на страницу нужных плагинов через зависимости блоков от элементов блока <tt>i-jquery</tt>.</p></div>"},"en":{"name":"jquery","examples":[],"description":""}}},{"name":"keyboard","jsdoc":null,"data":{"ru":{"name":"keyboard","examples":[],"description":""},"en":{"name":"keyboard","examples":[],"description":""}}},{"name":"loader","jsdoc":null,"data":{"ru":{"name":"loader","examples":[],"description":""},"en":{"name":"loader","examples":[],"description":""}}},{"name":"next-tick","jsdoc":null,"data":{"ru":{"name":"next-tick","examples":[],"description":""},"en":{"name":"next-tick","examples":[],"description":""}}},{"name":"objects","jsdoc":null,"data":{"ru":{"name":"objects","examples":[],"description":""},"en":{"name":"objects","examples":[],"description":""}}},{"name":"page","jsdoc":null,"data":{"ru":{"name":"page","examples":[{"name":"10-simple","path":"touch-phone.examples/page/10-simple","notation":{"block":"10-simple"}},{"name":"20-doctype","path":"touch-phone.examples/page/20-doctype","notation":{"block":"20-doctype"}}],"description":"<div class=\"shmakowiki\"><p>﻿Блок <tt>page</tt> создаёт теги верхнего уровня страницы:</p><ul><li><tt>&lt;html&gt;</tt></li><li><tt>&lt;head&gt;</tt></li><li><tt>&lt;body&gt;</tt></li></ul><p>Именно он отвечает за то, какие подключить <tt>CSS</tt> и <tt>JS</tt> файлы к странице, выставление <tt>meta</tt> тегов, заголовка и так далее.</p><p>Декларация блока в <tt>BEMJSON</tt> начинается объявлением блока и указанием свойства <tt>title</tt>, которое превращается в тег <tt>&lt;title&gt;</tt> в <tt>HTML</tt>.</p><pre><code class=\"js\">({\nblock: &apos;page&apos;,\ntitle: &apos;Page with link&apos;,\n...\n})</code></pre><p>Указание свойства <tt>head</tt> дополняет элемент <tt>head</tt>, соответствующий <tt>HTML</tt> тегу <tt>&lt;head&gt;</tt>, элементами для подключения <tt>CSS</tt> и <tt>JS</tt> файлов, а также указания <tt>meta</tt>:</p><pre><code class=\"js\">({\n...\nhead: [\n    { elem: &apos;css&apos;, url: &apos;example.css&apos;, ie: false },\n    { elem: &apos;css&apos;, url: &apos;example.ie.css&apos;, ie: &apos;lt IE 8&apos; },\n    { elem: &apos;js&apos;, url: &apos;example.js&apos; },\n    { elem: &apos;meta&apos;, attrs: { name: &apos;keywords&apos;, content: &apos;js, css, html&apos; } },\n    { elem: &apos;meta&apos;, attrs: { name: &apos;description&apos;, content: &apos;Yet another webdev blog&apos; } }\n],\n...\n})</code></pre><p>Элемент <tt>css</tt> превращается в <tt>HTML</tt> в тег <tt>&lt;link&gt;</tt>, подключающий как <tt>CSS</tt> стиль тот файл, что указан в свойстве <tt>url</tt> этого элемента. Также у такого элемента может быть свойство <tt>ie</tt>. Если это свойство <tt>false</tt>, то будут использоваться такие <tt>conditional comments</tt>, которые предотвратят использование этих стилей в <tt>IE</tt>. При строчном значении этого свойства тег <tt>&lt;link&gt;</tt> , будет обёрнут в соответствующий <tt>conditional comment</tt>, и этот стиль будет грузиться и использоваться указанных браузерах.<br/> Также есть возможность указывать свойство <tt>content</tt> для содержания тега <tt>&lt;style&gt;</tt>:</p><pre><code class=\"js\">({\n...\nhead: [\n    {\n        elem: &apos;css&apos;,\n        content: &apos;.b-blah { color: #f00&apos; }\n    },\n    ...\n],\n...\n})</code></pre><p>Элемент <tt>js</tt> действует аналогично, подключая к странице <tt>JS</tt> файлы при помощи тега <tt>&lt;script&gt;</tt>.</p><p>Свойство <tt>head</tt> не описывает содержание <tt>HTML</tt>-тега <tt>&lt;head&gt;</tt> полностью, а лишь дополняет дефолтное, которое блок сам создаёт в своём <tt>BEMHTML</tt> шаблоне.</p><h3 id=\"Tegmetasukazaniemkodirovki\">Тег &lt;meta&gt; с указанием кодировки</h3><p><tt>BEMHTML</tt>:</p><pre><code class=\"js\">content: [\n{\n    tag: &apos;meta&apos;,\n    attrs: { &apos;http-equiv&apos;: &apos;content-type&apos;, content: &apos;text/html; charset=utf-8&apos; }\n},\n...</code></pre><h3 id=\"TegmetadlyaispolyzovaniyaIE9ivyshevmaksimalynomcompatibilityrezhime\">Тег &lt;meta&gt; для использования <tt>IE9</tt> (и выше) в максимальном <tt>compatibility</tt> режиме</h3><p><tt>BEMHTML</tt>:</p><pre><code class=\"js\">content: [\n...\n{\n    tag: &apos;meta&apos;,\n    attrs: { &apos;http-equiv&apos;: &apos;X-UA-Compatible&apos;, content: &apos;IE=EmulateIE7, IE=edge&apos; }\n},\n...</code></pre><h3 id=\"Vystavlenieznacheniyategatitlestranicyizsvojstva\">Выставление значения тега &lt;title&gt; страницы из свойства</h3><pre><code class=\"js\">content: [\n...\n{\n    tag: &apos;title&apos;,\n    content: this.ctx.title\n},\n...</code></pre><h3 id=\"Vystavleniefavikonki\">Выставление фавиконки</h3><pre><code class=\"js\">content: [\n...\nthis.ctx.favicon ? {\n    elem: &apos;favicon&apos;,\n    url: this.ctx.favicon\n} : &apos;&apos;,\n...</code></pre><h3 id=\"Deklaraciyablokaua\">Декларация блока ua</h3><pre><code class=\"js\">content: [\n...\n{\n    block: &apos;ua&apos;\n},\n...</code></pre><p>Значением свойства <tt>content</tt> блока <tt>page</tt> может быть хеш-описание содержимого (если речь идёт лишь об одном блоке) или массив блоков, описанных хешами:</p><pre><code class=\"js\">({\n...\ncontent: {\n    block: &apos;b-link&apos;,\n    mods: { pseudo: &apos;yes&apos;, togcolor: &apos;yes&apos;, color: &apos;green&apos; },\n    url: &apos;#&apos;,\n    target: &apos;_blank&apos;,\n    title: &apos;Кликни меня&apos;,\n    content: &apos;Псевдоссылка, меняющая цвет по клику&apos;\n}\n})</code></pre><p>На блоки, содержащиеся в <tt>content</tt>, действуют их <tt>BEMHTML</tt> шаблоны.</p><h3 id=\"Otmenaavtomaticheskojinicializaciiblokov\">Отмена автоматической инициализации блоков</h3><pre><code class=\"js\">noDeps: [\n    { block: &apos;i-bem&apos;, elem: &apos;dom&apos;, mods: { init: &apos;auto&apos; } }\n]</code></pre></div>"},"en":{"name":"page","examples":[{"name":"10-simple","path":"touch-phone.examples/page/10-simple","notation":{"block":"10-simple"}},{"name":"20-doctype","path":"touch-phone.examples/page/20-doctype","notation":{"block":"20-doctype"}}],"description":""}}},{"name":"querystring","jsdoc":null,"data":{"ru":{"name":"querystring","examples":[],"description":"<h1 id=\"querystring\">querystring</h1>\n<p>Блок <code>querystring</code> служит для работы с адресной строкой браузера – обработки и формирования запросов.</p>\n<p>Блок реализован в технологии <code>vanilla.js</code> и подходит для использования в серверных и клиентских приложениях.</p>\n<h2 id=\"Публичные-методы-блока\">Публичные методы блока</h2>\n<p>Блок предоставляет следующий набор публичных методов:</p>\n<ul>\n<li><code>parse</code> – служит для формирования объекта на основании параметров запроса адресной строки. Метод принимает на вход строку с параметрами и возвращает сформированный объект. Параметры передаются в виде пар ключ-значение с символом <code>=</code> в качестве разделителя. Пары отделяются символом <code>&amp;</code>. В ходе работы метода, ключи и значения декодируются из формата <code>URI</code>;</li>\n<li><code>stringify</code> – служит для формирования строки запроса с набором параметров на основании собственных свойств объекта. Метод принимает на вход объект и возвращает сформированную строку запроса. Имена свойств отделяются от значений символом <code>=</code>, пары разделяются символом <code>&amp;</code>. </li>\n</ul>\n<h2 id=\"Элементы-блока\">Элементы блока</h2>\n<h3 id=\"__uri\">__uri</h3>\n<p>Элемент предназначен для декодирования строки из формата <code>URI</code>. </p>\n<p>Элемент предоставляет следующий набор публичных методов:</p>\n<ul>\n<li><code>decodeURI</code> – декодирование <code>URI</code>. Заменяет каждую эскейпинговую последовательность в строке <code>URI</code> соответствующим символом. Метод поддерживает тот же набор последовательностей, что и стандартный метод JavaScript <code>encodeURI</code>. Символ <code>#</code> не декодируется.</li>\n<li><code>decodeURIComponent</code> – декодирование компонента <code>URI</code>. Заменяет каждую эскейпинговую последовательность в строке <code>URI</code> соответствующим символом. Метод позволяет декодировать компонент <code>URI</code>, сформированный методом <code>encodeURIComponent</code>. Декодируются последовательности, соответствующие символам <code>&amp;</code>, <code>+</code>, и <code>=</code>.</li>\n</ul>\n<p>Оба метода являются оберткой над соответствующими стандартными методами JavaScript <code>decodeURI</code> и <code>decodeURIComponent</code>. В ходе их работы производится проверка входной строки:</p>\n<ul>\n<li>если передана строка в формате, отличном от <code>UTF8</code>, генерируется ошибка;</li>\n<li>если в строке не были найдены эскейпинговые последовательности методы возвращают ее без изменений.</li>\n</ul>\n"},"en":{"name":"querystring","examples":[],"description":""}}},{"name":"strings","jsdoc":null,"data":{"ru":{"name":"strings","examples":[],"description":""},"en":{"name":"strings","examples":[],"description":""}}},{"name":"tick","jsdoc":null,"data":{"ru":{"name":"tick","examples":[],"description":""},"en":{"name":"tick","examples":[],"description":""}}},{"name":"ua","jsdoc":null,"data":{"ru":{"name":"ua","examples":[],"description":"<div class=\"shmakowiki\"><p>Блок <tt>ua</tt> — служебный, не имеет визуального представления на странице.</p><p>Этот блок используется всегда, когда используется блок <tt>page</tt>, так как вызывается внутри него. Задавать его самостоятельно на странице не нужно.</p><p>В <tt>HTML</tt> блок представлен в виде инлайнового скрипта, в результате работы которого, у тега <tt>&lt;html&gt;</tt> появляются <tt>CSS</tt>-классы, идентифицирующие, включен ли <tt>JS</tt> (<tt>ua_js_no</tt>/<tt>ua_js_yes</tt>) и в каком режиме рендеринга находится браузер (<tt>ua_css_standart</tt>/<tt>ua_css_quirks</tt>).</p><p>Эти классы можно использовать, чтобы при помощи <tt>CSS</tt> задавать блокам разный внешний вид в зависимости от ситуации.</p><p>Если такие классы проекту не нужны, можно переопределить <tt>BEMHTML</tt> шаблон блока <tt>ua</tt> на уровне переопределения проекта:</p><pre><code class=\"js\">block(&apos;ua&apos;).default()()</code></pre></div>\n<div class=\"shmakowiki\"><p>Для тач-платформы блок <tt>ua</tt> добавляет дополнительные <tt>CSS</tt>-классы: - TODO</p></div>"},"en":{"name":"ua","examples":[],"description":""}}},{"name":"vow","jsdoc":null,"data":{"ru":{"name":"vow","examples":[],"description":""},"en":{"name":"vow","examples":[],"description":""}}}]}]}