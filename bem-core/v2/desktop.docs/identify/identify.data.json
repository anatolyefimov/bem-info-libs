{"ru":{"name":"identify","examples":[],"description":"<h1 id=\"identify\"><a href=\"#identify\" class=\"anchor\"></a>identify</h1>\n<p>Блок реализует функцию для создания уникальных идентификаторов, которая позволяет:</p>\n<ul>\n<li>создавать идентификаторы объектов.</li>\n<li>проверять наличие идентификатора у объектов.</li>\n<li>получать уникальную строку-идентификатор.</li>\n</ul>\n<p>Блок <code>inherit</code> реализован в технологии <code>vanila.js</code> и подходит для использования как на клиенте, так и на сервере.</p>\n<p>Функция принимает аргументами:</p>\n<ul>\n<li><code>obj</code> <code>{Object}</code> – идентифицируемый объект.</li>\n<li><code>onlyGet</code> <code>{Boolean}</code> – опциональный флаг для проверки наличия идентификатора у объекта. При значении <code>true</code> функция будет возвращать строку с идентификатором только если объект был заранее идентифицирован. По умолчанию <code>false</code>.</li>\n</ul>\n<p>Функция возвращает строку с идентификатором, присвоенным для объекта. Кроме того, строка сохраняется в свойствах объекта, так что при последующих вызовах всегда будет возвращаться один и тот же идентификатор.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;identify&#39;], function(Identify) {\n    var a = {},\n        b = {},\n        identA = identify(a);\n\n    console.log(identA === identify(a)); // true\n    console.log(identA === identify(b)); // false\n});\n</code></pre>\n<p>Для совместимости с IE функция использует в качестве идентификатора объекта значение свойства <code>uniqueID</code>, если оно доступно.</p>\n<p>При вызове без аргументов, функция будет каждый раз возвращать строку с уникальным идентификатором.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;identify&#39;], function(Identify) {\n    var a = identify(),\n        b = identify();\n\n    console.log(a === b); // false\n});\n</code></pre>\n"},"en":{"name":"identify","examples":[],"description":""}}