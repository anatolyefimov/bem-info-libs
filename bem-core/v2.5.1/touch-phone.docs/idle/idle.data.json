{"ru":{"name":"idle","examples":[],"description":"<h1 id=\"idle-2\"><a href=\"#idle-2\" class=\"anchor\"></a>idle</h1>\n<p>Блок предназначен для генерации события в момент начала простоя окна браузера (когда пользователь работает с другим окном или не совершает действий). Подписавшись на события блока можно приостанавливать выполнение неких операций, например, отображение анимации, при отсутствии пользовательской активности.</p>\n<p>Блок реализован в технологии <code>js</code> и подходит для использования в клиентских приложениях.</p>\n<h2 id=\"События-блока-2\"><a href=\"#События-блока-2\" class=\"anchor\"></a>События блока</h2>\n<p>Доступен следующий набор событий:</p>\n<ul>\n<li><code>idle</code> – событие генерируется по истечению трех секунд после последней пользовательской активности. Под активностью подразумеваются события <code>mousemove</code>, <code>keydown</code> и <code>click</code>.</li>\n<li><code>wakeup</code> – событие генерируется в момент возобновления пользовательской активности (события <code>mousemove</code>, <code>keydown</code> и <code>click</code>).</li>\n</ul>\n<h2 id=\"Публичные-методы-блока-11\"><a href=\"#Публичные-методы-блока-11\" class=\"anchor\"></a>Публичные методы блока</h2>\n<p>Доступен следующий набор методов:</p>\n<ul>\n<li><code>start</code> – запуск генерации события и отслеживания простоя.</li>\n<li><code>stop</code> – остановка генерации события и отслеживания простоя.</li>\n<li><code>isIdle</code> – возвращает текущее состояние (<code>true</code> если окно простаивает).</li>\n</ul>\n<p>Методы не имеют параметров.</p>\n<p>Блок наследуется от «клaсса» <code>Emitter</code> блока <code>events</code>, что позволяет вызывать его методы.\nНапример, в блоке <code>input</code> производится подписка на события <code>idle</code> и <code>wakeup</code> с помощью унаследованного <code>idle.on</code>:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;input&#39;, [&#39;tick&#39;, &#39;idle&#39;], function(provide, tick, idle, Input) {\n\nvar instances = [],\n    boundToTick,\n    bindToTick = function() {\n        boundToTick = true;\n        tick\n            .on(&#39;tick&#39;, update) // подписываемся на событие tick \n            .start(); // запускаем генерацию события tick\n        idle\n            .on({\n                idle : function() {\n                    tick.un(&#39;tick&#39;, update); // по событию idle отписываемся от tick\n                },\n                wakeup : function() {\n                    tick.on(&#39;tick&#39;, update); // по событию wakeup подписываемся обратно\n                }\n            })\n            .start(); // запускаем генерацию события idle\n    },\n    update = function() { /* ... */ };\n\n});\n</code></pre>\n"},"en":{"name":"idle","examples":[],"description":""}}