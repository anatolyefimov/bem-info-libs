{"ru":{"name":"next-tick","examples":[],"description":"<h1 id=\"next-tick-2\"><a href=\"#next-tick-2\" class=\"anchor\"></a>next-tick</h1>\n<p>Блок <code>next-tick</code> служит для асинхронного вызова переданной callback функции в следующем витке событийного цикла. </p>\n<p><code>next-tick</code> – полифил, реализующий:</p>\n<ul>\n<li>симуляцию событийного цикла для старых версий браузеров;</li>\n<li>унифицированный интерфейс для работы с различными браузерами и <code>node.js</code>.</li>\n</ul>\n<p>Блок реализован в технологии <code>vanilla.js</code> и подходит для использования как на клиенте, так и на сервере.</p>\n<p>Блок реализует единственный метод и подходит для случаев, когда требуется, чтобы callback был выполнен после того, как другие функции в рамках событийного цикла отработали. Например, чтобы убедиться что доступны данные, динамически вычислявшиеся в рамках цикла.</p>\n<p>Другой пример – случай, когда необходимо убедиться, что некоторое событие всплыло до верхнеуровневого элемента, как, например, в блоке <code>popup</code> с модификатором <code>autoclosable</code>:</p>\n<pre><code class=\"lang-js\">provide(Popup.decl({ modName : &#39;autoclosable&#39;, modVal : true }, /** @lends popup.prototype */{\n    onSetMod : {\n        &#39;visible&#39; : {\n            &#39;true&#39; : function() {\n                this\n                    // NOTE: nextTick because of event bubbling to document\n                    .nextTick(function() {\n                        this.bindToDoc(&#39;pointerclick&#39;, this._onDocPointerClick);\n                    })\n                    .__base.apply(this, arguments);\n            }\n        }\n    },\n\n    _onDocPointerClick : function(e) { /* ... */ }\n}}));\n</code></pre>\n<h2 id=\"Порядок-вызова-callback-2\"><a href=\"#Порядок-вызова-callback-2\" class=\"anchor\"></a>Порядок вызова callback</h2>\n<p>В рамках событийного цикла работы блок формирует очередь, добавляя каждую следующую callback функцию в ее конец. Порядок вызова callback сохраняется. Например:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;test&#39;, [&#39;next-tick&#39;], function(provide, nextTick) {\n\nprovide(BEMDOM.decl({ block : this.name }, /** @lends test.prototype */\n{ \n    onSetMod : {\n        &#39;js&#39; : {\n            &#39;inited&#39; : function() {\n                var order = [];\n\n                nextTick(function() { order.push(1); });\n                nextTick(function() { order.push(2); });\n                nextTick(function() { order.push(3); });\n                nextTick(function() { console.log(order)); }; // should be [1, 2, 3]\n            }\n        }\n    }\n}));\n});\n</code></pre>\n"},"en":{"name":"next-tick","examples":[],"description":""}}