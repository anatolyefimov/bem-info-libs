{"ru":{"name":"loader","examples":[],"description":"<h1 id=\"loader-2\"><a href=\"#loader-2\" class=\"anchor\"></a>loader</h1>\n<p>Блок <code>loader</code> служит для загрузки и подключения скриптов по URL.</p>\n<p>Блок реализован в технологии <code>js</code> и подходит для использования в клиентских приложениях.</p>\n<h2 id=\"Модификаторы-блока-4\"><a href=\"#Модификаторы-блока-4\" class=\"anchor\"></a>Модификаторы блока</h2>\n<h3 id=\"type-2\"><a href=\"#type-2\" class=\"anchor\"></a><code>type</code></h3>\n<p>В зависимости от значения модификатора <code>type</code> блок <code>loader</code> позволяет получить по URL и подключить:</p>\n<ul>\n<li><code>js</code> - фрагмент JavaScript-кода;</li>\n<li><code>bundle</code> – пакет, собранный из CSS и JS-файлов – «бандл».  </li>\n</ul>\n<h4 id=\"type_js-2\"><a href=\"#type_js-2\" class=\"anchor\"></a><code>type_js</code></h4>\n<p>Блок с модификатором <code>type_js</code> реализует функцию, принимающую два аргумента:</p>\n<ul>\n<li><code>{String}</code> <code>url</code> – URL загружаемого фрагмента JS-кода;</li>\n<li><code>{Function}</code> <code>cb</code> – callback-функция, которая будет выполнена по завершению загрузки фрагмента кода.</li>\n</ul>\n<p>Например, <code>loader_type_js</code> используется в блоке <code>common.blocks/jquery</code> библиотеки <code>bem-core</code> для загрузки и подключения jQuery:</p>\n<pre><code class=\"lang-js\">modules.define(\n    &#39;jquery&#39;,\n    [&#39;loader_type_js&#39;, &#39;jquery__config&#39;],\n    function(provide, loader, cfg) {\n\n/* global jQuery */\n\nfunction doProvide(preserveGlobal) {\n    /**\n     * @exports\n     * @type Function\n     */\n    provide(preserveGlobal? jQuery : jQuery.noConflict(true));\n}\n\ntypeof jQuery !== &#39;undefined&#39;?\n    doProvide(true) :\n    loader(cfg.url, doProvide);\n});\n</code></pre>\n<p>При вызове функция производит поиск строки, переданной первым аргументом:</p>\n<ul>\n<li>среди подключенных <code>url</code>. В случае успеха, callback (аргумент <code>cb</code>) немедленно выполняется, а управление возвращается вызывавшей функции;</li>\n<li>среди имен <code>url</code>, ожидающих подключения. В случае успеха callback помещается в очередь и управление возвращается вызывавшей функции.</li>\n</ul>\n<p>Если текущее значение <code>url</code> не найдено, создается запись в очереди на подключение. Callback (аргумент <code>cb</code>) помещается в очередь. </p>\n<p>Затем создается DOM-элемент <code>script</code> со всеми нужными свойствами, который добавляется к элементу <code>head</code> документа.</p>\n<p>По завершению загрузки:</p>\n<ul>\n<li>выполняются все callback из очереди на подключение;</li>\n<li><code>url</code> удаляется из очереди и добавляется к списку подключенных. </li>\n</ul>\n<h4 id=\"type_bundle-2\"><a href=\"#type_bundle-2\" class=\"anchor\"></a><code>type_bundle</code></h4>\n<p>Блок с модификатором <code>type_bundle</code> реализует функцию от четырех аргументов:</p>\n<ul>\n<li><code>{String}</code> <code>id</code> – идентификатор бандла;</li>\n<li><code>{String}</code> <code>url</code> – путь до файла бандла в формате URL;</li>\n<li><code>{Function}</code> <code>onSuccess</code> – callback, вызываемая по завершению загрузки бандла;</li>\n<li><code>{Function}</code> <code>onError</code> – callback, вызываемая при неудачной загрузке бандла.</li>\n</ul>\n<p>Например:</p>\n<pre><code class=\"lang-js\">modules.define(&#39;test-bundle-load&#39;, [&#39;loader_type_bundle&#39;], function(provide, bundleLoader) {\n\n    provide(function() {\n        var onSuccess = function() { console.log(&#39;Loaded!&#39;); },\n            onError = function() { throw new Error(&#39;ups&#39;); };\n        bundleLoader(\n            &#39;test1&#39;,\n            &#39;http://mysite.org/test.bundle.js&#39;, \n            onSuccess,\n            onError\n        );\n    });\n});\n</code></pre>\n<p>При инициализации блока с модификатором <code>type_js</code> создается объект бандлов. Ключами объекта служат <code>id</code>, а в значениях содержатся массивы callback-функций, которые нужно выполнить:</p>\n<ul>\n<li>после успешной загрузки бандла;</li>\n<li>в случае ошибки загрузки.</li>\n</ul>\n<p>В случае успешного выполнения, функция, реализованная блоком, создает DOM-элемент <code>script</code> со всеми нужными свойствами, который добавляется перед первым дочерним элементом элемента <code>head</code>.</p>\n<p>В ходе выполнения, функция устанавливает таймер загрузки на интервал (по умолчанию 8000 миллисекунд) с помощью <code>setTimeout</code>.</p>\n<p>По истечению указанного интервала вызывается функция – обработчик ошибок. Обработчик:</p>\n<ul>\n<li>очищает таймер загрузки;</li>\n<li>вызывает все callback-функции <code>onError</code>;</li>\n<li>удаляет свойство, соответствующее <code>id</code>, из объекта бандлов.</li>\n</ul>\n<h5 id=\"Статические-методы-доступные-с-модификатором-type_bundle-2\"><a href=\"#Статические-методы-доступные-с-модификатором-type_bundle-2\" class=\"anchor\"></a>Статические методы, доступные с модификатором <code>type_bundle</code></h5>\n<p>Функция, реализованная блоком с модификатором <code>type_bundle</code>, обладает статическим методом – <code>_loaded</code>. Он используется как вспомогательный после успешной загрузки бандла.</p>\n<p>На вход <code>_loaded</code> принимает объект со свойством <code>id</code>, содержащим строку с идентификатором загруженного бандла (URL). </p>\n<p>В ходе выполнения метод:</p>\n<ul>\n<li>очищает таймер загрузки;</li>\n<li>вызывает загруженный <code>bundle.js</code> в глобальном пространстве имен;</li>\n<li>подключает CSS:<ul>\n<li>создается DOM-элемент <code>style</code> с нужными свойствами;</li>\n<li>DOM-элемент помещается перед первым вложенным элементом в <code>head</code>;</li>\n</ul>\n</li>\n<li>выполняет все callback-функции <code>onSuccess</code>.</li>\n</ul>\n"},"en":{"name":"loader","examples":[],"description":""}}