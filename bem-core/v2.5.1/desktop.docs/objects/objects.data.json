{"ru":{"name":"objects","examples":[],"description":"<h1 id=\"objects\"><a href=\"#objects\" class=\"anchor\"></a>objects</h1>\n<p>Блок <code>objects</code> предоставляет набор методов-хелперов для работы с объектами JavaScript.</p>\n<p>Блок реализован в технологии <code>vanilla.js</code> и подходит для использования как на сервере, так и на клиенте.</p>\n<h2 id=\"Публичные-методы-блока-2\"><a href=\"#Публичные-методы-блока-2\" class=\"anchor\"></a>Публичные методы блока</h2>\n<h3 id=\"extend\"><a href=\"#extend\" class=\"anchor\"></a><code>extend</code></h3>\n<p>Метод позволяет расширять объект свойствами другого объекта. Копируются только собственные свойства объекта, не полученные по цепочке прототипов. Метод принимает аргументами:</p>\n<ul>\n<li><code>target</code> <code>{Object}</code> – целевой объект, который расширяется свойствами других.</li>\n<li><code>source</code> <code>{Object}</code> – объект, свойства которого добавляются к целевому. Может быть передано несколько объектов. Свойства каждого из них будут добавлены к целевому.</li>\n</ul>\n<p>Метод возвращает целевой объект с добавленными свойствами.</p>\n<p>Например:</p>\n<pre><code class=\"lang-js\">modules.require([&#39;objects&#39;], function(objects) {\n    var obj1 = { a : 1, b : 2 },\n        obj2 = { b : 3, c : 4 };\n\n    console.log(objects.extend(obj1, obj2)); // { a : 1, b : 3, c : 4 }\n});\n</code></pre>\n<h3 id=\"isempty\"><a href=\"#isempty\" class=\"anchor\"></a><code>isEmpty</code></h3>\n<p>Метод позволяет выяснить пуст ли переданный ему объект. Другими словами, имеет ли объект собственные свойства.</p>\n<p>Метод принимает один аргумент <code>{Object}</code> – объект для проверки. Возвращаемое значение <code>{Boolean}</code> – <code>true</code> в случае, если объект не имеет собственных свойств.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;objects&#39;], function(objects) {\n    var obj1 = {},\n        obj2 = { foo : &#39;bar&#39; };\n\n    console.log(objects.isEmpty(obj1)); // true\n    console.log(objects.isEmpty(obj2)); // false\n});\n</code></pre>\n<h3 id=\"each\"><a href=\"#each\" class=\"anchor\"></a><code>each</code></h3>\n<p>Метод служит для итеративного обхода собственных свойств объекта. Для каждого собственного свойства вызывается функция-callback. Метод не возвращает значения и принимает следующие аргументы:</p>\n<ul>\n<li><code>obj</code> <code>{Object}</code> – объект обход свойств которого производится.</li>\n<li><code>fn</code> <code>{Function}</code> – callback, вызываемый для каждого свойства.</li>\n<li><code>ctx</code> <code>{Object}</code> – контекст callback-функции. Опционально.</li>\n</ul>\n<p>Первым аргументом callback получает значение свойства объекта, для которого была вызвана, вторым имя свойства.</p>\n<pre><code class=\"lang-js\">modules.require([&#39;objects&#39;], function(objects) {\n    var obj1 = { a : 1, b : 2, c : 4 },\n        logValue = function(val) {\n            console.log(val);\n        };\n\n    objects.each(obj1, logValue); // 124\n});\n</code></pre>\n<p>Примеры использования <code>objects</code> в библиотеке <code>bem-components</code>:</p>\n<ul>\n<li>блок <code>popup</code> <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/popup/_target/popup_target.js#L82\">с модификатором target</a>.</li>\n</ul>\n"},"en":{"name":"objects","examples":[],"description":""}}