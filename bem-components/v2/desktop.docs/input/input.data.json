{"ru":{"name":"input","examples":[{"url":"desktop.tests/input/gemini"},{"url":"desktop.tests/input/simple"}],"description":"<h1 id=\"input\">input</h1>\n<p>Блок <code>input</code> служит для создания различных типов текстовых полей:</p>\n<ul>\n<li>поле ввода (значение по умолчанию);</li>\n<li>текстовая область;</li>\n<li>поле с паролем;</li>\n<li>поисковая форма.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON-блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Значение, отправляемое на сервер. По умолчанию пустое.</td>\n    </tr>\n    <tr>\n        <td>placeholder</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Подсказка в поле ввода.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Уникальный идентификатор блока. По умолчанию генерируется случайным образом, если явно не задан в BEMJSON.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя полю ввода.</td>\n    </tr>\n    <tr>\n        <td>maxLength</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет максимальное количество вводимых символов.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет последовательность перехода между полями ввода при нажатии на <code>Tab</code>.</td>\n    </tr>\n</table>\n\n\n<p>Другие допустимые атрибуты блока могут быть заданы в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/input/hwtIQVRUxvCPVxAJgWKBqBRt6Is -->\n<strong>simple</strong>\n\n<!-- bem-example: desktop.examples/input/yAehEbulTw29FYJa_ye7ntQkTkU -->\n<strong>normal</strong>\n\n<!-- bem-example: desktop.examples/input/m1GvVMb4ZI4DvaKjyQWVNZLyquA -->\n\n<h3 id=\"-_size-\">Размеры <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам текстовых полей.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота<br>строки</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;s&#39; },\n    placeholder : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39; },\n    placeholder : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;l&#39; },\n    placeholder : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;xl&#39; },\n    placeholder : &#39;X-Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Типы <code>_type</code></h3>\n<p>Блок представлен следующими типами:</p>\n<ul>\n<li>текстовая область (<code>input_type_textarea</code>)</li>\n<li>поле с паролем (<code>input_type_password</code>)</li>\n<li>поисковая форма (<code>input_type_search</code>)</li>\n</ul>\n<p>Без указания типа поля блок <code>input</code> по умолчанию получает значение <code>&lt;input type=&quot;text&quot;/&gt;</code>.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Реализация</th>\n    </tr>\n    <tr>\n        <td>\n            <code>_textarea</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;textarea&#39; },\n    placeholder : &#39;Тексторвая область&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_password</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39;, type : &#39;password&#39; },\n    placeholder : &#39;Поле с паролем&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_search</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;search&#39; },\n    placeholder : &#39;Поисковая форма&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии блока «неактивен» поле ввода и все его элементы становятся недоступными для действий пользователя.</p>\n<p>Если модификатор <code>disabled</code> не установлен, инпут по умолчанию активен.</p>\n<!-- bem-example: desktop.examples/input/_rQiPCz_bRgjryQQWFEhXhyJnyM -->\n\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> поле ввода находится в фокусе.</p>\n<!-- bem-example: desktop.examples/input/4hhBI_vwtFJlpwXu8DnFh6HdrYY -->\n\n<h3 id=\"-_has-clear-\">Очистка содержимого <code>_has-clear</code></h3>\n<p>Модификатор <code>has-clear</code> в значении <code>true</code> отображает в инпуте крестик для очистки содержимого (элемент <code>clear</code>).</p>\n<!-- bem-example: desktop.examples/input/JCaTuV74Ua-xND0IW39wBPdvHBI -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<p>Визуально представлен следующими элементами:</p>\n<h3 id=\"__box\">__box</h3>\n<p>Обязательный элемент.</p>\n<p>Элемент, группирующий нативный контрол <code>&lt;input&gt;</code> и дополнительные элементы (например, <code>__clear</code>).</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>Кнопка очистки содержимого инпута («крестик»).</p>\n<p>По умолчанию модификатор <code>has-clear</code> имеет значение <code>false</code>, при котором крестик не отображается. Для отображения крестика нужно установить модификатор в значение <code>true</code>.</p>\n<!-- bem-example: desktop.examples/input/SwtjmJjtMXak9KKSsPMLXihNiQI -->\n\n<h3 id=\"__control\">__control</h3>\n<p>Обязательный элемент.</p>\n<p>BEMHTML- или BH-шаблоном преобразуется в нативный контрол <code>&lt;input&gt;</code> или <code>&lt;textarea&gt;</code>.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"},"en":{"name":"input","examples":[{"url":"desktop.tests/input/gemini"},{"url":"desktop.tests/input/simple"}],"description":"<h1 id=\"input\">input</h1>\n<p><code>input</code> block is designed to create different types of text fields:</p>\n<ul>\n<li>input field (default value);</li>\n<li>text area;</li>\n<li>password field;</li>\n<li>search form.</li>\n</ul>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified within corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Value to be sent to server. It is empty by default.</td>\n    </tr>\n    <tr>\n        <td>placeholder</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>A short hint that describes expected value of an input field.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Unique block identifier. The value is generated randomly by default. Could be specified manually in BEMJSON file.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Defines name of an input field.</td>\n    </tr>\n    <tr>\n        <td>maxLength</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies maximum number of characters allowed in input field.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies the position of current <code>input</code> block in the tabbing order for current page.</td>\n    </tr>\n</table>\n\n<p>Other valid block&#39;s attributes could be specified in <code>attrs</code> field in BEMJSON.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Block supports following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, native representation (<em>default</em>) of a control is available.</p>\n<p>See the following examples for demonstration:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/input/hwtIQVRUxvCPVxAJgWKBqBRt6Is -->\n<strong>simple</strong>\n\n<!-- bem-example: desktop.examples/input/yAehEbulTw29FYJa_ye7ntQkTkU -->\n<strong>normal</strong>\n\n<!-- bem-example: desktop.examples/input/m1GvVMb4ZI4DvaKjyQWVNZLyquA -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.</p>\n<p>Provides size values to all types of text fields.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>See the following examples for demonstration:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Font size</th>\n        <th>String height</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;s&#39; },\n    placeholder : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39; },\n    placeholder : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;l&#39; },\n    placeholder : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;xl&#39; },\n    placeholder : &#39;X-Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>Following types of <code>input</code> block are available:</p>\n<ul>\n<li>text area (use <code>textarea</code> modifier);</li>\n<li>password field (use <code>password</code> modifier);</li>\n<li>search form (use <code>search</code> modifier).</li>\n</ul>\n<p>If a <code>type</code> modifier is not specified, the <code>input</code> block obtains <code>&lt;input type=&quot;text&quot;/&gt;</code> value by default.</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>\n            <code>_textarea</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;textarea&#39; },\n    placeholder : &#39;Text area&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_password</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39;, type : &#39;password&#39; },\n    placeholder : &#39;Password field&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_search</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;search&#39; },\n    placeholder : &#39;Search form&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"block-s-state\">Block&#39;s state</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If block is disabled, all its elements become unavailable for user&#39;s action.</p>\n<p><code>input</code> block is active by default even if <code>disabled</code> modifier is not specified.</p>\n<!-- bem-example: desktop.examples/input/K-P-esXffR8hGOoR7jna6S2YiJQ -->\n\n<h4 id=\"_focused\">_focused</h4>\n<p>An input field is focused if a block has a <code>focused</code> modifier with <code>true</code> value.</p>\n<!-- bem-example: desktop.examples/input/qCSnME17SEWdiXIYzAUquHUowlo -->\n\n<h3 id=\"_has-clear\">_has-clear</h3>\n<p><code>clear</code> cross element (<code>clear</code>) appears in input field if a block has <code>has-clear</code> modifier with <code>true</code> value.</p>\n<!-- bem-example: desktop.examples/input/_9h_vL43Yf85tOZ7QzUlcBNd-PE -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<p>The following elements provide visual representation of <code>input</code> block:</p>\n<h3 id=\"__box\">__box</h3>\n<p>An element for grouping native <code>&lt;input&gt;</code> field and additional elements (e.g <code>__clear</code>).</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>A button (cross element) intended to clear an <code>input</code> field content.</p>\n<p>To add a cross element into an <code>input</code> field specify <code>has-clear</code> modifier with <code>true</code> value in BEMJSON file.</p>\n<p>Cross element is unavailable if block has not <code>has-clear</code> modifier or if <code>has-clear</code> modifier has <code>false</code> value.</p>\n<!-- bem-example: desktop.examples/input/oL605Mco7dZbQOD7Rga3BNjDmUY -->\n\n<h3 id=\"__control\">__control</h3>\n<p>Mandatory element.</p>\n<p>This element is processed by BEMHTML or BH template engine to native <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code> control.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"}}