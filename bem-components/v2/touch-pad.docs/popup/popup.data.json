{"ru":{"name":"popup","examples":[],"description":"<h1 id=\"popup\">popup</h1>\n<p>Блок <code>popup</code> используется для создания выпадающих элементов и позволяет изменять их состояние, поведение и внешний вид. Блок всегда отображается поверх остальных элементов страницы.</p>\n<p>Попап может быть вызван различными элементами страницы, например, кнопками или псевдоссылками.</p>\n<p>При первом открытии попапа DOM-элемент блока переносится в конце <code>&lt;body&gt;</code>. Блок получает модификатор <code>visible</code>.</p>\n<h2 id=\"Инициализация-блока\">Инициализация блока</h2>\n<p>Чтобы попап отображался при установке модификатора <code>visible</code>, блок должен быть предварительно инициализирован. Для этого служит метод <code>setTarget</code>. В ходе выполнения методу необходимо определить положение попапа на странице. Это может осуществляться:</p>\n<ul>\n<li>исходя из положения на странице родительского элемента. В этом случае методу <code>setTarget</code> следует передать аргументом родительский DOM-элемент или БЭМ-блок;</li>\n<li>путем явного указания координат. Первым аргументом методу <code>setTarget</code> передается значение отступа от левого края страницы, вторым отступ сверху: <code>setTarget(x-coordinate, y-coordinate)</code>.</li>\n</ul>\n<p>Метод <code>setTarget</code> возвращает объект <code>this</code>.</p>\n<h2 id=\"Специализированные-поля-блока\">Специализированные поля блока</h2>\n<p>Список зарезервированных полей входного BEMJSON:</p>\n<div class=\"table-container\"><table>\n    <tr>\n        <th>Поле</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>directions</td>\n        <td>\n            <code>Массив</code>\n        </td>\n        <td>Управляет <a href=\"#directions\">направлением открытия попапа</a> (например, <code>bottom-left</code>, где <code>bottom</code> является основным параметром, <code>left</code> - второстепенным) на странице относительно вызвавшего его элемета.</td>\n    </tr>\n    <tr>\n        <td>mainOffset</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает смещение попапа относительно основного направления.</td>\n    </tr>\n    <tr>\n        <td>secondaryOffset</td>\n        <td>\n            <code>BEMJSON</code></td>\n        <td>Задает смещение попапа относительно второстепенного направления.</td>\n    </tr>\n    <tr>\n        <td>viewportOffset</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает смещение попапа от края окна браузера.</td>\n    </tr>\n    <tr>\n        <td>zIndexGroupLevel</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Позволяет задать уровень слоя для открывающихся попапов. Основан на блоке <a href=\"../z-index-group/z-index.group.ru.md\">z-index-group</a></td>\n    </tr>\n</table></div>\n\n<p>При необходимости дополнительные HTML-атрибуты блока могут быть заданы в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"Модификаторы-блока\">Модификаторы блока</h2>\n<h3 id=\"Темы-`_theme`\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора <code>theme</code> отображается <a href=\"#native\">нативный</a> вид контрола.</p>\n<p>Наглядно видно на примерах ниже:</p>\n<p><a name=\"native\"></a>\n<strong>default</strong></p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    content : &#39;default&#39;\n}\n</code></pre><p><strong>simple</strong></p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    mods : { theme : &#39;simple&#39; },\n    content : &#39;simple&#39;\n}\n</code></pre><p><strong>normal</strong></p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    mods : { theme : &#39;normal&#39; },\n    content : &#39;normal&#39;\n}\n</code></pre><h3 id=\"Видимый-`_visible`\">Видимый <code>_visible</code></h3>\n<p>Модификатор <code>visible</code> выставляется блоку автоматически при открытии попапа. Когда попап скрыт, модификатор удаляется.</p>\n<p><strong>NB:</strong> данная реализация блока не поддерживает принудительную установку модификатора <code>visible</code> в BEMJSON-декларации.</p>\n<h4 id=\"`_autoscalable`\"><code>_autoscalable</code></h4>\n<p>Модификатор <code>autoscalable</code> скрывает блок по щелчку мыши вне зоны попапа.</p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    mods : { theme : &#39;normal&#39;, autoclosable : true },\n    content : &#39;normal&#39;\n}\n</code></pre><p><a href=\"direction\"></a></p>\n<h2 id=\"Расположение-относительно-родителя-`_direction`\">Расположение относительно родителя <code>_direction</code></h2>\n<p>Поле <code>direction</code> управляет направлением открытия попапа на странице относительно вызвавшего его элемета. Расположение блока определяется автоматически, исходя из массива допустимых направлений и положения родителя на странице.</p>\n<p>По умолчанию используется следующий массив допустимых направлений:</p>\n<ul>\n<li>bottom-left</li>\n<li>bottom-center</li>\n<li>bottom-right</li>\n<li>top-left</li>\n<li>top-center</li>\n<li>top-right</li>\n<li>right-top</li>\n<li>right-center</li>\n<li>right-bottom</li>\n<li>left-top</li>\n<li>left-center</li>\n<li>left-bottom</li>\n</ul>\n<p>Чтобы управлять расположением попапа, можно ограничить массив направлений открытия, оставив только требуемые. Пользовательский массив нужно передать в качестве JS-параметра с ключом <code>directions</code>. При этом из значений массива будет выбрано наиболее подходящее, исходя из положения родителя на странице.</p>\n<p>Например, если требуется, чтобы попап раскрывался над родителем:</p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    mods : { autoclosable : true, theme: &#39;simple&#39; },\n    directions : [&#39;top-left&#39;, &#39;top-center&#39;, &#39;top-right&#39;],\n    content : &#39;Hello, world!&#39;\n}\n</code></pre><p>Или небходимо разместить попап справа по центру:</p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    mods : { autoclosable : true, theme: &#39;simple&#39; },\n    directions : [&#39;right-center&#39;],\n    content : &#39;Hello, world!&#39;\n}\n</code></pre><p>Используйте поля <code>mainOffset</code> и/или <code>secondaryOffset</code> для управления направлением смещения.</p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    mods : { autoclosable : true, theme: &#39;normal&#39; },\n    direction : [&#39;right-center&#39;],\n    mainOffset : 100,\n    secondaryOffset : 100,\n    content : &#39;Hello, world!&#39;\n}\n</code></pre><h2 id=\"Взаимосвязи-между-popup-ами\">Взаимосвязи между popup&#39;ами</h2>\n<p>Блок <code>popup</code> поддерживает вложенную структуру нескольких одновременно открытых попапов. Это означает, что один попап может вызывать второй, а второй, соответственно, может вызвать третий и так далее. И при этом все попапы будут оставаться открытыми.</p>\n<p>Если установлен модификатор <code>autoscalable</code> в значении <code>true</code>, то при щелчке мышью вне зоны попапа, попап закроется сам и закроет свои дочерние блоки.</p>\n<p>Дочерние блоки popup можно рассматривать в виде цепочки <code>1</code> → <code>2</code> → <code>3</code> → <code>4</code>. При клике на втором попапе – закрываются третий и четвертый. При клике в первом – закрываются второй, третий, четвертый. При клике за пределами любого попапа из цепочки – закроются все.</p>\n"},"en":{"name":"popup","examples":[],"description":"<h1 id=\"popup\">popup</h1>\n<p><code>popup</code> block is used to create and manage state, behavior and appearance of popups. It can be triggered by a button or a pseudo link. Popup is always displayed above all other elements on a page.</p>\n<p>When <code>popup</code> is opened for the first time (<code>visible</code> modifier with <code>true</code> value is set) block&#39;s DOM element is created in the end of the document <code>&lt;body&gt;</code>.</p>\n<h2 id=\"Initialization-of-a-block\">Initialization of a block</h2>\n<p>To display <code>popup</code> when <code>visible</code> modifier is assigned, block should be initialized to <code>setTarget</code> method. <code>setTarget</code> needs to determine the popup position on a page. It can be performed:</p>\n<ul>\n<li>according to a parent block position. In this case the parent DOM element or BEM block should be passed as an argument to <code>setTarget</code>;</li>\n<li>by direct coordinates defining. The first and the second arguments passed to <code>setTarget</code> define left and top margins on a page: <code>setTarget(x-coordinate, y-coordinate)</code>.</li>\n</ul>\n<p>The method returns <code>this</code>.</p>\n<h2 id=\"Custom-fields-of-a-block\">Custom fields of a block</h2>\n<p>The following custom fields could be specified in BEMJSON declaration of the block:</p>\n<div class=\"table-container\"><table>\n    <tr>\n        <th>Custom field name</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td><a href=\"#direction\">directions</a></td>\n        <td>\n            <code>Array</code>\n        </td>\n        <td>Specifies position (e.g., <code>bottom-left</code>, where <code>bottom</code> is main direction and <code>left</code> - secondary) of <code>popup</code> relative to the element that triggers it.</td>\n    </tr>\n    <tr>\n        <td>mainOffset</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies offset along the main direction.</td>\n    </tr>\n    <tr>\n        <td>secondaryOffset</td>\n        <td>\n            <code>String</code></td>\n        <td>Specifies offset along the secondary direction.</td>\n    </tr>\n    <tr>\n        <td>viewportOffset</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies offset from the viewport (browser window).</td>\n    </tr>\n    <tr>\n        <td>zIndexGroupLevel</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies level of a layer for popups&#39; opening. Uses <a href=\"../z-index-group/z-index.group.ru.md\">z-index-group</a> block.</td>\n    </tr>\n</table></div>\n\n<p>Additional required HTML attributes could be specified in <code>attrs</code> field of BEMJSON.</p>\n<h2 id=\"Modifiers-of-a-block\">Modifiers of a block</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Block supports the following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If <code>theme</code> modifier is not specified, <a href=\"#native\">native</a> representation of a control is applied.</p>\n<p>See following examples:</p>\n<p><a name=\"native\"></a>\n<strong>default</strong></p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    content : &#39;default&#39;\n}\n</code></pre><p><strong>simple</strong></p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    mods : { theme : &#39;simple&#39; },\n    content : &#39;simple&#39;\n}\n</code></pre><p><strong>normal</strong></p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    mods : { theme : &#39;normal&#39; },\n    content : &#39;normal&#39;\n}\n</code></pre><h3 id=\"States-of-a-block\">States of a block</h3>\n<h4 id=\"_visible\">_visible</h4>\n<p><code>visible</code> modifier is set automatically when <code>popup</code> is displayed. When <code>popup</code> is hidden, <code>visible</code> modofier is removed.</p>\n<p><strong>NB:</strong> this block&#39;s version does not support manual selection of <code>visible</code> modifier in BEMJSON.</p>\n<h4 id=\"`_autoscalable`\"><code>_autoscalable</code></h4>\n<p>When <code>autoscalable</code> modifier with <code>true</code> is set to <code>popup</code> block, mouse click outside the popup area hides it automatically.</p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    mods : { theme : &#39;normal&#39;, autoclosable : true },\n    content : &#39;normal&#39;\n}\n</code></pre><p><a name=\"direction\"></p>\n<h2 id=\"Popup-opening-direction-`_direction`\">Popup opening direction <code>_direction</code></h2>\n<p>This modifier controls position of <code>popup</code> relative to the element that triggers it.</p>\n<p>By default the following admissible directions are available:</p>\n<ul>\n<li>bottom-left</li>\n<li>bottom-center</li>\n<li>bottom-right</li>\n<li>top-left</li>\n<li>top-center</li>\n<li>top-right</li>\n<li>right-top</li>\n<li>right-center</li>\n<li>right-bottom</li>\n<li>left-top</li>\n<li>left-center</li>\n<li>left-bottom</li>\n</ul>\n<p>Required popup positions can be listed as JS parameters with <code>direction</code> key in BEMJSON declaration. The most suitable directions will be chosen among provided values  according to a parent block position on a page</p>\n<p>For example, to open <code>popup</code> at the top of the parent block use <code>top-left</code>, <code>top-center</code> and <code>top-right</code> values:</p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    mods : { autoclosable : true, theme: &#39;simple&#39; },\n    directions : [&#39;top-left&#39;, &#39;top-center&#39;, &#39;top-right&#39;],\n    content : &#39;Hello, world!&#39;\n}\n</code></pre><p>To open <code>popup</code> strictly at the <code>center-right</code> position do the following:</p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    mods : { autoclosable : true, theme: &#39;simple&#39; },\n    directions : [&#39;right-center&#39;],\n    content : &#39;Hello, world!&#39;\n}\n</code></pre><p>Use <code>mainOffset</code> and/or <code>secondaryOffset</code> parameters to manage the offset direction:</p>\n<pre><code>{\n    block : &#39;popup&#39;,\n    mods : { autoclosable : true, theme: &#39;normal&#39; },\n    direction : [&#39;right-center&#39;],\n    mainOffset : 100,\n    secondaryOffset : 100,\n    content : &#39;Hello, world!&#39;\n}\n</code></pre><h2 id=\"Relationship-between-popups\">Relationship between popups</h2>\n<p><code>popup</code> block supports nested stucture of multiple simultaneous popups. It means you can open popup (child) within another popup (parent) with the parent popup remaining opened.</p>\n<p>If <code>autoscalable</code> modifier is specified, mouse click outside the parent popup area hides it and all its child automatically.</p>\n<p>Child popup blocks can be regarded as a chain of <code>1</code> → <code>2</code> → <code>3</code> → <code>4</code>. By clicking on the second element of a chain, third and forth will be closed. By clicking on the first – the second, third and forth will be closed. Clicking outside any popup area of the chain elements will close all popups.</p>\n"}}