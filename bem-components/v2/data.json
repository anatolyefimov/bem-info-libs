{"repo":"bem-components","ref":"v2","enb":true,"url":"http://github.com/bem/bem-components","custom":[],"docs":{"readme":{"title":{"en":"Readme","ru":"Readme"},"content":{"en":"<h1 id=\"BEM-Components-Library--!-Build-Status--https:--travis-ci-org-bem-bem-components-svg-branch=v2---https:--travis-ci-org-bem-bem-components---!-Coverage-Status--https:--coveralls-io-repos-bem-bem-components-badge-png-branch=v2---https:--coveralls-io-r-bem-bem-components-branch=v2-\">BEM Components Library <a href=\"https://travis-ci.org/bem/bem-components\"><img src=\"https://travis-ci.org/bem/bem-components.svg?branch=v2\" alt=\"Build Status\"></a> <a href=\"https://coveralls.io/r/bem/bem-components?branch=v2\"><img src=\"https://coveralls.io/repos/bem/bem-components/badge.png?branch=v2\" alt=\"Coverage Status\"></a></h1>\n<h2 id=\"What-is-this-\">What is this?</h2>\n<p><code>bem-components</code> is a library of blocks providing ready-made form controls and some other blocks.\nIt contains base realizations of blocks that are abstracted from the design. Few optional design themes are available.</p>\n<h2 id=\"Usage\">Usage</h2>\n<p>You can use any way you are familiar with to include this library into your project.\nE.g. you can use <code>bem-tools</code> or <code>ENB</code>.</p>\n<h2 id=\"Supported-browsers\">Supported browsers</h2>\n<ul>\n<li>Desktop:<ul>\n<li>Firefox 30+</li>\n<li>Chrome last 2 versions</li>\n<li>Safari 6.0+</li>\n<li>Opera 12.1+</li>\n<li>Internet Explorer 9+</li>\n</ul>\n</li>\n<li>Touch-pad:<ul>\n<li>Android 4+</li>\n<li>iOS 5+</li>\n</ul>\n</li>\n<li>Touch-phone:<ul>\n<li>Android 4+</li>\n<li>iOS 6+</li>\n<li>Windows Phone 8+ (Internet Explorer 10+)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Inside\">Inside</h2>\n<h3 id=\"Levels\">Levels</h3>\n<ul>\n<li><code>common.blocks</code> — suited for any devices and browsers</li>\n<li><code>desktop.blocks</code> — should be used for desktop browsers</li>\n<li><code>touch.blocks</code> — implement some touch-platforms specifics</li>\n</ul>\n<h3 id=\"Blocks\">Blocks</h3>\n<ul>\n<li><a href=\"common.blocks/attach/attach.en.md\">attach</a></li>\n<li><a href=\"common.blocks/control/control.en.md\">control</a></li>\n<li><a href=\"common.blocks/control-group/control-group.en.md\">control-group</a></li>\n<li><a href=\"common.blocks/input/input.en.md\">input</a></li>\n<li><a href=\"common.blocks/button/button.en.md\">button</a></li>\n<li><a href=\"common.blocks/checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"common.blocks/checkbox-group/checkbox-group.en.md\">checkbox-group</a></li>\n<li><a href=\"common.blocks/icon/icon.en.md\">icon</a></li>\n<li><a href=\"common.blocks/image/image.en.md\">image</a></li>\n<li><a href=\"common.blocks/input/input.en.md\">input</a></li>\n<li><a href=\"common.blocks/spin/spin.en.md\">spin</a></li>\n<li><a href=\"common.blocks/dropdown/dropdown.en.md\">dropdown</a></li>\n<li><a href=\"common.blocks/link/link.en.md\">link</a></li>\n<li><a href=\"common.blocks/menu-item/menu-item.en.md\">menu-item</a></li>\n<li><a href=\"common.blocks/menu/menu.en.md\">menu</a></li>\n<li><a href=\"common.blocks/popup/popup.en.md\">popup</a></li>\n<li><a href=\"common.blocks/radio-group/radio-group.en.md\">radio-group</a></li>\n<li><a href=\"common.blocks/radio/radio.en.md\">radio</a></li>\n<li><a href=\"common.blocks/z-index-group/z-index-group.en.md\">z-index-group</a></li>\n</ul>\n<h3 id=\"Technologies\">Technologies</h3>\n<ul>\n<li><a href=\"https://bem.info/technology/i-bem/current/i-bem-js/\">JS</a></li>\n<li><a href=\"https://bem.info/tools/bem/modules/\">YModules</a></li>\n<li><a href=\"https://bem.info/technology/bemhtml/current/reference/\">BEMHTML</a></li>\n<li><a href=\"https://bem.info/technology/bh/current/reference/\">BH</a></li>\n<li><a href=\"https://bem.info/technology/bemtree/current/bemtree/\">BEMTREE</a></li>\n<li><a href=\"https://learnboost.github.io/stylus/\">Stylus</a></li>\n</ul>\n<h2 id=\"Changelog\">Changelog</h2>\n<p>You can check the changelog at the <a href=\"CHANGELOG.md\">changelog page</a>.</p>\n<h2 id=\"Migration\">Migration</h2>\n<p>Migartion guide is <a href=\"MIGRATION.md\">here</a>.</p>\n<h2 id=\"Maintainers\">Maintainers</h2>\n<ul>\n<li><a href=\"https://github.com/veged\">veged</a></li>\n<li><a href=\"https://github.com/dfilatov\">dfilatov</a></li>\n<li><a href=\"https://github.com/mishanga\">mishanga</a></li>\n</ul>\n<h2 id=\"Development\">Development</h2>\n<h3 id=\"Working-copy\">Working copy</h3>\n<ol>\n<li><p>Get the source code:</p>\n<pre><code class=\"lang-bash\">$ git clone git://github.com/bem/bem-components.git\n$ cd bem-components\n</code></pre>\n</li>\n<li><p>Install the dependencies:</p>\n<pre><code class=\"lang-bash\">$ npm install\n</code></pre>\n<p>You need <code>export PATH=./node_modules/.bin:$PATH</code> or any alternative way to run locally-installed <code>ENB</code>.</p>\n</li>\n</ol>\n<p>1.\n  Install all necessary libraries:</p>\n<pre><code class=\"lang-bash\">  $ bower install\n</code></pre>\n<p>1.\n  Build and run tests and examples:</p>\n<pre><code class=\"lang-bash\">  $ npm run build-all\n</code></pre>\n<p>1.\n  Run development server:</p>\n<pre><code class=\"lang-bash\">  $ enb server\n</code></pre>\n<p>1.\n  Check the code-style:</p>\n<pre><code class=\"lang-bash\">  $ npm run lint\n</code></pre>\n<h3 id=\"How-to-contribute\">How to contribute</h3>\n<ol>\n<li>Create an <a href=\"https://github.com/bem/bem-components/issues/new\">issue</a> with a proper description.</li>\n<li>Decide which version needs your changes.</li>\n<li>Create a feature branch with an issue number and a version (<code>issues/&lt;issue_number&gt;@v&lt;version_number&gt;</code>) based on a version branch. For example, for an issue #42 and a version 2: <code>git checkout -b issues/42@v2</code>. If you need changes for several versions, each of them has to have a feature branch.</li>\n<li>Commit changes (you can test your changes running <code>npm test</code>) and push. <code>Rebase</code> your branch on a corresponding version branch if needed.</li>\n<li>Create a pull request from your feature branch; or several pull requests if you changed several versions.</li>\n<li>Link your pull request with an issue number any way you like. For example, leave a <a href=\"https://github.com/blog/1506-closing-issues-via-pull-requests\">comment</a> with the issue number.</li>\n<li>Wait for your pull request and the issue to be closed ;-)</li>\n</ol>\n<h3 id=\"Modular-testing\">Modular testing</h3>\n<h4 id=\"JavaScript-unit-tests\">JavaScript unit tests</h4>\n<p>To run JS unit tests use <code>npm run test-specs</code> command. You may also specify the target, e.g. <code>enb make specs desktop.specs/input</code> to run just <code>input</code> tests.</p>\n<p>All tests will be run automatically using <a href=\"https://travis-ci.org\">Travis</a> on each pull request.</p>\n<h4 id=\"Regrassion-tests-of-layout\">Regrassion tests of layout</h4>\n<p>We use <a href=\"https://github.com/bem/gemini\">gemini</a> for layout testing.</p>\n<p>Tests for each block are stored in a separate file <code>block-name.gemini.js</code> in a directory <code>gemini/</code>. All tests could be executed manually or automatically using <a href=\"https://travis-ci.org\">Travis</a>. We use <a href=\"https://saucelabs.com\">SauceLabs</a> service as a <a href=\"https://code.google.com/p/selenium/wiki/Grid2\">Selenium Grid</a>.</p>\n<p>Use <a href=\"https://saucelabs.com/opensauce\">OpenSauce</a> account in SauceLabs and <a href=\"https://saucelabs.com/connect\">Sauce Connect</a> utility to run tests locally.</p>\n<p>Developers of BEM team could use <code>bem-components</code> account (we do not publish login and password because of the limit for three concurrent browsers launch; it is much more efficiently to use different free accounts for manual testing).</p>\n<p>For tests execution you need the following:</p>\n<ol>\n<li>Set up environment variables (<code>SAUCE_USERNAME</code> and <code>SAUCE_ACCESS_KEY</code>).</li>\n<li>Run <code>sc</code> utility (SauceConnect) and wait for a tunnel initialization.</li>\n<li>Run the tests using <code>npm run gemini</code>.</li>\n<li>To collect new versions of the screenshots use <code>npm run gemini-gather</code>.</li>\n</ol>\n<p>In case you write new tests for local usage, you can run your own Selenium Server or PhantomJS with WebDriver server. For this:</p>\n<ol>\n<li>Install and run <a href=\"http://docs.seleniumhq.org/download/\">selenium-server</a> or <a href=\"http://phantomjs.org/\">phantomjs</a>.</li>\n<li>Correct <code>gridUrl</code> option to <code>http://localhost:4444/</code> in <code>.gemini.yml</code> file.</li>\n<li>Run tests (see above).</li>\n</ol>\n<p>Detailed description of <code>gemini</code> work with different types of backends find <a href=\"https://bem.info/tools/testing/gemini/\">here</a>.</p>\n<p><strong>NB</strong> You have to commit screenshots to the repository from SauceLabs to avoid minor differencies in fonts rendering.</p>\n<p>Befor commit some new or modified pattern you have to:</p>\n<ol>\n<li>Check the validity. If in doubt, use Araxis Merge utility or something like this to see the difference between two versions of the pattern.</li>\n<li>Compress them using <a href=\"http://imageoptim.com/\">ImageOptim</a> utility (this is the most effective tool for images compression for May 2014).</li>\n</ol>\n<h4 id=\"Tests-for-templates\">Tests for templates</h4>\n<p>Build tools for the library allow you to build and run tests on BEMHTML and BH\nblock templates.</p>\n<p>To add a test for a block, you need to add a directory named <code>[block name].tmpl-specs</code> on your definition level. All test files will be stored in it.</p>\n<p>Each test consists of a pair of files implemented in following technologies: BEMJSON and HTML. Each block could have more then one pair of such files. You could give any name to the file. But the file names (without extensions) within the one pair for one test must coincide. For example, <strong>10-default</strong>.bemjson.js and <strong>10-default</strong>.html.</p>\n<p>For each block:</p>\n<ul>\n<li>BEMJSON file contains an example for a block;</li>\n<li>HTML file contains standard HTML-code – a block sample.</li>\n</ul>\n<p>Block sample in HTML is a block implementation result that becomes available after applying a template to the BEMJSON example.</p>\n<pre><code>desktop.blocks\n    └── myblocks\n        ├── myblock.bemhtml.js\n        ├── myblock.bh.js\n        ├── ...\n        └── myblock.tmpl-specs\n            ├── 10-default.bemjson.js\n            ├── 10-default.html\n            ├── 20-advanced.bemjson.js\n            └── 20-advanced.html\n</code></pre><p>To run tests for templates use:</p>\n<p><code>enb make tmpl-specs</code> or <code>npm run test-tmpls</code></p>\n<p>To run tests for required definition level use:</p>\n<p><code>enb make tmpl-specs desktop.tmpl-specs</code></p>\n<p>To run tests for a specific block use:</p>\n<p><code>enb make tmpl-specs desktop.tmpl-specs/button</code></p>\n<p>If build procedure is successful, tests will be run automatically. After that you will see all test results.</p>\n<p>If the result of applying the template does not match with the block sample in HTML, then you will see errors in the log with description of the difference from the block sample.</p>\n<p>All tests will be run automatically using <a href=\"https://travis-ci.org\">Travis</a> for each pull request.</p>\n","ru":"<h1 id=\"BEM-Components-Library--!-Build-Status--https:--travis-ci-org-bem-bem-components-svg-branch=v2---https:--travis-ci-org-bem-bem-components---!-Coverage-Status--https:--coveralls-io-repos-bem-bem-components-badge-png-branch=v2---https:--coveralls-io-r-bem-bem-components-branch=v2-\">BEM Components Library <a href=\"https://travis-ci.org/bem/bem-components\"><img src=\"https://travis-ci.org/bem/bem-components.svg?branch=v2\" alt=\"Build Status\"></a> <a href=\"https://coveralls.io/r/bem/bem-components?branch=v2\"><img src=\"https://coveralls.io/repos/bem/bem-components/badge.png?branch=v2\" alt=\"Coverage Status\"></a></h1>\n<h2 id=\"Что-это-\">Что это?</h2>\n<p>Библиотека блоков, предоставляющая готовые элементы управления форм и некоторые другие блоки.\nСодержит абстрагированные от дизайна базовые реализации. Возможно опциональное использование тем.</p>\n<h2 id=\"Использование\">Использование</h2>\n<p>Подключить библиотеку в проект можно любым известным вам способом. Например, с помощью <a href=\"http://ru.bem.info/tools/bem/bem-tools/\">bem-tools</a> или <code>ENB</code>. Сделать это можно в конфигурационном файле выбранного вами сборщика.</p>\n<p>Если вы используете <a href=\"http://ru.bem.info/tutorials/project-stub/\">project-stub</a> как основу проекта, то подключать библиотеку не нужно. Она подключена в проект по умолчанию.</p>\n<p><a name=\"supported-browsers\"></a></p>\n<h2 id=\"Поддерживаемые-браузеры\">Поддерживаемые браузеры</h2>\n<ul>\n<li>Desktop:<ul>\n<li>Firefox 30+</li>\n<li>Chrome last 2 versions</li>\n<li>Safari 6.0+</li>\n<li>Opera 12.1+</li>\n<li>Internet Explorer 9+</li>\n</ul>\n</li>\n<li>Touch-pad:<ul>\n<li>Android 4+</li>\n<li>iOS 5+</li>\n</ul>\n</li>\n<li>Touch-phone:<ul>\n<li>Android 4+</li>\n<li>iOS 6+</li>\n<li>Windows Phone 8+ (Internet Explorer 10+)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Состав\">Состав</h2>\n<h3 id=\"Уровни\">Уровни</h3>\n<ul>\n<li><code>common.blocks</code> — предназначен для любых устройств и браузеров</li>\n<li><code>desktop.blocks</code> — следует использовать для всех десктопных браузеров</li>\n<li><code>touch.blocks</code> — реализует некоторую специфику для тач-платформ</li>\n</ul>\n<h3 id=\"Блоки\">Блоки</h3>\n<ul>\n<li><a href=\"common.blocks/attach/attach.ru.md\">attach</a></li>\n<li><a href=\"common.blocks/control/control.ru.md\">control</a></li>\n<li><a href=\"common.blocks/control-group/control-group.ru.md\">control-group</a></li>\n<li><a href=\"common.blocks/input/input.ru.md\">input</a></li>\n<li><a href=\"common.blocks/button/button.ru.md\">button</a></li>\n<li><a href=\"common.blocks/checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"common.blocks/checkbox-group/checkbox-group.ru.md\">checkbox-group</a></li>\n<li><a href=\"common.blocks/icon/icon.ru.md\">icon</a></li>\n<li><a href=\"common.blocks/image/image.ru.md\">image</a></li>\n<li><a href=\"common.blocks/input/input.ru.md\">input</a></li>\n<li><a href=\"common.blocks/spin/spin.ru.md\">spin</a></li>\n<li><a href=\"common.blocks/dropdown/dropdown.ru.md\">dropdown</a></li>\n<li><a href=\"common.blocks/link/link.ru.md\">link</a></li>\n<li><a href=\"common.blocks/menu-item/menu-item.ru.md\">menu-item</a></li>\n<li><a href=\"common.blocks/menu/menu.ru.md\">menu</a></li>\n<li><a href=\"common.blocks/popup/popup.ru.md\">popup</a></li>\n<li><a href=\"common.blocks/radio-group/radio-group.ru.md\">radio-group</a></li>\n<li><a href=\"common.blocks/radio/radio.ru.md\">radio</a></li>\n<li><a href=\"common.blocks/z-index-group/z-index-group.ru.md\">z-index-group</a></li>\n</ul>\n<h3 id=\"Технологии\">Технологии</h3>\n<ul>\n<li><a href=\"https://ru.bem.info/technology/i-bem/current/i-bem-js/\">i-bem.js</a></li>\n<li><a href=\"https://ru.bem.info/tools/bem/modules/\">YModules</a></li>\n<li><a href=\"https://ru.bem.info/technology/bemhtml/current/reference/\">BEMHTML</a></li>\n<li><a href=\"https://ru.bem.info/technology/bh/current/reference/\">BH</a></li>\n<li><a href=\"https://ru.bem.info/technology/bemtree/current/bemtree/\">BEMTREE</a></li>\n<li><a href=\"https://learnboost.github.io/stylus/\">Stylus</a></li>\n</ul>\n<h3 id=\"Инструменты\">Инструменты</h3>\n<ul>\n<li><a href=\"http://ru.bem.info/tools/optimizers/borschik/\">borschik</a></li>\n<li><a href=\"http://ru.bem.info/tools/bem/bem-tools/\">bem-tools</a></li>\n<li><a href=\"http://enb-make.info/\">ENB</a></li>\n</ul>\n<h3 id=\"Оптимизаторы\">Оптимизаторы</h3>\n<ul>\n<li><a href=\"https://github.com/svg/svgo\">svgo</a></li>\n<li><a href=\"http://www.cleancss.com/about.php\">clean-css</a></li>\n<li><a href=\"http://imageoptim.com/\">ImageOptim</a></li>\n</ul>\n<h3 id=\"Линтеры\">Линтеры</h3>\n<ul>\n<li><a href=\"http://www.jshint.com/\">jshint</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs\">jscs</a></li>\n</ul>\n<h3 id=\"Автопрефиксер\">Автопрефиксер</h3>\n<ul>\n<li><a href=\"https://github.com/ai/autoprefixer/\">Autoprefixer</a></li>\n</ul>\n<p>Применяется во время сборки для генерации вендорных префиксов для поддерживаемых браузеров на основании конфигурации.</p>\n<h2 id=\"История-изменений\">История изменений</h2>\n<p>История изменений доступна на <a href=\"CHANGELOG.md\">отдельной странице</a>.</p>\n<h2 id=\"Миграция\">Миграция</h2>\n<p>Миграция описана на <a href=\"MIGRATION.md\">отдельной странице</a>.</p>\n<h2 id=\"Команда-разработчиков\">Команда разработчиков</h2>\n<ul>\n<li><a href=\"https://github.com/veged\">veged</a></li>\n<li><a href=\"https://github.com/dfilatov\">dfilatov</a></li>\n<li><a href=\"https://github.com/mishanga\">mishanga</a></li>\n</ul>\n<h2 id=\"Принципы-разработки-библиотеки\">Принципы разработки библиотеки</h2>\n<p>В основе всех принципов разработки bem-components лежит опыт работы над другими библиотеками: «взять все лучшее из старого и не повторять прошлые ошибки».</p>\n<p><strong>Проект open source</strong></p>\n<p>Разработка библиотеки ведется на <a href=\"https://github.com/bem/bem-components\">GitHub</a>. Все задачи, все планы по разработке и сроки доступны там же. Любой разработчик может принять участие в работе над библиотекой: создать задачу с пожеланиями для команды разработчиков или прислать pull request со своими правками или собственным кодом.</p>\n<p><strong>Автоматизация</strong></p>\n<p>Автоматизация всех возможных процессов для облегчения жизни разработчиков: разработчик не должен совершать повторяющиеся действия, для этого есть роботы.</p>\n<p><strong>Bleeding edge</strong></p>\n<p>Библиотека разрабатывается с ориентацией на будущее: на <a href=\"#supported-browsers\">актуальные версии браузеров</a> и на использование только последних версий инструментов. Все это направлено на то, чтобы библиотека не теряла свою актуальность в процессе разработки.</p>\n<p><strong>Оптимизация</strong></p>\n<p>Решения по оптимизации внедряются непосредственно во время разработки кода каждого конкретного блока. Пути оптимизации продумываются заранее, чтобы не возникало желания оптимизировать уже написанный код.</p>\n<p><strong>Селекторы в контексте темы</strong></p>\n<p>Библиотека предоставляет возможность создавать разные темы для блоков или подключать уже имеющиеся в любом количестве и сочетании на страницу. Есть также возможность полностью отказаться от использования тем в своем проекте и получить привычные нативные браузерные контроллы, для которых уже написаны шаблоны и JavaScript-реализация.</p>\n<p><strong>Поддержка нескольких тем</strong></p>\n<p>В библиотеке реализована одновременная поддержка нескольких тем. На данном этапе основной темой (и пока единственной) является тема <code>islands</code>, которая реализует новый дизайн сервисов Яндекса. В <code>bem-components</code> создан еще один служебный дизайн, представленный темой <code>simple</code>. Он разработан для проверки возможности сосуществования нескольких тем внутри одной библиотеки.</p>\n<p><strong>Поддержка платформ</strong></p>\n<p>В библиотеке реализована поддержка разных платформ: <code>desktop</code>, <code>touch</code> и <code>mobile</code>. При этом блоки разработаны таким образом, чтобы реализация для одной платформы могла корректно отображаться и правильно себя вести и на другой.</p>\n<h3 id=\"Варианты-поставки-библиотеки\">Варианты поставки библиотеки</h3>\n<p><strong>Source</strong></p>\n<p>Для технически идентичных сервисов, которые используют тот же препроцессор и шаблонизатор, библиотека будет поставляться в исходном виде — «source».</p>\n<p><strong>Compiled</strong></p>\n<p>Для тех, кто использует другой препроцессор или вообще его не использует, будет возможность поставки скомпилированной версии — «compiled».</p>\n<p><strong>Library</strong></p>\n<p>Для возможности подключения библиотеки ссылками на страницу, по аналогии с jQuery или Bootstrap, будет поставка в виде библиотеки — «library».</p>\n<h2 id=\"Разработка\">Разработка</h2>\n<h3 id=\"Рабочая-копия\">Рабочая копия</h3>\n<p>Получаем исходники:</p>\n<pre><code class=\"lang-bash\">$ git clone git://github.com/bem/bem-components.git\n$ cd bem-components\n</code></pre>\n<p>Устанавливаем зависимости:</p>\n<pre><code class=\"lang-bash\">$ npm install\n</code></pre>\n<p>Для последующего запуска локально установленных <code>enb</code> нам потребуется <code>export PATH=./node_modules/.bin:$PATH</code> или любой альтернативный способ.</p>\n<p>Устанавливаем зависимые библиотеки:</p>\n<pre><code class=\"lang-bash\">$ bower install\n</code></pre>\n<p>Собираем примеры и тесты:</p>\n<pre><code class=\"lang-bash\">$ npm run build-all\n</code></pre>\n<p>Запускаем сервер для разработки:</p>\n<pre><code class=\"lang-bash\">$ enb server\n</code></pre>\n<p>Проверяем code-style:</p>\n<pre><code class=\"lang-bash\">$ npm run lint\n</code></pre>\n<h3 id=\"Внесение-изменений\">Внесение изменений</h3>\n<ol>\n<li><a href=\"https://github.com/bem/bem-components/issues/new\">Создать issue</a> с описанием сути изменений.</li>\n<li>Определить в какую версию необходимо внести изменения.</li>\n<li>Сделать feature-branch с указанием номера issue и версии (<code>issues/&lt;номер issue&gt;@v&lt;номер версии&gt;</code>) на основе ветки версии.\nНапример для issue с номером 42 и версией 2: <code>git checkout -b issues/42@v2</code>. Если изменения нужно внести в несколько версий, то для каждой из версий создаётся отдельная ветка.</li>\n<li>Внести изменения (для версии v2, можно локально проверить, что ничего не сломалось, запустив <code>npm test</code>).</li>\n<li>Сделать коммит и отправить изменения в удаленный репозиторий (<code>push</code>). Если это необходимо, то нужно сделать <code>rebase</code> от базовой ветки версии.</li>\n<li>Создать pull request на основе созданной ветки (или несколько pull request&#39;ов для случая изменений в нескольких версиях).</li>\n<li>Любым способом связать pull request и issue (например, c помощью <a href=\"https://github.com/blog/1506-closing-issues-via-pull-requests\">комментария</a>).</li>\n<li>Ждать закрытия pull request и issue ;-)</li>\n</ol>\n<h3 id=\"Модульное-тестирование\">Модульное тестирование</h3>\n<h4 id=\"Юнит-тесты-на-JavaScript\">Юнит-тесты на JavaScript</h4>\n<p>Чтобы запустить юнит-тесты на JS, используйте команду <code>npm run test-specs</code>. Кроме того, можно использовать точечную сборку, например, <code>enb make specs desktop.specs/input</code>.</p>\n<p>Все тесты автоматически запускаются на <a href=\"https://travis-ci.org\">Travis</a> для каждого pull request&#39;а.</p>\n<h3 id=\"Регрессионное-тестирование-верстки\">Регрессионное тестирование верстки</h3>\n<p>Для тестирования верстки мы используем <a href=\"https://github.com/bem/gemini\">gemini</a>.</p>\n<p>Тесты каждого блока находятся в отдельном файле вида <code>block-name.gemini.js</code> в директории <code>gemini/</code>. Запускаются тесты локально руками и в Travis автоматически. В качестве <a href=\"https://code.google.com/p/selenium/wiki/Grid2\">Selenium Grid</a> мы используем сервис <a href=\"https://saucelabs.com\">SauceLabs</a>.</p>\n<p>Для запуска тестов локально вам понадобится <a href=\"https://saucelabs.com/opensauce\">OpenSauce</a> аккаунт в SauceLabs и утилита <a href=\"https://saucelabs.com/connect\">Sauce Connect</a>. Разработчики команды БЭМ могут использовать аккаунт <code>bem-components</code> (мы не публикуем логин и пароль, потому что на аккаунте лимит на 3 одновременно запущенных браузера; будет эффективнее использовать разные аккаунты для ручного запуска тестов, тем более что они бесплатные).</p>\n<p>Для запуска тестов:</p>\n<ol>\n<li>Настройте окружение (переменные среды <code>SAUCE_USERNAME</code> и <code>SAUCE_ACCESS_KEY</code>).</li>\n<li>Запустите утилиту <code>sc</code> (SauceConnect) и дождитесь, пока она поднимет туннель.</li>\n<li>Запустите тесты командой <code>npm run gemini</code>.</li>\n<li>Для сбора новых версий скриншотов используйте команду <code>npm run gemini-gather</code>.</li>\n</ol>\n<p>Если вы разрабатываете новые тесты и хотите их запускать локально и быстрее, можно поднять свой собственный Selenium Server или phantomjs с WebDriver сервером. Для этого нужно:</p>\n<ol>\n<li>Установить и запустить <a href=\"http://docs.seleniumhq.org/download/\">selenium-server</a> или <a href=\"http://phantomjs.org/\">phantomjs</a>.</li>\n<li>Исправить в файле <code>.gemini.yml</code> опцию <code>gridUrl</code> на <code>http://localhost:4444/</code>.</li>\n<li>Запустить тесты (см. выше).</li>\n</ol>\n<p>Более подробно про запуск <code>gemini</code> с разными бекендами читайте в <a href=\"https://github.com/bem/gemini/blob/master/README.md\">документации</a>.</p>\n<p><strong>Важно!</strong> Коммитить в репозиторий необходимо скриншоты, собранные в SauceLabs, чтобы избежать, например, незначительных отличий в отрисовке шрифтов.</p>\n<p>Перед коммитом новых или изменённых эталонных изображений:</p>\n<ol>\n<li>Внимательно проверьте их правильность. Если есть сомнения, используйте утилиту Araxis Merge или аналогичную, чтобы увидеть разницу между старой и новой версией изображения.</li>\n<li>Сожмите их утилитой <a href=\"http://imageoptim.com/\">ImageOptim</a> (это самый эффективный инструмент сжатия изображений на май 2014 года).</li>\n</ol>\n<h4 id=\"Тесты-на-шаблоны\">Тесты на шаблоны</h4>\n<p>Инструменты сборки библиотеки позволяют собирать и запускать тесты на BEMHTML- и BH-шаблоны блоков.</p>\n<p>Чтобы добавить тест для блока, нужно в его директории на требуемом уровне переопределения создать\nкаталог с названием <code>[имя блока].tmpl-specs</code> для хранения файлов тестов.</p>\n<p>Каждый тест состоит из пары файлов в технологиях BEMJSON и HTML. Таких пар файлов у блока\nможет быть несколько. Имена файлов произвольные, но они (не включая расширения) для каждого теста должны совпадать. Например, <strong>10-default</strong>.bemjson.js и <strong>10-default</strong>.html.</p>\n<p>В BEMJSON-файле находится пример для блока, в HTML – эталонный HTML-код, который должен\nполучиться после применения шаблона блока к BEMJSON-у примера.</p>\n<pre><code>desktop.blocks\n    └── myblocks\n        ├── myblock.bemhtml.js\n        ├── myblock.bh.js\n        ├── ...\n        └── myblock.tmpl-specs\n            ├── 10-default.bemjson.js\n            ├── 10-default.html\n            ├── 20-advanced.bemjson.js\n            └── 20-advanced.html\n</code></pre><p>Команда для сборки и запуска тестов:</p>\n<p><code>enb make tmpl-specs</code> или <code>npm run test-tmpls</code></p>\n<p>Сборка тестов на нужном уровне переопределения:</p>\n<p><code>enb make tmpl-specs desktop.tmpl-specs</code></p>\n<p>Сборка тестов только для одного блока (точечная сборка):</p>\n<p><code>enb make tmpl-specs desktop.tmpl-specs/button</code></p>\n<p>В случае успешной сборки, тесты будут запущены с последующим выводом результатов. Если результат применения\nшаблона не совпадает с эталонным HTML, то в логе будет ошибка с указанием отличий от эталона.</p>\n<p>Все тесты автоматически запускаются на <a href=\"https://travis-ci.org\">Travis</a> для каждого pull request&#39;a.</p>\n"}},"migration":{"title":{"en":"Migration","ru":"Миграция"},"content":{"en":"<h1 id=\"Миграция\">Миграция</h1>\n","ru":"<h1 id=\"Миграция\">Миграция</h1>\n"}},"changelog":{"title":{"en":"Сhangelog","ru":"История изменений"},"content":{"en":"<h1 id=\"История-изменений\">История изменений</h1>\n<h2 id=\"2-0-0\">2.0.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Переход на модульную систему <a href=\"https://github.com/ymaps/modules\">https://github.com/ymaps/modules</a>.</li>\n</ul>\n<h3 id=\"Остальные-изменения\">Остальные изменения</h3>\n<ul>\n<li>Понятия автофокуса для блока <code>input</code> изменено.\nБольше нет js-параметра <code>autoFocus</code>, вместо него нужно использовать модификатор <code>_autofocus_focused</code>.\nМодификатор <code>_autofocus_yes</code> теперь называется <code>_autofocus_hidden</code>.</li>\n</ul>\n","ru":"<h1 id=\"История-изменений\">История изменений</h1>\n<h2 id=\"2-0-0\">2.0.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Переход на модульную систему <a href=\"https://github.com/ymaps/modules\">https://github.com/ymaps/modules</a>.</li>\n</ul>\n<h3 id=\"Остальные-изменения\">Остальные изменения</h3>\n<ul>\n<li>Понятия автофокуса для блока <code>input</code> изменено.\nБольше нет js-параметра <code>autoFocus</code>, вместо него нужно использовать модификатор <code>_autofocus_focused</code>.\nМодификатор <code>_autofocus_yes</code> теперь называется <code>_autofocus_hidden</code>.</li>\n</ul>\n"}}},"deps":{"bem-core":"git://github.com/bem/bem-core.git#v2.4.0"}}