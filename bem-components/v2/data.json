{
    "repo": "bem-components",
    "ref": "v2",
    "enb": true,
    "url": "http://github.com/bem/bem-components",
    "custom": [],
    "docs": {
        "changelog": {
            "title": {
                "en": "Сhangelog",
                "ru": "История изменений"
            },
            "content": {
                "en": "<h1 id=\"История-изменений\">История изменений</h1>\n<h2 id=\"2-0-0\">2.0.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Переход на модульную систему <a href=\"https://github.com/ymaps/modules\">https://github.com/ymaps/modules</a>.</li>\n</ul>\n<h3 id=\"Остальные-изменения\">Остальные изменения</h3>\n<ul>\n<li>Понятия автофокуса для блока <code>input</code> изменено.\nБольше нет js-параметра <code>autoFocus</code>, вместо него нужно использовать модификатор <code>_autofocus_focused</code>.\nМодификатор <code>_autofocus_yes</code> теперь называется <code>_autofocus_hidden</code>.</li>\n</ul>\n",
                "ru": "<h1 id=\"История-изменений\">История изменений</h1>\n<h2 id=\"2-0-0\">2.0.0</h2>\n<h3 id=\"Крупные-изменения\">Крупные изменения</h3>\n<ul>\n<li>Переход на модульную систему <a href=\"https://github.com/ymaps/modules\">https://github.com/ymaps/modules</a>.</li>\n</ul>\n<h3 id=\"Остальные-изменения\">Остальные изменения</h3>\n<ul>\n<li>Понятия автофокуса для блока <code>input</code> изменено.\nБольше нет js-параметра <code>autoFocus</code>, вместо него нужно использовать модификатор <code>_autofocus_focused</code>.\nМодификатор <code>_autofocus_yes</code> теперь называется <code>_autofocus_hidden</code>.</li>\n</ul>\n"
            }
        },
        "readme": {
            "title": {
                "en": "Readme",
                "ru": "Readme"
            },
            "content": {
                "en": "<h1 id=\"BEM-Components-Library--!-Build-Status--https:--travis-ci-org-bem-bem-components-svg-branch=v2---https:--travis-ci-org-bem-bem-components---!-Coverage-Status--https:--coveralls-io-repos-bem-bem-components-badge-png-branch=v2---https:--coveralls-io-r-bem-bem-components-branch=v2-\">BEM Components Library <a href=\"https://travis-ci.org/bem/bem-components\"><img src=\"https://travis-ci.org/bem/bem-components.svg?branch=v2\" alt=\"Build Status\"></a> <a href=\"https://coveralls.io/r/bem/bem-components?branch=v2\"><img src=\"https://coveralls.io/repos/bem/bem-components/badge.png?branch=v2\" alt=\"Coverage Status\"></a></h1>\n<h2 id=\"Что-это-\">Что это?</h2>\n<p>Библиотека блоков для управления формами.\nСодержит абстрагированные от дизайна базовые реализации.</p>\n<h2 id=\"Использование\">Использование</h2>\n<p>Подключить библиотеку в проект любым известным способом.</p>\n<h2 id=\"Поддерживаемые-браузеры\">Поддерживаемые браузеры</h2>\n<ul>\n<li>Desktop:<ul>\n<li>Firefox 24+</li>\n<li>Chrome last 2 versions</li>\n<li>Safari 6.0+</li>\n<li>Opera 12.1+</li>\n<li>Internet Explorer 9+</li>\n</ul>\n</li>\n<li>Touch-pad:<ul>\n<li>Android 4+</li>\n<li>iOS 5+</li>\n</ul>\n</li>\n<li>Touch-phone:<ul>\n<li>Android 4+</li>\n<li>iOS 6+</li>\n<li>Windows Phone 8+ (Internet Explorer 10+)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Состав\">Состав</h2>\n<h3 id=\"Уровни\">Уровни</h3>\n<h3 id=\"Блоки\">Блоки</h3>\n<h3 id=\"Технологии\">Технологии</h3>\n<h2 id=\"История-изменений\">История изменений</h2>\n<p>История изменений доступна на <a href=\"CHANGELOG.md\">отдельной странице</a>.</p>\n<h2 id=\"Миграция\">Миграция</h2>\n<p>Миграция описана на <a href=\"MIGRATION.md\">отдельной странице</a>.</p>\n<h2 id=\"Разработка\">Разработка</h2>\n<h3 id=\"Рабочая-копия\">Рабочая копия</h3>\n<ol>\n<li><p>Получаем исходники:</p>\n<pre><code class=\"lang-bash\">$ git clone -b v2 git://github.com/bem/bem-components.git\n$ cd bem-components\n</code></pre>\n</li>\n<li><p>Устанавливаем зависимости:</p>\n<pre><code class=\"lang-bash\">$ npm install\n</code></pre>\n<p>Для последующего запуска локально установленных bem-tools нам потребуется <code>export PATH=./node_modules/.bin:$PATH</code> или любой альтернативный способ.</p>\n</li>\n<li><p>Устанавливаем зависимые библиотеки:</p>\n<pre><code class=\"lang-bash\">$ bower-npm-install\n</code></pre>\n</li>\n<li><p>Собираем примеры и тесты:</p>\n<pre><code class=\"lang-bash\">$ bem make sets\n</code></pre>\n</li>\n<li><p>Запускаем разработческий сервер:</p>\n<pre><code class=\"lang-bash\">$ bem server\n</code></pre>\n</li>\n<li><p>Проверяем code-style</p>\n<pre><code class=\"lang-bash\">$ npm run lint\n</code></pre>\n</li>\n</ol>\n<h3 id=\"Внесение-изменений\">Внесение изменений</h3>\n<ol>\n<li><a href=\"https://github.com/bem/bem-components/issues/new\">Создать issue</a> с описанием сути изменений.</li>\n<li>Определить в какую версию необходимо внести изменения.</li>\n<li>Сделать feature-branch с указанием номера issue и версии (<code>issues/&lt;номер issue&gt;@v&lt;номер версии&gt;</code>) на основе ветки версии.\nНапример для issue с номером 42 и версией 1: <code>git checkout -b issues/42@v1 v1</code>. Если изменения нужно внести в несколько версий, то для каждой из версий создаётся отдельная ветка.</li>\n<li>Внести изменения (для версии v2, можно локально проверить, что ничего не сломалось, запустив <code>npm test</code>).</li>\n<li>Закоммитить и сделать <code>push</code>. Если это необходимо, то нужно сделать <code>rebase</code> от базовой ветки версии.</li>\n<li>Создать pull-request на основе созданной ветки (или несколько pull-request&#39;ов для случая изменений в нескольких версиях).</li>\n<li>Любым способом связать pull-request и issue (например, c помощью <a href=\"https://github.com/blog/1506-closing-issues-via-pull-requests\">комментария</a>).</li>\n<li>Ждать закрытия pull-request и issue ;-)</li>\n</ol>\n<h3 id=\"Модульное-тестирование\">Модульное тестирование</h3>\n<h3 id=\"Регрессионное-тестирование-вёрстки\">Регрессионное тестирование вёрстки</h3>\n<p>Для тестирования вёрстки мы используем <a href=\"https://github.com/bem/gemini\">gemini</a>.</p>\n<p>Тесты каждого блока находятся в отдельном файле вида <code>block-name.gemini.js</code> в директории <code>gemini/</code>. Запускаются тесты локально руками и в Travis автоматически. В качестве <a href=\"https://code.google.com/p/selenium/wiki/Grid2\">Selenium Grid</a> мы используем сервис <a href=\"https://saucelabs.com\">SauceLabs</a>.</p>\n<p>Для запуска тестов локально вам понадобится <a href=\"https://saucelabs.com/opensauce\">OpenSauce</a> аккаунт в SauceLabs и утилита <a href=\"https://saucelabs.com/connect\">Sauce Connect</a>. Разработчики команды БЭМ могут использовать аккаунт <code>bem-components</code> (мы не публикуем логин и пароль, потому что на аккаунте лимит на 3 одновременно запущенных браузера; будет эффективнее использовать разные аккаунты для ручного запуска тестов, тем более что они бесплатные).</p>\n<p>Для запуска тестов:</p>\n<ol>\n<li>Настройте окружение (переменные среды <code>SAUCE_USERNAME</code> и <code>SAUCE_ACCESS_KEY</code>)</li>\n<li>Запустите утилиту <code>sc</code> (SauceConnect) и дождитесь, пока она поднимет туннель</li>\n<li>Запустите тесты командой <code>npm run gemini</code></li>\n<li>Для сбора новых версий скриншотов используйте команду <code>npm run gemini-gather</code></li>\n</ol>\n<p>Если вы разрабатываете новые тесты и хотите их запускать локально и быстрее, можно поднять свой собственный Selenium Server или phantomjs с WebDriver сервером. Для этого нужно:</p>\n<ol>\n<li>Установить и запустить <a href=\"http://docs.seleniumhq.org/download/\">selenium-server</a> или <a href=\"http://phantomjs.org/\">phantomjs</a></li>\n<li>Исправить в файле <code>.gemini.yml</code> опцию <code>gridUrl</code> на <code>http://localhost:4444/</code></li>\n<li>Запустить тесты (см. выше)</li>\n</ol>\n<p>Более подробно про запуск <code>gemini</code> с разными бекендами читайте в <a href=\"https://github.com/bem/gemini/blob/master/README.md\">документации</a>.</p>\n<p><strong>Важно!</strong> Коммитить в репозиторий необходимо скриншоты, собранные в SauceLabs, чтобы избежать, например, незначительных отличий в отрисовке шрифтов.</p>\n<p>Перед коммитом новых или изменённых эталонных изображений:</p>\n<ol>\n<li>Внимательно проверьте их правильность. Если есть сомнения, используйте утилиту Araxis Merge или аналогичную, чтобы увидеть разницу между старой и новой версией изображения.</li>\n<li>Сожмите их утилитой <a href=\"http://imageoptim.com/\">ImageOptim</a> (это самый эффективный инструмент сжатия изображений на май 2014 года).</li>\n</ol>\n",
                "ru": "<h1 id=\"BEM-Components-Library--!-Build-Status--https:--travis-ci-org-bem-bem-components-svg-branch=v2---https:--travis-ci-org-bem-bem-components---!-Coverage-Status--https:--coveralls-io-repos-bem-bem-components-badge-png-branch=v2---https:--coveralls-io-r-bem-bem-components-branch=v2-\">BEM Components Library <a href=\"https://travis-ci.org/bem/bem-components\"><img src=\"https://travis-ci.org/bem/bem-components.svg?branch=v2\" alt=\"Build Status\"></a> <a href=\"https://coveralls.io/r/bem/bem-components?branch=v2\"><img src=\"https://coveralls.io/repos/bem/bem-components/badge.png?branch=v2\" alt=\"Coverage Status\"></a></h1>\n<h2 id=\"Что-это-\">Что это?</h2>\n<p>Библиотека блоков для управления формами.\nСодержит абстрагированные от дизайна базовые реализации.</p>\n<h2 id=\"Использование\">Использование</h2>\n<p>Подключить библиотеку в проект любым известным способом.</p>\n<h2 id=\"Поддерживаемые-браузеры\">Поддерживаемые браузеры</h2>\n<ul>\n<li>Desktop:<ul>\n<li>Firefox 24+</li>\n<li>Chrome last 2 versions</li>\n<li>Safari 6.0+</li>\n<li>Opera 12.1+</li>\n<li>Internet Explorer 9+</li>\n</ul>\n</li>\n<li>Touch-pad:<ul>\n<li>Android 4+</li>\n<li>iOS 5+</li>\n</ul>\n</li>\n<li>Touch-phone:<ul>\n<li>Android 4+</li>\n<li>iOS 6+</li>\n<li>Windows Phone 8+ (Internet Explorer 10+)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Состав\">Состав</h2>\n<h3 id=\"Уровни\">Уровни</h3>\n<h3 id=\"Блоки\">Блоки</h3>\n<h3 id=\"Технологии\">Технологии</h3>\n<h2 id=\"История-изменений\">История изменений</h2>\n<p>История изменений доступна на <a href=\"CHANGELOG.md\">отдельной странице</a>.</p>\n<h2 id=\"Миграция\">Миграция</h2>\n<p>Миграция описана на <a href=\"MIGRATION.md\">отдельной странице</a>.</p>\n<h2 id=\"Разработка\">Разработка</h2>\n<h3 id=\"Рабочая-копия\">Рабочая копия</h3>\n<ol>\n<li><p>Получаем исходники:</p>\n<pre><code class=\"lang-bash\">$ git clone -b v2 git://github.com/bem/bem-components.git\n$ cd bem-components\n</code></pre>\n</li>\n<li><p>Устанавливаем зависимости:</p>\n<pre><code class=\"lang-bash\">$ npm install\n</code></pre>\n<p>Для последующего запуска локально установленных bem-tools нам потребуется <code>export PATH=./node_modules/.bin:$PATH</code> или любой альтернативный способ.</p>\n</li>\n<li><p>Устанавливаем зависимые библиотеки:</p>\n<pre><code class=\"lang-bash\">$ bower-npm-install\n</code></pre>\n</li>\n<li><p>Собираем примеры и тесты:</p>\n<pre><code class=\"lang-bash\">$ bem make sets\n</code></pre>\n</li>\n<li><p>Запускаем разработческий сервер:</p>\n<pre><code class=\"lang-bash\">$ bem server\n</code></pre>\n</li>\n<li><p>Проверяем code-style</p>\n<pre><code class=\"lang-bash\">$ npm run lint\n</code></pre>\n</li>\n</ol>\n<h3 id=\"Внесение-изменений\">Внесение изменений</h3>\n<ol>\n<li><a href=\"https://github.com/bem/bem-components/issues/new\">Создать issue</a> с описанием сути изменений.</li>\n<li>Определить в какую версию необходимо внести изменения.</li>\n<li>Сделать feature-branch с указанием номера issue и версии (<code>issues/&lt;номер issue&gt;@v&lt;номер версии&gt;</code>) на основе ветки версии.\nНапример для issue с номером 42 и версией 1: <code>git checkout -b issues/42@v1 v1</code>. Если изменения нужно внести в несколько версий, то для каждой из версий создаётся отдельная ветка.</li>\n<li>Внести изменения (для версии v2, можно локально проверить, что ничего не сломалось, запустив <code>npm test</code>).</li>\n<li>Закоммитить и сделать <code>push</code>. Если это необходимо, то нужно сделать <code>rebase</code> от базовой ветки версии.</li>\n<li>Создать pull-request на основе созданной ветки (или несколько pull-request&#39;ов для случая изменений в нескольких версиях).</li>\n<li>Любым способом связать pull-request и issue (например, c помощью <a href=\"https://github.com/blog/1506-closing-issues-via-pull-requests\">комментария</a>).</li>\n<li>Ждать закрытия pull-request и issue ;-)</li>\n</ol>\n<h3 id=\"Модульное-тестирование\">Модульное тестирование</h3>\n<h3 id=\"Регрессионное-тестирование-вёрстки\">Регрессионное тестирование вёрстки</h3>\n<p>Для тестирования вёрстки мы используем <a href=\"https://github.com/bem/gemini\">gemini</a>.</p>\n<p>Тесты каждого блока находятся в отдельном файле вида <code>block-name.gemini.js</code> в директории <code>gemini/</code>. Запускаются тесты локально руками и в Travis автоматически. В качестве <a href=\"https://code.google.com/p/selenium/wiki/Grid2\">Selenium Grid</a> мы используем сервис <a href=\"https://saucelabs.com\">SauceLabs</a>.</p>\n<p>Для запуска тестов локально вам понадобится <a href=\"https://saucelabs.com/opensauce\">OpenSauce</a> аккаунт в SauceLabs и утилита <a href=\"https://saucelabs.com/connect\">Sauce Connect</a>. Разработчики команды БЭМ могут использовать аккаунт <code>bem-components</code> (мы не публикуем логин и пароль, потому что на аккаунте лимит на 3 одновременно запущенных браузера; будет эффективнее использовать разные аккаунты для ручного запуска тестов, тем более что они бесплатные).</p>\n<p>Для запуска тестов:</p>\n<ol>\n<li>Настройте окружение (переменные среды <code>SAUCE_USERNAME</code> и <code>SAUCE_ACCESS_KEY</code>)</li>\n<li>Запустите утилиту <code>sc</code> (SauceConnect) и дождитесь, пока она поднимет туннель</li>\n<li>Запустите тесты командой <code>npm run gemini</code></li>\n<li>Для сбора новых версий скриншотов используйте команду <code>npm run gemini-gather</code></li>\n</ol>\n<p>Если вы разрабатываете новые тесты и хотите их запускать локально и быстрее, можно поднять свой собственный Selenium Server или phantomjs с WebDriver сервером. Для этого нужно:</p>\n<ol>\n<li>Установить и запустить <a href=\"http://docs.seleniumhq.org/download/\">selenium-server</a> или <a href=\"http://phantomjs.org/\">phantomjs</a></li>\n<li>Исправить в файле <code>.gemini.yml</code> опцию <code>gridUrl</code> на <code>http://localhost:4444/</code></li>\n<li>Запустить тесты (см. выше)</li>\n</ol>\n<p>Более подробно про запуск <code>gemini</code> с разными бекендами читайте в <a href=\"https://github.com/bem/gemini/blob/master/README.md\">документации</a>.</p>\n<p><strong>Важно!</strong> Коммитить в репозиторий необходимо скриншоты, собранные в SauceLabs, чтобы избежать, например, незначительных отличий в отрисовке шрифтов.</p>\n<p>Перед коммитом новых или изменённых эталонных изображений:</p>\n<ol>\n<li>Внимательно проверьте их правильность. Если есть сомнения, используйте утилиту Araxis Merge или аналогичную, чтобы увидеть разницу между старой и новой версией изображения.</li>\n<li>Сожмите их утилитой <a href=\"http://imageoptim.com/\">ImageOptim</a> (это самый эффективный инструмент сжатия изображений на май 2014 года).</li>\n</ol>\n"
            }
        },
        "migration": {
            "title": {
                "en": "Migration",
                "ru": "Миграция"
            },
            "content": {
                "en": "<h1 id=\"Миграция\">Миграция</h1>\n",
                "ru": "<h1 id=\"Миграция\">Миграция</h1>\n"
            }
        }
    },
    "deps": {
        "bem-core": "git://github.com/bem/bem-core.git#v2.4.0"
    },
    "levels": [
        {
            "name": "desktop.docs",
            "blocks": [
                {
                    "name": "attach",
                    "jsdoc": "<h1 id=\"attach-module\">attach Module</h1>\n<h2 id=\"attach-block\">attach Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"clear-data-attach-\">clear ( [data] ) → {attach}</h4>\n<p>Clear control value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>[data] {Object}<br/>\nadditional data</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{attach}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h1 id=\"button-module\">button Module</h1>\n<h2 id=\"button-block\">button Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns text of the button</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"settext-text-button-\">setText ( text ) → {button}</h4>\n<p>Sets text to the button</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>text {String}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{button}</p>\n<p>this</p>\n",
                    "data": {
                        "ru": {
                            "name": "attach",
                            "examples": [
                                {
                                    "url": "desktop.tests/attach/gemini"
                                },
                                {
                                    "url": "desktop.tests/attach/simple"
                                }
                            ],
                            "description": "<h1 id=\"attach\">attach</h1>\n<p>Блок <code>attach</code> служит для загрузки файла, предназначенного для отправки на сервер.</p>\n<p>По умолчанию блок визуально представлен кнопкой на основе блока <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/button/button.ru.md\">button</a>, открывающей системное окно загрузки файла, и текстовым сообщением «Файл не выбран». После загрузки файла отображаются следующие элементы:</p>\n<ul>\n<li>иконка файла (блок <code>icon</code>);</li>\n<li>имя файла (элемент <code>text</code>);</li>\n<li>крестик для отмены (элемент <code>clear</code>).</li>\n</ul>\n<p>Не позволяет прикреплять несколько файлов и не поддерживает drag-and-drop.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы оформления  <code>_theme</code></h3>\n<p>Блок представлен только в теме <em>simple</em>.</p>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/attach/2LkwTGo-4d7fxgnG4skRO2tHoic -->\n<strong>simple</strong>\n\n<!-- bem-example: desktop.examples/attach/nwytMff5nyXPoczzUvwVbgD7YQQ -->\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии блока «неактивен» кнопка выбора становится недоступной для действий пользователя.</p>\n<p>Если модификатор <code>disabled</code> не выбран, кнопка по умолчанию активна.</p>\n<!-- bem-example: desktop.examples/attach/TlYDF2oQVo93Y7ocT-4hcsjHHB8 -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<p>Визуально представлен следующими элементами:</p>\n<h3 id=\"__button\">__button</h3>\n<p>Обязательный элемент.\nКнопка выбора файла. Открывает системное окно загрузки файла. Создается на основе блока <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/button/button.ru.md\">button</a> и использует его поведение (JS) и внешний вид (CSS). Контент кнопки задается во входных данных.</p>\n<!-- bem-example: desktop.examples/attach/c3tTTsQQpS_wyaTRUODJQMWC3x8 -->\n\n<h3 id=\"__control\">__control</h3>\n<p>Нативный контрол «прикрепить файл».</p>\n<p>Преобразуется BEMHTML- и BH-шаблонами в нативный элемент прикрепления файла с атрибутами <code>&lt;input class=&quot;attach__control&quot; type=&quot;file&quot;&gt;</code>.</p>\n<h3 id=\"__no-file\">__no-file</h3>\n<p>Элемент для отображения текста, когда файл не выбран.</p>\n<p>Если тема <em>simple</em> не указана для блока <code>attach</code>, будет отображаться значение нативного контрола «Файл не выбран».</p>\n<h3 id=\"__file\">__file</h3>\n<p>Контейнер с информацией о прикрепленном файле.</p>\n<p>Формируется из следующих элементов блока:</p>\n<ul>\n<li><code>__text</code></li>\n<li><code>__clear</code></li>\n</ul>\n<p>Может содержать блок <code>icon</code>. В зависимости от типа файла блоку <code>icon</code> добавляется соответствующий модификатор, которому будет назначена иконка типа файла.</p>\n<h3 id=\"__text\">__text</h3>\n<p>Имя файла. Появляется после прикрепления файла.</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>Кнопка отмены выбранного файла (крестик). Появляется после прикрепления файла.</p>\n<p>Элемент реализован для темы <em>simple</em>.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n\n<h1 id=\"button\">button</h1>\n<p>Блок <code>button</code> используется для создания различных типов кнопок и предоставляет возможность изменять их размер, состояние, содержимое и внешний вид.</p>\n<h2 id=\"-\">Варианты использования кнопок</h2>\n<ul>\n<li>Обычная кнопка – применяется для любых кнопок веб-интерфейса. Используется по умолчанию.</li>\n<li>Кнопка-ссылка – применяется для перехода по ссылке. Задается модификатором <code>type</code> со значением <code>link</code>.</li>\n<li>Кнопка отправки формы – предназначена для отправки данных формы на сервер (submit). Задается модификатором <code>type</code> со значением <code>submit</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает текст кнопки.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code></td>\n        <td>Кнопка с иконкой, которая формируется блоком <code>icon</code>.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Адрес ссылки. Применяется только при наличии модификатора блока <code>button_type_link</code>. Кнопка становится ссылкой, а значение <code>url</code> – атрибутом <code>href</code>.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Уникальный идентификатор кнопки.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет последовательность перехода между кнопками при нажатии на <code>Tab</code>.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Значение, отправляемое на сервер. По умолчанию пустое.</td>\n    </tr>\n</table>\n\n<p>Другие допустимые атрибуты блока могут задаваться в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/attach/pxTNfkqsHxpJmDhwS0QK2QBs3ZY -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/attach/KtCevfKa_rzm7MTQMzA65Z0ZREU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/attach/Rb77AVqNcSM2UUBxbCkUkHULKWc -->\n\n<h3 id=\"-_size-\">Размеры кнопок <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам кнопок.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>кнопки</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота<br>кнопки</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Типы кнопок <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки-ссылки (<code>_type_link</code>) и кнопки отправки формы (<code>_type_submit</code>).\nВ случак кнопки-ссылки, дополнительно во входных данных необходимо указать обязательный атрибут <code>url</code>. В таком случае кнопка получает тег <code>&lt;a&gt;</code>, а значение <code>url</code> становится атрибутом <code>href</code>.</p>\n<p><strong>Кнопка-ссылка</strong></p>\n<!-- bem-example: desktop.examples/attach/El0pc_bZgByjhimDRiJmaUa0ubw -->\n\n<p><strong>Кнопка отправки формы</strong></p>\n<!-- bem-example: desktop.examples/attach/gtF_RY9_ivjSx1sADQLwlLOSzmo -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_disabled-\">Неактивна <code>_disabled</code></h4>\n<p>В состоянии «неактивна» кнопка видна, но недоступна для действий пользователя.</p>\n<p>Такая кнопка не может получить фокус путем нажатия на клавишу <code>Tab</code>, мышью или другими способами.</p>\n<!-- bem-example: desktop.examples/attach/VrNTsucLZEWlatBulG8rqd0wHxQ -->\n\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> кнопка всегда находится в фокусе. Нажатие по ней можно выполнить клавишей <code>Space</code> или <code>Enter</code>.</p>\n<!-- bem-example: desktop.examples/attach/ByAZ1dHx4rZKUf9zbxuHmfOmGNs -->\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие «наведение курсором» на кнопку.</p>\n<h4 id=\"-_pressed-\">Нажатие <code>_pressed</code></h4>\n<p>Определяет состояние «нажатие на кнопку» (действие).</p>\n<h4 id=\"-_togglable-\">Залипание <code>_togglable</code></h4>\n<p>Позволяет реализовать залипание кнопки. Допустимые значения: <code>check</code> и <code>radio</code>.</p>\n<!-- bem-example: desktop.examples/attach/NYbJzppv5-r9T8LQ0_-SaNLJWds -->\n\n<h4 id=\"-_action-\">Визуальное выделение <code>_action</code></h4>\n<p>Визуально выделяет кнопку на странице.</p>\n<!-- bem-example: desktop.examples/attach/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"-_pseudo-\">Псевдокнопка <code>_pseudo</code></h4>\n<p>При выборе модификатора <code>pseudo</code> со значением <code>true</code>, кнопка получает прозрачный фон.</p>\n<!-- bem-example: desktop.examples/attach/h_ijyu_mqbPaJBB22OxZERaFyZA -->\n\n<p>В неактивном состоянии границы псевдокнопки исчезают и она сливается со страницей.</p>\n<!-- bem-example: desktop.examples/attach/igxPz7KCvCVG6TTxlXRYzE2_5pI -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"__text\">__text</h3>\n<p>Технический элемент. Обрамляет текст кнопки.\nНужен для позиционирования текста внутри кнопки, в том числе для случаев использования вместе с иконкой.</p>\n<!-- bem-example: desktop.examples/attach/RQ8YcvhxhqjSwO3I3VjLBOanRns -->\n\n<h1 id=\"icon\">icon</h1>\n<p>Блок <code>icon</code> используется в качестве графического элемента в других блоках. В HTML представлен тегом <code>&lt;i&gt;</code>. Иконка задается через свойство <code>background</code> и, соответственно, не имеет возможности фоллбека.</p>\n<p>Иконку можно передать как через модификатор, так и через поле <code>url</code>:</p>\n<!-- bem-example: desktop.examples/attach/b2PchFG0vbxDCGt-_1VzrN-GK0 -->\n\n<!-- bem-example: desktop.examples/attach/bek_pi0vSgei-mm8QD-H3qy_E0c -->\n\n<!-- bem-example: desktop.examples/attach/bqsLdaiup-wWnOz-fYrlos47T_c -->\n\n<!-- bem-example: desktop.examples/attach/w_tWuwVyYuwv7N6i7jChuJOj8Vc -->\n"
                        },
                        "en": {
                            "name": "attach",
                            "examples": [
                                {
                                    "url": "desktop.tests/attach/gemini"
                                },
                                {
                                    "url": "desktop.tests/attach/simple"
                                }
                            ],
                            "description": "<h1 id=\"attach\">attach</h1>\n<p><code>attach</code> block is used to upload a file to be sent to a server.</p>\n<p>This block is visually represented by:</p>\n<ul>\n<li>button (<code>button</code> element is based on the <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/button/button.en.md\">button</a> block) that opens a system window for a file upload;</li>\n<li>text message &quot;No file selected&quot;.</li>\n</ul>\n<p>When file upload is complete, the following elements become available:</p>\n<ul>\n<li>file icon (<code>icon</code> block);</li>\n<li>file name (<code>text</code> element);</li>\n<li>deletion cross element (<code>clear</code> element).</li>\n</ul>\n<p>Block functionality does not support:</p>\n<ul>\n<li>more than one file attaching;</li>\n<li>drag-and-drop.</li>\n</ul>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>The block supports only a theme called <em>simple</em>.</p>\n<p>If theme is not specified, only native representation of the block is available (<em>default</em>).</p>\n<p>See the following examples for demonstration:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/attach/ZFs05u8kewAq9F9n8d6YPWyDNgk -->\n<strong>simple</strong>\n\n<!-- bem-example: desktop.examples/attach/8pRQhEhxOlmCQHlJitiM8RB4UoE -->\n\n<h3 id=\"block-states\">Block states</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If block is disabled, a file selection button becomes unavailable for user&#39;s manipulations.</p>\n<p>The button is active by default, even if <code>disabled</code> modifier is not specified.</p>\n<!-- bem-example: desktop.examples/attach/AkDH5qgUPbMKtFX988WrjrO4Yog -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<p>The block is visually represented by the following elements:</p>\n<h3 id=\"__button\">__button</h3>\n<p>A mandatory element.</p>\n<p>A file selection button. It is designed for opening a system window for file upload. It is based on <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/button/button.en.md\">button</a> block and inherits its behavior (JS) and formatting (CSS). Content of a button should be specified in input data.</p>\n<!-- bem-example: desktop.examples/attach/0e8PrnldKFxjKeNoH1_3eiHXjqM -->\n\n<h3 id=\"__control\">__control</h3>\n<p>A native control for file attaching.</p>\n<p>It is rendered by BEMHTML and BH template engines as a native control of file attaching with attributes: <code>&lt;input class=&quot;attach__control&quot; type=&quot;file&quot;&gt;</code>.</p>\n<h3 id=\"__no-file\">__no-file</h3>\n<p>Element for description rendering with no file selected.</p>\n<p>If a theme <em>simple</em> is not declared, the text message &quot;no file selected&quot; is used by default.</p>\n<h3 id=\"__file\">__file</h3>\n<p>A container with attached file information.</p>\n<p>It consists of the following elements of the block:</p>\n<ul>\n<li><code>text</code></li>\n<li><code>clear</code></li>\n</ul>\n<p>The element could contain an <code>icon</code> block. Depending on a file type an <code>icon</code> block could obtain corresponding modifier that specifies a type file icon to be assigned.</p>\n<h3 id=\"__text\">__text</h3>\n<p>File name. It becomes available when you have attached the file.</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>Clear attachment button (deletion cross element). It becomes available when you have attched the file.</p>\n<p>The element is available for a <em>simple</em> theme of <code>attach</code> block.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n\n<h1 id=\"button\">button</h1>\n<p>The <code>button</code> block is used for different types of buttons creation. It allows you to manage size, sate, content and appearance of a button.</p>\n<h2 id=\"button-use-cases\">Button use cases</h2>\n<ul>\n<li>button – is used to create the majority of web inteface buttons. Used by default.</li>\n<li>link-button – a button that provides link functionality. Must have a mandatory modifier <code>type</code> with <code>link</code> value.</li>\n<li>action button – a button designed to send data to the server (submit). Must be always located inside a form. Sets <code>type</code> modifier with <code>submit</code> value in BEMJSON to create an action button.</li>\n</ul>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified in corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attributes</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Text of a button.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Button with an icon provided by an <code>icon</code> block.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>URL address. It is used only if <code>button_type_link</code> modifier is specified. In this case a button\n            acts as a link and <code>url</code> value is represented as a <code>href</code> attribute.\n        </td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Unique identifier of a button.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Defines tab order between the buttons.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Value to be sent to a server. It is empty by default.</td>\n    </tr>\n</table>\n\n<p>The other valid block&#39;s attributes could be specified in the <code>attrs</code> field in BEMJSON.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>The block supports the following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>Following examples demonstrate this:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/attach/b7paW80CenjDPGtPNxSCdPuUKqg -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/attach/8MGVemijL_tqZt4Z3DsedAxNwDo -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/attach/u1hTHzxMhorqFlZaZXNkPIBN4WU -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier that is available for <em>normal</em> theme only.</p>\n<p>Provides all types of buttons with the <code>size</code> value.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Following examples demonstrate this:</p>\n<table>\n  <tr>\n    <th>Size</th>\n    <th>Font size</th>\n    <th>Button height</th>\n    <th>Example</th>\n  </tr>\n  <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The block could be represented as a <code>link-button</code> (<code>button_type_link</code>).</p>\n<p>This button type has mandatory attribute <code>url</code> that should be specified in BEMJSON input data. A link-button has an <code>&lt;a&gt;</code> attribute. <code>url</code> value becomes <code>href</code> attribute.</p>\n<pre><code>{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;link&#39; },\n    url : &#39;#&#39;,\n    text : &#39;Link-button&#39;\n}\n</code></pre><h3 id=\"button-s-states\">Button&#39;s states</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, button is visible but not available for user action.</p>\n<p>Disabled button cannot be focused by pressing a <code>Tab</code> or on mouse click.</p>\n<pre><code class=\"lang-bemjsom\">{\n    block : &#39;button&#39;,\n    text : &#39;Disabled&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, disabled : true }\n}\n</code></pre>\n<h4 id=\"_focused\">_focused</h4>\n<p>If <code>focused</code> modifier has <code>true</code> value, the button is always focused. You can click the focused button using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: desktop.examples/attach/UkvwYMbpDOkZaq5dm0uIlVbQ9GA -->\n\n<h4 id=\"_hovered\">_hovered</h4>\n<p>Defines &quot;hover&quot; action.</p>\n<h4 id=\"_pressed\">_pressed</h4>\n<p>Defines &quot;pressed&quot; state of a button.</p>\n<h4 id=\"_togglable\">_togglable</h4>\n<p>Defines a state of the pressed button when the first click presses the button, and the second returns it to its original state.</p>\n<!-- bem-example: desktop.examples/attach/xAkZMTZIyMq8S8Cc5mWrpqEj5Cc -->\n\n<h4 id=\"_action\">_action</h4>\n<p>Visually highlights a button on a page.</p>\n<!-- bem-example: desktop.examples/attach/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"_pseudo\">_pseudo</h4>\n<p>If <code>pseudo</code> modifier has <code>true</code> value, the button background becomes transparent.</p>\n<!-- bem-example: desktop.examples/attach/GVMyNpdJjINIl0Ab_qhtsWRf_YA -->\nIf pseudo button is disabled, its boarders disappear.\n\n<!-- bem-example: desktop.examples/attach/fc2vxXBIzzk2stACB-J9vRKlYQ4 -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"__text\">__text</h3>\n<p>This auxiliary element sets a text position inside the button.</p>\n<!-- bem-example: desktop.examples/attach/t_3HDmaOrqYMmf-3NPSa4KJZWBY -->\n\n<h2 id=\"block-s-dependencies\">Block&#39;s dependencies</h2>\n<ul>\n<li><code>control</code>, that provides public API for the controls</li>\n<li><code>i-bem__dom</code></li>\n<li><code>keyboard</code></li>\n</ul>\n\n<h1 id=\"icon\">icon</h1>\n<p><code>&lt;i&gt;</code>-based block for using as a graphical element in other blocks, not for independent usage. Icon is set as <code>background</code> property and unables to fallback.</p>\n<p>In BEMJSON you can use both the modifier and the <code>url</code> field for an icon representation:\n<!-- bem-example: desktop.examples/attach/b2PchFG0vbxDCGt-_1VzrN-GK0 --></p>\n<!-- bem-example: desktop.examples/attach/bek_pi0vSgei-mm8QD-H3qy_E0c -->\n\n<!-- bem-example: desktop.examples/attach/ozTrvWSbAw8rmCSYD_YNMb4uO80 -->\n\n<!-- bem-example: desktop.examples/attach/w_tWuwVyYuwv7N6i7jChuJOj8Vc -->\n"
                        }
                    }
                },
                {
                    "name": "button",
                    "data": {
                        "ru": {
                            "name": "button",
                            "examples": [
                                {
                                    "url": "desktop.tests/button/gemini"
                                },
                                {
                                    "url": "desktop.tests/button/simple"
                                }
                            ],
                            "description": "<h1 id=\"button\">button</h1>\n<p>Блок <code>button</code> используется для создания различных типов кнопок и предоставляет возможность изменять их размер, состояние, содержимое и внешний вид.</p>\n<h2 id=\"-\">Варианты использования кнопок</h2>\n<ul>\n<li>Обычная кнопка – применяется для любых кнопок веб-интерфейса. Используется по умолчанию.</li>\n<li>Кнопка-ссылка – применяется для перехода по ссылке. Задается модификатором <code>type</code> со значением <code>link</code>.</li>\n<li>Кнопка отправки формы – предназначена для отправки данных формы на сервер (submit). Задается модификатором <code>type</code> со значением <code>submit</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает текст кнопки.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code></td>\n        <td>Кнопка с иконкой, которая формируется блоком <code>icon</code>.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Адрес ссылки. Применяется только при наличии модификатора блока <code>button_type_link</code>. Кнопка становится ссылкой, а значение <code>url</code> – атрибутом <code>href</code>.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Уникальный идентификатор кнопки.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет последовательность перехода между кнопками при нажатии на <code>Tab</code>.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Значение, отправляемое на сервер. По умолчанию пустое.</td>\n    </tr>\n</table>\n\n<p>Другие допустимые атрибуты блока могут задаваться в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/button/pxTNfkqsHxpJmDhwS0QK2QBs3ZY -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/button/KtCevfKa_rzm7MTQMzA65Z0ZREU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/button/Rb77AVqNcSM2UUBxbCkUkHULKWc -->\n\n<h3 id=\"-_size-\">Размеры кнопок <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам кнопок.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>кнопки</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота<br>кнопки</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Типы кнопок <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки-ссылки (<code>_type_link</code>) и кнопки отправки формы (<code>_type_submit</code>).\nВ случак кнопки-ссылки, дополнительно во входных данных необходимо указать обязательный атрибут <code>url</code>. В таком случае кнопка получает тег <code>&lt;a&gt;</code>, а значение <code>url</code> становится атрибутом <code>href</code>.</p>\n<p><strong>Кнопка-ссылка</strong></p>\n<!-- bem-example: desktop.examples/button/El0pc_bZgByjhimDRiJmaUa0ubw -->\n\n<p><strong>Кнопка отправки формы</strong></p>\n<!-- bem-example: desktop.examples/button/gtF_RY9_ivjSx1sADQLwlLOSzmo -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_disabled-\">Неактивна <code>_disabled</code></h4>\n<p>В состоянии «неактивна» кнопка видна, но недоступна для действий пользователя.</p>\n<p>Такая кнопка не может получить фокус путем нажатия на клавишу <code>Tab</code>, мышью или другими способами.</p>\n<!-- bem-example: desktop.examples/button/VrNTsucLZEWlatBulG8rqd0wHxQ -->\n\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> кнопка всегда находится в фокусе. Нажатие по ней можно выполнить клавишей <code>Space</code> или <code>Enter</code>.</p>\n<!-- bem-example: desktop.examples/button/ByAZ1dHx4rZKUf9zbxuHmfOmGNs -->\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие «наведение курсором» на кнопку.</p>\n<h4 id=\"-_pressed-\">Нажатие <code>_pressed</code></h4>\n<p>Определяет состояние «нажатие на кнопку» (действие).</p>\n<h4 id=\"-_togglable-\">Залипание <code>_togglable</code></h4>\n<p>Позволяет реализовать залипание кнопки. Допустимые значения: <code>check</code> и <code>radio</code>.</p>\n<!-- bem-example: desktop.examples/button/NYbJzppv5-r9T8LQ0_-SaNLJWds -->\n\n<h4 id=\"-_action-\">Визуальное выделение <code>_action</code></h4>\n<p>Визуально выделяет кнопку на странице.</p>\n<!-- bem-example: desktop.examples/button/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"-_pseudo-\">Псевдокнопка <code>_pseudo</code></h4>\n<p>При выборе модификатора <code>pseudo</code> со значением <code>true</code>, кнопка получает прозрачный фон.</p>\n<!-- bem-example: desktop.examples/button/h_ijyu_mqbPaJBB22OxZERaFyZA -->\n\n<p>В неактивном состоянии границы псевдокнопки исчезают и она сливается со страницей.</p>\n<!-- bem-example: desktop.examples/button/igxPz7KCvCVG6TTxlXRYzE2_5pI -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"__text\">__text</h3>\n<p>Технический элемент. Обрамляет текст кнопки.\nНужен для позиционирования текста внутри кнопки, в том числе для случаев использования вместе с иконкой.</p>\n<!-- bem-example: desktop.examples/button/RQ8YcvhxhqjSwO3I3VjLBOanRns -->\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "button",
                            "examples": [
                                {
                                    "url": "desktop.tests/button/gemini"
                                },
                                {
                                    "url": "desktop.tests/button/simple"
                                }
                            ],
                            "description": "<h1 id=\"button\">button</h1>\n<p>The <code>button</code> block is used for different types of buttons creation. It allows you to manage size, sate, content and appearance of a button.</p>\n<h2 id=\"button-use-cases\">Button use cases</h2>\n<ul>\n<li>button – is used to create the majority of web inteface buttons. Used by default.</li>\n<li>link-button – a button that provides link functionality. Must have a mandatory modifier <code>type</code> with <code>link</code> value.</li>\n<li>action button – a button designed to send data to the server (submit). Must be always located inside a form. Sets <code>type</code> modifier with <code>submit</code> value in BEMJSON to create an action button.</li>\n</ul>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified in corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attributes</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Text of a button.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Button with an icon provided by an <code>icon</code> block.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>URL address. It is used only if <code>button_type_link</code> modifier is specified. In this case a button\n            acts as a link and <code>url</code> value is represented as a <code>href</code> attribute.\n        </td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Unique identifier of a button.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Defines tab order between the buttons.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Value to be sent to a server. It is empty by default.</td>\n    </tr>\n</table>\n\n<p>The other valid block&#39;s attributes could be specified in the <code>attrs</code> field in BEMJSON.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>The block supports the following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>Following examples demonstrate this:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/button/b7paW80CenjDPGtPNxSCdPuUKqg -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/button/8MGVemijL_tqZt4Z3DsedAxNwDo -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/button/u1hTHzxMhorqFlZaZXNkPIBN4WU -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier that is available for <em>normal</em> theme only.</p>\n<p>Provides all types of buttons with the <code>size</code> value.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Following examples demonstrate this:</p>\n<table>\n  <tr>\n    <th>Size</th>\n    <th>Font size</th>\n    <th>Button height</th>\n    <th>Example</th>\n  </tr>\n  <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The block could be represented as a <code>link-button</code> (<code>button_type_link</code>).</p>\n<p>This button type has mandatory attribute <code>url</code> that should be specified in BEMJSON input data. A link-button has an <code>&lt;a&gt;</code> attribute. <code>url</code> value becomes <code>href</code> attribute.</p>\n<pre><code>{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;link&#39; },\n    url : &#39;#&#39;,\n    text : &#39;Link-button&#39;\n}\n</code></pre><h3 id=\"button-s-states\">Button&#39;s states</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, button is visible but not available for user action.</p>\n<p>Disabled button cannot be focused by pressing a <code>Tab</code> or on mouse click.</p>\n<pre><code class=\"lang-bemjsom\">{\n    block : &#39;button&#39;,\n    text : &#39;Disabled&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, disabled : true }\n}\n</code></pre>\n<h4 id=\"_focused\">_focused</h4>\n<p>If <code>focused</code> modifier has <code>true</code> value, the button is always focused. You can click the focused button using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: desktop.examples/button/UkvwYMbpDOkZaq5dm0uIlVbQ9GA -->\n\n<h4 id=\"_hovered\">_hovered</h4>\n<p>Defines &quot;hover&quot; action.</p>\n<h4 id=\"_pressed\">_pressed</h4>\n<p>Defines &quot;pressed&quot; state of a button.</p>\n<h4 id=\"_togglable\">_togglable</h4>\n<p>Defines a state of the pressed button when the first click presses the button, and the second returns it to its original state.</p>\n<!-- bem-example: desktop.examples/button/xAkZMTZIyMq8S8Cc5mWrpqEj5Cc -->\n\n<h4 id=\"_action\">_action</h4>\n<p>Visually highlights a button on a page.</p>\n<!-- bem-example: desktop.examples/button/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"_pseudo\">_pseudo</h4>\n<p>If <code>pseudo</code> modifier has <code>true</code> value, the button background becomes transparent.</p>\n<!-- bem-example: desktop.examples/button/GVMyNpdJjINIl0Ab_qhtsWRf_YA -->\nIf pseudo button is disabled, its boarders disappear.\n\n<!-- bem-example: desktop.examples/button/fc2vxXBIzzk2stACB-J9vRKlYQ4 -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"__text\">__text</h3>\n<p>This auxiliary element sets a text position inside the button.</p>\n<!-- bem-example: desktop.examples/button/t_3HDmaOrqYMmf-3NPSa4KJZWBY -->\n\n<h2 id=\"block-s-dependencies\">Block&#39;s dependencies</h2>\n<ul>\n<li><code>control</code>, that provides public API for the controls</li>\n<li><code>i-bem__dom</code></li>\n<li><code>keyboard</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"button-module\">button Module</h1>\n<h2 id=\"button-block\">button Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns text of the button</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"settext-text-button-\">setText ( text ) → {button}</h4>\n<p>Sets text to the button</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>text {String}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{button}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"control-module\">control Module</h1>\n"
                },
                {
                    "name": "checkbox",
                    "data": {
                        "ru": {
                            "name": "checkbox",
                            "examples": [
                                {
                                    "url": "desktop.tests/checkbox/gemini"
                                },
                                {
                                    "url": "desktop.tests/checkbox/simple"
                                },
                                {
                                    "url": "desktop.tests/checkbox-group/gemini"
                                },
                                {
                                    "url": "desktop.tests/checkbox-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"checkbox\">checkbox</h1>\n<p>Блок <code>checkbox</code> («чекбокс») позволяет управлять параметром выбора с двумя состояниями – включено и выключено. Используется, когда необходимо выбрать более одного варианта из предложенных.</p>\n<p>Блок создает контейнер, содержащий нативный контрол чекбокс (элемент <code>control</code>) <code>&lt;input class=&quot;checkbox__control&quot; type=&quot;checkbox&quot;&gt;</code>, который скрывается при использовании модификатора <code>theme</code>.</p>\n<p>Атрибут <code>autocomplete</code> принудительно переведен в состояние <code>off</code> для обеспечения корректной работы блока.</p>\n<!-- bem-example: desktop.examples/checkbox/XI4uPzI90-UiMiWRig9noeu3mrg -->\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение текстовой строке чекбокса.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя чекбокса. Обязательный атрибут. Является частью пары имя / значение (name / value), используемой с целью отправки формы.</td>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение чекбокса. Является частью пары имя / значение (name / value), используемой с целью отправки формы.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Иконка, которая отображается с помощью блока <code>icon</code>.</td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/checkbox/sae-WwdkdYcrwwgUC5hw2NDih4 -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/checkbox/SojNrUmXHg8qOEVNxLMELyPxf1I -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/checkbox/Sgn48vD0-J9Y9jIc1geFcHu6qVA -->\n\n<h3 id=\"-_size-\">Размер <code>_size</code></h3>\n<p>Задает размер шрифта.</p>\n<p>Обязательный модификатор. Реализован только в теме <em>normal</em>.</p>\n<p>Доступно два размера реализации блока: <strong>M</strong>, <strong>L</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>блока</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота строки<br>элемента <code>__box</code></th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;\n    },\n    text : &#39;Размер M&#39;,\n    name: &#39;name2&#39;,\n    val: &#39;2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>17px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;\n    },\n    text : &#39;Размер L&#39;,\n    name: &#39;name3&#39;,\n    val: &#39;3&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Тип <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки (модификатор <code>type</code> в значении <code>button</code>). В таком случае выбор элемента происходит нажатием на кнопку.</p>\n<!-- bem-example: desktop.examples/checkbox/GSqTjc8TX7KG5JpqDbcpS1N0CZM -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> чекбокс всегда находится в фокусе. Если блок представлен в виде кнопки, она приобретает желтую тень. Нажатие по чекбоксу можно выполнить клавишей <code>Space</code> или <code>Enter</code>. Переход по контролам формы осуществляется клавишей <code>Tab</code>.</p>\n<!-- bem-example: desktop.examples/checkbox/79qZiqVxBY5r5ZaX_gUFH7MMT5Y -->\n\n<!-- bem-example: desktop.examples/checkbox/tU4ymq_plszDwGgrM91feVLkv6s -->\n\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии «неактивен» чекбокс виден, но недоступен для действий пользователя.</p>\n<p>Такой чекбос не может получить фокус путем нажатия на клавишу <code>Tab</code> мышью или другими способами.</p>\n<!-- bem-example: desktop.examples/checkbox/GiSyOjElYwkWa_mbNQ4LvfexC8o -->\n\n<!-- bem-example: desktop.examples/checkbox/MiwyveGqb-Q3hDh6b5dvanmXUc0 -->\n\n<h4 id=\"-_checked-\">Отмечен <code>_checked</code></h4>\n<p>Модификатор <code>checked</code> в значении <code>true</code> определяет, что чекбокс отмечен (выбран).</p>\n<p>Модификатор <code>checked</code> может быть применен ко всем чекбоксам в группе.</p>\n<!-- bem-example: desktop.examples/checkbox/IMYtMHFDZhN_agFpLXmNIDTAK4Q -->\n\n<!-- bem-example: desktop.examples/checkbox/ZWO500NSNVuNcdNcItDCWIHDH3o -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>Элемент <code>box</code> служит для отрисовки чекбокса, нативный чекбокс скрыт.</p>\n<p>Добавляется блоку на уровне шаблонизатора.</p>\n<h3 id=\"-__control-\">Контрол <code>__control</code></h3>\n<p>Элемент <code>control</code> служит для использования функциональности нативного контрола чекбокса.</p>\n<p>Добавляется блоку на уровне шаблонизатора.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "checkbox",
                            "examples": [
                                {
                                    "url": "desktop.tests/checkbox/gemini"
                                },
                                {
                                    "url": "desktop.tests/checkbox/simple"
                                },
                                {
                                    "url": "desktop.tests/checkbox-group/gemini"
                                },
                                {
                                    "url": "desktop.tests/checkbox-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"checkbox\">checkbox</h1>\n<p>Block <code>checkbox</code> is a graphical user interface element that allows user to make a binary choice. The block is used when more then one case should be selected.</p>\n<p>Block creates a container that includes a native checkbox control (<code>control</code> element) <code>&lt;input class=&quot;checkbox__control&quot; type=&quot;checkbox&quot; attributes&gt;</code> that is hidden if a <code>theme</code> modifier is specified.</p>\n<p><code>autocomplete</code> attribute is forced to <code>off</code> state to provide correct behavior of the block.</p>\n<!-- bem-example: desktop.examples/checkbox/XI4uPzI90-UiMiWRig9noeu3mrg -->\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified within the corresponding fields of the block BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies text string value of a checkbox.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies a checkbox name. A mandatory attribute. The name part of the name/val pair associated with this element for form&#39;s submission purposes.</td>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies a checkbox value. Value part of the name/val pair associated with this element for the form&#39;s submission purposes.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>An icon that is rendered using an <code>icon</code> block.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Block supports following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>See the following examples for demonstration:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/checkbox/sae-WwdkdYcrwwgUC5hw2NDih4 -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/checkbox/SojNrUmXHg8qOEVNxLMELyPxf1I -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/checkbox/Sgn48vD0-J9Y9jIc1geFcHu6qVA -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier for <em>normal</em> theme only.\nProvides checkbox text elements with font size value.</p>\n<p>There are two sizes available: <strong>M</strong>, <strong>L</strong>.</p>\n<p>See the following examples for demonstration:</p>\n<table>\n    <tr>\n        <th>Block size</th>\n        <th>Font size</th>\n        <th>String height<br>of <code>__box</code></th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;\n    },\n    text : &#39;Size M&#39;,\n    name: &#39;name2&#39;,\n    val: &#39;2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>17px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;\n    },\n    text : &#39;Size L&#39;,\n    name: &#39;name3&#39;,\n    val: &#39;3&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The <code>checkbox</code> block can be rendered as a button. If needed, use <code>type</code> modifier with <code>button</code> value. In this case <code>checked</code> state of a checkbox is defined by clicking the button.</p>\n<!-- bem-example: desktop.examples/checkbox/jnUIxNLmi2Ktczi3mi_QWJt7-cc -->\n\n<h3 id=\"states-of-a-checkbox\">States of a checkbox</h3>\n<h4 id=\"_focused\">_focused</h4>\n<p>Checkbox is focused if block has <code>focused</code> modifier with <code>true</code> value. If block is designed as a button, in <code>focused</code> state it has a yellow shadow.</p>\n<p>You can tick off the focused checkbox using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: desktop.examples/checkbox/dOZ5XkX9ojCi2r9kiY4DJa4YWvA -->\n\n<!-- bem-example: desktop.examples/checkbox/v-9BRGnxLdDNcDKCfuStYG9PRYU -->\n\n<h4 id=\"-_disabled-\"><code>_disabled</code></h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, the checkbox is visible but not available for user&#39;s action.</p>\n<p>Disabled checkbox cannot be focused by pressing <code>Tab</code> or on mouse click.</p>\n<!-- bem-example: desktop.examples/checkbox/Dz3sVcJ6LQvatoLktNJM35QPIso -->\n\n<!-- bem-example: desktop.examples/checkbox/Lc_qQBikKsf-9GuBeR0FLc4-3k0 -->\n#### <code>_checked</code>\n\n<code>checked</code> modifier with <code>true</code> value defines checkbox as checked.\n\n<code>checked</code> modifier can be used for all checkboxes within the group.\n\n<!-- bem-example: desktop.examples/checkbox/QcTYyDncRH6DrvinlVti5iujuxU -->\n\n<!-- bem-example: desktop.examples/checkbox/9OMss9AsUlfFVAPsG8SlTTcVlLI -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p><code>box</code> element is used to draw the checkbox. Native checkbox is hidden.</p>\n<p><code>box</code> element is added to the block on template engine level.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p><code>control</code> element is used to provide native control checkbox functionality.</p>\n<p><code>control</code> element is added to the block on template engine level.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"checkbox-module\">checkbox Module</h1>\n<h2 id=\"checkbox-block\">checkbox Block</h2>\n<p>Aughtments {control}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"control-module\">control Module</h1>\n"
                },
                {
                    "name": "checkbox-group",
                    "jsdoc": "<h1 id=\"checkbox-group-module\">checkbox-group Module</h1>\n<h2 id=\"checkbox-group-block\">checkbox-group Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"setval-val-data-checkbox-group-\">setVal ( val, [data] ) → {checkbox-group}</h4>\n<p>Sets control value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {[object Object]}<br/>\nvalue</li>\n<li>[data] {Object}<br/>\nadditional data</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{checkbox-group}</p>\n<p>this</p>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getcheckboxes-object-object-\">getCheckboxes () → {[object Object]}</h4>\n<p>Returns checkboxes</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{[object Object]}</p>\n<h1 id=\"checkbox-module\">checkbox Module</h1>\n<h2 id=\"checkbox-block\">checkbox Block</h2>\n<p>Aughtments {control}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"control-module\">control Module</h1>\n",
                    "data": {
                        "ru": {
                            "name": "checkbox-group",
                            "examples": [
                                {
                                    "url": "desktop.tests/checkbox-group/gemini"
                                },
                                {
                                    "url": "desktop.tests/checkbox-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"checkbox-group\">checkbox-group</h1>\n<p>Блок <code>checkbox-group</code> служит для отображения группы однотипных переключателей – чекбоксов (блоков <code>checkbox</code>). Любой из переключателей группы может быть либо активен, либо нет вне зависимости от состояния других переключателей.</p>\n<p>Блок позволяет управлять внешним видом и состоянием вложенных переключателей. </p>\n<p>В результате BEMHTML-преобразований блок <code>checkbox-group</code> становится HTML-элементом с тегом <code>&lt;span&gt;</code> – контейнером, содержащим группу чекбоксов и подписи к ним.</p>\n<h2 id=\"-\">Допустимые параметры блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td><code>String</code></td>\n        <td>Имя группы чекбоксов. Преобразуется в HTML-атрибут <code>name</code> вложенного блока <code>input</code>.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td><code>Array</code></td>\n        <td>Массив хешей. Каждый хеш соответствует одному переключателю группы чекбоксов и содержит набор его параметров.</td>\n    </tr><br></table>\n\n<p>Среди параметров, передаваемых для переключателя в массиве хешей <code>option</code>, обязательными являются:</p>\n<ul>\n<li><code>val</code> (<code>String</code>|<code>Number</code>) – значение, возвращаемое выбранным чекбоксом (элемент <code>checkbox__control</code>);</li>\n<li><code>text</code>  (<code>String</code>) – подпись, отображаемая для текущего переключателя. </li>\n</ul>\n<p>Помимо обязательных параметров в массиве <code>option</code> могут быть переданы любые параметры, допустимые для блока <code>checkbox</code>, например, модификаторы <code>_checked</code> или <code>_disabled</code>.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>). </p>\n<p>Наглядно показано на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/checkbox-group/tnfPsUBEHfiKv4Ay-bSkmy06NTs -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/checkbox-group/E4bazg4TDlm1W1tmOFMVgeAT1k0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/checkbox-group/uf6KFu6RRJ3CJRzlZj5THp-53ss -->\n\n\n\n<h3 id=\"-_size-\">Размер переключателей <code>_size</code></h3>\n<p>Обязательный модификатор. Модификатор <code>_size</code> устанавливает размер переключателей для всех типов групп чекбоксов.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>В зависимости от значения модификатора <code>_type</code> доступны следующие размеры реализации блока:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Обычная группа чекбоксов и <code>_type_line</code></th>\n        <th>Кнопочная группа чекбоксов (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n<p>Размеры на примере темы <em>normal</em> с модификатором <code>_type_button</code>:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;s&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;xl&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-_type-\">Тип группы чекбоксов <code>_type</code></h3>\n<p>Доступны следующие значения модификатор <code>_type</code>:</p>\n<ul>\n<li>Модификатор <code>_type</code> со значением <code>button</code>. Используется для создания кнопочной группы чекбоксов – блока из кнопок-переключателей. </li>\n<li>Модификатор <code>_type</code> со значением <code>line</code> используется для создания группы чекбоксов с выравниванием в строку. После каждого переключателя группы, кроме последнего, автоматически добавляется отступ справа. Размер отступа зависит от значения модификатора <code>_size</code>. Реализован только в теме <em>normal</em>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычная группа чекбоксов</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;checkbox-normal&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Кнопочная группа чекбоксов (<code>_type_button</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Строчная группа чекбоксов (<code>_type_line</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;line&#39; \n    },\n    name : &#39;checkbox-line&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h3 id=\"-_disabled-\">Неактивна <code>_disabled</code></h3>\n<p>В состоянии &quot;неактивна&quot; группа чекбоксов отображается, но недоступна для действий пользователя.  </p>\n<p>Такая группа чекбоксов не будет получать фокус (модификатор <code>_focused</code>).</p>\n<p>При установке модификатора <code>_disabled</code> для группы всем переключателям группы также устанавливается модификатор <code>_disabled</code>. Как следствие, для них не будут:</p>\n<ul>\n<li>устанавливаться модификаторы состояния <code>_hovered</code>, <code>_pressed</code> и <code>_focused</code>;</li>\n<li>изменяться значения модификатора <code>_checked</code>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/checkbox-group/0fQuAArjlUOj9blciZz3wIEpK-4 -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>_focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда один из его элементов находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/checkbox-group/sXOo9d9aGajzFuorGRIhhEViolU -->\n\n\n<h2 id=\"-\">Зависимости блока</h2>\n<p>Блок <code>checkbox-group</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>checkbox</code></li>\n<li><code>jquery</code></li>\n</ul>\n\n<h1 id=\"checkbox\">checkbox</h1>\n<p>Блок <code>checkbox</code> («чекбокс») позволяет управлять параметром выбора с двумя состояниями – включено и выключено. Используется, когда необходимо выбрать более одного варианта из предложенных.</p>\n<p>Блок создает контейнер, содержащий нативный контрол чекбокс (элемент <code>control</code>) <code>&lt;input class=&quot;checkbox__control&quot; type=&quot;checkbox&quot;&gt;</code>, который скрывается при использовании модификатора <code>theme</code>.</p>\n<p>Атрибут <code>autocomplete</code> принудительно переведен в состояние <code>off</code> для обеспечения корректной работы блока.</p>\n<!-- bem-example: desktop.examples/checkbox-group/XI4uPzI90-UiMiWRig9noeu3mrg -->\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение текстовой строке чекбокса.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя чекбокса. Обязательный атрибут. Является частью пары имя / значение (name / value), используемой с целью отправки формы.</td>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение чекбокса. Является частью пары имя / значение (name / value), используемой с целью отправки формы.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Иконка, которая отображается с помощью блока <code>icon</code>.</td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/checkbox-group/sae-WwdkdYcrwwgUC5hw2NDih4 -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/checkbox-group/SojNrUmXHg8qOEVNxLMELyPxf1I -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/checkbox-group/Sgn48vD0-J9Y9jIc1geFcHu6qVA -->\n\n<h3 id=\"-_size-\">Размер <code>_size</code></h3>\n<p>Задает размер шрифта.</p>\n<p>Обязательный модификатор. Реализован только в теме <em>normal</em>.</p>\n<p>Доступно два размера реализации блока: <strong>M</strong>, <strong>L</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>блока</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота строки<br>элемента <code>__box</code></th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;\n    },\n    text : &#39;Размер M&#39;,\n    name: &#39;name2&#39;,\n    val: &#39;2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>17px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;\n    },\n    text : &#39;Размер L&#39;,\n    name: &#39;name3&#39;,\n    val: &#39;3&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Тип <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки (модификатор <code>type</code> в значении <code>button</code>). В таком случае выбор элемента происходит нажатием на кнопку.</p>\n<!-- bem-example: desktop.examples/checkbox-group/GSqTjc8TX7KG5JpqDbcpS1N0CZM -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> чекбокс всегда находится в фокусе. Если блок представлен в виде кнопки, она приобретает желтую тень. Нажатие по чекбоксу можно выполнить клавишей <code>Space</code> или <code>Enter</code>. Переход по контролам формы осуществляется клавишей <code>Tab</code>.</p>\n<!-- bem-example: desktop.examples/checkbox-group/79qZiqVxBY5r5ZaX_gUFH7MMT5Y -->\n\n<!-- bem-example: desktop.examples/checkbox-group/tU4ymq_plszDwGgrM91feVLkv6s -->\n\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии «неактивен» чекбокс виден, но недоступен для действий пользователя.</p>\n<p>Такой чекбос не может получить фокус путем нажатия на клавишу <code>Tab</code> мышью или другими способами.</p>\n<!-- bem-example: desktop.examples/checkbox-group/GiSyOjElYwkWa_mbNQ4LvfexC8o -->\n\n<!-- bem-example: desktop.examples/checkbox-group/MiwyveGqb-Q3hDh6b5dvanmXUc0 -->\n\n<h4 id=\"-_checked-\">Отмечен <code>_checked</code></h4>\n<p>Модификатор <code>checked</code> в значении <code>true</code> определяет, что чекбокс отмечен (выбран).</p>\n<p>Модификатор <code>checked</code> может быть применен ко всем чекбоксам в группе.</p>\n<!-- bem-example: desktop.examples/checkbox-group/IMYtMHFDZhN_agFpLXmNIDTAK4Q -->\n\n<!-- bem-example: desktop.examples/checkbox-group/ZWO500NSNVuNcdNcItDCWIHDH3o -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>Элемент <code>box</code> служит для отрисовки чекбокса, нативный чекбокс скрыт.</p>\n<p>Добавляется блоку на уровне шаблонизатора.</p>\n<h3 id=\"-__control-\">Контрол <code>__control</code></h3>\n<p>Элемент <code>control</code> служит для использования функциональности нативного контрола чекбокса.</p>\n<p>Добавляется блоку на уровне шаблонизатора.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "checkbox-group",
                            "examples": [
                                {
                                    "url": "desktop.tests/checkbox-group/gemini"
                                },
                                {
                                    "url": "desktop.tests/checkbox-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"checkbox-group\">checkbox-group</h1>\n<p>A <code>checkbox-group</code> block is a set of independed switches – checkboxes (a <code>checkbox</code> block). Any of group&#39;s switches can be either active or not regardless of other switches state.</p>\n<p>The block allows to manage the appearance and state of a nested switches.</p>\n<p>On a web page <code>checkbox-group</code> block will be rendered to <code>&lt;span&gt;</code> HTML element, with a nested set of checkboxes and their labels.</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified in the corresponding fields of block BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td><code>String</code></td>\n        <td>The checkbox group name. Renders to nested <code>input</code> block&#39;s <code>name</code> HTML attribute.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td><code>Array</code></td>\n        <td>The option objects array. Each object within the array corresponds to one switch and contains it&#39;s attributes set.</td>\n    </tr><br></table>\n\n<p>Following attributes should be passed in an <code>option</code> field for each switch:</p>\n<ul>\n<li><code>val</code> (<code>String</code> | <code>Number</code>) – value returned by selected switcher (a &#39;checkbox__control&#39; element);</li>\n<li><code>text</code> (<code>String</code>) – a text label for the current switch.</li>\n</ul>\n<p>In an <code>options</code> array any valid <code>checkbox</code> block attributes can be passed. For example, a <code>_checked</code> or <code>_disabled</code> modifiers can be set for the <code>checkbox</code>.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/checkbox-group/tnfPsUBEHfiKv4Ay-bSkmy06NTs -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/checkbox-group/E4bazg4TDlm1W1tmOFMVgeAT1k0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/checkbox-group/uf6KFu6RRJ3CJRzlZj5THp-53ss -->\n\n\n<h3 id=\"the-sizes-_size-\">The sizes <code>_size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides all types of checkbox groups with the size value.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Depending on a <code>_type</code> modifier value following sizes are available:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Normal checkbox group and <code>_type_line</code></th>\n        <th>Button checkbox group (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<p>Here are some examples with <em>normal</em> theme and the <code>_type_button</code> modifier is set:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;s&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;xl&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"checkbox-group-type-_type-\">Checkbox group type <code>_type</code></h3>\n<p>A <code>_type</code> modifier can have following values:</p>\n<ul>\n<li><code>button</code>. It is used for creation of button checkbox group – a block of button switches;</li>\n<li><code>line</code>. It is used for line-aligned checkbox group creation. Right gap is automatically added after each switch of the group except the last one. Available only for <em>normal</em> theme.</li>\n</ul>\n<p>Modifier is available for all block themes.</p>\n<table>\n    <tr>\n        <th>Type</th>\n\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Normal checkbox group</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;checkbox-normal&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Button checkbox group</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Line-aligned checkbox group (<code>_type_line</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;line&#39; \n    },\n    name : &#39;checkbox-line&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive menu item. Inactive menu item is displayed, but not available for user actions.</p>\n<p>Such a group will not obtain a focus (<code>_focused</code> modifier will not be toggled).</p>\n<p>When a <code>_disabled</code> modifier is set for the group, all it&#39;s switches also will be disabled. As a result, the following will not be performed on switches:</p>\n<ul>\n<li>state modifiers <code>_hovered</code>, <code>_pressed</code> and <code>_focused</code> toggling;</li>\n<li>switching between <code>_checked</code> modifier&#39;s values.</li>\n</ul>\n<p>Modifier is available for all block themes.</p>\n<!-- bem-example: desktop.examples/checkbox-group/0fQuAArjlUOj9blciZz3wIEpK-4 -->\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"-_focused-\"><code>_focused</code></h4>\n<p>A <code>_focused</code> \n_focused modifier is automatically toggled when one of the block&#39;s elements is in focus. For example, on mouse click or by <code>Tab</code> key press. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/checkbox-group/sXOo9d9aGajzFuorGRIhhEViolU -->\n\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>checkbox</code></li>\n<li><code>jquery</code></li>\n</ul>\n\n<h1 id=\"checkbox\">checkbox</h1>\n<p>Block <code>checkbox</code> is a graphical user interface element that allows user to make a binary choice. The block is used when more then one case should be selected.</p>\n<p>Block creates a container that includes a native checkbox control (<code>control</code> element) <code>&lt;input class=&quot;checkbox__control&quot; type=&quot;checkbox&quot; attributes&gt;</code> that is hidden if a <code>theme</code> modifier is specified.</p>\n<p><code>autocomplete</code> attribute is forced to <code>off</code> state to provide correct behavior of the block.</p>\n<!-- bem-example: desktop.examples/checkbox-group/XI4uPzI90-UiMiWRig9noeu3mrg -->\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified within the corresponding fields of the block BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies text string value of a checkbox.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies a checkbox name. A mandatory attribute. The name part of the name/val pair associated with this element for form&#39;s submission purposes.</td>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies a checkbox value. Value part of the name/val pair associated with this element for the form&#39;s submission purposes.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>An icon that is rendered using an <code>icon</code> block.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Block supports following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>See the following examples for demonstration:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/checkbox-group/sae-WwdkdYcrwwgUC5hw2NDih4 -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/checkbox-group/SojNrUmXHg8qOEVNxLMELyPxf1I -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/checkbox-group/Sgn48vD0-J9Y9jIc1geFcHu6qVA -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier for <em>normal</em> theme only.\nProvides checkbox text elements with font size value.</p>\n<p>There are two sizes available: <strong>M</strong>, <strong>L</strong>.</p>\n<p>See the following examples for demonstration:</p>\n<table>\n    <tr>\n        <th>Block size</th>\n        <th>Font size</th>\n        <th>String height<br>of <code>__box</code></th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;\n    },\n    text : &#39;Size M&#39;,\n    name: &#39;name2&#39;,\n    val: &#39;2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>17px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;\n    },\n    text : &#39;Size L&#39;,\n    name: &#39;name3&#39;,\n    val: &#39;3&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The <code>checkbox</code> block can be rendered as a button. If needed, use <code>type</code> modifier with <code>button</code> value. In this case <code>checked</code> state of a checkbox is defined by clicking the button.</p>\n<!-- bem-example: desktop.examples/checkbox-group/jnUIxNLmi2Ktczi3mi_QWJt7-cc -->\n\n<h3 id=\"states-of-a-checkbox\">States of a checkbox</h3>\n<h4 id=\"_focused\">_focused</h4>\n<p>Checkbox is focused if block has <code>focused</code> modifier with <code>true</code> value. If block is designed as a button, in <code>focused</code> state it has a yellow shadow.</p>\n<p>You can tick off the focused checkbox using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: desktop.examples/checkbox-group/dOZ5XkX9ojCi2r9kiY4DJa4YWvA -->\n\n<!-- bem-example: desktop.examples/checkbox-group/v-9BRGnxLdDNcDKCfuStYG9PRYU -->\n\n<h4 id=\"-_disabled-\"><code>_disabled</code></h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, the checkbox is visible but not available for user&#39;s action.</p>\n<p>Disabled checkbox cannot be focused by pressing <code>Tab</code> or on mouse click.</p>\n<!-- bem-example: desktop.examples/checkbox-group/Dz3sVcJ6LQvatoLktNJM35QPIso -->\n\n<!-- bem-example: desktop.examples/checkbox-group/Lc_qQBikKsf-9GuBeR0FLc4-3k0 -->\n#### <code>_checked</code>\n\n<code>checked</code> modifier with <code>true</code> value defines checkbox as checked.\n\n<code>checked</code> modifier can be used for all checkboxes within the group.\n\n<!-- bem-example: desktop.examples/checkbox-group/QcTYyDncRH6DrvinlVti5iujuxU -->\n\n<!-- bem-example: desktop.examples/checkbox-group/9OMss9AsUlfFVAPsG8SlTTcVlLI -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p><code>box</code> element is used to draw the checkbox. Native checkbox is hidden.</p>\n<p><code>box</code> element is added to the block on template engine level.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p><code>control</code> element is used to provide native control checkbox functionality.</p>\n<p><code>control</code> element is added to the block on template engine level.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    }
                },
                {
                    "name": "control",
                    "jsdoc": "<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"control-module\">control Module</h1>\n",
                    "data": {
                        "ru": {
                            "name": "control",
                            "examples": [
                                {
                                    "url": "desktop.tests/control-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "control",
                            "examples": [
                                {
                                    "url": "desktop.tests/control-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    }
                },
                {
                    "name": "control-group",
                    "data": {
                        "ru": {
                            "name": "control-group",
                            "examples": [
                                {
                                    "url": "desktop.tests/control-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"control-group\">control-group</h1>\n<p>Блок <code>control-group</code> – это обертка, предназначенная для визуальной группировки других блоков. Группируемые блоки помещаются в поле <code>content</code> BEMJSON декларации.</p>\n<p>Блок реализован в технологии CSS и не вводит никакой дополнительной логики. Для вложенных блоков должна быть установлена тема <em>normal</em>.</p>\n<p>В результате применения шаблонов, блок <code>control-group</code> становится на странице HTML-элементом с тегом <code>&lt;div&gt;</code>.</p>\n<h2 id=\"-\">Варианты использования</h2>\n<p>Блок позволяет визуально группировать следующие блоки:</p>\n<ul>\n<li><code>input</code> – поле ввода;</li>\n<li><code>button</code> – кнопка.</li>\n</ul>\n<p>Например:</p>\n<!-- bem-example: desktop.examples/control-group/fejhOE157s9FNaOpEk9kSMdri-o -->\n\n\n<p>Кроме того, можно группировать блоки, использующие <code>input</code> или <code>button</code>, как один из компонентов. Например, в группу можно включить блок <code>select</code>, управляющим компонентом для которого служит блок <code>button</code>: </p>\n<!-- bem-example: desktop.examples/control-group/lHp4oG073ZGY5eBJUg8oGuaTzJY -->\n\n<p>Могут быть сгруппированы следующие блоки, использующие в качестве компонента блок <code>button</code>:</p>\n<ul>\n<li><code>select</code>;</li>\n<li><code>dropdown</code> (с модификатором <code>dropdown_switcher_button</code>);</li>\n<li><code>checkbox</code> (с модификатором <code>checkbox_type_button</code>);</li>\n<li><code>radio</code> (с модификатором <code>radio_type_button</code>).</li>\n</ul>\n<h2 id=\"-\">Влияние группировки на блоки</h2>\n<h3 id=\"-input-\"><code>input</code></h3>\n<p>Для всех сгруппированных блоков <code>input</code>, кроме последнего, не отображается правая граница (CSS свойство <code>right</code> устанавливается равным нулю для псевдоэлемента <code>:before</code>). Для последнего блока группы толщина правой границы равна 1px.</p>\n<p>Например:</p>\n<!-- bem-example: desktop.examples/control-group/Vn0lE-sI73yNqDW_-Ki-KHmd-HE -->\n\n\n<h3 id=\"-button-\"><code>button</code></h3>\n<p>Для блоков <code>button</code> группировка влияет на скругление углов и наличие правой границы. Внешний вид зависит от положения блока <code>button</code> внутри группы – первый и последний элементы группы визуально отличаются от прочих:</p>\n<table>\n    <tr>\n        <th>Положение в группе</th>\n        <th>Скругление углов</th>\n        <th>Правый отступ</th>\n    </tr>\n    <tr>\n        <td>Первый</td>\n        <td>Скруглены левые углы, верхний и нижний</td>\n        <td>-</td>\n    </tr>\n    <tr>\n        <td>Последний</td>\n        <td>Скруглены правые углы, верхний и нижний</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <td>Не из крайних</td>\n        <td>Без скругления углов</td>\n        <td>-</td>\n    </tr><br></table>\n\n<p>Например:</p>\n<!-- bem-example: desktop.examples/control-group/1bLuZM-NN_21QWtOqEuefvxxCuE -->\n"
                        },
                        "en": {
                            "name": "control-group",
                            "examples": [
                                {
                                    "url": "desktop.tests/control-group/simple"
                                }
                            ],
                            "description": ""
                        }
                    },
                    "jsdoc": ""
                },
                {
                    "name": "dropdown",
                    "jsdoc": "<h1 id=\"dropdown-module\">dropdown Module</h1>\n<h2 id=\"dropdown-block\">dropdown Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getpopup-popup-\">getPopup () → {popup}</h4>\n<p>Returns popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<h4 id=\"getswitcher-i-bem__dom-\">getSwitcher () → {i-bem__dom}</h4>\n<p>Returns switcher</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{i-bem__dom}</p>\n<h3 id=\"static-methods\">Static methods</h3>\n<h4 id=\"onswitcherclick-e-protected\">onSwitcherClick ( e )  protected</h4>\n<p>On BEM click event handler</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>e {events:Event}</li>\n</ul>\n<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup_autoclosable_true\">popup_autoclosable_true</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup_autoclosable_true\">popup_autoclosable_true</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n",
                    "data": {
                        "ru": {
                            "name": "dropdown",
                            "examples": [
                                {
                                    "url": "desktop.tests/dropdown/gemini"
                                },
                                {
                                    "url": "desktop.tests/dropdown/simple"
                                }
                            ],
                            "description": "<h1 id=\"dropdown\">dropdown</h1>\n<p>Блок <code>dropdown</code> используется для создания выпадающих элементов и позволяет изменять их состояние, поведение и внешний вид. Блок состоит из двух компонентов – управляющего компонента и попапа (блок <code>popup</code>), который отображается поверх остальных элементов страницы.</p>\n<p>Управляющий компонент при щелчке мышью вызывает попап (устанавливает для блока <code>popup</code> модификатор <code>_visible</code>).</p>\n<p>В зависимости от значения модификатора <code>_switcher</code> управляющим компонентом может служить ссылка, псевдоссылка или кнопка.</p>\n<h2 id=\"-\">Допустимые параметры блока</h2>\n<p>Допустимые параметры блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>switcher</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Текст управляющего компонента. Может содержать фрагмент BEMJSON, например, если нужно обернуть управляющий компонент в другой блок или передать ему дополнительные параметры. </td>\n    </tr>\n    <tr>\n        <td>popup</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Текст или фрагмент BEMJSON, отображаемый во всплывающем окне <code>popup</code>. BEMJSON при этом будет преобразован в HTML.</td>\n    </tr>\n</table>\n\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Наглядно показано на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/dropdown/WcgFmT2l-N83y2w6hRJ-qqSpzkY -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/dropdown/3LxBJkGCYdsRIM3jgENaGnBRRuI -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/dropdown/7xwP-2BJ2nd_leTd5MyNfCK8-wA -->\n\n\n\n<h3 id=\"-_switcher-\">Управляющий компонент <code>_switcher</code></h3>\n<p>Обязательный модификатор.</p>\n<p>Модификатор отвечает за то, какой блок будет использоваться в качестве управляющего компонента:</p>\n<ul>\n<li><code>_switcher_link</code> - ссылка. В качестве управляющего компонента используется блок <code>link</code>.</li>\n<li><code>_switcher_button</code> - кнопка. В качестве управляющего компонента используется блок <code>button</code>.</li>\n</ul>\n<p>Реализован во всех темах.</p>\n<!-- bem-example: desktop.examples/dropdown/TZQCpS37p6PxRpc44EhMDX395AA -->\n\n\n<h3 id=\"-_disabled-\">Неактивен <code>_disabled</code></h3>\n<p>В состоянии &quot;неактивен&quot; дропдаун отображается, но недоступен для действий пользователя.</p>\n<p>Для такого блока не будет устанавливаться состояние <code>_opened</code> при щелчке мышью по управляющему компоненту.</p>\n<p>При установке для блока модификатора <code>_disabled</code> для компонентов блока не будут производиться следующие действия:</p>\n<ul>\n<li>Блок </code>popup – установка модификатора <code>_visible</code>;</li>\n<li>Управляющий компонент <code>link</code> – установка состояния <code>_focused</code>. Ссылка не получает фокус по щелчку мышью или по нажатию клавиши <code>Tab</code>;</li>\n<li>Управляющий компонент <code>button</code>:<ul>\n<li>установка состояния <code>_focused</code>. Кнопка не получает фокус по щелчку мышью или по нажатию клавиши <code>Tab</code>;</li>\n<li>установка состояния <code>_hovered</code> при наведении указателем мыши.</li>\n</ul>\n</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/dropdown/T2LPHF5xz8GwGt4VOGdjyOJF_lA -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_opened-\">Открыт <code>_opened</code></h4>\n<p>Модификатор <code>_opened</code> в значении <code>true</code> автоматически выставляется блоку при щелчке мышью по управляющему компоненту блока.</p>\n<!-- bem-example: desktop.examples/dropdown/ZBE6qMuVVtpA4JVJk1Z0eHxMx2Y -->\n\n\n<p>Модификатор снимается при повторном щелчке мышью по управляющему компоненту или за пределами попапа (зависит от наличия модификатора <code>_autoclosable</code> блока <code>popup</code>).</p>\n<h2 id=\"bemjson-switcher-popup-\">BEMJSON в атрибутах <code>switcher</code> и <code>popup</code></h2>\n<p>Атрибуты управляющего компонента и попапа могут содержать фрагмент БЭМ-дерева, например, если нужно обернуть управляющий компонент в другой блок или передать ему дополнительные параметры.</p>\n<p>Например, можно сделать кнопку управляющего компонента &quot;залипающей&quot;:</p>\n<!-- bem-example: desktop.examples/dropdown/8Fm0DE_2FJy1NDrA8TqWefQAcRg -->\n\n\n<p>Или создать на основе блока выпадающий селект:</p>\n<!-- bem-example: desktop.examples/dropdown/vkuviqNPhqQ2uV_ZhFfhVegfskc -->\n\n\n<h2 id=\"-\">Зависимости блока</h2>\n<p>Блок <code>dropdown</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>dom</code></li>\n<li><code>popup</code></li>\n<li><code>button</code>/<code>link</code> (в зависимости от управляющего компонента <code>_switcher</code>)</li>\n</ul>\n\n<h1 id=\"popup\">popup</h1>\n<p>Блок <code>popup</code> используется для создания выпадающих элементов и позволяет изменять их состояние, поведение и внешний вид. Блок отображается поверх остальных элементов страницы.</p>\n<p>Попап может быть вызван различными элементами страницы, например, кнопками или псевдоссылками.</p>\n<p>В момент первого показа (установка модификатора <code>_visible</code>) DOM-элемент блока создается в конце <code>&lt;body&gt;</code>.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/dropdown/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/dropdown/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/dropdown/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n\n<h3 id=\"-_visible-\">Видимый <code>_visible</code></h3>\n<p>Модификатор, отвечающий за видимость блока. При значении модификатора <code>false</code> блок не отображается.</p>\n<!-- bem-example: desktop.examples/dropdown/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"-_direction-\">Расположение относительно родителя <code>_direction</code></h3>\n<p>Модификатор управляет положением попапа на странице относительно вызвавшего его блока. Расположение блока определяется автоматически, исходя из массива допустимых расположений и положения родителя на странице.</p>\n<p>Выбранное расположение влияет на направление анимации раскрытия.</p>\n<p>По умолчанию используется следующий массив допустимых расположений:</p>\n<table>\n    <tr>\n        <th> Направление раскрытия </td>\n        <th> Индекс в массиве </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>Чтобы управлять расположением попапа, можно ограничить массив расположений, оставив только требуемые. Пользовательский массив нужно передать в качестве JS-параметра с ключом <code>directions</code>. При этом из значений массива будет выбрано наиболее подходящее, исходя из положения родителя на странице.</p>\n<p>Например, если требуется, чтобы попап раскрывался над родителем:</p>\n<!-- bem-example: desktop.examples/dropdown/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Или разместить попап справа по центру:</p>\n<!-- bem-example: desktop.examples/dropdown/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"-_autoclosable-\">Автоматическое скрытие <code>_autoclosable</code></h3>\n<p>Модификатор отвечает за автоматическое скрытие попапа при клике вне блока. При установке модификатора <code>_autoclosable</code> в значении <code>_true</code> блок будет скрываться при щелчке за его пределами (будет снят модификатор <code>_visible</code>).</p>\n<!-- bem-example: desktop.examples/dropdown/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"-popup-\">Взаимосвязи между popup&#39;ами</h2>\n<p>Так как попап выносит себя в конец <code>&lt;body&gt;</code>, чтобы перекрывать другие элементы страницы, возникает необходимость в построении взаимосвязей. Блок умеет выстраивать связи Parent → [ Child, Child, ... ]. Для этого он выполняет проверку, вложен ли блок, вызывающий попап в другой <code>popup</code>. Потомки знают о наличии родителя.\nЕсли бы этих взаимосвязей не было, то родительский попап (при наличии модификатора <code>autoclosable</code> со значением <code>true</code>) закрылся бы при клике внутри дочернего.</p>\n<p>Другими словами модификатор <code>autoclosable</code> со значением <code>true</code> означает, что попап закроется сам и закроет свои дочерние блоки при клике за пределами его самого и дочерних попапов.</p>\n<p>Дочерние блоки popup можно рассматривать в виде цепочки 1 → 2 → 3 → 4. При клике на втором попапе – закрываются третий и четвертый. При клике в первом – закрываются второй, третий, четвертый. При клике за пределами любого попапа из цепочки – закроются все.</p>\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>popup</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "dropdown",
                            "examples": [
                                {
                                    "url": "desktop.tests/dropdown/gemini"
                                },
                                {
                                    "url": "desktop.tests/dropdown/simple"
                                }
                            ],
                            "description": "<h1 id=\"dropdown\">dropdown</h1>\n<p>A <code>dropdown</code> block is used to create different types of dropdowns.  It allows to manage state, behavior and appearance of dropdowns. Block consist of two components – the control component and the popup window (<code>popup</code> block). Popup window is displayed in front of all other page elements.</p>\n<p>On mouse click over control component it shows the popup window (toggles <code>_visible</code> modifier for the <code>popup</code> block).</p>\n<p>Depending on a <code>_switcher</code> modifier value, either link, pseudo link or button can be used as a control component.</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in a corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>switcher</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Label for the control component. May contain a string with the text label or BEMJSON notation of nested BEM-entities. For example, it allows to wrap the control component with other block or pass it an additional attribute values.</td>\n    </tr>\n       <tr>\n        <td>popup</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Text value or BEMJSON description of popup window content. In runtime BEMJSON entities will be rendered into HTML.</td>\n    </tr>\n</table>\n\n<p>Also, BEMJSON declaration can contain an arbitrary fields used for templating.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to block.</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/dropdown/WcgFmT2l-N83y2w6hRJ-qqSpzkY -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/dropdown/3LxBJkGCYdsRIM3jgENaGnBRRuI -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/dropdown/7xwP-2BJ2nd_leTd5MyNfCK8-wA -->\n\n\n<h3 id=\"control-component-type-_switcher-\">Control component type <code>_switcher</code></h3>\n<p>Mandatory modifier. It specifies which block to use as a control component. Next types are available:</p>\n<ul>\n<li><code>_switcher_link</code> - the pseudo link. <code>link</code> block is used as a base of the control component. </li>\n<li><code>_switcher_button</code> - the button. <code>button</code> block is used as a base of the control component. </li>\n</ul>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/dropdown/TZQCpS37p6PxRpc44EhMDX395AA -->\n\n\n<h3 id=\"-_disabled-\"><code>_disabled</code></h3>\n<p>If a <code>_disabled</code> modifier is set, the dropdown is displayed but not available for user&#39;s actions.</p>\n<p>For such disabled block an <code>_opened</code> state will not be toggled on mouse click.</p>\n<p>If a <code>_disabled</code> modifier set, it prevents the block components from the following actions:</p>\n<ul>\n<li><code>popup</code> block – <code>_visible</code> modifier toggle;</li>\n<li><code>link</code> control component – <code>_focused</code> state toggle. Link does not obtain focus on mouse click or by <code>Tab</code> key press;</li>\n<li><code>button</code> control component:<ul>\n<li><code>_focused</code> state toggle. Button will not obtain focus on mouse click or by <code>Tab</code> key press;</li>\n<li><code>_hovered</code> state toggle on mouse pointer hover.</li>\n</ul>\n</li>\n</ul>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/dropdown/T2LPHF5xz8GwGt4VOGdjyOJF_lA -->\n\n\n<h3 id=\"dropdown-s-states\">dropdown&#39;s states</h3>\n<h4 id=\"-_opened-\"><code>_opened</code></h4>\n<p><code>_opened</code> modifier toggles automatically on mouse click on the control component.</p>\n<!-- bem-example: desktop.examples/dropdown/ZBE6qMuVVtpA4JVJk1Z0eHxMx2Y -->\n\n\n<p>Modifier can be removed by re-clicking on the control component or outside popup&#39;s window (in case of <code>_autoclosable</code> modifier availability for <code>popup</code> block).</p>\n<h2 id=\"bemjson-value-of-switcher-and-popup-attributes\">BEMJSON value of <code>switcher</code> and <code>popup</code> attributes</h2>\n<p>As the control component and the popup attributes can contain BEM-entities it can be used for different purposes such as:</p>\n<ul>\n<li>control component warping or modifying;</li>\n<li>passing additional attribute values to control component;</li>\n<li>creating nested content in popup window.</li>\n</ul>\n<p>For example, you can make a control component&#39;s button toggleable:</p>\n<!-- bem-example: desktop.examples/dropdown/8Fm0DE_2FJy1NDrA8TqWefQAcRg -->\n\n\n<p>Or make dropdown list selector based on block:</p>\n<!-- bem-example: desktop.examples/dropdown/vkuviqNPhqQ2uV_ZhFfhVegfskc -->\n\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The <code>dropdown</code> block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>dom</code></li>\n<li><code>popup</code></li>\n<li><code>button</code>/<code>link</code> (depending on <code>_switcher</code> control component type)</li>\n</ul>\n\n<h1 id=\"popup\">popup</h1>\n<p>A <code>popup</code> block is used for popups creation. It allows to manage state, behavior and appearance of popups. Block is displayed in front of all other page elements.</p>\n<p>Popup can be displayed by different page elements like pseudo links or buttons.</p>\n<p>At the moment of first display (<code>_visible</code> modifier toggle) block&#39;s DOM element is created in the end of document <code>&lt;body&gt;</code>.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to block.</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/dropdown/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/dropdown/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/dropdown/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n<h3 id=\"visibility-_visible-\">Visibility <code>_visible</code></h3>\n<p>A <code>_visible</code> modifier allow to control block visibility. If it&#39;s not set, block will not be displayed.</p>\n<!-- bem-example: desktop.examples/dropdown/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"alignment-respect-to-its-parent-_direction-\">Alignment respect to its parent <code>_direction</code></h3>\n<p>Modifier controls the position of popup window relative to the block which opened it – popup&#39;s alignment. Popup window&#39;s position is detected automatically basing on the admissible directions array and the parent block&#39;s position.</p>\n<p>Chosen alignment will affect the opening animation direction.</p>\n<p>By default following admissible directions array is used:</p>\n<table>\n    <tr>\n        <th> Direction </td>\n        <th> Index in array </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>To control the popup window position you can provide directions array with desired directions set only. According to parent block&#39;s position on a page the most suitable directions will be chosen among the provided values.</p>\n<p>For example, if the popup window should be opened at the top of the parent block:</p>\n<!-- bem-example: desktop.examples/dropdown/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Or if it should be opened strictly at the center-right position:</p>\n<!-- bem-example: desktop.examples/dropdown/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"automatic-closure-_autoclosable-\">Automatic closure  <code>_autoclosable</code></h3>\n<p>With <code>_autoclosable</code> modifier toggled block will automatically hide away on mouse click outside popup window (<code>_visible</code> modifier will be removed).</p>\n<!-- bem-example: desktop.examples/dropdown/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"relations-between-popup-s\">Relations between popup&#39;s</h2>\n<p>As long as popup&#39;s parent block itself can be nested in another popup block there is a need in a popup&#39;s relations handling. Block can handle Parent → [ Child, Child, ... ] relations by checking if the parent block is nested in another popup block. So, the children knows about the parent blocks existence.</p>\n<p>If there were no such relations, the parent popup block will be closed on mouse click on the child block regardless of the fact that <code>_autoclosable</code> modifier is set to <code>true</code>.</p>\n<p>This means that with <code>autoclosable</code> modifier toggled block will close itself and close all of it children on mouse click outside block&#39;s window or it child&#39;s window.</p>\n<p>Child popup blocks can be regarded as a chain of 1 → 2 → 3 → 4. By clicking on the second element of chain, third and forth will be closed. By clicking on first, the second, third and forth will be closed. On click outside of any popup window of the chain element all popups will be closed.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        }
                    }
                },
                {
                    "name": "icon",
                    "data": {
                        "ru": {
                            "name": "icon",
                            "examples": [
                                {
                                    "url": "desktop.tests/icon/gemini"
                                },
                                {
                                    "url": "desktop.tests/icon/simple"
                                }
                            ],
                            "description": "<h1 id=\"icon\">icon</h1>\n<p>Блок <code>icon</code> используется в качестве графического элемента в других блоках. В HTML представлен тегом <code>&lt;i&gt;</code>. Иконка задается через свойство <code>background</code> и, соответственно, не имеет возможности фоллбека.</p>\n<p>Иконку можно передать как через модификатор, так и через поле <code>url</code>:</p>\n<!-- bem-example: desktop.examples/icon/b2PchFG0vbxDCGt-_1VzrN-GK0 -->\n\n<!-- bem-example: desktop.examples/icon/bek_pi0vSgei-mm8QD-H3qy_E0c -->\n\n<!-- bem-example: desktop.examples/icon/bqsLdaiup-wWnOz-fYrlos47T_c -->\n\n<!-- bem-example: desktop.examples/icon/w_tWuwVyYuwv7N6i7jChuJOj8Vc -->\n"
                        },
                        "en": {
                            "name": "icon",
                            "examples": [
                                {
                                    "url": "desktop.tests/icon/gemini"
                                },
                                {
                                    "url": "desktop.tests/icon/simple"
                                }
                            ],
                            "description": "<h1 id=\"icon\">icon</h1>\n<p><code>&lt;i&gt;</code>-based block for using as a graphical element in other blocks, not for independent usage. Icon is set as <code>background</code> property and unables to fallback.</p>\n<p>In BEMJSON you can use both the modifier and the <code>url</code> field for an icon representation:\n<!-- bem-example: desktop.examples/icon/b2PchFG0vbxDCGt-_1VzrN-GK0 --></p>\n<!-- bem-example: desktop.examples/icon/bek_pi0vSgei-mm8QD-H3qy_E0c -->\n\n<!-- bem-example: desktop.examples/icon/ozTrvWSbAw8rmCSYD_YNMb4uO80 -->\n\n<!-- bem-example: desktop.examples/icon/w_tWuwVyYuwv7N6i7jChuJOj8Vc -->\n"
                        }
                    },
                    "jsdoc": ""
                },
                {
                    "name": "image",
                    "data": {
                        "ru": {
                            "name": "image",
                            "examples": [
                                {
                                    "url": "desktop.tests/image/gemini"
                                },
                                {
                                    "url": "desktop.tests/image/simple"
                                }
                            ],
                            "description": "<h1 id=\"image\">image</h1>\n<p>Блок <code>image</code> используется для вставки картинок.</p>\n<p>В HTML представлен тегом <code>&lt;img&gt;</code>.</p>\n<!-- bem-example: desktop.examples/image/lC8WanGqU6n--Ri8zFvBCOidyB8 -->\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>title</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя картинки.</td>\n    </tr>\n    <tr>\n        <td>alt</td>\n        <td>\n            <code>String</code></td>\n        <td>Обязательный атрибут. Устанавливает альтернативный текст для изображений. Такой текст позволяет получить текстовую информацию о картинке при отключенной в браузере загрузке изображений. <br>Блок распознается программами чтения с экрана для альтернативного воспроизведения.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Адрес ссылки, по которой подгружается картинка.</td>\n    </tr>\n    <tr>\n        <td>width, height</td>\n        <td>\n            <code>Number</code>\n        </td>\n        <td>Значения, которые будут переданы в одноименные атрибуты картинки.</td>\n    </tr>\n</table>\n\n"
                        },
                        "en": {
                            "name": "image",
                            "examples": [
                                {
                                    "url": "desktop.tests/image/gemini"
                                },
                                {
                                    "url": "desktop.tests/image/simple"
                                }
                            ],
                            "description": "<h1 id=\"image\">image</h1>\n<p><code>&lt;img&gt;</code>-based block is designed for images pasting, using as a content (logo, for example).</p>\n<!-- bem-example: desktop.examples/image/lC8WanGqU6n--Ri8zFvBCOidyB8 -->\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified within corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>title</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies icon name.</td>\n    </tr>\n    <tr>\n        <td>alt</td>\n        <td>\n            <code>String</code></td>\n        <td>A mandatory attribute. Specifies an alternate text for images. This text type allows user to obtain text information about an image when it is impossible to download. <br> This block is recognized by screen readers for alternative playback.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>An url address to open image.</td>\n    </tr>\n    <tr>\n        <td>width, height</td>\n        <td>\n            <code>Number</code>\n        </td>\n        <td>Values ​​that will be transferred to image&#39;s attributes with same names.</td>\n    </tr>\n</table>\n\n<p>Other valid block&#39;s attributes could be specified in <code>attrs</code> field in BEMJSON.</p>\n"
                        }
                    },
                    "jsdoc": ""
                },
                {
                    "name": "input",
                    "jsdoc": "",
                    "data": {
                        "ru": {
                            "name": "input",
                            "examples": [
                                {
                                    "url": "desktop.tests/input/gemini"
                                },
                                {
                                    "url": "desktop.tests/input/simple"
                                }
                            ],
                            "description": "<h1 id=\"input\">input</h1>\n<p>Блок <code>input</code> служит для создания различных типов текстовых полей:</p>\n<ul>\n<li>поле ввода (значение по умолчанию);</li>\n<li>текстовая область;</li>\n<li>поле с паролем;</li>\n<li>поисковая форма.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON-блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Значение, отправляемое на сервер. По умолчанию пустое.</td>\n    </tr>\n    <tr>\n        <td>placeholder</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Подсказка в поле ввода.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Уникальный идентификатор блока. По умолчанию генерируется случайным образом, если явно не задан в BEMJSON.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя полю ввода.</td>\n    </tr>\n    <tr>\n        <td>maxLength</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет максимальное количество вводимых символов.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет последовательность перехода между полями ввода при нажатии на <code>Tab</code>.</td>\n    </tr>\n</table>\n\n\n<p>Другие допустимые атрибуты блока могут быть заданы в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/input/hwtIQVRUxvCPVxAJgWKBqBRt6Is -->\n<strong>simple</strong>\n\n<!-- bem-example: desktop.examples/input/yAehEbulTw29FYJa_ye7ntQkTkU -->\n<strong>normal</strong>\n\n<!-- bem-example: desktop.examples/input/m1GvVMb4ZI4DvaKjyQWVNZLyquA -->\n\n<h3 id=\"-_size-\">Размеры <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам текстовых полей.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота<br>строки</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;s&#39; },\n    placeholder : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39; },\n    placeholder : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;l&#39; },\n    placeholder : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;xl&#39; },\n    placeholder : &#39;X-Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Типы <code>_type</code></h3>\n<p>Блок представлен следующими типами:</p>\n<ul>\n<li>текстовая область (<code>input_type_textarea</code>)</li>\n<li>поле с паролем (<code>input_type_password</code>)</li>\n<li>поисковая форма (<code>input_type_search</code>)</li>\n</ul>\n<p>Без указания типа поля блок <code>input</code> по умолчанию получает значение <code>&lt;input type=&quot;text&quot;/&gt;</code>.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Реализация</th>\n    </tr>\n    <tr>\n        <td>\n            <code>_textarea</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;textarea&#39; },\n    placeholder : &#39;Тексторвая область&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_password</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39;, type : &#39;password&#39; },\n    placeholder : &#39;Поле с паролем&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_search</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;search&#39; },\n    placeholder : &#39;Поисковая форма&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии блока «неактивен» поле ввода и все его элементы становятся недоступными для действий пользователя.</p>\n<p>Если модификатор <code>disabled</code> не установлен, инпут по умолчанию активен.</p>\n<!-- bem-example: desktop.examples/input/_rQiPCz_bRgjryQQWFEhXhyJnyM -->\n\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> поле ввода находится в фокусе.</p>\n<!-- bem-example: desktop.examples/input/4hhBI_vwtFJlpwXu8DnFh6HdrYY -->\n\n<h3 id=\"-_has-clear-\">Очистка содержимого <code>_has-clear</code></h3>\n<p>Модификатор <code>has-clear</code> в значении <code>true</code> отображает в инпуте крестик для очистки содержимого (элемент <code>clear</code>).</p>\n<!-- bem-example: desktop.examples/input/JCaTuV74Ua-xND0IW39wBPdvHBI -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<p>Визуально представлен следующими элементами:</p>\n<h3 id=\"__box\">__box</h3>\n<p>Обязательный элемент.</p>\n<p>Элемент, группирующий нативный контрол <code>&lt;input&gt;</code> и дополнительные элементы (например, <code>__clear</code>).</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>Кнопка очистки содержимого инпута («крестик»).</p>\n<p>По умолчанию модификатор <code>has-clear</code> имеет значение <code>false</code>, при котором крестик не отображается. Для отображения крестика нужно установить модификатор в значение <code>true</code>.</p>\n<!-- bem-example: desktop.examples/input/SwtjmJjtMXak9KKSsPMLXihNiQI -->\n\n<h3 id=\"__control\">__control</h3>\n<p>Обязательный элемент.</p>\n<p>BEMHTML- или BH-шаблоном преобразуется в нативный контрол <code>&lt;input&gt;</code> или <code>&lt;textarea&gt;</code>.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "input",
                            "examples": [
                                {
                                    "url": "desktop.tests/input/gemini"
                                },
                                {
                                    "url": "desktop.tests/input/simple"
                                }
                            ],
                            "description": "<h1 id=\"input\">input</h1>\n<p><code>input</code> block is designed to create different types of text fields:</p>\n<ul>\n<li>input field (default value);</li>\n<li>text area;</li>\n<li>password field;</li>\n<li>search form.</li>\n</ul>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified within corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Value to be sent to server. It is empty by default.</td>\n    </tr>\n    <tr>\n        <td>placeholder</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>A short hint that describes expected value of an input field.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Unique block identifier. The value is generated randomly by default. Could be specified manually in BEMJSON file.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Defines name of an input field.</td>\n    </tr>\n    <tr>\n        <td>maxLength</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies maximum number of characters allowed in input field.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies the position of current <code>input</code> block in the tabbing order for current page.</td>\n    </tr>\n</table>\n\n<p>Other valid block&#39;s attributes could be specified in <code>attrs</code> field in BEMJSON.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Block supports following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, native representation (<em>default</em>) of a control is available.</p>\n<p>See the following examples for demonstration:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/input/hwtIQVRUxvCPVxAJgWKBqBRt6Is -->\n<strong>simple</strong>\n\n<!-- bem-example: desktop.examples/input/yAehEbulTw29FYJa_ye7ntQkTkU -->\n<strong>normal</strong>\n\n<!-- bem-example: desktop.examples/input/m1GvVMb4ZI4DvaKjyQWVNZLyquA -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.</p>\n<p>Provides size values to all types of text fields.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>See the following examples for demonstration:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Font size</th>\n        <th>String height</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;s&#39; },\n    placeholder : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39; },\n    placeholder : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;l&#39; },\n    placeholder : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;xl&#39; },\n    placeholder : &#39;X-Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>Following types of <code>input</code> block are available:</p>\n<ul>\n<li>text area (use <code>textarea</code> modifier);</li>\n<li>password field (use <code>password</code> modifier);</li>\n<li>search form (use <code>search</code> modifier).</li>\n</ul>\n<p>If a <code>type</code> modifier is not specified, the <code>input</code> block obtains <code>&lt;input type=&quot;text&quot;/&gt;</code> value by default.</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>\n            <code>_textarea</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;textarea&#39; },\n    placeholder : &#39;Text area&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_password</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39;, type : &#39;password&#39; },\n    placeholder : &#39;Password field&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_search</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;search&#39; },\n    placeholder : &#39;Search form&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"block-s-state\">Block&#39;s state</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If block is disabled, all its elements become unavailable for user&#39;s action.</p>\n<p><code>input</code> block is active by default even if <code>disabled</code> modifier is not specified.</p>\n<!-- bem-example: desktop.examples/input/K-P-esXffR8hGOoR7jna6S2YiJQ -->\n\n<h4 id=\"_focused\">_focused</h4>\n<p>An input field is focused if a block has a <code>focused</code> modifier with <code>true</code> value.</p>\n<!-- bem-example: desktop.examples/input/qCSnME17SEWdiXIYzAUquHUowlo -->\n\n<h3 id=\"_has-clear\">_has-clear</h3>\n<p><code>clear</code> cross element (<code>clear</code>) appears in input field if a block has <code>has-clear</code> modifier with <code>true</code> value.</p>\n<!-- bem-example: desktop.examples/input/_9h_vL43Yf85tOZ7QzUlcBNd-PE -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<p>The following elements provide visual representation of <code>input</code> block:</p>\n<h3 id=\"__box\">__box</h3>\n<p>An element for grouping native <code>&lt;input&gt;</code> field and additional elements (e.g <code>__clear</code>).</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>A button (cross element) intended to clear an <code>input</code> field content.</p>\n<p>To add a cross element into an <code>input</code> field specify <code>has-clear</code> modifier with <code>true</code> value in BEMJSON file.</p>\n<p>Cross element is unavailable if block has not <code>has-clear</code> modifier or if <code>has-clear</code> modifier has <code>false</code> value.</p>\n<!-- bem-example: desktop.examples/input/oL605Mco7dZbQOD7Rga3BNjDmUY -->\n\n<h3 id=\"__control\">__control</h3>\n<p>Mandatory element.</p>\n<p>This element is processed by BEMHTML or BH template engine to native <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code> control.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    }
                },
                {
                    "name": "link",
                    "data": {
                        "ru": {
                            "name": "link",
                            "examples": [
                                {
                                    "url": "desktop.tests/link/gemini"
                                },
                                {
                                    "url": "desktop.tests/link/simple"
                                }
                            ],
                            "description": "<h1 id=\"link\">link</h1>\n<p>Блок <code>link</code> используется для создания различных типов ссылок и предоставляет возможность изменять их состояние, внешний вид и поведение.</p>\n<h2 id=\"-\">Варианты использования ссылок</h2>\n<p>Блок <strong>link</strong> служит для создания следующих типов ссылок:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычная ссылка</td>\n        <td>Применяется для любых ссылок веб-интерфейса. Используется по умолчанию.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;link&#39;,\n    url : &#39; #&#39;,\n    content : &#39;link&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Псевдоссылка</td>\n        <td>Разновидность ссылки, для которой не производится переход на новую страницу по щелчку мыши. Применяется для вызова сценариев.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;link&#39;,\n    mods : { pseudo : true, theme: &#39;normal&#39; },\n    content : &#39;pseudo&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Допустимые параметры блока</h2>\n<p>Допустимые параметры блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Адрес ссылки. Если указан, значение <code>url</code> становится атрибутом <code>href</code>. Обязательный параметр для обычной ссылки. Если в качестве значения передан BEMJSON, он будет обработан и вернет строку.</td>\n    </tr>\n    <tr>\n        <td>title</td>\n        <td><code>String</code></td>\n        <td>Текст всплывающей подсказки</td>\n    </tr>\n    <tr>\n        <td>target</td>\n        <td><code>String</code></td>\n        <td>Целевое окно. Обычно атрибут указывается со значением <code>_blank</code>, чтобы открыть адрес ссылки в новом окне.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td><code>Number</code></td>\n        <td> Индекс, задающий последовательность перехода между ссылками при нажатии на клавишу <code>Tab</code>. Атрибут преобразуется в нативный атрибут <code>tabindex</code>.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Например:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/link/Y3yr9bNzwYkA9sSkV8EkqO30JYI -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/link/rVrcuNJ0PMv5S2Q4KNH4HsM6Zds -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/link/v4bNHfaIobOFWcneUxLQDbb4T9g -->\n\n<h3 id=\"-_pseudo-\">Псевдоссылка <code>_pseudo</code></h3>\n<!-- bem-example: desktop.examples/link/chWrNSQqHxfoi-xep8pjJQnF124 -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>_focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью. Нажатие по ней можно выполнить клавишей <code>Enter</code>.</p>\n<pre><code>{\n    block : &#39;link&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        focused : true\n    },\n    url : &#39;#&#39;,\n    content : &#39;_focused&#39;\n}\n</code></pre><h4 id=\"-_disabled-\">Неактивна <code>_disabled</code></h4>\n<p>В состоянии &quot;не активна&quot; ссылка отображается, но недоступна для действий пользователя.</p>\n<p>Для такой ссылки не будет:</p>\n<ul>\n<li>устанавливаться модификатор <code>_focused</code> в момент получения фокуса;</li>\n<li>осуществляться переход, если задан атрибут <code>url</code>;</li>\n<li>генерироваться БЭМ-событие <code>click</code>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/link/MlN17lxDfpZbuzsh5l2N1VNo16U -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>link</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>control</code></li>\n<li><code>i-bem__dom</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "link",
                            "examples": [
                                {
                                    "url": "desktop.tests/link/gemini"
                                },
                                {
                                    "url": "desktop.tests/link/simple"
                                }
                            ],
                            "description": "<h1 id=\"link\">link</h1>\n<p>A <code>link</code> block is used for a various types of links creation. It allows to manage state, behaviour and appearance of a links.</p>\n<h2 id=\"link-use-cases\">link use cases</h2>\n<p>The block is used for creation of following link types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Basic link</td>\n        <td>Is used to set up various kinds of links. A default type.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;link&#39;,\n    url : &#39; #&#39;,\n    content : &#39;link&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Pseudo link</td>\n        <td>The variation of link that will not be followed by a browser on click. Used mainly for scripts invocation.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;link&#39;,\n    mods : { pseudo : true, theme: &#39;normal&#39; },\n    content : &#39;pseudo&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Link&#39;s URL. If presented an <code>url</code> value, will renders to <code>href</code> HTML attribute. Is mandatory for a normal link. If BEMJSON is passed as the value, it will be processed and will return the string.</td>\n    </tr>\n    <tr>\n        <td>title</td>\n        <td><code>String</code></td>\n        <td>Popup label&#39;s text.</td>\n    </tr><br>    <tr>\n        <td>target</td>\n        <td><code>String</code></td>\n        <td>Target window. Mainly used with a <code>_blank</code> value to open the link in new window.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td><code>Number</code></td>\n        <td>Index to define an order of links focusing on <code>Tab</code> key press. Will be rendered to native <code>tabindex</code> HTML attribute.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/link/Y3yr9bNzwYkA9sSkV8EkqO30JYI -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/link/rVrcuNJ0PMv5S2Q4KNH4HsM6Zds -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/link/v4bNHfaIobOFWcneUxLQDbb4T9g -->\n\n\n<h3 id=\"pseudo-link-_pseudo-\">Pseudo link <code>_pseudo</code></h3>\n<!-- bem-example: desktop.examples/link/chWrNSQqHxfoi-xep8pjJQnF124 -->\n\n\n<h3 id=\"link-s-states\">Link&#39;s states</h3>\n<h4 id=\"in-focus-_focused-\">In focus <code>_focused</code></h4>\n<p>A <code>_focused</code> modifier is automaticly toggles to the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press. Focused link can be followed by Enter key press.</p>\n<p>Available for all block themes.</p>\n<pre><code>{\n    block : &#39;link&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        focused : true\n    },\n    url : &#39;#&#39;,\n    content : &#39;_focused&#39;\n}\n</code></pre><h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive link. Inactive link is displayed but not available for user actions.  </p>\n<p>For such a link will not be performed:</p>\n<ul>\n<li><code>_focused</code> state modifier toggling, when in focus;</li>\n<li>redirection to the link address if an <code>url</code> attribute is provided;</li>\n<li><code>click</code> BEM event emiting.</li>\n</ul>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/link/MlN17lxDfpZbuzsh5l2N1VNo16U -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>control</code></li>\n<li><code>i-bem__dom</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"link-module\">link Module</h1>\n<h2 id=\"undefined\">undefined</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"geturl-string-\">getUrl () → {String}</h4>\n<p>Returns url</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"seturl-url-link-\">setUrl ( url ) → {link}</h4>\n<p>Sets url</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>url {String}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{link}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"control-module\">control Module</h1>\n"
                },
                {
                    "name": "menu",
                    "data": {
                        "ru": {
                            "name": "menu",
                            "examples": [
                                {
                                    "url": "desktop.tests/menu/gemini"
                                },
                                {
                                    "url": "desktop.tests/menu/simple"
                                }
                            ],
                            "description": "<h1 id=\"menu\">menu</h1>\n<p>Блок <code>menu</code> используется для создания различных типов меню и селектов.</p>\n<p>Он предоставляет возможность изменять размер и внешний вид блоков меню, управлять поведением вложенных блоков – пунктов меню или селекта.</p>\n<p>В результате BEMHTML-преобразований на странице блок становится HTML-элементом с тегом <code>&lt;div&gt;</code> и свойством <code>role=&quot;menu&quot;</code>. HTML-элементом, содащим набор переключателей – пунктов меню (блок <code>menu-item</code>).</p>\n<h2 id=\"-\">Варианты использования меню</h2>\n<p>Блок <code>menu</code> служит для создания различных типов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Меню-переключатель</td>\n        <td>Применяется для создания меню или селектов, позволяющих только одиночный выбор.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;, \n        mode : &#39;radio&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Селект с множественным выбором (<code>_mode_check</code>)</td>\n        <td>При щелчке мышью по пункту меню его состояние меняется на противоположное. Если пункт был активен – он деактивируется и наоборот.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n<tr>\n        <td>Простой список (без модификатора <code>_mode</code>)</td>\n        <td>При щелчке мышью по пункту меню его состояние не меняется. Модификатор <code>_cheked</code> не устанавливается.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/menu/vAAUvyJpkNyuM0yEru7LP3dZ7xE -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/menu/JgK_lg3CEjumbM6ThTKEOcNpfH0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/menu/MGiZ5_2bYS32yaxnY5iD9OevjVk -->\n\n\n<h3 id=\"-_size-\">Размеры меню <code>_size</code></h3>\n<p>Задает размер всем типам меню. Обязательный модификатор.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер/Параметры</th>\n        <th>Размер шрифта</th>\n        <th>Высота строки <code>line-heigh</code></th>\n        <th>Левый отступ <code>padding-left</code></th>\n        <th>Отступ <code>padding</code></th>\n        <th>Размер &quot;галочки&quot; для темы normal</code></th>\n    </tr>\n    <tr>\n        <td>s</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;s&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>m</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;m&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>l</td>\n        <td>15px</td>\n        <td>28px</td>\n        <td>34px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;l&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>xl</td>\n        <td>15px</td>\n        <td>32px</td>\n        <td>40px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;xl&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-_mode-\">Способ выбора пунктов <code>_mode</code></h3>\n<p>Модификатор <code>_mode</code> управляет поведением пунктов меню при щелчке по ним мышью, например, возможностью множественного выбора пунктов меню.</p>\n<p>Доступны следующие значения модификатора:</p>\n<ul>\n<li><code>check</code> – селект. Пункт, по которому был произведен щелчек мышью, изменит состояние на противоположное и будет менять состояние при повторных щелчках. Доступна возможность множественного выбора пунктов;</li>\n<li><code>radio</code> – переключатель. При щелчке мышью будет производиться переключение активных пунктов меню. При повторном щелчке пункт, по которому он был произведен, останется <strong>активным</strong>. Множественный выбор недоступен;</li>\n<li><code>radio-check</code> – переключатель. При щелчке мышью будет производиться переключение активных пунктов меню. При повторном щелчке пункт, по которому он был произведен, станет <strong>неактивным</strong>. Множественный выбор недоступен.</li>\n</ul>\n<p>Реализован во всех темах блока.</p>\n<table>\n    <tr>\n        <th>Выбор пунктов</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Только один (<code>_mode_radio</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Множественный выбор или ни одного (<code>_mode_check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Один или ни одного (<code>_mode_radio-check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio-check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>_focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/menu/lFNP7KamARohsQ5DCX0QQZU1ACQ -->\n\n\n<h2 id=\"-\">Элементы блока</h2>\n<p>Визуально представлен следующими элементами:</p>\n<h3 id=\"__group\">__group</h3>\n<p>Элемент <code>__group</code> служит для группировки пунктов меню. Пункты, которые нужно сгруппировать, помещаются в поле <code>content</code> элемента. Группы визуально отделяются серой чертой.</p>\n<p>Например:</p>\n<!-- bem-example: desktop.examples/menu/WSrgcU6mXH0StKcrKnckCnH3lrc -->\n\n\n<h3 id=\"__group-title\">__group-title</h3>\n<p>Элемент позволяет задать заголовок для группы пунктов меню, создаваемой с помощью элемента <code>__group</code>.</p>\n<p>Например:</p>\n<!-- bem-example: desktop.examples/menu/yGGZayW6DClbboVCxBRriqv3YcU -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>menu-item</code></li>\n<li><code>dom</code></li>\n<li><code>keyboard</code></li>\n<li><code>control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n\n<h1 id=\"menu-item\">menu-item</h1>\n<p>Блок <code>menu-item</code> служит для создания пунктов меню или селекта. Используется внутри блока <code>menu</code>. Блок <code>menu-item</code> предоставляет возможность изменять состояние, содержимое и тип пунктов меню.</p>\n<p>Блок <code>menu-item</code> в результате BEMHTML-преобразований на странице становится HTML-элементом с тегом <code>&lt;div&gt;</code> со свойством <code>role=&quot;menuitem&quot;</code>.</p>\n<h2 id=\"-\">Варианты использования пунктов меню</h2>\n<p>Блок <code>menu-item</code> служит для создания различных типов пунктов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Переключатель</td>\n        <td>Применяется для любых выпадающих списков, табов, пунктов меню и селектов и т.п. Используется по умолчанию.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Ссылка</td>\n        <td>Элемент меню со ссылкой. Блок <code>link</code> помещается в поле <code>content</code> BEMJSON-декларации блока. Так же требуется установить блоку модификатор <code>type</code> в значение <code>link</code>.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое пунктом меню, если он выбран.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/menu/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/menu/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/menu/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"-_type-\">Типы блока <code>_type</code></h3>\n<p>Модификатор <code>_type</code> в значении <code>_link</code> позволяет создавать пункт меню-ссылку. Блок <code>link</code> при этом помещается в поле <code>content</code> BEMJSON-декларации блока. Если модификатор <code>_type_link</code> не установлен, вложенная ссылка будет доступна для действий пользователя при установленном модификаторе <code>_disabled</code>.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/menu/47lHiiyDspaBs5AiC22G42Y-N_o -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии &quot;неактивен&quot; пункт меню отображается, но недоступен для действий пользователя.  </p>\n<p>Такой пункт меню не изменяет состояние при щелчке мышью. Если для блока установлен модификатор <code>_type_link</code>, переход по ссылке не осуществляется. </p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/menu/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие &quot;наведение курсором&quot; на пункт меню.</p>\n<p>Реализован во всех темах блока.</p>\n<p>Автоматически выставляется при наведении указателем мыши на пункт меню.</p>\n<!-- bem-example: desktop.examples/menu/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"-_checked-\">Выбранный пункт меню <code>_checked</code></h4>\n<p>Модификатор задает выбранный пункт меню.</p>\n<!-- bem-example: desktop.examples/menu/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>В блоке <code>menu</code> модификатор <code>_checked</code> устанавливается для пункта при щелчке мышью:</p>\n<!-- bem-example: desktop.examples/menu/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu-item</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "menu",
                            "examples": [
                                {
                                    "url": "desktop.tests/menu/gemini"
                                },
                                {
                                    "url": "desktop.tests/menu/simple"
                                }
                            ],
                            "description": "<h1 id=\"menu\">menu</h1>\n<p>A <code>menu</code> block is used for creation of various types of menus and lists. It allows to manage state, behavior and appearance of menus.</p>\n<p>As a result of BEMHTML transformations, a block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menu&quot;</code> attribute set. The block&#39;s HTML element contains a set of switches – the <code>menu-item</code> blocks.</p>\n<p>It allow to manage the appearance, state and size of a menu blocks as well as manage the nested <code>menu-items</code> block&#39;s appearance.</p>\n<h2 id=\"menu-use-cases\">menu use cases</h2>\n<p>A <code>menu</code> block is used for creation of following menu types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Switch menu</td>\n        <td>Used for creation of lists with a single selectable item.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;, \n        mode : &#39;radio&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A multi selectable list. (<code>_mode_check</code>)</td>\n        <td>Clicking on a list items will perform item&#39;s state switching to opposite. If an item was active it will be deactivated, and vice versa.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n<tr>\n        <td>Basic list (with <code>_mode</code> modifier is unset)</td>\n        <td>Menu item&#39;s state will not change on mouse click. A <code>_cheked</code> state modifier will not be toggled.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/menu/vAAUvyJpkNyuM0yEru7LP3dZ7xE -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/menu/JgK_lg3CEjumbM6ThTKEOcNpfH0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/menu/MGiZ5_2bYS32yaxnY5iD9OevjVk -->\n\n<h3 id=\"the-sizes-_size-\">The sizes <code>_size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides a size value to all types of radio groups.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<table>\n    <tr>\n        <th>A <code>_size</code> value</th>\n        <th>Font size</th>\n        <th>Line height <code>line-heigh</code></th>\n        <th>Left padding <code>padding-left</code></th>\n        <th>Global <code>padding</code></th>\n        <th>The tick&#39;s icon size for normal theme</code></th>\n    </tr>\n    <tr>\n        <td>s</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;s&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>m</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;m&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>l</td>\n        <td>15px</td>\n        <td>28px</td>\n        <td>34px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;l&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>xl</td>\n        <td>15px</td>\n        <td>32px</td>\n        <td>40px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;xl&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"menu-item-selection-options-_mode-\">Menu item selection options <code>_mode</code></h3>\n<p>A <code>_mode</code> modifier defines a menu item&#39;s reaction on mouse click. For example, it controls multiple items selectability.</p>\n<p>Following modifier values are available:</p>\n<ul>\n<li><code>check</code> – a selectable list. A menu item will change it&#39;s state to opposite on each mouse click. An active item will become inactive and vice versa. Multiple choice is available;</li>\n<li><code>radio</code> – a switcher. Inactive menu item will be activated on mouse click. On re-clicking the menu item will remain <strong>active</strong>. Multiple choice not available;</li>\n<li><code>radio-check</code> – a switcher. Inactive menu item will be activated on mouse click. On re-clicking the active menu item will become <strong>inactive</strong>. Multiple choice not available.</li>\n</ul>\n<p>Available for all block themes.</p>\n<table>\n    <tr>\n        <th>List items selectability</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Only one (<code>_mode_radio</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Plural selection or none (<code>_mode_check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>One or none (<code>_mode_radio-check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio-check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"in-focus-_focused-\">In focus <code>_focused</code></h4>\n<p>A <code>_focused</code> modifier is automatically toggles for the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/menu/2y_zCWFJ78bAFa8UEqIdsRPc3qM -->\n\n<h2 id=\"the-block-s-elements\">The block&#39;s elements</h2>\n<p>The <code>menu</code> block is visually represented by following elements:</p>\n<h3 id=\"__group\">__group</h3>\n<p>A <code>__group</code> element is used for menu items grouping. An Items that needed grouping should be placed to the element BEMJSON declaration&#39;s <code>content</code> field. The group elements are visually separated by a gray line.</p>\n<p>For example:</p>\n<!-- bem-example: desktop.examples/menu/WSrgcU6mXH0StKcrKnckCnH3lrc -->\n\n\n<h3 id=\"__group-title\">__group-title</h3>\n<p>This element allows to create a title for a menu items group, created using a <code>_group</code> element.</p>\n<p>For example:</p>\n<!-- bem-example: desktop.examples/menu/8LCJ2Asb6uR2ZHALf5iscb_n2RU -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>menu-item</code></li>\n<li><code>dom</code></li>\n<li><code>keyboard</code></li>\n<li><code>control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n\n<h1 id=\"menu-item\">menu item</h1>\n<p>A <code>menu-item</code> block is used for creation of various types of menu and list items. It is used inside a <code>menu</code> block. The <code>menu-item</code> block allows to manage state, content and type of menu items.</p>\n<p>As a result of BEMHTML transformations block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menuitem&quot;</code> attribute set.</p>\n<h2 id=\"menu-item-use-cases\">menu item use cases</h2>\n<p>The block helps to create following menu item types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>An example</th>\n    </tr>\n    <tr>\n        <td>A switch element</td>\n        <td>Is used to set up a dropdowns, tab menus, lists and menu items, etc.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A link element (<code>_type_link</code>)</td>\n        <td>An element with nested depended link. A <code>link</code> block should be placed into block&#39;s BEMJSON declaration <code>content</code> field. The <code>_type_link</code> modifier is required.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>A value returned by menu item if selected.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/menu/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/menu/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/menu/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive menu item. Inactive menu item is displayed, but not available for user actions.  </p>\n<p>If a <code>_type_link</code> modifier is set for the block with a nested link, the link will not be followed on mouse click.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/menu/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"mouse-over-_hovered-\">Mouse over <code>_hovered</code></h4>\n<p>This modifier is automatically toggled when the mouse pointer is over the block. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/menu/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"selected-menu-item-_checked-\">Selected menu item <code>_checked</code></h4>\n<p>Modifier defines the selected menu item.</p>\n<!-- bem-example: desktop.examples/menu/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>For the <code>menu-item</code> blocks nested in a <code>menu</code> block <code>_checked</code> state toggles automatically on mouse click. </p>\n<!-- bem-example: desktop.examples/menu/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"menu-module\">menu Module</h1>\n<h2 id=\"menu-block\">menu Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getitems-menu-item-\">getItems () → {menu-item}</h4>\n<p>Returns items</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{menu-item}</p>\n<h4 id=\"setcontent-content-menu-\">setContent ( content ) → {menu}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{menu}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h1 id=\"menu-item-module\">menu-item Module</h1>\n<h2 id=\"menu-item-block\">menu-item Block</h2>\n<h3 id=\"block-parameters-\">Block parameters:</h3>\n<ul>\n<li>val {*}<br/>\nValue of item</li>\n</ul>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"isvaleq-val-boolean-\">isValEq ( val ) → {Boolean}</h4>\n<p>Checks whether given value is equal to current value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {*}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getval-\">getVal () → {*}</h4>\n<p>Returns item value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{*}</p>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns item text</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "menu-item",
                    "data": {
                        "ru": {
                            "name": "menu-item",
                            "examples": [],
                            "description": "<h1 id=\"menu-item\">menu-item</h1>\n<p>Блок <code>menu-item</code> служит для создания пунктов меню или селекта. Используется внутри блока <code>menu</code>. Блок <code>menu-item</code> предоставляет возможность изменять состояние, содержимое и тип пунктов меню.</p>\n<p>Блок <code>menu-item</code> в результате BEMHTML-преобразований на странице становится HTML-элементом с тегом <code>&lt;div&gt;</code> со свойством <code>role=&quot;menuitem&quot;</code>.</p>\n<h2 id=\"-\">Варианты использования пунктов меню</h2>\n<p>Блок <code>menu-item</code> служит для создания различных типов пунктов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Переключатель</td>\n        <td>Применяется для любых выпадающих списков, табов, пунктов меню и селектов и т.п. Используется по умолчанию.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Ссылка</td>\n        <td>Элемент меню со ссылкой. Блок <code>link</code> помещается в поле <code>content</code> BEMJSON-декларации блока. Так же требуется установить блоку модификатор <code>type</code> в значение <code>link</code>.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое пунктом меню, если он выбран.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/menu-item/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/menu-item/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/menu-item/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"-_type-\">Типы блока <code>_type</code></h3>\n<p>Модификатор <code>_type</code> в значении <code>_link</code> позволяет создавать пункт меню-ссылку. Блок <code>link</code> при этом помещается в поле <code>content</code> BEMJSON-декларации блока. Если модификатор <code>_type_link</code> не установлен, вложенная ссылка будет доступна для действий пользователя при установленном модификаторе <code>_disabled</code>.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/menu-item/47lHiiyDspaBs5AiC22G42Y-N_o -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии &quot;неактивен&quot; пункт меню отображается, но недоступен для действий пользователя.  </p>\n<p>Такой пункт меню не изменяет состояние при щелчке мышью. Если для блока установлен модификатор <code>_type_link</code>, переход по ссылке не осуществляется. </p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/menu-item/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие &quot;наведение курсором&quot; на пункт меню.</p>\n<p>Реализован во всех темах блока.</p>\n<p>Автоматически выставляется при наведении указателем мыши на пункт меню.</p>\n<!-- bem-example: desktop.examples/menu-item/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"-_checked-\">Выбранный пункт меню <code>_checked</code></h4>\n<p>Модификатор задает выбранный пункт меню.</p>\n<!-- bem-example: desktop.examples/menu-item/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>В блоке <code>menu</code> модификатор <code>_checked</code> устанавливается для пункта при щелчке мышью:</p>\n<!-- bem-example: desktop.examples/menu-item/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu-item</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "menu-item",
                            "examples": [],
                            "description": "<h1 id=\"menu-item\">menu item</h1>\n<p>A <code>menu-item</code> block is used for creation of various types of menu and list items. It is used inside a <code>menu</code> block. The <code>menu-item</code> block allows to manage state, content and type of menu items.</p>\n<p>As a result of BEMHTML transformations block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menuitem&quot;</code> attribute set.</p>\n<h2 id=\"menu-item-use-cases\">menu item use cases</h2>\n<p>The block helps to create following menu item types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>An example</th>\n    </tr>\n    <tr>\n        <td>A switch element</td>\n        <td>Is used to set up a dropdowns, tab menus, lists and menu items, etc.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A link element (<code>_type_link</code>)</td>\n        <td>An element with nested depended link. A <code>link</code> block should be placed into block&#39;s BEMJSON declaration <code>content</code> field. The <code>_type_link</code> modifier is required.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>A value returned by menu item if selected.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/menu-item/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/menu-item/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/menu-item/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive menu item. Inactive menu item is displayed, but not available for user actions.  </p>\n<p>If a <code>_type_link</code> modifier is set for the block with a nested link, the link will not be followed on mouse click.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/menu-item/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"mouse-over-_hovered-\">Mouse over <code>_hovered</code></h4>\n<p>This modifier is automatically toggled when the mouse pointer is over the block. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/menu-item/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"selected-menu-item-_checked-\">Selected menu item <code>_checked</code></h4>\n<p>Modifier defines the selected menu item.</p>\n<!-- bem-example: desktop.examples/menu-item/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>For the <code>menu-item</code> blocks nested in a <code>menu</code> block <code>_checked</code> state toggles automatically on mouse click. </p>\n<!-- bem-example: desktop.examples/menu-item/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"menu-item-module\">menu-item Module</h1>\n<h2 id=\"menu-item-block\">menu-item Block</h2>\n<h3 id=\"block-parameters-\">Block parameters:</h3>\n<ul>\n<li>val {*}<br/>\nValue of item</li>\n</ul>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"isvaleq-val-boolean-\">isValEq ( val ) → {Boolean}</h4>\n<p>Checks whether given value is equal to current value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {*}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getval-\">getVal () → {*}</h4>\n<p>Returns item value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{*}</p>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns item text</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "popup",
                    "data": {
                        "ru": {
                            "name": "popup",
                            "examples": [
                                {
                                    "url": "desktop.tests/popup/destruct"
                                },
                                {
                                    "url": "desktop.tests/popup/gemini"
                                },
                                {
                                    "url": "desktop.tests/popup/horiz-scroll"
                                },
                                {
                                    "url": "desktop.tests/popup/nested"
                                },
                                {
                                    "url": "desktop.tests/popup/simple"
                                },
                                {
                                    "url": "desktop.tests/popup/vert-scroll"
                                }
                            ],
                            "description": "<h1 id=\"popup\">popup</h1>\n<p>Блок <code>popup</code> используется для создания выпадающих элементов и позволяет изменять их состояние, поведение и внешний вид. Блок отображается поверх остальных элементов страницы.</p>\n<p>Попап может быть вызван различными элементами страницы, например, кнопками или псевдоссылками.</p>\n<p>В момент первого показа (установка модификатора <code>_visible</code>) DOM-элемент блока создается в конце <code>&lt;body&gt;</code>.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/popup/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/popup/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/popup/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n\n<h3 id=\"-_visible-\">Видимый <code>_visible</code></h3>\n<p>Модификатор, отвечающий за видимость блока. При значении модификатора <code>false</code> блок не отображается.</p>\n<!-- bem-example: desktop.examples/popup/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"-_direction-\">Расположение относительно родителя <code>_direction</code></h3>\n<p>Модификатор управляет положением попапа на странице относительно вызвавшего его блока. Расположение блока определяется автоматически, исходя из массива допустимых расположений и положения родителя на странице.</p>\n<p>Выбранное расположение влияет на направление анимации раскрытия.</p>\n<p>По умолчанию используется следующий массив допустимых расположений:</p>\n<table>\n    <tr>\n        <th> Направление раскрытия </td>\n        <th> Индекс в массиве </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>Чтобы управлять расположением попапа, можно ограничить массив расположений, оставив только требуемые. Пользовательский массив нужно передать в качестве JS-параметра с ключом <code>directions</code>. При этом из значений массива будет выбрано наиболее подходящее, исходя из положения родителя на странице.</p>\n<p>Например, если требуется, чтобы попап раскрывался над родителем:</p>\n<!-- bem-example: desktop.examples/popup/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Или разместить попап справа по центру:</p>\n<!-- bem-example: desktop.examples/popup/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"-_autoclosable-\">Автоматическое скрытие <code>_autoclosable</code></h3>\n<p>Модификатор отвечает за автоматическое скрытие попапа при клике вне блока. При установке модификатора <code>_autoclosable</code> в значении <code>_true</code> блок будет скрываться при щелчке за его пределами (будет снят модификатор <code>_visible</code>).</p>\n<!-- bem-example: desktop.examples/popup/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"-popup-\">Взаимосвязи между popup&#39;ами</h2>\n<p>Так как попап выносит себя в конец <code>&lt;body&gt;</code>, чтобы перекрывать другие элементы страницы, возникает необходимость в построении взаимосвязей. Блок умеет выстраивать связи Parent → [ Child, Child, ... ]. Для этого он выполняет проверку, вложен ли блок, вызывающий попап в другой <code>popup</code>. Потомки знают о наличии родителя.\nЕсли бы этих взаимосвязей не было, то родительский попап (при наличии модификатора <code>autoclosable</code> со значением <code>true</code>) закрылся бы при клике внутри дочернего.</p>\n<p>Другими словами модификатор <code>autoclosable</code> со значением <code>true</code> означает, что попап закроется сам и закроет свои дочерние блоки при клике за пределами его самого и дочерних попапов.</p>\n<p>Дочерние блоки popup можно рассматривать в виде цепочки 1 → 2 → 3 → 4. При клике на втором попапе – закрываются третий и четвертый. При клике в первом – закрываются второй, третий, четвертый. При клике за пределами любого попапа из цепочки – закроются все.</p>\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>popup</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "popup",
                            "examples": [
                                {
                                    "url": "desktop.tests/popup/destruct"
                                },
                                {
                                    "url": "desktop.tests/popup/gemini"
                                },
                                {
                                    "url": "desktop.tests/popup/horiz-scroll"
                                },
                                {
                                    "url": "desktop.tests/popup/nested"
                                },
                                {
                                    "url": "desktop.tests/popup/simple"
                                },
                                {
                                    "url": "desktop.tests/popup/vert-scroll"
                                }
                            ],
                            "description": "<h1 id=\"popup\">popup</h1>\n<p>A <code>popup</code> block is used for popups creation. It allows to manage state, behavior and appearance of popups. Block is displayed in front of all other page elements.</p>\n<p>Popup can be displayed by different page elements like pseudo links or buttons.</p>\n<p>At the moment of first display (<code>_visible</code> modifier toggle) block&#39;s DOM element is created in the end of document <code>&lt;body&gt;</code>.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to block.</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/popup/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/popup/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/popup/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n<h3 id=\"visibility-_visible-\">Visibility <code>_visible</code></h3>\n<p>A <code>_visible</code> modifier allow to control block visibility. If it&#39;s not set, block will not be displayed.</p>\n<!-- bem-example: desktop.examples/popup/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"alignment-respect-to-its-parent-_direction-\">Alignment respect to its parent <code>_direction</code></h3>\n<p>Modifier controls the position of popup window relative to the block which opened it – popup&#39;s alignment. Popup window&#39;s position is detected automatically basing on the admissible directions array and the parent block&#39;s position.</p>\n<p>Chosen alignment will affect the opening animation direction.</p>\n<p>By default following admissible directions array is used:</p>\n<table>\n    <tr>\n        <th> Direction </td>\n        <th> Index in array </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>To control the popup window position you can provide directions array with desired directions set only. According to parent block&#39;s position on a page the most suitable directions will be chosen among the provided values.</p>\n<p>For example, if the popup window should be opened at the top of the parent block:</p>\n<!-- bem-example: desktop.examples/popup/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Or if it should be opened strictly at the center-right position:</p>\n<!-- bem-example: desktop.examples/popup/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"automatic-closure-_autoclosable-\">Automatic closure  <code>_autoclosable</code></h3>\n<p>With <code>_autoclosable</code> modifier toggled block will automatically hide away on mouse click outside popup window (<code>_visible</code> modifier will be removed).</p>\n<!-- bem-example: desktop.examples/popup/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"relations-between-popup-s\">Relations between popup&#39;s</h2>\n<p>As long as popup&#39;s parent block itself can be nested in another popup block there is a need in a popup&#39;s relations handling. Block can handle Parent → [ Child, Child, ... ] relations by checking if the parent block is nested in another popup block. So, the children knows about the parent blocks existence.</p>\n<p>If there were no such relations, the parent popup block will be closed on mouse click on the child block regardless of the fact that <code>_autoclosable</code> modifier is set to <code>true</code>.</p>\n<p>This means that with <code>autoclosable</code> modifier toggled block will close itself and close all of it children on mouse click outside block&#39;s window or it child&#39;s window.</p>\n<p>Child popup blocks can be regarded as a chain of 1 → 2 → 3 → 4. By clicking on the second element of chain, third and forth will be closed. By clicking on first, the second, third and forth will be closed. On click outside of any popup window of the chain element all popups will be closed.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup-block\">popup Block</h2>\n<h3 id=\"block-parameters-\">Block parameters:</h3>\n<ul>\n<li>[mainOffset=0] {Number}<br/>\noffset along the main direction</li>\n<li>[secondaryOffset=0] {Number}<br/>\noffset along the secondary direction</li>\n<li>[viewportOffset=0] {Number}<br/>\noffset from the viewport (window)</li>\n<li>[directions] {[object Object]}<br/>\nallowed directions</li>\n</ul>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n"
                },
                {
                    "name": "radio",
                    "data": {
                        "ru": {
                            "name": "radio",
                            "examples": [
                                {
                                    "url": "desktop.tests/radio-group/gemini"
                                },
                                {
                                    "url": "desktop.tests/radio-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"radio\">radio</h1>\n<p>Блок <code>radio</code> – «радиопереключатель», «радиокнопка». Используется для создания одиночных радиобоксов.</p>\n<p>В реализации блока используется функциональность нативного контрола <code>input</code> с атрибутом <code>type=&quot;radio&quot;</code> – <code>&lt;input name=&quot;name&quot; type=&quot;radio&quot;&gt;</code>, который скрывается при использовании модификатора <code>theme</code>.</p>\n<p>В результате применения шаблонов блок <code>radio</code> отображается на странице как HTML-тег <code>&lt;label&gt;</code> – контейнер, содержащий:</p>\n<ul>\n<li>элемент <code>radio__box</code>, содержащий скрытый контрол <code>input</code> (элемент <code>__control</code>);</li>\n<li>подпись к радиокнопке, если задан BEMJSON-параметр <code>text</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON-блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td><code>name</code></td>\n        <td><code>String|Number</code></td>\n        <td>Имя радиокнопки. Преобразуется в HTML-атрибут <code>name</code> вложенного блока <code>input</code>.</td>\n    </tr>\n    <tr>\n        <td><code>text</code></td>\n        <td><code>String|Number</code></td>\n        <td>Подпись, отображаемая для радиокнопки.</td>\n    </tr>\n    <tr>\n        <td><code>val</code></td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое контролом радиопереключателя <code>radio__control</code>, если выбрана текущая радиокнопка. Преобразуется в HTML-атрибут <code>value</code> вложенного блока <code>input</code>.</td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-theme-\">Темы <code>theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/radio/xr-zTTUYS3DD_e4xJV6Yn3a3BPI -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/radio/pPPjX0UcGCQBYmUNCpE27JADBCU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/radio/L98T9NertqtVCJpvDLdlKg6huWI -->\n\n<h3 id=\"-size-\">Размеры радиопереключателя <code>size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам радиопереключателей.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>В зависимости от значения модификатора <code>type</code> доступны следующие размеры реализации блока:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Обычный радиопереключатель</th>\n        <th>Кнопочный радиопереключатель (<code>radio_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<h3 id=\"-type-\">Тип радиопереключателя <code>type</code></h3>\n<p>Модификатор <code>type</code> со значением <code>button</code> используется для создания кнопочного радиопереключателя – кнопки (блок <code>button</code>) с установленным модификатором <code>button_togglable_radio</code>.</p>\n<p>При этом к блоку <code>button</code> примешивается блок <code>radio</code>, а контентом кнопки становится <code>radio__control</code>.</p>\n<p>Кроме того, при установленном модификаторе <code>radio_type_button</code> для блока задается HTML-атрибут <code>role=&quot;button&quot;</code>.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычный радиопереключатель</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Кнопочный радиопереключатель</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;,\n        type : &#39;button&#39;\n    },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-disabled-\">Неактивен <code>disabled</code></h3>\n<p>В состоянии «неактивен» радиопереключатель отображается, но недоступен для действий пользователя.</p>\n<p>Такой радиопереключатель не будет получать фокус (модификатор <code>focused</code>).</p>\n<p>При установке модификатора <code>disabled</code> для радиопереключателя не будут:</p>\n<ul>\n<li>устанавливаться модификаторы состояния <code>hovered</code>, <code>pressed</code> и <code>focused</code>;</li>\n<li>изменяться значение модификатора <code>checked</code>.</li>\n</ul>\n<!-- bem-example: desktop.examples/radio/RBPWsSDN_yrB6HXtmtrnXB3WSMY -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-focused-\">В фокусе <code>focused</code></h4>\n<p>Модификатор <code>focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<!-- bem-example: desktop.examples/radio/wEYcA7ioT134yNzBSljZyhtiyg8 -->\n\n<h4 id=\"-checked-\">Выбран <code>checked</code></h4>\n<p>Модификатор <code>checked</code> указывает на то, что радиопереключатель выбран (отмечен).</p>\n<p>Модификатор устанавливается по:</p>\n<ul>\n<li>щелчку мыши по блоку (при повторных щелчках модификатор сохраняется);</li>\n<li>нажатию клавиш <code>Enter</code> или <code>Space</code> (возможность использования клавиши <code>Enter</code> зависит от браузера), если радиопереключатель находится в фокусе (модификатор <code>focused</code>);</li>\n<li>нажатию клавиш стрелок, если фокус установлен на соседний радиопереключатель в радиогруппе или в блоке, содержащем несколько блоков <code>radio</code>.</li>\n</ul>\n<!-- bem-example: desktop.examples/radio/TLM9QTv-Pjlfq-MNpduxyTgw0cg -->\n\n<h4 id=\"-radio_type_button-\">Состояния, доступные с модификатором <code>radio_type_button</code></h4>\n<p>При установленном модификаторе <code>radio_type_button</code> к блоку <code>button</code> примешивается блок <code>radio</code>. Как следствие, для блока с модификатором <code>radio_type_button</code> доступны состояния блока <code>button</code>:</p>\n<ul>\n<li><code>hovered</code> – под курсором;</li>\n<li><code>pressed</code> – кнопка нажата.</li>\n</ul>\n<h2 id=\"-\">Элементы</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>Элемент <code>__box</code> используется в стандартной реализации блока как контейнер, содержащий контрол радиокнопки (элемент <code>__control</code>). В результате BEMHTML-преобразований становится HTML-элементом <code>&lt;span&gt;</code>.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p>Элемент <code>__control</code> – контрол радиокнопки. В результате BEMHTML-преобразований становится HTML-элементом <code>&lt;input&gt;</code> с атрибутом <code>type=&quot;radio&quot;</code>. По умолчанию элемент скрыт. В блоке используется только его функциональность.</p>\n<h2 id=\"-\">Зависимости</h2>\n<p>Блок <code>radio</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>control</code></li>\n<li><code>jquery__event</code></li>\n<li><code>__box</code></li>\n<li><code>__control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "radio",
                            "examples": [
                                {
                                    "url": "desktop.tests/radio-group/gemini"
                                },
                                {
                                    "url": "desktop.tests/radio-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"radio\">radio</h1>\n<p>A <code>radio</code> block is used for creating of a single radio switch. A switch can be represented by the radio switch or by the button. The <code>radio</code> block allows to manage state, content and type of a radio switches.</p>\n<p>The <code>radio</code> blocks are used inside a <code>radio-group</code> block as a group elements.</p>\n<p>As a result of block&#39;s template application, it will be rendered to a <code>&lt;label&gt;</code> HTML element, with following set of nested items:</p>\n<ul>\n<li>a <code>radio__box</code> element with hidden nested <code>input</code> HTML element (a <code>__control</code> element);</li>\n<li>a radio switch label, if the <code>text</code> BEMJSON attribute is passed.</li>\n</ul>\n<p>Block&#39;s implementation use the logic of a native <code>input</code> HTML element with set <code>radio</code> control type: <code>&lt;input name=&quot;name&quot; type=&quot;radio&quot;&gt;</code>. If a <code>theme</code> modifier is set, the <code>input</code> element is hidden by default.</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td><code>name</code></td>\n        <td><code>String|Number</code></td>\n        <td>Radio switch name. Renders to a nested <code>input</code> block&#39;s <code>name</code> HTML attribute.</td>\n    </tr>\n    <tr>\n        <td><code>text</code></td>\n        <td><code>String|Number</code></td>\n        <td>A label for the radio switch.</td>\n    </tr>\n    <tr>\n        <td><code>val</code></td>\n        <td><code>String|Number</code></td>\n        <td>A value which the selected radio switch will return. Renders to a nested <code>input</code> block&#39;s <code>value</code> HTML attribute.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-theme-\">The themes <code>theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/radio/xr-zTTUYS3DD_e4xJV6Yn3a3BPI -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/radio/pPPjX0UcGCQBYmUNCpE27JADBCU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/radio/L98T9NertqtVCJpvDLdlKg6huWI -->\n\n<h3 id=\"the-sizes-size-\">The sizes <code>size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides all types of radio switches with the size value.</p>\n<p>The set of available sizes depends on a <code>type</code> modifier&#39;s value. Following sizes are available:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Default radio switch</th>\n        <th>Button radio switch (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n<h3 id=\"radio-switch-type-type-\">Radio switch type <code>type</code></h3>\n<p>A <code>type</code> modifier can be set to a <code>button</code> state for creating a button radio switch – the <code>button</code> block with a <code>button_togglable_radio</code> modifier set.</p>\n<p>The <code>radio</code> block is mixed up to the <code>button</code> block with nested <code>radio__control</code> element.</p>\n<p>In addition a <code>role=&quot;button&quot;</code> HTML attribute is set for the block.</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Default radio switch</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Button radio switch</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;,\n        type : &#39;button&#39;\n    },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"inactive-disabled-\">Inactive <code>disabled</code></h4>\n<p>A <code>disabled</code> modifier is used for an inactive radio switch creation. An inactive radio switch is displayed but not available for user actions.  </p>\n<p>Inactive radio switch will not obtain focus (a <code>focused</code> modifier toggle) on mouse click or by <code>Tab</code> key press.</p>\n<p>For such a inactive block will not be performed:</p>\n<ul>\n<li><code>hovered</code>, <code>pressed</code> and <code>focused</code> state modifier toggling;</li>\n<li><code>checked</code> modifier value changing.</li>\n</ul>\n<!-- bem-example: desktop.examples/radio/RBPWsSDN_yrB6HXtmtrnXB3WSMY -->\n\n\n<h4 id=\"in-focus-focused-\">In focus <code>focused</code></h4>\n<p>A <code>focused</code> modifier is automatically toggled to the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/radio/wEYcA7ioT134yNzBSljZyhtiyg8 -->\n\n\n<h4 id=\"selected-radio-switch-checked-\">Selected radio switch <code>checked</code></h4>\n<p>Modifier defines the selected radio switch.</p>\n<p>The modifier is toggling on:</p>\n<ul>\n<li>mouse click (on re-clicking modifier state remains);</li>\n<li><code>Enter</code> and <code>Space</code> key press (an option of <code>Enter</code> usage depends on a browser), if radio switch is in focus (a <code>focused</code> modifier is toggled);</li>\n<li>arrow key press, if one of the neighbour <code>radio</code> switches is in focus. Neighbour switch can be either a part of the same radio group or independent switch nested in the same block.</li>\n</ul>\n<!-- bem-example: desktop.examples/radio/yLi2X_E9s0cnYS8x7h0IvQ3Jmhw -->\n\n\n<h4 id=\"states-available-with-a-radio_type_button-modifier\">States available with a <code>radio_type_button</code> modifier</h4>\n<p>If a <code>radio_type_button</code> modifier is set, a <code>radio</code> block is mixed up to a <code>button</code> block. As a result, for the <code>radio</code> block with the <code>radio_type_button</code> modifier are available following <code>button</code> block&#39;s states:</p>\n<ul>\n<li><code>hovered</code> – mouse pointer over the block;</li>\n<li><code>pressed</code> – button is pressed.</li>\n</ul>\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>A <code>__box</code> element is used in basic block&#39;s implementation as a container with nested control element (a <code>__control</code> element). It renders to a <code>&lt;span&gt;</code> HTML element.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p>A <code>__control</code> element is a radio switch controller. It renders to an <code>&lt;input&gt;</code> HTML element with the <code>type=&quot;radio&quot;</code> attribute is set. In all block themes it is hidden by default. Block uses only the control&#39;s logic.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>control</code></li>\n<li><code>jquery__event</code></li>\n<li><code>__box</code></li>\n<li><code>__control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"radio-module\">radio Module</h1>\n<h2 id=\"radio-block\">radio Block</h2>\n<p>Aughtments {control}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"control-module\">control Module</h1>\n"
                },
                {
                    "name": "radio-group",
                    "jsdoc": "<h1 id=\"radio-group-module\">radio-group Module</h1>\n<h2 id=\"radio-group-block\">radio-group Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"setval-val-data-radio-group-\">setVal ( val, [data] ) → {radio-group}</h4>\n<p>Sets control value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {String}<br/>\nvalue</li>\n<li>[data] {Object}<br/>\nadditional data</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{radio-group}</p>\n<p>this</p>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getradios-radio-\">getRadios () → {radio}</h4>\n<p>Returns options</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{radio}</p>\n<h1 id=\"radio-module\">radio Module</h1>\n<h2 id=\"radio-block\">radio Block</h2>\n<p>Aughtments {control}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"control-module\">control Module</h1>\n",
                    "data": {
                        "ru": {
                            "name": "radio-group",
                            "examples": [
                                {
                                    "url": "desktop.tests/radio-group/gemini"
                                },
                                {
                                    "url": "desktop.tests/radio-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"radio-group\">radio-group</h1>\n<p>Блок <code>radio-group</code> – «радиогруппа», состоящая из набора зависимых переключателей «радиокнопок» (блоков <code>radio</code>). Радиогруппа используется для выбора единственного варианта из списка. </p>\n<p>Блок <code>radio-group</code> в результате BEMHTML-преобразований на странице становится HTML-элементом с тегом <code>&lt;span&gt;</code> – контейнером, содержащим группу переключателей (радиокнопок).</p>\n<h2 id=\"-\">Допустимые параметры блока</h2>\n<p>Допустимые параметры блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td><code>String</code></td>\n        <td>Имя радиогруппы. Преобразуется в HTML-атрибут <code>name</code> вложенного блока <code>input</code>.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td><code>Array</code></td>\n        <td>Массив хешей. Каждый хеш соответствует одному переключателю и содержит набор его параметров. </td>\n    </tr><br></table>\n\n<p>Среди параметров, передаваемых в атрибуте <code>option</code> для переключателя, обязательными являются:</p>\n<ul>\n<li><code>val</code> (<code>String</code> | <code>Number</code>) – значение, возвращаемое выбранным переключателем (элементом <code>radio__control</code>);</li>\n<li><code>text</code> (<code>String</code>) – подпись, отображаемая для текущего переключателя. </li>\n</ul>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-theme-\">Темы блока <code>theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером. </p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/radio-group/7DyHwAbpYHpT5TcturqqL57OMbA -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/radio-group/3eOE97EmaqvVB-6XycKG7cpGY5Y -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/radio-group/3iTePRGPbj1_dKvtQGd2bMai-Ac -->\n\n\n\n<h3 id=\"-size-\">Размеры переключателей группы <code>size</code></h3>\n<p>Задает размер переключателей для всех типов радиогрупп. Обязательный модификатор. </p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>В зависимости от значения модификатора <code>type</code> доступны следующие размеры реализации блока:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Обычная радиогруппа</th>\n        <th>Кнопочная радиогруппа (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<p>Размеры на примере темы <em>normal</em> с модификатором <code>radio-group_type_button</code>:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;s&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-S&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-M&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-L&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;xl&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-XL&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-type-\">Тип радиогруппы <code>type</code></h3>\n<p>Модификатор <code>type</code> может иметь следующие значения:</p>\n<ul>\n<li><code>button</code>. Используется для создания кнопочной радиогруппы – блока кнопок-переключателей;</li>\n<li><code>line</code>. Используется для создания радиогруппы с выравниванием в строку. После каждого переключателя группы кроме последнего автоматически добавляется отступ справа. Размер отступа зависит от значения модификатора <code>size</code>. Реализован только в теме <em>normal</em>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычная радиогруппа</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Кнопочная радиогруппа</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Строчная радиогруппа (<code>_type_line</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;line&#39; \n    },\n    name : &#39;radio-line&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h3 id=\"-disabled-\">Неактивна <code>disabled</code></h3>\n<p>В состоянии &quot;неактивна&quot; радиогруппа отображается, но недоступна для действий пользователя.  </p>\n<p>Такая радиогруппа не будет получать фокус (модификатор <code>focused</code>).</p>\n<p>При установке модификатора <code>disabled</code> для радиогруппы всем ее переключателям также устанавливается модификатор <code>disabled</code>. Как следствие для них не будут:</p>\n<ul>\n<li>устанавливаться модификаторы состояния <code>hovered</code>, <code>pressed</code> и <code>focused</code>;</li>\n<li>изменяться значения модификатора <code>checked</code>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/radio-group/z74-X9bjA8-9fMUlFI8AH9R8Dfo -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-focused-\">В фокусе <code>focused</code></h4>\n<p>Модификатор <code>focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда один из его элементов находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/radio-group/8YPfPGsfRbco7RPs63oF47Bj5d8 -->\n\n<h2 id=\"-\">Зависимости блока</h2>\n<p>Блок <code>radio-group</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>radio</code></li>\n<li><code>jquery</code></li>\n<li><code>radio-group_type_button</code> (у которого в зависимостях есть блок <code>button</code>)</li>\n</ul>\n\n<h1 id=\"radio\">radio</h1>\n<p>Блок <code>radio</code> – «радиопереключатель», «радиокнопка». Используется для создания одиночных радиобоксов.</p>\n<p>В реализации блока используется функциональность нативного контрола <code>input</code> с атрибутом <code>type=&quot;radio&quot;</code> – <code>&lt;input name=&quot;name&quot; type=&quot;radio&quot;&gt;</code>, который скрывается при использовании модификатора <code>theme</code>.</p>\n<p>В результате применения шаблонов блок <code>radio</code> отображается на странице как HTML-тег <code>&lt;label&gt;</code> – контейнер, содержащий:</p>\n<ul>\n<li>элемент <code>radio__box</code>, содержащий скрытый контрол <code>input</code> (элемент <code>__control</code>);</li>\n<li>подпись к радиокнопке, если задан BEMJSON-параметр <code>text</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON-блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td><code>name</code></td>\n        <td><code>String|Number</code></td>\n        <td>Имя радиокнопки. Преобразуется в HTML-атрибут <code>name</code> вложенного блока <code>input</code>.</td>\n    </tr>\n    <tr>\n        <td><code>text</code></td>\n        <td><code>String|Number</code></td>\n        <td>Подпись, отображаемая для радиокнопки.</td>\n    </tr>\n    <tr>\n        <td><code>val</code></td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое контролом радиопереключателя <code>radio__control</code>, если выбрана текущая радиокнопка. Преобразуется в HTML-атрибут <code>value</code> вложенного блока <code>input</code>.</td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-theme-\">Темы <code>theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/radio-group/xr-zTTUYS3DD_e4xJV6Yn3a3BPI -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/radio-group/pPPjX0UcGCQBYmUNCpE27JADBCU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/radio-group/L98T9NertqtVCJpvDLdlKg6huWI -->\n\n<h3 id=\"-size-\">Размеры радиопереключателя <code>size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам радиопереключателей.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>В зависимости от значения модификатора <code>type</code> доступны следующие размеры реализации блока:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Обычный радиопереключатель</th>\n        <th>Кнопочный радиопереключатель (<code>radio_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<h3 id=\"-type-\">Тип радиопереключателя <code>type</code></h3>\n<p>Модификатор <code>type</code> со значением <code>button</code> используется для создания кнопочного радиопереключателя – кнопки (блок <code>button</code>) с установленным модификатором <code>button_togglable_radio</code>.</p>\n<p>При этом к блоку <code>button</code> примешивается блок <code>radio</code>, а контентом кнопки становится <code>radio__control</code>.</p>\n<p>Кроме того, при установленном модификаторе <code>radio_type_button</code> для блока задается HTML-атрибут <code>role=&quot;button&quot;</code>.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычный радиопереключатель</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Кнопочный радиопереключатель</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;,\n        type : &#39;button&#39;\n    },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-disabled-\">Неактивен <code>disabled</code></h3>\n<p>В состоянии «неактивен» радиопереключатель отображается, но недоступен для действий пользователя.</p>\n<p>Такой радиопереключатель не будет получать фокус (модификатор <code>focused</code>).</p>\n<p>При установке модификатора <code>disabled</code> для радиопереключателя не будут:</p>\n<ul>\n<li>устанавливаться модификаторы состояния <code>hovered</code>, <code>pressed</code> и <code>focused</code>;</li>\n<li>изменяться значение модификатора <code>checked</code>.</li>\n</ul>\n<!-- bem-example: desktop.examples/radio-group/RBPWsSDN_yrB6HXtmtrnXB3WSMY -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-focused-\">В фокусе <code>focused</code></h4>\n<p>Модификатор <code>focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<!-- bem-example: desktop.examples/radio-group/wEYcA7ioT134yNzBSljZyhtiyg8 -->\n\n<h4 id=\"-checked-\">Выбран <code>checked</code></h4>\n<p>Модификатор <code>checked</code> указывает на то, что радиопереключатель выбран (отмечен).</p>\n<p>Модификатор устанавливается по:</p>\n<ul>\n<li>щелчку мыши по блоку (при повторных щелчках модификатор сохраняется);</li>\n<li>нажатию клавиш <code>Enter</code> или <code>Space</code> (возможность использования клавиши <code>Enter</code> зависит от браузера), если радиопереключатель находится в фокусе (модификатор <code>focused</code>);</li>\n<li>нажатию клавиш стрелок, если фокус установлен на соседний радиопереключатель в радиогруппе или в блоке, содержащем несколько блоков <code>radio</code>.</li>\n</ul>\n<!-- bem-example: desktop.examples/radio-group/TLM9QTv-Pjlfq-MNpduxyTgw0cg -->\n\n<h4 id=\"-radio_type_button-\">Состояния, доступные с модификатором <code>radio_type_button</code></h4>\n<p>При установленном модификаторе <code>radio_type_button</code> к блоку <code>button</code> примешивается блок <code>radio</code>. Как следствие, для блока с модификатором <code>radio_type_button</code> доступны состояния блока <code>button</code>:</p>\n<ul>\n<li><code>hovered</code> – под курсором;</li>\n<li><code>pressed</code> – кнопка нажата.</li>\n</ul>\n<h2 id=\"-\">Элементы</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>Элемент <code>__box</code> используется в стандартной реализации блока как контейнер, содержащий контрол радиокнопки (элемент <code>__control</code>). В результате BEMHTML-преобразований становится HTML-элементом <code>&lt;span&gt;</code>.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p>Элемент <code>__control</code> – контрол радиокнопки. В результате BEMHTML-преобразований становится HTML-элементом <code>&lt;input&gt;</code> с атрибутом <code>type=&quot;radio&quot;</code>. По умолчанию элемент скрыт. В блоке используется только его функциональность.</p>\n<h2 id=\"-\">Зависимости</h2>\n<p>Блок <code>radio</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>control</code></li>\n<li><code>jquery__event</code></li>\n<li><code>__box</code></li>\n<li><code>__control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "radio-group",
                            "examples": [
                                {
                                    "url": "desktop.tests/radio-group/gemini"
                                },
                                {
                                    "url": "desktop.tests/radio-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"radio-group\">radio-group</h1>\n<p>A <code>radio-group</code> block is a set of dependent switches – radio buttons (a <code>radio</code> block). It is used for a single option selection from the list of options. </p>\n<p>On a web page, a <code>radio-group</code> block will be rendered to a <code>&lt;span&gt;</code> HTML element, with nested set of a switches (radio buttons).</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td><code>String</code></td>\n        <td>Radio button group&#39;s name. Renders to the nested <code>input</code> block&#39;s <code>name</code> HTML attribute.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td><code>Array</code></td>\n        <td>Option objects array. Each object in the array are corresponds to one switch and contains it&#39;s attributes set.</td>\n    </tr><br></table>\n\n<p>Among the attributes passing to an <code>option</code> field for the switch the following are mandatory:</p>\n<ul>\n<li><code>val</code> (<code>String</code> | <code>Number</code>) – value returned by selected switcher (a &#39;radio__control&#39; element);</li>\n<li><code>text</code> (<code>String</code>) – a text label for the current switch.</li>\n</ul>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-theme-\">The themes <code>theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/radio-group/7DyHwAbpYHpT5TcturqqL57OMbA -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/radio-group/3eOE97EmaqvVB-6XycKG7cpGY5Y -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/radio-group/3iTePRGPbj1_dKvtQGd2bMai-Ac -->\n\n\n<h3 id=\"the-sizes-size-\">The sizes <code>size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides the size value to all types of radio groups.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Depending on a <code>type</code> modifier value following sizes are available:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Normal radio group</th>\n        <th>Button radio group (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<p>Here are some examples with <em>normal</em> theme and and with set <code>radio-group_type_button</code> modifier:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;s&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-S&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-M&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-L&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;xl&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-XL&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"radio-group-type-type-\">Radio group type <code>type</code></h3>\n<p>A <code>type</code> modifier can have following values:</p>\n<ul>\n<li><code>button</code>. It is used for creation of a button radio group – a block of button switcher;</li>\n<li><code>line</code>. Is used for a line-aligned radio group creation. Right gap is automatically added after each switch of the group except the last one. Available only for <em>normal</em> theme.</li>\n</ul>\n<table>\n    <tr>\n        <th>Type</th>\n\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Normal radio group</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Button radio group</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Line-aligned radio group (<code>_type_line</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;line&#39; \n    },\n    name : &#39;radio-line&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h3 id=\"inactive-disabled-\">Inactive <code>disabled</code></h3>\n<p>A <code>radio-group_disabled</code> modifier is used for an inactive radio group creation. An inactive group is displayed but not available for user actions.  </p>\n<p>Such a group will not obtain focus (<code>radio-group_focused</code> modifier will not be toggled).</p>\n<p>When a <code>disabled</code> modifier is set to the group all it&#39;s switches will also be disabled. As a result, for the group&#39;s switches will not be performed:</p>\n<ul>\n<li>state modifiers <code>hovered</code>, <code>pressed</code> and <code>focused</code> toggling;</li>\n<li>switching between <code>checked</code> modifier&#39;s values.</li>\n</ul>\n<p>Modifier is available for all block themes.</p>\n<!-- bem-example: desktop.examples/radio-group/z74-X9bjA8-9fMUlFI8AH9R8Dfo -->\n\n\n<h3 id=\"radio-group-s-states\">Radio group&#39;s states</h3>\n<h4 id=\"-focused-\"><code>focused</code></h4>\n<p>A <code>radio-group_focused</code> modifier is automaticly toggles when one of the block elements is in focus. For example, on mouse click or by <code>Tab</code> key press. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/radio-group/8YPfPGsfRbco7RPs63oF47Bj5d8 -->\n\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>radio</code></li>\n<li><code>jquery</code></li>\n<li><code>radio-group_type_button</code> (which is depends on <code>button</code> block)</li>\n</ul>\n\n<h1 id=\"radio\">radio</h1>\n<p>A <code>radio</code> block is used for creating of a single radio switch. A switch can be represented by the radio switch or by the button. The <code>radio</code> block allows to manage state, content and type of a radio switches.</p>\n<p>The <code>radio</code> blocks are used inside a <code>radio-group</code> block as a group elements.</p>\n<p>As a result of block&#39;s template application, it will be rendered to a <code>&lt;label&gt;</code> HTML element, with following set of nested items:</p>\n<ul>\n<li>a <code>radio__box</code> element with hidden nested <code>input</code> HTML element (a <code>__control</code> element);</li>\n<li>a radio switch label, if the <code>text</code> BEMJSON attribute is passed.</li>\n</ul>\n<p>Block&#39;s implementation use the logic of a native <code>input</code> HTML element with set <code>radio</code> control type: <code>&lt;input name=&quot;name&quot; type=&quot;radio&quot;&gt;</code>. If a <code>theme</code> modifier is set, the <code>input</code> element is hidden by default.</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td><code>name</code></td>\n        <td><code>String|Number</code></td>\n        <td>Radio switch name. Renders to a nested <code>input</code> block&#39;s <code>name</code> HTML attribute.</td>\n    </tr>\n    <tr>\n        <td><code>text</code></td>\n        <td><code>String|Number</code></td>\n        <td>A label for the radio switch.</td>\n    </tr>\n    <tr>\n        <td><code>val</code></td>\n        <td><code>String|Number</code></td>\n        <td>A value which the selected radio switch will return. Renders to a nested <code>input</code> block&#39;s <code>value</code> HTML attribute.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-theme-\">The themes <code>theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/radio-group/xr-zTTUYS3DD_e4xJV6Yn3a3BPI -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/radio-group/pPPjX0UcGCQBYmUNCpE27JADBCU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/radio-group/L98T9NertqtVCJpvDLdlKg6huWI -->\n\n<h3 id=\"the-sizes-size-\">The sizes <code>size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides all types of radio switches with the size value.</p>\n<p>The set of available sizes depends on a <code>type</code> modifier&#39;s value. Following sizes are available:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Default radio switch</th>\n        <th>Button radio switch (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n<h3 id=\"radio-switch-type-type-\">Radio switch type <code>type</code></h3>\n<p>A <code>type</code> modifier can be set to a <code>button</code> state for creating a button radio switch – the <code>button</code> block with a <code>button_togglable_radio</code> modifier set.</p>\n<p>The <code>radio</code> block is mixed up to the <code>button</code> block with nested <code>radio__control</code> element.</p>\n<p>In addition a <code>role=&quot;button&quot;</code> HTML attribute is set for the block.</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Default radio switch</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Button radio switch</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;,\n        type : &#39;button&#39;\n    },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"inactive-disabled-\">Inactive <code>disabled</code></h4>\n<p>A <code>disabled</code> modifier is used for an inactive radio switch creation. An inactive radio switch is displayed but not available for user actions.  </p>\n<p>Inactive radio switch will not obtain focus (a <code>focused</code> modifier toggle) on mouse click or by <code>Tab</code> key press.</p>\n<p>For such a inactive block will not be performed:</p>\n<ul>\n<li><code>hovered</code>, <code>pressed</code> and <code>focused</code> state modifier toggling;</li>\n<li><code>checked</code> modifier value changing.</li>\n</ul>\n<!-- bem-example: desktop.examples/radio-group/RBPWsSDN_yrB6HXtmtrnXB3WSMY -->\n\n\n<h4 id=\"in-focus-focused-\">In focus <code>focused</code></h4>\n<p>A <code>focused</code> modifier is automatically toggled to the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/radio-group/wEYcA7ioT134yNzBSljZyhtiyg8 -->\n\n\n<h4 id=\"selected-radio-switch-checked-\">Selected radio switch <code>checked</code></h4>\n<p>Modifier defines the selected radio switch.</p>\n<p>The modifier is toggling on:</p>\n<ul>\n<li>mouse click (on re-clicking modifier state remains);</li>\n<li><code>Enter</code> and <code>Space</code> key press (an option of <code>Enter</code> usage depends on a browser), if radio switch is in focus (a <code>focused</code> modifier is toggled);</li>\n<li>arrow key press, if one of the neighbour <code>radio</code> switches is in focus. Neighbour switch can be either a part of the same radio group or independent switch nested in the same block.</li>\n</ul>\n<!-- bem-example: desktop.examples/radio-group/yLi2X_E9s0cnYS8x7h0IvQ3Jmhw -->\n\n\n<h4 id=\"states-available-with-a-radio_type_button-modifier\">States available with a <code>radio_type_button</code> modifier</h4>\n<p>If a <code>radio_type_button</code> modifier is set, a <code>radio</code> block is mixed up to a <code>button</code> block. As a result, for the <code>radio</code> block with the <code>radio_type_button</code> modifier are available following <code>button</code> block&#39;s states:</p>\n<ul>\n<li><code>hovered</code> – mouse pointer over the block;</li>\n<li><code>pressed</code> – button is pressed.</li>\n</ul>\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>A <code>__box</code> element is used in basic block&#39;s implementation as a container with nested control element (a <code>__control</code> element). It renders to a <code>&lt;span&gt;</code> HTML element.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p>A <code>__control</code> element is a radio switch controller. It renders to an <code>&lt;input&gt;</code> HTML element with the <code>type=&quot;radio&quot;</code> attribute is set. In all block themes it is hidden by default. Block uses only the control&#39;s logic.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>control</code></li>\n<li><code>jquery__event</code></li>\n<li><code>__box</code></li>\n<li><code>__control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    }
                },
                {
                    "name": "select",
                    "jsdoc": "<h1 id=\"select-module\">select Module</h1>\n<h2 id=\"select-block\">select Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getval-\">getVal () → {*}</h4>\n<p>Get value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{*}</p>\n<h4 id=\"setval-val-select-\">setVal ( val ) → {select}</h4>\n<p>Set value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {*}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{select}</p>\n<p>this</p>\n<h1 id=\"button-module\">button Module</h1>\n<h2 id=\"button-block\">button Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns text of the button</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"settext-text-button-\">setText ( text ) → {button}</h4>\n<p>Sets text to the button</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>text {String}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{button}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h1 id=\"menu-module\">menu Module</h1>\n<h2 id=\"menu-block\">menu Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getitems-menu-item-\">getItems () → {menu-item}</h4>\n<p>Returns items</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{menu-item}</p>\n<h4 id=\"setcontent-content-menu-\">setContent ( content ) → {menu}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{menu}</p>\n<p>this</p>\n<h1 id=\"menu-item-module\">menu-item Module</h1>\n<h2 id=\"menu-item-block\">menu-item Block</h2>\n<h3 id=\"block-parameters-\">Block parameters:</h3>\n<ul>\n<li>val {*}<br/>\nValue of item</li>\n</ul>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"isvaleq-val-boolean-\">isValEq ( val ) → {Boolean}</h4>\n<p>Checks whether given value is equal to current value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {*}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getval-\">getVal () → {*}</h4>\n<p>Returns item value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{*}</p>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns item text</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup_autoclosable_true\">popup_autoclosable_true</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup_autoclosable_true\">popup_autoclosable_true</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n",
                    "data": {
                        "ru": {
                            "name": "select",
                            "examples": [
                                {
                                    "url": "desktop.tests/select/gemini"
                                },
                                {
                                    "url": "desktop.tests/select/simple"
                                }
                            ],
                            "description": "<h1 id=\"select\">select</h1>\n<p>Блок <code>select</code> («селект») – раскрывающийся список выбора. Реализация блока основана на блоках <code>button</code>, <code>popup</code>, <code>menu</code> и <code>menu-item</code>. Визуально представлен кнопкой и выпадающим списком с элементами меню. Щелчок по кнопке раскрывает выпадающий список под или над кнопкой в зависимости от ее положения на странице (<code>{ directions : [&#39;bottom-left&#39;, &#39;bottom-right&#39;, &#39;top-left&#39;, &#39;top-right&#39;] }</code>). Щелчок вне зоны попапа автоматически скрывает его (<code>{ autoclosable : true }</code>).</p>\n<p>Раскрывающийся список имеет всего один уровень вложенности и позволяет выбрать:</p>\n<ul>\n<li>только один элемент из списка (<code>select_mode_radio</code>);</li>\n<li>один, несколько или ни одного элемента из списка (<code>select_mode_check</code>);</li>\n<li>один или ни одного элемента из списка (<code>select_mode_radio-check</code>).</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON-блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя выпадающего списка.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает уникальный идентификатор селекта.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Задает массив пунктов списка. Каждый пункт имеет обязательный атрибут <code>val</code>, реализованный скрытым элементом <code>control</code>.</td>\n    </tr>\n    <tr>\n        <td>textMaxWidth</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Устанавливает максимальную ширину кнопки селекта. Ширина раскрывающегося списка при этом вычисляется в зависимости от ширины пунктов.</td>\n    </tr>\n    <tr>\n        <td>optionsMaxHeight</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Устанавливает максимальную высоту выпадающего списка.<br>Если все пункты списка не вмещаются, появляется скролл.<br> Если значение не указано, высота выпадающего списка по умолчанию будет вычисляться в зависимости от количества пунктов.</td>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение раскрывающегося списка выбора в случае, если ни один из пунктов не отмечен.<br> Применяется только для селектов с установленным модификатором <code>mode</code> в значении <code>check</code> или <code>radio-check</code>.</td>\n    </tr>\n</table>\n\n<p>Другие допустимые атрибуты блока могут задаваться в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Если модификатор темы не указан, отображается кастомная реализация контрола без применения стилей.</p>\n<p>Наглядно показано на примерах ниже:</p>\n<!-- bem-example: desktop.examples/select/KnPV22VFNtI4S-O8Wpqq1LxdReY -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/select/Cm3ZrvxjfRMKNGE1uZyeeDtczwo -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/select/walnTtaHw3moIy8I9-6eOB25lMw -->\n\n<h3 id=\"-_mode-\">Типы <code>_mode</code></h3>\n<p>Обязательный модификатор.</p>\n<p>Блок представлен следующими типами:</p>\n<ul>\n<li>селект с множественным выбором, который позволяет оставить список без выбранных элементов (<code>select_mode_check</code>). При щелчке мышью по пункту списка, его состояние меняется на противоположное. Если пункт был активен – он деактивируется, и наоборот.</li>\n</ul>\n<!-- bem-example: desktop.examples/select/hpUbeKC_5hYtmemMemDzuUiqED8 -->\n\n<ul>\n<li>меню-переключатель (<code>select_mode_radio</code>). Применяется для создания селектов, позволяющих только одиночный выбор.\nДля этого типа селекта текст в кнопке устанавливается в зависимости от выбранного элемента. Если элемент не выбран, то по умолчанию выбирается первый пункт из списка.</li>\n</ul>\n<!-- bem-example: desktop.examples/select/zeJPZbtVz42oYU7GxOeTA7fv-ag -->\n\n<ul>\n<li>селект с одиночным выбором, который позволяет оставить список без выбранных элементов (<code>select_mode_radio-check</code>). При щелчке мышью по пункту списка, его состояние меняется на противоположное. Если пункт был активен – он деактивируется, и наоборот.</li>\n</ul>\n<!-- bem-example: desktop.examples/select/ilW6j3BEgfKcwzfrYVtoANn-atA -->\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<h4 id=\"-_width-\">Ширина кнопки селекта <code>_width</code></h4>\n<p>Модификатор <code>width</code> в значении <code>available</code> растягивает кнопку селекта по ширине в зависимости от длины выбранного пункта.</p>\n<!-- bem-example: desktop.examples/select/JkxdmzpYd197HKLlAB6yPUU4Vgg -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"-__button-\">Кнопка <code>__button</code></h3>\n<p>Селект визуально представлен кнопкой (элемент <code>button</code>), которая содержит иконку <code>&lt;i&gt;</code>, реализованную блоком <a href=\"../icon/icon.ru.md\">icon</a> с примиксованным элементом <code>tick</code>. Так как иконка является частью кнопки селекта, ее размер устанавливается размером кнопки. Щелчок по кнопке раскрывает список выбора.</p>\n<p>Так как селект реализован с помощью блока <a href=\"../button/button.ru.md\">button</a>, ему можно задавать следующие модификаторы:</p>\n<ul>\n<li><code>theme</code></li>\n<li><code>size</code></li>\n<li><code>focused</code></li>\n<li><code>checked</code></li>\n<li><code>disabled</code></li>\n</ul>\n<h2 id=\"-__control-\">Контрол <code>__control</code></h2>\n<p>Вспомогательный скрытый элемент, который отвечает за формирование элементов списка выбора.</p>\n<h2 id=\"-__menu-\">Меню <code>__menu</code></h2>\n<p>Элемент <code>menu</code> позволяет управлять пунктами списка выбора:</p>\n<ul>\n<li><code>val</code> – значение, возвращаемое пунктом из списка, если он выбран. Обязательный атрибут. Может содержать уникальный идентификатор <code>{ val : { id : 1 } }</code>.</li>\n<li><code>text</code> – название пункта в списке.</li>\n<li><code>checked</code> – присваивается пункту из списка, если он выбран. <code>{ checked : true }</code> – пункт выбран.</li>\n<li><code>checkedText</code> – задает значение, отображаемое в кнопке селекта, для выбранного пункта. Задается только для блока <code>select</code> с модификатором <code>mode</code> в значении <code>check</code>.</li>\n<li><code>icon</code> – графический элемент (иконка)</li>\n</ul>\n<!-- bem-example: desktop.examples/select/TUaceOlKTkiAy0Ojt7LQba4Yc_A -->\n\n<p>Элементы списка могут быть объединены в группы. Для группировки пунктов выбора служит элемент <code>group</code>, в который вкладываются необходимые элементы списка. Название группы задается через атрибут <code>title</code>.</p>\n<!-- bem-example: desktop.examples/select/CAWbbXgQYp4XtKAtpvG9UGnGOFU -->\n\n<h1 id=\"button\">button</h1>\n<p>Блок <code>button</code> используется для создания различных типов кнопок и предоставляет возможность изменять их размер, состояние, содержимое и внешний вид.</p>\n<h2 id=\"-\">Варианты использования кнопок</h2>\n<ul>\n<li>Обычная кнопка – применяется для любых кнопок веб-интерфейса. Используется по умолчанию.</li>\n<li>Кнопка-ссылка – применяется для перехода по ссылке. Задается модификатором <code>type</code> со значением <code>link</code>.</li>\n<li>Кнопка отправки формы – предназначена для отправки данных формы на сервер (submit). Задается модификатором <code>type</code> со значением <code>submit</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает текст кнопки.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code></td>\n        <td>Кнопка с иконкой, которая формируется блоком <code>icon</code>.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Адрес ссылки. Применяется только при наличии модификатора блока <code>button_type_link</code>. Кнопка становится ссылкой, а значение <code>url</code> – атрибутом <code>href</code>.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Уникальный идентификатор кнопки.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет последовательность перехода между кнопками при нажатии на <code>Tab</code>.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Значение, отправляемое на сервер. По умолчанию пустое.</td>\n    </tr>\n</table>\n\n<p>Другие допустимые атрибуты блока могут задаваться в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/select/pxTNfkqsHxpJmDhwS0QK2QBs3ZY -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/select/KtCevfKa_rzm7MTQMzA65Z0ZREU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/select/Rb77AVqNcSM2UUBxbCkUkHULKWc -->\n\n<h3 id=\"-_size-\">Размеры кнопок <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам кнопок.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>кнопки</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота<br>кнопки</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Типы кнопок <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки-ссылки (<code>_type_link</code>) и кнопки отправки формы (<code>_type_submit</code>).\nВ случак кнопки-ссылки, дополнительно во входных данных необходимо указать обязательный атрибут <code>url</code>. В таком случае кнопка получает тег <code>&lt;a&gt;</code>, а значение <code>url</code> становится атрибутом <code>href</code>.</p>\n<p><strong>Кнопка-ссылка</strong></p>\n<!-- bem-example: desktop.examples/select/El0pc_bZgByjhimDRiJmaUa0ubw -->\n\n<p><strong>Кнопка отправки формы</strong></p>\n<!-- bem-example: desktop.examples/select/gtF_RY9_ivjSx1sADQLwlLOSzmo -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_disabled-\">Неактивна <code>_disabled</code></h4>\n<p>В состоянии «неактивна» кнопка видна, но недоступна для действий пользователя.</p>\n<p>Такая кнопка не может получить фокус путем нажатия на клавишу <code>Tab</code>, мышью или другими способами.</p>\n<!-- bem-example: desktop.examples/select/VrNTsucLZEWlatBulG8rqd0wHxQ -->\n\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> кнопка всегда находится в фокусе. Нажатие по ней можно выполнить клавишей <code>Space</code> или <code>Enter</code>.</p>\n<!-- bem-example: desktop.examples/select/ByAZ1dHx4rZKUf9zbxuHmfOmGNs -->\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие «наведение курсором» на кнопку.</p>\n<h4 id=\"-_pressed-\">Нажатие <code>_pressed</code></h4>\n<p>Определяет состояние «нажатие на кнопку» (действие).</p>\n<h4 id=\"-_togglable-\">Залипание <code>_togglable</code></h4>\n<p>Позволяет реализовать залипание кнопки. Допустимые значения: <code>check</code> и <code>radio</code>.</p>\n<!-- bem-example: desktop.examples/select/NYbJzppv5-r9T8LQ0_-SaNLJWds -->\n\n<h4 id=\"-_action-\">Визуальное выделение <code>_action</code></h4>\n<p>Визуально выделяет кнопку на странице.</p>\n<!-- bem-example: desktop.examples/select/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"-_pseudo-\">Псевдокнопка <code>_pseudo</code></h4>\n<p>При выборе модификатора <code>pseudo</code> со значением <code>true</code>, кнопка получает прозрачный фон.</p>\n<!-- bem-example: desktop.examples/select/h_ijyu_mqbPaJBB22OxZERaFyZA -->\n\n<p>В неактивном состоянии границы псевдокнопки исчезают и она сливается со страницей.</p>\n<!-- bem-example: desktop.examples/select/igxPz7KCvCVG6TTxlXRYzE2_5pI -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"__text\">__text</h3>\n<p>Технический элемент. Обрамляет текст кнопки.\nНужен для позиционирования текста внутри кнопки, в том числе для случаев использования вместе с иконкой.</p>\n<!-- bem-example: desktop.examples/select/RQ8YcvhxhqjSwO3I3VjLBOanRns -->\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n\n<h1 id=\"menu\">menu</h1>\n<p>Блок <code>menu</code> используется для создания различных типов меню и селектов.</p>\n<p>Он предоставляет возможность изменять размер и внешний вид блоков меню, управлять поведением вложенных блоков – пунктов меню или селекта.</p>\n<p>В результате BEMHTML-преобразований на странице блок становится HTML-элементом с тегом <code>&lt;div&gt;</code> и свойством <code>role=&quot;menu&quot;</code>. HTML-элементом, содащим набор переключателей – пунктов меню (блок <code>menu-item</code>).</p>\n<h2 id=\"-\">Варианты использования меню</h2>\n<p>Блок <code>menu</code> служит для создания различных типов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Меню-переключатель</td>\n        <td>Применяется для создания меню или селектов, позволяющих только одиночный выбор.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;, \n        mode : &#39;radio&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Селект с множественным выбором (<code>_mode_check</code>)</td>\n        <td>При щелчке мышью по пункту меню его состояние меняется на противоположное. Если пункт был активен – он деактивируется и наоборот.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n<tr>\n        <td>Простой список (без модификатора <code>_mode</code>)</td>\n        <td>При щелчке мышью по пункту меню его состояние не меняется. Модификатор <code>_cheked</code> не устанавливается.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/select/vAAUvyJpkNyuM0yEru7LP3dZ7xE -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/select/JgK_lg3CEjumbM6ThTKEOcNpfH0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/select/MGiZ5_2bYS32yaxnY5iD9OevjVk -->\n\n\n<h3 id=\"-_size-\">Размеры меню <code>_size</code></h3>\n<p>Задает размер всем типам меню. Обязательный модификатор.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер/Параметры</th>\n        <th>Размер шрифта</th>\n        <th>Высота строки <code>line-heigh</code></th>\n        <th>Левый отступ <code>padding-left</code></th>\n        <th>Отступ <code>padding</code></th>\n        <th>Размер &quot;галочки&quot; для темы normal</code></th>\n    </tr>\n    <tr>\n        <td>s</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;s&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>m</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;m&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>l</td>\n        <td>15px</td>\n        <td>28px</td>\n        <td>34px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;l&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>xl</td>\n        <td>15px</td>\n        <td>32px</td>\n        <td>40px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;xl&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-_mode-\">Способ выбора пунктов <code>_mode</code></h3>\n<p>Модификатор <code>_mode</code> управляет поведением пунктов меню при щелчке по ним мышью, например, возможностью множественного выбора пунктов меню.</p>\n<p>Доступны следующие значения модификатора:</p>\n<ul>\n<li><code>check</code> – селект. Пункт, по которому был произведен щелчек мышью, изменит состояние на противоположное и будет менять состояние при повторных щелчках. Доступна возможность множественного выбора пунктов;</li>\n<li><code>radio</code> – переключатель. При щелчке мышью будет производиться переключение активных пунктов меню. При повторном щелчке пункт, по которому он был произведен, останется <strong>активным</strong>. Множественный выбор недоступен;</li>\n<li><code>radio-check</code> – переключатель. При щелчке мышью будет производиться переключение активных пунктов меню. При повторном щелчке пункт, по которому он был произведен, станет <strong>неактивным</strong>. Множественный выбор недоступен.</li>\n</ul>\n<p>Реализован во всех темах блока.</p>\n<table>\n    <tr>\n        <th>Выбор пунктов</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Только один (<code>_mode_radio</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Множественный выбор или ни одного (<code>_mode_check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Один или ни одного (<code>_mode_radio-check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio-check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>_focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/select/lFNP7KamARohsQ5DCX0QQZU1ACQ -->\n\n\n<h2 id=\"-\">Элементы блока</h2>\n<p>Визуально представлен следующими элементами:</p>\n<h3 id=\"__group\">__group</h3>\n<p>Элемент <code>__group</code> служит для группировки пунктов меню. Пункты, которые нужно сгруппировать, помещаются в поле <code>content</code> элемента. Группы визуально отделяются серой чертой.</p>\n<p>Например:</p>\n<!-- bem-example: desktop.examples/select/WSrgcU6mXH0StKcrKnckCnH3lrc -->\n\n\n<h3 id=\"__group-title\">__group-title</h3>\n<p>Элемент позволяет задать заголовок для группы пунктов меню, создаваемой с помощью элемента <code>__group</code>.</p>\n<p>Например:</p>\n<!-- bem-example: desktop.examples/select/yGGZayW6DClbboVCxBRriqv3YcU -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>menu-item</code></li>\n<li><code>dom</code></li>\n<li><code>keyboard</code></li>\n<li><code>control</code></li>\n</ul>\n\n<h1 id=\"menu-item\">menu-item</h1>\n<p>Блок <code>menu-item</code> служит для создания пунктов меню или селекта. Используется внутри блока <code>menu</code>. Блок <code>menu-item</code> предоставляет возможность изменять состояние, содержимое и тип пунктов меню.</p>\n<p>Блок <code>menu-item</code> в результате BEMHTML-преобразований на странице становится HTML-элементом с тегом <code>&lt;div&gt;</code> со свойством <code>role=&quot;menuitem&quot;</code>.</p>\n<h2 id=\"-\">Варианты использования пунктов меню</h2>\n<p>Блок <code>menu-item</code> служит для создания различных типов пунктов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Переключатель</td>\n        <td>Применяется для любых выпадающих списков, табов, пунктов меню и селектов и т.п. Используется по умолчанию.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Ссылка</td>\n        <td>Элемент меню со ссылкой. Блок <code>link</code> помещается в поле <code>content</code> BEMJSON-декларации блока. Так же требуется установить блоку модификатор <code>type</code> в значение <code>link</code>.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое пунктом меню, если он выбран.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/select/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/select/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/select/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"-_type-\">Типы блока <code>_type</code></h3>\n<p>Модификатор <code>_type</code> в значении <code>_link</code> позволяет создавать пункт меню-ссылку. Блок <code>link</code> при этом помещается в поле <code>content</code> BEMJSON-декларации блока. Если модификатор <code>_type_link</code> не установлен, вложенная ссылка будет доступна для действий пользователя при установленном модификаторе <code>_disabled</code>.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/select/47lHiiyDspaBs5AiC22G42Y-N_o -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии &quot;неактивен&quot; пункт меню отображается, но недоступен для действий пользователя.  </p>\n<p>Такой пункт меню не изменяет состояние при щелчке мышью. Если для блока установлен модификатор <code>_type_link</code>, переход по ссылке не осуществляется. </p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: desktop.examples/select/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие &quot;наведение курсором&quot; на пункт меню.</p>\n<p>Реализован во всех темах блока.</p>\n<p>Автоматически выставляется при наведении указателем мыши на пункт меню.</p>\n<!-- bem-example: desktop.examples/select/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"-_checked-\">Выбранный пункт меню <code>_checked</code></h4>\n<p>Модификатор задает выбранный пункт меню.</p>\n<!-- bem-example: desktop.examples/select/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>В блоке <code>menu</code> модификатор <code>_checked</code> устанавливается для пункта при щелчке мышью:</p>\n<!-- bem-example: desktop.examples/select/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu-item</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n\n<h1 id=\"popup\">popup</h1>\n<p>Блок <code>popup</code> используется для создания выпадающих элементов и позволяет изменять их состояние, поведение и внешний вид. Блок отображается поверх остальных элементов страницы.</p>\n<p>Попап может быть вызван различными элементами страницы, например, кнопками или псевдоссылками.</p>\n<p>В момент первого показа (установка модификатора <code>_visible</code>) DOM-элемент блока создается в конце <code>&lt;body&gt;</code>.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/select/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/select/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/select/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n\n<h3 id=\"-_visible-\">Видимый <code>_visible</code></h3>\n<p>Модификатор, отвечающий за видимость блока. При значении модификатора <code>false</code> блок не отображается.</p>\n<!-- bem-example: desktop.examples/select/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"-_direction-\">Расположение относительно родителя <code>_direction</code></h3>\n<p>Модификатор управляет положением попапа на странице относительно вызвавшего его блока. Расположение блока определяется автоматически, исходя из массива допустимых расположений и положения родителя на странице.</p>\n<p>Выбранное расположение влияет на направление анимации раскрытия.</p>\n<p>По умолчанию используется следующий массив допустимых расположений:</p>\n<table>\n    <tr>\n        <th> Направление раскрытия </td>\n        <th> Индекс в массиве </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>Чтобы управлять расположением попапа, можно ограничить массив расположений, оставив только требуемые. Пользовательский массив нужно передать в качестве JS-параметра с ключом <code>directions</code>. При этом из значений массива будет выбрано наиболее подходящее, исходя из положения родителя на странице.</p>\n<p>Например, если требуется, чтобы попап раскрывался над родителем:</p>\n<!-- bem-example: desktop.examples/select/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Или разместить попап справа по центру:</p>\n<!-- bem-example: desktop.examples/select/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"-_autoclosable-\">Автоматическое скрытие <code>_autoclosable</code></h3>\n<p>Модификатор отвечает за автоматическое скрытие попапа при клике вне блока. При установке модификатора <code>_autoclosable</code> в значении <code>_true</code> блок будет скрываться при щелчке за его пределами (будет снят модификатор <code>_visible</code>).</p>\n<!-- bem-example: desktop.examples/select/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"-popup-\">Взаимосвязи между popup&#39;ами</h2>\n<p>Так как попап выносит себя в конец <code>&lt;body&gt;</code>, чтобы перекрывать другие элементы страницы, возникает необходимость в построении взаимосвязей. Блок умеет выстраивать связи Parent → [ Child, Child, ... ]. Для этого он выполняет проверку, вложен ли блок, вызывающий попап в другой <code>popup</code>. Потомки знают о наличии родителя.\nЕсли бы этих взаимосвязей не было, то родительский попап (при наличии модификатора <code>autoclosable</code> со значением <code>true</code>) закрылся бы при клике внутри дочернего.</p>\n<p>Другими словами модификатор <code>autoclosable</code> со значением <code>true</code> означает, что попап закроется сам и закроет свои дочерние блоки при клике за пределами его самого и дочерних попапов.</p>\n<p>Дочерние блоки popup можно рассматривать в виде цепочки 1 → 2 → 3 → 4. При клике на втором попапе – закрываются третий и четвертый. При клике в первом – закрываются второй, третий, четвертый. При клике за пределами любого попапа из цепочки – закроются все.</p>\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>popup</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "select",
                            "examples": [
                                {
                                    "url": "desktop.tests/select/gemini"
                                },
                                {
                                    "url": "desktop.tests/select/simple"
                                }
                            ],
                            "description": "<h1 id=\"button\">button</h1>\n<p>The <code>button</code> block is used for different types of buttons creation. It allows you to manage size, sate, content and appearance of a button.</p>\n<h2 id=\"button-use-cases\">Button use cases</h2>\n<ul>\n<li>button – is used to create the majority of web inteface buttons. Used by default.</li>\n<li>link-button – a button that provides link functionality. Must have a mandatory modifier <code>type</code> with <code>link</code> value.</li>\n<li>action button – a button designed to send data to the server (submit). Must be always located inside a form. Sets <code>type</code> modifier with <code>submit</code> value in BEMJSON to create an action button.</li>\n</ul>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified in corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attributes</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Text of a button.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Button with an icon provided by an <code>icon</code> block.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>URL address. It is used only if <code>button_type_link</code> modifier is specified. In this case a button\n            acts as a link and <code>url</code> value is represented as a <code>href</code> attribute.\n        </td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Unique identifier of a button.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Defines tab order between the buttons.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Value to be sent to a server. It is empty by default.</td>\n    </tr>\n</table>\n\n<p>The other valid block&#39;s attributes could be specified in the <code>attrs</code> field in BEMJSON.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>The block supports the following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>Following examples demonstrate this:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: desktop.examples/select/b7paW80CenjDPGtPNxSCdPuUKqg -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/select/8MGVemijL_tqZt4Z3DsedAxNwDo -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/select/u1hTHzxMhorqFlZaZXNkPIBN4WU -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier that is available for <em>normal</em> theme only.</p>\n<p>Provides all types of buttons with the <code>size</code> value.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Following examples demonstrate this:</p>\n<table>\n  <tr>\n    <th>Size</th>\n    <th>Font size</th>\n    <th>Button height</th>\n    <th>Example</th>\n  </tr>\n  <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The block could be represented as a <code>link-button</code> (<code>button_type_link</code>).</p>\n<p>This button type has mandatory attribute <code>url</code> that should be specified in BEMJSON input data. A link-button has an <code>&lt;a&gt;</code> attribute. <code>url</code> value becomes <code>href</code> attribute.</p>\n<pre><code>{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;link&#39; },\n    url : &#39;#&#39;,\n    text : &#39;Link-button&#39;\n}\n</code></pre><h3 id=\"button-s-states\">Button&#39;s states</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, button is visible but not available for user action.</p>\n<p>Disabled button cannot be focused by pressing a <code>Tab</code> or on mouse click.</p>\n<pre><code class=\"lang-bemjsom\">{\n    block : &#39;button&#39;,\n    text : &#39;Disabled&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, disabled : true }\n}\n</code></pre>\n<h4 id=\"_focused\">_focused</h4>\n<p>If <code>focused</code> modifier has <code>true</code> value, the button is always focused. You can click the focused button using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: desktop.examples/select/UkvwYMbpDOkZaq5dm0uIlVbQ9GA -->\n\n<h4 id=\"_hovered\">_hovered</h4>\n<p>Defines &quot;hover&quot; action.</p>\n<h4 id=\"_pressed\">_pressed</h4>\n<p>Defines &quot;pressed&quot; state of a button.</p>\n<h4 id=\"_togglable\">_togglable</h4>\n<p>Defines a state of the pressed button when the first click presses the button, and the second returns it to its original state.</p>\n<!-- bem-example: desktop.examples/select/xAkZMTZIyMq8S8Cc5mWrpqEj5Cc -->\n\n<h4 id=\"_action\">_action</h4>\n<p>Visually highlights a button on a page.</p>\n<!-- bem-example: desktop.examples/select/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"_pseudo\">_pseudo</h4>\n<p>If <code>pseudo</code> modifier has <code>true</code> value, the button background becomes transparent.</p>\n<!-- bem-example: desktop.examples/select/GVMyNpdJjINIl0Ab_qhtsWRf_YA -->\nIf pseudo button is disabled, its boarders disappear.\n\n<!-- bem-example: desktop.examples/select/fc2vxXBIzzk2stACB-J9vRKlYQ4 -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"__text\">__text</h3>\n<p>This auxiliary element sets a text position inside the button.</p>\n<!-- bem-example: desktop.examples/select/t_3HDmaOrqYMmf-3NPSa4KJZWBY -->\n\n<h2 id=\"block-s-dependencies\">Block&#39;s dependencies</h2>\n<ul>\n<li><code>control</code>, that provides public API for the controls</li>\n<li><code>i-bem__dom</code></li>\n<li><code>keyboard</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n\n<h1 id=\"menu\">menu</h1>\n<p>A <code>menu</code> block is used for creation of various types of menus and lists. It allows to manage state, behavior and appearance of menus.</p>\n<p>As a result of BEMHTML transformations, a block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menu&quot;</code> attribute set. The block&#39;s HTML element contains a set of switches – the <code>menu-item</code> blocks.</p>\n<p>It allow to manage the appearance, state and size of a menu blocks as well as manage the nested <code>menu-items</code> block&#39;s appearance.</p>\n<h2 id=\"menu-use-cases\">menu use cases</h2>\n<p>A <code>menu</code> block is used for creation of following menu types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Switch menu</td>\n        <td>Used for creation of lists with a single selectable item.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;, \n        mode : &#39;radio&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A multi selectable list. (<code>_mode_check</code>)</td>\n        <td>Clicking on a list items will perform item&#39;s state switching to opposite. If an item was active it will be deactivated, and vice versa.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n<tr>\n        <td>Basic list (with <code>_mode</code> modifier is unset)</td>\n        <td>Menu item&#39;s state will not change on mouse click. A <code>_cheked</code> state modifier will not be toggled.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/select/vAAUvyJpkNyuM0yEru7LP3dZ7xE -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/select/JgK_lg3CEjumbM6ThTKEOcNpfH0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/select/MGiZ5_2bYS32yaxnY5iD9OevjVk -->\n\n<h3 id=\"the-sizes-_size-\">The sizes <code>_size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides a size value to all types of radio groups.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<table>\n    <tr>\n        <th>A <code>_size</code> value</th>\n        <th>Font size</th>\n        <th>Line height <code>line-heigh</code></th>\n        <th>Left padding <code>padding-left</code></th>\n        <th>Global <code>padding</code></th>\n        <th>The tick&#39;s icon size for normal theme</code></th>\n    </tr>\n    <tr>\n        <td>s</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;s&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>m</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;m&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>l</td>\n        <td>15px</td>\n        <td>28px</td>\n        <td>34px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;l&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>xl</td>\n        <td>15px</td>\n        <td>32px</td>\n        <td>40px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;xl&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"menu-item-selection-options-_mode-\">Menu item selection options <code>_mode</code></h3>\n<p>A <code>_mode</code> modifier defines a menu item&#39;s reaction on mouse click. For example, it controls multiple items selectability.</p>\n<p>Following modifier values are available:</p>\n<ul>\n<li><code>check</code> – a selectable list. A menu item will change it&#39;s state to opposite on each mouse click. An active item will become inactive and vice versa. Multiple choice is available;</li>\n<li><code>radio</code> – a switcher. Inactive menu item will be activated on mouse click. On re-clicking the menu item will remain <strong>active</strong>. Multiple choice not available;</li>\n<li><code>radio-check</code> – a switcher. Inactive menu item will be activated on mouse click. On re-clicking the active menu item will become <strong>inactive</strong>. Multiple choice not available.</li>\n</ul>\n<p>Available for all block themes.</p>\n<table>\n    <tr>\n        <th>List items selectability</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Only one (<code>_mode_radio</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Plural selection or none (<code>_mode_check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>One or none (<code>_mode_radio-check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio-check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"in-focus-_focused-\">In focus <code>_focused</code></h4>\n<p>A <code>_focused</code> modifier is automatically toggles for the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/select/2y_zCWFJ78bAFa8UEqIdsRPc3qM -->\n\n<h2 id=\"the-block-s-elements\">The block&#39;s elements</h2>\n<p>The <code>menu</code> block is visually represented by following elements:</p>\n<h3 id=\"__group\">__group</h3>\n<p>A <code>__group</code> element is used for menu items grouping. An Items that needed grouping should be placed to the element BEMJSON declaration&#39;s <code>content</code> field. The group elements are visually separated by a gray line.</p>\n<p>For example:</p>\n<!-- bem-example: desktop.examples/select/WSrgcU6mXH0StKcrKnckCnH3lrc -->\n\n\n<h3 id=\"__group-title\">__group-title</h3>\n<p>This element allows to create a title for a menu items group, created using a <code>_group</code> element.</p>\n<p>For example:</p>\n<!-- bem-example: desktop.examples/select/8LCJ2Asb6uR2ZHALf5iscb_n2RU -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>menu-item</code></li>\n<li><code>dom</code></li>\n<li><code>keyboard</code></li>\n<li><code>control</code></li>\n</ul>\n\n<h1 id=\"menu-item\">menu item</h1>\n<p>A <code>menu-item</code> block is used for creation of various types of menu and list items. It is used inside a <code>menu</code> block. The <code>menu-item</code> block allows to manage state, content and type of menu items.</p>\n<p>As a result of BEMHTML transformations block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menuitem&quot;</code> attribute set.</p>\n<h2 id=\"menu-item-use-cases\">menu item use cases</h2>\n<p>The block helps to create following menu item types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>An example</th>\n    </tr>\n    <tr>\n        <td>A switch element</td>\n        <td>Is used to set up a dropdowns, tab menus, lists and menu items, etc.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A link element (<code>_type_link</code>)</td>\n        <td>An element with nested depended link. A <code>link</code> block should be placed into block&#39;s BEMJSON declaration <code>content</code> field. The <code>_type_link</code> modifier is required.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>A value returned by menu item if selected.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/select/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/select/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/select/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive menu item. Inactive menu item is displayed, but not available for user actions.  </p>\n<p>If a <code>_type_link</code> modifier is set for the block with a nested link, the link will not be followed on mouse click.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/select/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"mouse-over-_hovered-\">Mouse over <code>_hovered</code></h4>\n<p>This modifier is automatically toggled when the mouse pointer is over the block. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: desktop.examples/select/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"selected-menu-item-_checked-\">Selected menu item <code>_checked</code></h4>\n<p>Modifier defines the selected menu item.</p>\n<!-- bem-example: desktop.examples/select/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>For the <code>menu-item</code> blocks nested in a <code>menu</code> block <code>_checked</code> state toggles automatically on mouse click. </p>\n<!-- bem-example: desktop.examples/select/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n\n<h1 id=\"popup\">popup</h1>\n<p>A <code>popup</code> block is used for popups creation. It allows to manage state, behavior and appearance of popups. Block is displayed in front of all other page elements.</p>\n<p>Popup can be displayed by different page elements like pseudo links or buttons.</p>\n<p>At the moment of first display (<code>_visible</code> modifier toggle) block&#39;s DOM element is created in the end of document <code>&lt;body&gt;</code>.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to block.</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: desktop.examples/select/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: desktop.examples/select/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: desktop.examples/select/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n<h3 id=\"visibility-_visible-\">Visibility <code>_visible</code></h3>\n<p>A <code>_visible</code> modifier allow to control block visibility. If it&#39;s not set, block will not be displayed.</p>\n<!-- bem-example: desktop.examples/select/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"alignment-respect-to-its-parent-_direction-\">Alignment respect to its parent <code>_direction</code></h3>\n<p>Modifier controls the position of popup window relative to the block which opened it – popup&#39;s alignment. Popup window&#39;s position is detected automatically basing on the admissible directions array and the parent block&#39;s position.</p>\n<p>Chosen alignment will affect the opening animation direction.</p>\n<p>By default following admissible directions array is used:</p>\n<table>\n    <tr>\n        <th> Direction </td>\n        <th> Index in array </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>To control the popup window position you can provide directions array with desired directions set only. According to parent block&#39;s position on a page the most suitable directions will be chosen among the provided values.</p>\n<p>For example, if the popup window should be opened at the top of the parent block:</p>\n<!-- bem-example: desktop.examples/select/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Or if it should be opened strictly at the center-right position:</p>\n<!-- bem-example: desktop.examples/select/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"automatic-closure-_autoclosable-\">Automatic closure  <code>_autoclosable</code></h3>\n<p>With <code>_autoclosable</code> modifier toggled block will automatically hide away on mouse click outside popup window (<code>_visible</code> modifier will be removed).</p>\n<!-- bem-example: desktop.examples/select/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"relations-between-popup-s\">Relations between popup&#39;s</h2>\n<p>As long as popup&#39;s parent block itself can be nested in another popup block there is a need in a popup&#39;s relations handling. Block can handle Parent → [ Child, Child, ... ] relations by checking if the parent block is nested in another popup block. So, the children knows about the parent blocks existence.</p>\n<p>If there were no such relations, the parent popup block will be closed on mouse click on the child block regardless of the fact that <code>_autoclosable</code> modifier is set to <code>true</code>.</p>\n<p>This means that with <code>autoclosable</code> modifier toggled block will close itself and close all of it children on mouse click outside block&#39;s window or it child&#39;s window.</p>\n<p>Child popup blocks can be regarded as a chain of 1 → 2 → 3 → 4. By clicking on the second element of chain, third and forth will be closed. By clicking on first, the second, third and forth will be closed. On click outside of any popup window of the chain element all popups will be closed.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        }
                    }
                },
                {
                    "name": "spin",
                    "data": {
                        "ru": {
                            "name": "spin",
                            "examples": [
                                {
                                    "url": "desktop.tests/spin/gemini"
                                },
                                {
                                    "url": "desktop.tests/spin/simple"
                                }
                            ],
                            "description": "<h1 id=\"spin\">spin</h1>\n<p>Блок <code>spin</code> визуально иллюстрирует ход выполнения какого-либо процесса. Например, загрузки сайта или медиа-файла.</p>\n<p>Вращается прелоадер при помощи только CSS3-анимации.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы оформления <code>_theme</code></h3>\n<p>Обязательный модификатор, так как блок не имеет нативного состояния контрола.</p>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/spin/8nRZMnjcoWEtDxk8S584ZVjCjgM -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/spin/dw4UDnC7PHm5UQ_f-yKnadONEQ4 -->\n\n<h3 id=\"-_size-\">Размеры <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер блоку <code>spin</code>.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно пять размеров реализации блока: <strong>xs</strong>, <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>блока</th>\n        <th>Размер, px</th>\n        <th>Реализация</th>\n    </tr>\n    <tr>\n        <th>XS</th>\n        <td>16px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xs&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_progress-\">Вращение прелоадера <code>_progress</code></h3>\n<p>Модификатор <code>progress</code> в значении <code>true</code> задает вращение прелоадера и показывает его на странице. Когда прелоадер виден, он крутится.</p>\n<p>Модификатор <code>progress</code> в значении <code>false</code> останавливает прелоадер и скрывает его со страницы.</p>\n"
                        },
                        "en": {
                            "name": "spin",
                            "examples": [
                                {
                                    "url": "desktop.tests/spin/gemini"
                                },
                                {
                                    "url": "desktop.tests/spin/simple"
                                }
                            ],
                            "description": "<h1 id=\"spin\">spin</h1>\n<p>This block indicates the progress of some process (e.g. site page or some media file loading).</p>\n<p>Rotation of the <code>spin</code> block is implemented by CSS3 animation.</p>\n<h2 id=\"block-modifiers\">Block Modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Mandatory modifier. The <code>spin</code> block doesn&#39;t have native control representation (<em>default</em>).</p>\n<p>This block supports following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Following examples demonstrate this:</p>\n<p><strong>simple</strong></p>\n<!-- bem-example: desktop.examples/spin/8nRZMnjcoWEtDxk8S584ZVjCjgM -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: desktop.examples/spin/dw4UDnC7PHm5UQ_f-yKnadONEQ4 -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier.</p>\n<p>There are five sizes available: <strong>XS</strong>, <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Following examples demonstrate this:</p>\n<table>\n    <tr>\n        <th>Block&#39;s size</th>\n        <th>Size, px</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>XS</th>\n        <td>16px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xs&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_progress\">_progress</h3>\n<p><code>progress</code> modifier with <code>true</code> value activates the spin. <code>spin</code> block rotates only in visible state.</p>\n<p><code>progress</code> modifies with <code>false</code> value paused rotation of <code>spin</code> block and hides it from the page.</p>\n"
                        }
                    },
                    "jsdoc": ""
                }
            ]
        },
        {
            "name": "touch-pad.docs",
            "blocks": [
                {
                    "name": "attach",
                    "jsdoc": "<h1 id=\"attach-module\">attach Module</h1>\n<h2 id=\"attach-block\">attach Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"clear-data-attach-\">clear ( [data] ) → {attach}</h4>\n<p>Clear control value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>[data] {Object}<br/>\nadditional data</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{attach}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"button-module\">button Module</h1>\n<h2 id=\"button-block\">button Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns text of the button</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"settext-text-button-\">setText ( text ) → {button}</h4>\n<p>Sets text to the button</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>text {String}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{button}</p>\n<p>this</p>\n",
                    "data": {
                        "ru": {
                            "name": "attach",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/attach/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/attach/simple"
                                }
                            ],
                            "description": "<h1 id=\"attach\">attach</h1>\n<p>Блок <code>attach</code> служит для загрузки файла, предназначенного для отправки на сервер.</p>\n<p>По умолчанию блок визуально представлен кнопкой на основе блока <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/button/button.ru.md\">button</a>, открывающей системное окно загрузки файла, и текстовым сообщением «Файл не выбран». После загрузки файла отображаются следующие элементы:</p>\n<ul>\n<li>иконка файла (блок <code>icon</code>);</li>\n<li>имя файла (элемент <code>text</code>);</li>\n<li>крестик для отмены (элемент <code>clear</code>).</li>\n</ul>\n<p>Не позволяет прикреплять несколько файлов и не поддерживает drag-and-drop.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы оформления  <code>_theme</code></h3>\n<p>Блок представлен только в теме <em>simple</em>.</p>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/attach/2LkwTGo-4d7fxgnG4skRO2tHoic -->\n<strong>simple</strong>\n\n<!-- bem-example: touch-pad.examples/attach/nwytMff5nyXPoczzUvwVbgD7YQQ -->\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии блока «неактивен» кнопка выбора становится недоступной для действий пользователя.</p>\n<p>Если модификатор <code>disabled</code> не выбран, кнопка по умолчанию активна.</p>\n<!-- bem-example: touch-pad.examples/attach/TlYDF2oQVo93Y7ocT-4hcsjHHB8 -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<p>Визуально представлен следующими элементами:</p>\n<h3 id=\"__button\">__button</h3>\n<p>Обязательный элемент.\nКнопка выбора файла. Открывает системное окно загрузки файла. Создается на основе блока <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/button/button.ru.md\">button</a> и использует его поведение (JS) и внешний вид (CSS). Контент кнопки задается во входных данных.</p>\n<!-- bem-example: touch-pad.examples/attach/c3tTTsQQpS_wyaTRUODJQMWC3x8 -->\n\n<h3 id=\"__control\">__control</h3>\n<p>Нативный контрол «прикрепить файл».</p>\n<p>Преобразуется BEMHTML- и BH-шаблонами в нативный элемент прикрепления файла с атрибутами <code>&lt;input class=&quot;attach__control&quot; type=&quot;file&quot;&gt;</code>.</p>\n<h3 id=\"__no-file\">__no-file</h3>\n<p>Элемент для отображения текста, когда файл не выбран.</p>\n<p>Если тема <em>simple</em> не указана для блока <code>attach</code>, будет отображаться значение нативного контрола «Файл не выбран».</p>\n<h3 id=\"__file\">__file</h3>\n<p>Контейнер с информацией о прикрепленном файле.</p>\n<p>Формируется из следующих элементов блока:</p>\n<ul>\n<li><code>__text</code></li>\n<li><code>__clear</code></li>\n</ul>\n<p>Может содержать блок <code>icon</code>. В зависимости от типа файла блоку <code>icon</code> добавляется соответствующий модификатор, которому будет назначена иконка типа файла.</p>\n<h3 id=\"__text\">__text</h3>\n<p>Имя файла. Появляется после прикрепления файла.</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>Кнопка отмены выбранного файла (крестик). Появляется после прикрепления файла.</p>\n<p>Элемент реализован для темы <em>simple</em>.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n\n<h1 id=\"button\">button</h1>\n<p>Блок <code>button</code> используется для создания различных типов кнопок и предоставляет возможность изменять их размер, состояние, содержимое и внешний вид.</p>\n<h2 id=\"-\">Варианты использования кнопок</h2>\n<ul>\n<li>Обычная кнопка – применяется для любых кнопок веб-интерфейса. Используется по умолчанию.</li>\n<li>Кнопка-ссылка – применяется для перехода по ссылке. Задается модификатором <code>type</code> со значением <code>link</code>.</li>\n<li>Кнопка отправки формы – предназначена для отправки данных формы на сервер (submit). Задается модификатором <code>type</code> со значением <code>submit</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает текст кнопки.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code></td>\n        <td>Кнопка с иконкой, которая формируется блоком <code>icon</code>.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Адрес ссылки. Применяется только при наличии модификатора блока <code>button_type_link</code>. Кнопка становится ссылкой, а значение <code>url</code> – атрибутом <code>href</code>.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Уникальный идентификатор кнопки.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет последовательность перехода между кнопками при нажатии на <code>Tab</code>.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Значение, отправляемое на сервер. По умолчанию пустое.</td>\n    </tr>\n</table>\n\n<p>Другие допустимые атрибуты блока могут задаваться в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/attach/pxTNfkqsHxpJmDhwS0QK2QBs3ZY -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/attach/KtCevfKa_rzm7MTQMzA65Z0ZREU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/attach/Rb77AVqNcSM2UUBxbCkUkHULKWc -->\n\n<h3 id=\"-_size-\">Размеры кнопок <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам кнопок.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>кнопки</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота<br>кнопки</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Типы кнопок <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки-ссылки (<code>_type_link</code>) и кнопки отправки формы (<code>_type_submit</code>).\nВ случак кнопки-ссылки, дополнительно во входных данных необходимо указать обязательный атрибут <code>url</code>. В таком случае кнопка получает тег <code>&lt;a&gt;</code>, а значение <code>url</code> становится атрибутом <code>href</code>.</p>\n<p><strong>Кнопка-ссылка</strong></p>\n<!-- bem-example: touch-pad.examples/attach/El0pc_bZgByjhimDRiJmaUa0ubw -->\n\n<p><strong>Кнопка отправки формы</strong></p>\n<!-- bem-example: touch-pad.examples/attach/gtF_RY9_ivjSx1sADQLwlLOSzmo -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_disabled-\">Неактивна <code>_disabled</code></h4>\n<p>В состоянии «неактивна» кнопка видна, но недоступна для действий пользователя.</p>\n<p>Такая кнопка не может получить фокус путем нажатия на клавишу <code>Tab</code>, мышью или другими способами.</p>\n<!-- bem-example: touch-pad.examples/attach/VrNTsucLZEWlatBulG8rqd0wHxQ -->\n\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> кнопка всегда находится в фокусе. Нажатие по ней можно выполнить клавишей <code>Space</code> или <code>Enter</code>.</p>\n<!-- bem-example: touch-pad.examples/attach/ByAZ1dHx4rZKUf9zbxuHmfOmGNs -->\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие «наведение курсором» на кнопку.</p>\n<h4 id=\"-_pressed-\">Нажатие <code>_pressed</code></h4>\n<p>Определяет состояние «нажатие на кнопку» (действие).</p>\n<h4 id=\"-_togglable-\">Залипание <code>_togglable</code></h4>\n<p>Позволяет реализовать залипание кнопки. Допустимые значения: <code>check</code> и <code>radio</code>.</p>\n<!-- bem-example: touch-pad.examples/attach/NYbJzppv5-r9T8LQ0_-SaNLJWds -->\n\n<h4 id=\"-_action-\">Визуальное выделение <code>_action</code></h4>\n<p>Визуально выделяет кнопку на странице.</p>\n<!-- bem-example: touch-pad.examples/attach/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"-_pseudo-\">Псевдокнопка <code>_pseudo</code></h4>\n<p>При выборе модификатора <code>pseudo</code> со значением <code>true</code>, кнопка получает прозрачный фон.</p>\n<!-- bem-example: touch-pad.examples/attach/h_ijyu_mqbPaJBB22OxZERaFyZA -->\n\n<p>В неактивном состоянии границы псевдокнопки исчезают и она сливается со страницей.</p>\n<!-- bem-example: touch-pad.examples/attach/igxPz7KCvCVG6TTxlXRYzE2_5pI -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"__text\">__text</h3>\n<p>Технический элемент. Обрамляет текст кнопки.\nНужен для позиционирования текста внутри кнопки, в том числе для случаев использования вместе с иконкой.</p>\n<!-- bem-example: touch-pad.examples/attach/RQ8YcvhxhqjSwO3I3VjLBOanRns -->\n\n<h1 id=\"icon\">icon</h1>\n<p>Блок <code>icon</code> используется в качестве графического элемента в других блоках. В HTML представлен тегом <code>&lt;i&gt;</code>. Иконка задается через свойство <code>background</code> и, соответственно, не имеет возможности фоллбека.</p>\n<p>Иконку можно передать как через модификатор, так и через поле <code>url</code>:</p>\n<!-- bem-example: touch-pad.examples/attach/b2PchFG0vbxDCGt-_1VzrN-GK0 -->\n\n<!-- bem-example: touch-pad.examples/attach/bek_pi0vSgei-mm8QD-H3qy_E0c -->\n\n<!-- bem-example: touch-pad.examples/attach/bqsLdaiup-wWnOz-fYrlos47T_c -->\n\n<!-- bem-example: touch-pad.examples/attach/w_tWuwVyYuwv7N6i7jChuJOj8Vc -->\n"
                        },
                        "en": {
                            "name": "attach",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/attach/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/attach/simple"
                                }
                            ],
                            "description": "<h1 id=\"attach\">attach</h1>\n<p><code>attach</code> block is used to upload a file to be sent to a server.</p>\n<p>This block is visually represented by:</p>\n<ul>\n<li>button (<code>button</code> element is based on the <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/button/button.en.md\">button</a> block) that opens a system window for a file upload;</li>\n<li>text message &quot;No file selected&quot;.</li>\n</ul>\n<p>When file upload is complete, the following elements become available:</p>\n<ul>\n<li>file icon (<code>icon</code> block);</li>\n<li>file name (<code>text</code> element);</li>\n<li>deletion cross element (<code>clear</code> element).</li>\n</ul>\n<p>Block functionality does not support:</p>\n<ul>\n<li>more than one file attaching;</li>\n<li>drag-and-drop.</li>\n</ul>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>The block supports only a theme called <em>simple</em>.</p>\n<p>If theme is not specified, only native representation of the block is available (<em>default</em>).</p>\n<p>See the following examples for demonstration:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/attach/ZFs05u8kewAq9F9n8d6YPWyDNgk -->\n<strong>simple</strong>\n\n<!-- bem-example: touch-pad.examples/attach/8pRQhEhxOlmCQHlJitiM8RB4UoE -->\n\n<h3 id=\"block-states\">Block states</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If block is disabled, a file selection button becomes unavailable for user&#39;s manipulations.</p>\n<p>The button is active by default, even if <code>disabled</code> modifier is not specified.</p>\n<!-- bem-example: touch-pad.examples/attach/AkDH5qgUPbMKtFX988WrjrO4Yog -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<p>The block is visually represented by the following elements:</p>\n<h3 id=\"__button\">__button</h3>\n<p>A mandatory element.</p>\n<p>A file selection button. It is designed for opening a system window for file upload. It is based on <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/button/button.en.md\">button</a> block and inherits its behavior (JS) and formatting (CSS). Content of a button should be specified in input data.</p>\n<!-- bem-example: touch-pad.examples/attach/0e8PrnldKFxjKeNoH1_3eiHXjqM -->\n\n<h3 id=\"__control\">__control</h3>\n<p>A native control for file attaching.</p>\n<p>It is rendered by BEMHTML and BH template engines as a native control of file attaching with attributes: <code>&lt;input class=&quot;attach__control&quot; type=&quot;file&quot;&gt;</code>.</p>\n<h3 id=\"__no-file\">__no-file</h3>\n<p>Element for description rendering with no file selected.</p>\n<p>If a theme <em>simple</em> is not declared, the text message &quot;no file selected&quot; is used by default.</p>\n<h3 id=\"__file\">__file</h3>\n<p>A container with attached file information.</p>\n<p>It consists of the following elements of the block:</p>\n<ul>\n<li><code>text</code></li>\n<li><code>clear</code></li>\n</ul>\n<p>The element could contain an <code>icon</code> block. Depending on a file type an <code>icon</code> block could obtain corresponding modifier that specifies a type file icon to be assigned.</p>\n<h3 id=\"__text\">__text</h3>\n<p>File name. It becomes available when you have attached the file.</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>Clear attachment button (deletion cross element). It becomes available when you have attched the file.</p>\n<p>The element is available for a <em>simple</em> theme of <code>attach</code> block.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n\n<h1 id=\"button\">button</h1>\n<p>The <code>button</code> block is used for different types of buttons creation. It allows you to manage size, sate, content and appearance of a button.</p>\n<h2 id=\"button-use-cases\">Button use cases</h2>\n<ul>\n<li>button – is used to create the majority of web inteface buttons. Used by default.</li>\n<li>link-button – a button that provides link functionality. Must have a mandatory modifier <code>type</code> with <code>link</code> value.</li>\n<li>action button – a button designed to send data to the server (submit). Must be always located inside a form. Sets <code>type</code> modifier with <code>submit</code> value in BEMJSON to create an action button.</li>\n</ul>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified in corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attributes</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Text of a button.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Button with an icon provided by an <code>icon</code> block.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>URL address. It is used only if <code>button_type_link</code> modifier is specified. In this case a button\n            acts as a link and <code>url</code> value is represented as a <code>href</code> attribute.\n        </td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Unique identifier of a button.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Defines tab order between the buttons.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Value to be sent to a server. It is empty by default.</td>\n    </tr>\n</table>\n\n<p>The other valid block&#39;s attributes could be specified in the <code>attrs</code> field in BEMJSON.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>The block supports the following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>Following examples demonstrate this:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/attach/b7paW80CenjDPGtPNxSCdPuUKqg -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/attach/8MGVemijL_tqZt4Z3DsedAxNwDo -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/attach/u1hTHzxMhorqFlZaZXNkPIBN4WU -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier that is available for <em>normal</em> theme only.</p>\n<p>Provides all types of buttons with the <code>size</code> value.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Following examples demonstrate this:</p>\n<table>\n  <tr>\n    <th>Size</th>\n    <th>Font size</th>\n    <th>Button height</th>\n    <th>Example</th>\n  </tr>\n  <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The block could be represented as a <code>link-button</code> (<code>button_type_link</code>).</p>\n<p>This button type has mandatory attribute <code>url</code> that should be specified in BEMJSON input data. A link-button has an <code>&lt;a&gt;</code> attribute. <code>url</code> value becomes <code>href</code> attribute.</p>\n<pre><code>{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;link&#39; },\n    url : &#39;#&#39;,\n    text : &#39;Link-button&#39;\n}\n</code></pre><h3 id=\"button-s-states\">Button&#39;s states</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, button is visible but not available for user action.</p>\n<p>Disabled button cannot be focused by pressing a <code>Tab</code> or on mouse click.</p>\n<pre><code class=\"lang-bemjsom\">{\n    block : &#39;button&#39;,\n    text : &#39;Disabled&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, disabled : true }\n}\n</code></pre>\n<h4 id=\"_focused\">_focused</h4>\n<p>If <code>focused</code> modifier has <code>true</code> value, the button is always focused. You can click the focused button using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: touch-pad.examples/attach/UkvwYMbpDOkZaq5dm0uIlVbQ9GA -->\n\n<h4 id=\"_hovered\">_hovered</h4>\n<p>Defines &quot;hover&quot; action.</p>\n<h4 id=\"_pressed\">_pressed</h4>\n<p>Defines &quot;pressed&quot; state of a button.</p>\n<h4 id=\"_togglable\">_togglable</h4>\n<p>Defines a state of the pressed button when the first click presses the button, and the second returns it to its original state.</p>\n<!-- bem-example: touch-pad.examples/attach/xAkZMTZIyMq8S8Cc5mWrpqEj5Cc -->\n\n<h4 id=\"_action\">_action</h4>\n<p>Visually highlights a button on a page.</p>\n<!-- bem-example: touch-pad.examples/attach/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"_pseudo\">_pseudo</h4>\n<p>If <code>pseudo</code> modifier has <code>true</code> value, the button background becomes transparent.</p>\n<!-- bem-example: touch-pad.examples/attach/GVMyNpdJjINIl0Ab_qhtsWRf_YA -->\nIf pseudo button is disabled, its boarders disappear.\n\n<!-- bem-example: touch-pad.examples/attach/fc2vxXBIzzk2stACB-J9vRKlYQ4 -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"__text\">__text</h3>\n<p>This auxiliary element sets a text position inside the button.</p>\n<!-- bem-example: touch-pad.examples/attach/t_3HDmaOrqYMmf-3NPSa4KJZWBY -->\n\n<h2 id=\"block-s-dependencies\">Block&#39;s dependencies</h2>\n<ul>\n<li><code>control</code>, that provides public API for the controls</li>\n<li><code>i-bem__dom</code></li>\n<li><code>keyboard</code></li>\n</ul>\n\n<h1 id=\"icon\">icon</h1>\n<p><code>&lt;i&gt;</code>-based block for using as a graphical element in other blocks, not for independent usage. Icon is set as <code>background</code> property and unables to fallback.</p>\n<p>In BEMJSON you can use both the modifier and the <code>url</code> field for an icon representation:\n<!-- bem-example: touch-pad.examples/attach/b2PchFG0vbxDCGt-_1VzrN-GK0 --></p>\n<!-- bem-example: touch-pad.examples/attach/bek_pi0vSgei-mm8QD-H3qy_E0c -->\n\n<!-- bem-example: touch-pad.examples/attach/ozTrvWSbAw8rmCSYD_YNMb4uO80 -->\n\n<!-- bem-example: touch-pad.examples/attach/w_tWuwVyYuwv7N6i7jChuJOj8Vc -->\n"
                        }
                    }
                },
                {
                    "name": "button",
                    "data": {
                        "ru": {
                            "name": "button",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/button/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/button/simple"
                                }
                            ],
                            "description": "<h1 id=\"button\">button</h1>\n<p>Блок <code>button</code> используется для создания различных типов кнопок и предоставляет возможность изменять их размер, состояние, содержимое и внешний вид.</p>\n<h2 id=\"-\">Варианты использования кнопок</h2>\n<ul>\n<li>Обычная кнопка – применяется для любых кнопок веб-интерфейса. Используется по умолчанию.</li>\n<li>Кнопка-ссылка – применяется для перехода по ссылке. Задается модификатором <code>type</code> со значением <code>link</code>.</li>\n<li>Кнопка отправки формы – предназначена для отправки данных формы на сервер (submit). Задается модификатором <code>type</code> со значением <code>submit</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает текст кнопки.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code></td>\n        <td>Кнопка с иконкой, которая формируется блоком <code>icon</code>.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Адрес ссылки. Применяется только при наличии модификатора блока <code>button_type_link</code>. Кнопка становится ссылкой, а значение <code>url</code> – атрибутом <code>href</code>.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Уникальный идентификатор кнопки.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет последовательность перехода между кнопками при нажатии на <code>Tab</code>.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Значение, отправляемое на сервер. По умолчанию пустое.</td>\n    </tr>\n</table>\n\n<p>Другие допустимые атрибуты блока могут задаваться в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/button/pxTNfkqsHxpJmDhwS0QK2QBs3ZY -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/button/KtCevfKa_rzm7MTQMzA65Z0ZREU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/button/Rb77AVqNcSM2UUBxbCkUkHULKWc -->\n\n<h3 id=\"-_size-\">Размеры кнопок <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам кнопок.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>кнопки</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота<br>кнопки</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Типы кнопок <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки-ссылки (<code>_type_link</code>) и кнопки отправки формы (<code>_type_submit</code>).\nВ случак кнопки-ссылки, дополнительно во входных данных необходимо указать обязательный атрибут <code>url</code>. В таком случае кнопка получает тег <code>&lt;a&gt;</code>, а значение <code>url</code> становится атрибутом <code>href</code>.</p>\n<p><strong>Кнопка-ссылка</strong></p>\n<!-- bem-example: touch-pad.examples/button/El0pc_bZgByjhimDRiJmaUa0ubw -->\n\n<p><strong>Кнопка отправки формы</strong></p>\n<!-- bem-example: touch-pad.examples/button/gtF_RY9_ivjSx1sADQLwlLOSzmo -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_disabled-\">Неактивна <code>_disabled</code></h4>\n<p>В состоянии «неактивна» кнопка видна, но недоступна для действий пользователя.</p>\n<p>Такая кнопка не может получить фокус путем нажатия на клавишу <code>Tab</code>, мышью или другими способами.</p>\n<!-- bem-example: touch-pad.examples/button/VrNTsucLZEWlatBulG8rqd0wHxQ -->\n\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> кнопка всегда находится в фокусе. Нажатие по ней можно выполнить клавишей <code>Space</code> или <code>Enter</code>.</p>\n<!-- bem-example: touch-pad.examples/button/ByAZ1dHx4rZKUf9zbxuHmfOmGNs -->\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие «наведение курсором» на кнопку.</p>\n<h4 id=\"-_pressed-\">Нажатие <code>_pressed</code></h4>\n<p>Определяет состояние «нажатие на кнопку» (действие).</p>\n<h4 id=\"-_togglable-\">Залипание <code>_togglable</code></h4>\n<p>Позволяет реализовать залипание кнопки. Допустимые значения: <code>check</code> и <code>radio</code>.</p>\n<!-- bem-example: touch-pad.examples/button/NYbJzppv5-r9T8LQ0_-SaNLJWds -->\n\n<h4 id=\"-_action-\">Визуальное выделение <code>_action</code></h4>\n<p>Визуально выделяет кнопку на странице.</p>\n<!-- bem-example: touch-pad.examples/button/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"-_pseudo-\">Псевдокнопка <code>_pseudo</code></h4>\n<p>При выборе модификатора <code>pseudo</code> со значением <code>true</code>, кнопка получает прозрачный фон.</p>\n<!-- bem-example: touch-pad.examples/button/h_ijyu_mqbPaJBB22OxZERaFyZA -->\n\n<p>В неактивном состоянии границы псевдокнопки исчезают и она сливается со страницей.</p>\n<!-- bem-example: touch-pad.examples/button/igxPz7KCvCVG6TTxlXRYzE2_5pI -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"__text\">__text</h3>\n<p>Технический элемент. Обрамляет текст кнопки.\nНужен для позиционирования текста внутри кнопки, в том числе для случаев использования вместе с иконкой.</p>\n<!-- bem-example: touch-pad.examples/button/RQ8YcvhxhqjSwO3I3VjLBOanRns -->\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "button",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/button/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/button/simple"
                                }
                            ],
                            "description": "<h1 id=\"button\">button</h1>\n<p>The <code>button</code> block is used for different types of buttons creation. It allows you to manage size, sate, content and appearance of a button.</p>\n<h2 id=\"button-use-cases\">Button use cases</h2>\n<ul>\n<li>button – is used to create the majority of web inteface buttons. Used by default.</li>\n<li>link-button – a button that provides link functionality. Must have a mandatory modifier <code>type</code> with <code>link</code> value.</li>\n<li>action button – a button designed to send data to the server (submit). Must be always located inside a form. Sets <code>type</code> modifier with <code>submit</code> value in BEMJSON to create an action button.</li>\n</ul>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified in corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attributes</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Text of a button.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Button with an icon provided by an <code>icon</code> block.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>URL address. It is used only if <code>button_type_link</code> modifier is specified. In this case a button\n            acts as a link and <code>url</code> value is represented as a <code>href</code> attribute.\n        </td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Unique identifier of a button.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Defines tab order between the buttons.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Value to be sent to a server. It is empty by default.</td>\n    </tr>\n</table>\n\n<p>The other valid block&#39;s attributes could be specified in the <code>attrs</code> field in BEMJSON.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>The block supports the following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>Following examples demonstrate this:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/button/b7paW80CenjDPGtPNxSCdPuUKqg -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/button/8MGVemijL_tqZt4Z3DsedAxNwDo -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/button/u1hTHzxMhorqFlZaZXNkPIBN4WU -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier that is available for <em>normal</em> theme only.</p>\n<p>Provides all types of buttons with the <code>size</code> value.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Following examples demonstrate this:</p>\n<table>\n  <tr>\n    <th>Size</th>\n    <th>Font size</th>\n    <th>Button height</th>\n    <th>Example</th>\n  </tr>\n  <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The block could be represented as a <code>link-button</code> (<code>button_type_link</code>).</p>\n<p>This button type has mandatory attribute <code>url</code> that should be specified in BEMJSON input data. A link-button has an <code>&lt;a&gt;</code> attribute. <code>url</code> value becomes <code>href</code> attribute.</p>\n<pre><code>{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;link&#39; },\n    url : &#39;#&#39;,\n    text : &#39;Link-button&#39;\n}\n</code></pre><h3 id=\"button-s-states\">Button&#39;s states</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, button is visible but not available for user action.</p>\n<p>Disabled button cannot be focused by pressing a <code>Tab</code> or on mouse click.</p>\n<pre><code class=\"lang-bemjsom\">{\n    block : &#39;button&#39;,\n    text : &#39;Disabled&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, disabled : true }\n}\n</code></pre>\n<h4 id=\"_focused\">_focused</h4>\n<p>If <code>focused</code> modifier has <code>true</code> value, the button is always focused. You can click the focused button using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: touch-pad.examples/button/UkvwYMbpDOkZaq5dm0uIlVbQ9GA -->\n\n<h4 id=\"_hovered\">_hovered</h4>\n<p>Defines &quot;hover&quot; action.</p>\n<h4 id=\"_pressed\">_pressed</h4>\n<p>Defines &quot;pressed&quot; state of a button.</p>\n<h4 id=\"_togglable\">_togglable</h4>\n<p>Defines a state of the pressed button when the first click presses the button, and the second returns it to its original state.</p>\n<!-- bem-example: touch-pad.examples/button/xAkZMTZIyMq8S8Cc5mWrpqEj5Cc -->\n\n<h4 id=\"_action\">_action</h4>\n<p>Visually highlights a button on a page.</p>\n<!-- bem-example: touch-pad.examples/button/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"_pseudo\">_pseudo</h4>\n<p>If <code>pseudo</code> modifier has <code>true</code> value, the button background becomes transparent.</p>\n<!-- bem-example: touch-pad.examples/button/GVMyNpdJjINIl0Ab_qhtsWRf_YA -->\nIf pseudo button is disabled, its boarders disappear.\n\n<!-- bem-example: touch-pad.examples/button/fc2vxXBIzzk2stACB-J9vRKlYQ4 -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"__text\">__text</h3>\n<p>This auxiliary element sets a text position inside the button.</p>\n<!-- bem-example: touch-pad.examples/button/t_3HDmaOrqYMmf-3NPSa4KJZWBY -->\n\n<h2 id=\"block-s-dependencies\">Block&#39;s dependencies</h2>\n<ul>\n<li><code>control</code>, that provides public API for the controls</li>\n<li><code>i-bem__dom</code></li>\n<li><code>keyboard</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"button-module\">button Module</h1>\n<h2 id=\"button-block\">button Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns text of the button</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"settext-text-button-\">setText ( text ) → {button}</h4>\n<p>Sets text to the button</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>text {String}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{button}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "checkbox",
                    "jsdoc": "<h1 id=\"checkbox-module\">checkbox Module</h1>\n<h2 id=\"checkbox-block\">checkbox Block</h2>\n<p>Aughtments {control}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n",
                    "data": {
                        "ru": {
                            "name": "checkbox",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/checkbox/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/checkbox/simple"
                                },
                                {
                                    "url": "touch-pad.tests/checkbox-group/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/checkbox-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"checkbox\">checkbox</h1>\n<p>Блок <code>checkbox</code> («чекбокс») позволяет управлять параметром выбора с двумя состояниями – включено и выключено. Используется, когда необходимо выбрать более одного варианта из предложенных.</p>\n<p>Блок создает контейнер, содержащий нативный контрол чекбокс (элемент <code>control</code>) <code>&lt;input class=&quot;checkbox__control&quot; type=&quot;checkbox&quot;&gt;</code>, который скрывается при использовании модификатора <code>theme</code>.</p>\n<p>Атрибут <code>autocomplete</code> принудительно переведен в состояние <code>off</code> для обеспечения корректной работы блока.</p>\n<!-- bem-example: touch-pad.examples/checkbox/XI4uPzI90-UiMiWRig9noeu3mrg -->\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение текстовой строке чекбокса.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя чекбокса. Обязательный атрибут. Является частью пары имя / значение (name / value), используемой с целью отправки формы.</td>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение чекбокса. Является частью пары имя / значение (name / value), используемой с целью отправки формы.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Иконка, которая отображается с помощью блока <code>icon</code>.</td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/checkbox/sae-WwdkdYcrwwgUC5hw2NDih4 -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/checkbox/SojNrUmXHg8qOEVNxLMELyPxf1I -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/checkbox/Sgn48vD0-J9Y9jIc1geFcHu6qVA -->\n\n<h3 id=\"-_size-\">Размер <code>_size</code></h3>\n<p>Задает размер шрифта.</p>\n<p>Обязательный модификатор. Реализован только в теме <em>normal</em>.</p>\n<p>Доступно два размера реализации блока: <strong>M</strong>, <strong>L</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>блока</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота строки<br>элемента <code>__box</code></th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;\n    },\n    text : &#39;Размер M&#39;,\n    name: &#39;name2&#39;,\n    val: &#39;2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>17px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;\n    },\n    text : &#39;Размер L&#39;,\n    name: &#39;name3&#39;,\n    val: &#39;3&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Тип <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки (модификатор <code>type</code> в значении <code>button</code>). В таком случае выбор элемента происходит нажатием на кнопку.</p>\n<!-- bem-example: touch-pad.examples/checkbox/GSqTjc8TX7KG5JpqDbcpS1N0CZM -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> чекбокс всегда находится в фокусе. Если блок представлен в виде кнопки, она приобретает желтую тень. Нажатие по чекбоксу можно выполнить клавишей <code>Space</code> или <code>Enter</code>. Переход по контролам формы осуществляется клавишей <code>Tab</code>.</p>\n<!-- bem-example: touch-pad.examples/checkbox/79qZiqVxBY5r5ZaX_gUFH7MMT5Y -->\n\n<!-- bem-example: touch-pad.examples/checkbox/tU4ymq_plszDwGgrM91feVLkv6s -->\n\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии «неактивен» чекбокс виден, но недоступен для действий пользователя.</p>\n<p>Такой чекбос не может получить фокус путем нажатия на клавишу <code>Tab</code> мышью или другими способами.</p>\n<!-- bem-example: touch-pad.examples/checkbox/GiSyOjElYwkWa_mbNQ4LvfexC8o -->\n\n<!-- bem-example: touch-pad.examples/checkbox/MiwyveGqb-Q3hDh6b5dvanmXUc0 -->\n\n<h4 id=\"-_checked-\">Отмечен <code>_checked</code></h4>\n<p>Модификатор <code>checked</code> в значении <code>true</code> определяет, что чекбокс отмечен (выбран).</p>\n<p>Модификатор <code>checked</code> может быть применен ко всем чекбоксам в группе.</p>\n<!-- bem-example: touch-pad.examples/checkbox/IMYtMHFDZhN_agFpLXmNIDTAK4Q -->\n\n<!-- bem-example: touch-pad.examples/checkbox/ZWO500NSNVuNcdNcItDCWIHDH3o -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>Элемент <code>box</code> служит для отрисовки чекбокса, нативный чекбокс скрыт.</p>\n<p>Добавляется блоку на уровне шаблонизатора.</p>\n<h3 id=\"-__control-\">Контрол <code>__control</code></h3>\n<p>Элемент <code>control</code> служит для использования функциональности нативного контрола чекбокса.</p>\n<p>Добавляется блоку на уровне шаблонизатора.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "checkbox",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/checkbox/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/checkbox/simple"
                                },
                                {
                                    "url": "touch-pad.tests/checkbox-group/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/checkbox-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"checkbox\">checkbox</h1>\n<p>Block <code>checkbox</code> is a graphical user interface element that allows user to make a binary choice. The block is used when more then one case should be selected.</p>\n<p>Block creates a container that includes a native checkbox control (<code>control</code> element) <code>&lt;input class=&quot;checkbox__control&quot; type=&quot;checkbox&quot; attributes&gt;</code> that is hidden if a <code>theme</code> modifier is specified.</p>\n<p><code>autocomplete</code> attribute is forced to <code>off</code> state to provide correct behavior of the block.</p>\n<!-- bem-example: touch-pad.examples/checkbox/XI4uPzI90-UiMiWRig9noeu3mrg -->\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified within the corresponding fields of the block BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies text string value of a checkbox.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies a checkbox name. A mandatory attribute. The name part of the name/val pair associated with this element for form&#39;s submission purposes.</td>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies a checkbox value. Value part of the name/val pair associated with this element for the form&#39;s submission purposes.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>An icon that is rendered using an <code>icon</code> block.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Block supports following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>See the following examples for demonstration:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/checkbox/sae-WwdkdYcrwwgUC5hw2NDih4 -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/checkbox/SojNrUmXHg8qOEVNxLMELyPxf1I -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/checkbox/Sgn48vD0-J9Y9jIc1geFcHu6qVA -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier for <em>normal</em> theme only.\nProvides checkbox text elements with font size value.</p>\n<p>There are two sizes available: <strong>M</strong>, <strong>L</strong>.</p>\n<p>See the following examples for demonstration:</p>\n<table>\n    <tr>\n        <th>Block size</th>\n        <th>Font size</th>\n        <th>String height<br>of <code>__box</code></th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;\n    },\n    text : &#39;Size M&#39;,\n    name: &#39;name2&#39;,\n    val: &#39;2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>17px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;\n    },\n    text : &#39;Size L&#39;,\n    name: &#39;name3&#39;,\n    val: &#39;3&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The <code>checkbox</code> block can be rendered as a button. If needed, use <code>type</code> modifier with <code>button</code> value. In this case <code>checked</code> state of a checkbox is defined by clicking the button.</p>\n<!-- bem-example: touch-pad.examples/checkbox/jnUIxNLmi2Ktczi3mi_QWJt7-cc -->\n\n<h3 id=\"states-of-a-checkbox\">States of a checkbox</h3>\n<h4 id=\"_focused\">_focused</h4>\n<p>Checkbox is focused if block has <code>focused</code> modifier with <code>true</code> value. If block is designed as a button, in <code>focused</code> state it has a yellow shadow.</p>\n<p>You can tick off the focused checkbox using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: touch-pad.examples/checkbox/dOZ5XkX9ojCi2r9kiY4DJa4YWvA -->\n\n<!-- bem-example: touch-pad.examples/checkbox/v-9BRGnxLdDNcDKCfuStYG9PRYU -->\n\n<h4 id=\"-_disabled-\"><code>_disabled</code></h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, the checkbox is visible but not available for user&#39;s action.</p>\n<p>Disabled checkbox cannot be focused by pressing <code>Tab</code> or on mouse click.</p>\n<!-- bem-example: touch-pad.examples/checkbox/Dz3sVcJ6LQvatoLktNJM35QPIso -->\n\n<!-- bem-example: touch-pad.examples/checkbox/Lc_qQBikKsf-9GuBeR0FLc4-3k0 -->\n#### <code>_checked</code>\n\n<code>checked</code> modifier with <code>true</code> value defines checkbox as checked.\n\n<code>checked</code> modifier can be used for all checkboxes within the group.\n\n<!-- bem-example: touch-pad.examples/checkbox/QcTYyDncRH6DrvinlVti5iujuxU -->\n\n<!-- bem-example: touch-pad.examples/checkbox/9OMss9AsUlfFVAPsG8SlTTcVlLI -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p><code>box</code> element is used to draw the checkbox. Native checkbox is hidden.</p>\n<p><code>box</code> element is added to the block on template engine level.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p><code>control</code> element is used to provide native control checkbox functionality.</p>\n<p><code>control</code> element is added to the block on template engine level.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    }
                },
                {
                    "name": "checkbox-group",
                    "jsdoc": "<h1 id=\"checkbox-group-module\">checkbox-group Module</h1>\n<h2 id=\"checkbox-group-block\">checkbox-group Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"setval-val-data-checkbox-group-\">setVal ( val, [data] ) → {checkbox-group}</h4>\n<p>Sets control value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {[object Object]}<br/>\nvalue</li>\n<li>[data] {Object}<br/>\nadditional data</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{checkbox-group}</p>\n<p>this</p>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getcheckboxes-object-object-\">getCheckboxes () → {[object Object]}</h4>\n<p>Returns checkboxes</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{[object Object]}</p>\n<h1 id=\"checkbox-module\">checkbox Module</h1>\n<h2 id=\"checkbox-block\">checkbox Block</h2>\n<p>Aughtments {control}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n",
                    "data": {
                        "ru": {
                            "name": "checkbox-group",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/checkbox-group/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/checkbox-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"checkbox-group\">checkbox-group</h1>\n<p>Блок <code>checkbox-group</code> служит для отображения группы однотипных переключателей – чекбоксов (блоков <code>checkbox</code>). Любой из переключателей группы может быть либо активен, либо нет вне зависимости от состояния других переключателей.</p>\n<p>Блок позволяет управлять внешним видом и состоянием вложенных переключателей. </p>\n<p>В результате BEMHTML-преобразований блок <code>checkbox-group</code> становится HTML-элементом с тегом <code>&lt;span&gt;</code> – контейнером, содержащим группу чекбоксов и подписи к ним.</p>\n<h2 id=\"-\">Допустимые параметры блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td><code>String</code></td>\n        <td>Имя группы чекбоксов. Преобразуется в HTML-атрибут <code>name</code> вложенного блока <code>input</code>.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td><code>Array</code></td>\n        <td>Массив хешей. Каждый хеш соответствует одному переключателю группы чекбоксов и содержит набор его параметров.</td>\n    </tr><br></table>\n\n<p>Среди параметров, передаваемых для переключателя в массиве хешей <code>option</code>, обязательными являются:</p>\n<ul>\n<li><code>val</code> (<code>String</code>|<code>Number</code>) – значение, возвращаемое выбранным чекбоксом (элемент <code>checkbox__control</code>);</li>\n<li><code>text</code>  (<code>String</code>) – подпись, отображаемая для текущего переключателя. </li>\n</ul>\n<p>Помимо обязательных параметров в массиве <code>option</code> могут быть переданы любые параметры, допустимые для блока <code>checkbox</code>, например, модификаторы <code>_checked</code> или <code>_disabled</code>.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>). </p>\n<p>Наглядно показано на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/checkbox-group/tnfPsUBEHfiKv4Ay-bSkmy06NTs -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/checkbox-group/E4bazg4TDlm1W1tmOFMVgeAT1k0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/checkbox-group/uf6KFu6RRJ3CJRzlZj5THp-53ss -->\n\n\n\n<h3 id=\"-_size-\">Размер переключателей <code>_size</code></h3>\n<p>Обязательный модификатор. Модификатор <code>_size</code> устанавливает размер переключателей для всех типов групп чекбоксов.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>В зависимости от значения модификатора <code>_type</code> доступны следующие размеры реализации блока:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Обычная группа чекбоксов и <code>_type_line</code></th>\n        <th>Кнопочная группа чекбоксов (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n<p>Размеры на примере темы <em>normal</em> с модификатором <code>_type_button</code>:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;s&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;xl&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-_type-\">Тип группы чекбоксов <code>_type</code></h3>\n<p>Доступны следующие значения модификатор <code>_type</code>:</p>\n<ul>\n<li>Модификатор <code>_type</code> со значением <code>button</code>. Используется для создания кнопочной группы чекбоксов – блока из кнопок-переключателей. </li>\n<li>Модификатор <code>_type</code> со значением <code>line</code> используется для создания группы чекбоксов с выравниванием в строку. После каждого переключателя группы, кроме последнего, автоматически добавляется отступ справа. Размер отступа зависит от значения модификатора <code>_size</code>. Реализован только в теме <em>normal</em>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычная группа чекбоксов</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;checkbox-normal&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Кнопочная группа чекбоксов (<code>_type_button</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Строчная группа чекбоксов (<code>_type_line</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;line&#39; \n    },\n    name : &#39;checkbox-line&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h3 id=\"-_disabled-\">Неактивна <code>_disabled</code></h3>\n<p>В состоянии &quot;неактивна&quot; группа чекбоксов отображается, но недоступна для действий пользователя.  </p>\n<p>Такая группа чекбоксов не будет получать фокус (модификатор <code>_focused</code>).</p>\n<p>При установке модификатора <code>_disabled</code> для группы всем переключателям группы также устанавливается модификатор <code>_disabled</code>. Как следствие, для них не будут:</p>\n<ul>\n<li>устанавливаться модификаторы состояния <code>_hovered</code>, <code>_pressed</code> и <code>_focused</code>;</li>\n<li>изменяться значения модификатора <code>_checked</code>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/checkbox-group/0fQuAArjlUOj9blciZz3wIEpK-4 -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>_focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда один из его элементов находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/checkbox-group/sXOo9d9aGajzFuorGRIhhEViolU -->\n\n\n<h2 id=\"-\">Зависимости блока</h2>\n<p>Блок <code>checkbox-group</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>checkbox</code></li>\n<li><code>jquery</code></li>\n</ul>\n\n<h1 id=\"checkbox\">checkbox</h1>\n<p>Блок <code>checkbox</code> («чекбокс») позволяет управлять параметром выбора с двумя состояниями – включено и выключено. Используется, когда необходимо выбрать более одного варианта из предложенных.</p>\n<p>Блок создает контейнер, содержащий нативный контрол чекбокс (элемент <code>control</code>) <code>&lt;input class=&quot;checkbox__control&quot; type=&quot;checkbox&quot;&gt;</code>, который скрывается при использовании модификатора <code>theme</code>.</p>\n<p>Атрибут <code>autocomplete</code> принудительно переведен в состояние <code>off</code> для обеспечения корректной работы блока.</p>\n<!-- bem-example: touch-pad.examples/checkbox-group/XI4uPzI90-UiMiWRig9noeu3mrg -->\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение текстовой строке чекбокса.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя чекбокса. Обязательный атрибут. Является частью пары имя / значение (name / value), используемой с целью отправки формы.</td>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение чекбокса. Является частью пары имя / значение (name / value), используемой с целью отправки формы.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Иконка, которая отображается с помощью блока <code>icon</code>.</td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/checkbox-group/sae-WwdkdYcrwwgUC5hw2NDih4 -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/checkbox-group/SojNrUmXHg8qOEVNxLMELyPxf1I -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/checkbox-group/Sgn48vD0-J9Y9jIc1geFcHu6qVA -->\n\n<h3 id=\"-_size-\">Размер <code>_size</code></h3>\n<p>Задает размер шрифта.</p>\n<p>Обязательный модификатор. Реализован только в теме <em>normal</em>.</p>\n<p>Доступно два размера реализации блока: <strong>M</strong>, <strong>L</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>блока</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота строки<br>элемента <code>__box</code></th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;\n    },\n    text : &#39;Размер M&#39;,\n    name: &#39;name2&#39;,\n    val: &#39;2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>17px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;\n    },\n    text : &#39;Размер L&#39;,\n    name: &#39;name3&#39;,\n    val: &#39;3&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Тип <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки (модификатор <code>type</code> в значении <code>button</code>). В таком случае выбор элемента происходит нажатием на кнопку.</p>\n<!-- bem-example: touch-pad.examples/checkbox-group/GSqTjc8TX7KG5JpqDbcpS1N0CZM -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> чекбокс всегда находится в фокусе. Если блок представлен в виде кнопки, она приобретает желтую тень. Нажатие по чекбоксу можно выполнить клавишей <code>Space</code> или <code>Enter</code>. Переход по контролам формы осуществляется клавишей <code>Tab</code>.</p>\n<!-- bem-example: touch-pad.examples/checkbox-group/79qZiqVxBY5r5ZaX_gUFH7MMT5Y -->\n\n<!-- bem-example: touch-pad.examples/checkbox-group/tU4ymq_plszDwGgrM91feVLkv6s -->\n\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии «неактивен» чекбокс виден, но недоступен для действий пользователя.</p>\n<p>Такой чекбос не может получить фокус путем нажатия на клавишу <code>Tab</code> мышью или другими способами.</p>\n<!-- bem-example: touch-pad.examples/checkbox-group/GiSyOjElYwkWa_mbNQ4LvfexC8o -->\n\n<!-- bem-example: touch-pad.examples/checkbox-group/MiwyveGqb-Q3hDh6b5dvanmXUc0 -->\n\n<h4 id=\"-_checked-\">Отмечен <code>_checked</code></h4>\n<p>Модификатор <code>checked</code> в значении <code>true</code> определяет, что чекбокс отмечен (выбран).</p>\n<p>Модификатор <code>checked</code> может быть применен ко всем чекбоксам в группе.</p>\n<!-- bem-example: touch-pad.examples/checkbox-group/IMYtMHFDZhN_agFpLXmNIDTAK4Q -->\n\n<!-- bem-example: touch-pad.examples/checkbox-group/ZWO500NSNVuNcdNcItDCWIHDH3o -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>Элемент <code>box</code> служит для отрисовки чекбокса, нативный чекбокс скрыт.</p>\n<p>Добавляется блоку на уровне шаблонизатора.</p>\n<h3 id=\"-__control-\">Контрол <code>__control</code></h3>\n<p>Элемент <code>control</code> служит для использования функциональности нативного контрола чекбокса.</p>\n<p>Добавляется блоку на уровне шаблонизатора.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "checkbox-group",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/checkbox-group/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/checkbox-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"checkbox-group\">checkbox-group</h1>\n<p>A <code>checkbox-group</code> block is a set of independed switches – checkboxes (a <code>checkbox</code> block). Any of group&#39;s switches can be either active or not regardless of other switches state.</p>\n<p>The block allows to manage the appearance and state of a nested switches.</p>\n<p>On a web page <code>checkbox-group</code> block will be rendered to <code>&lt;span&gt;</code> HTML element, with a nested set of checkboxes and their labels.</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified in the corresponding fields of block BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td><code>String</code></td>\n        <td>The checkbox group name. Renders to nested <code>input</code> block&#39;s <code>name</code> HTML attribute.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td><code>Array</code></td>\n        <td>The option objects array. Each object within the array corresponds to one switch and contains it&#39;s attributes set.</td>\n    </tr><br></table>\n\n<p>Following attributes should be passed in an <code>option</code> field for each switch:</p>\n<ul>\n<li><code>val</code> (<code>String</code> | <code>Number</code>) – value returned by selected switcher (a &#39;checkbox__control&#39; element);</li>\n<li><code>text</code> (<code>String</code>) – a text label for the current switch.</li>\n</ul>\n<p>In an <code>options</code> array any valid <code>checkbox</code> block attributes can be passed. For example, a <code>_checked</code> or <code>_disabled</code> modifiers can be set for the <code>checkbox</code>.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/checkbox-group/tnfPsUBEHfiKv4Ay-bSkmy06NTs -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/checkbox-group/E4bazg4TDlm1W1tmOFMVgeAT1k0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/checkbox-group/uf6KFu6RRJ3CJRzlZj5THp-53ss -->\n\n\n<h3 id=\"the-sizes-_size-\">The sizes <code>_size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides all types of checkbox groups with the size value.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Depending on a <code>_type</code> modifier value following sizes are available:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Normal checkbox group and <code>_type_line</code></th>\n        <th>Button checkbox group (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<p>Here are some examples with <em>normal</em> theme and the <code>_type_button</code> modifier is set:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;s&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;xl&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"checkbox-group-type-_type-\">Checkbox group type <code>_type</code></h3>\n<p>A <code>_type</code> modifier can have following values:</p>\n<ul>\n<li><code>button</code>. It is used for creation of button checkbox group – a block of button switches;</li>\n<li><code>line</code>. It is used for line-aligned checkbox group creation. Right gap is automatically added after each switch of the group except the last one. Available only for <em>normal</em> theme.</li>\n</ul>\n<p>Modifier is available for all block themes.</p>\n<table>\n    <tr>\n        <th>Type</th>\n\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Normal checkbox group</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;checkbox-normal&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Button checkbox group</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Line-aligned checkbox group (<code>_type_line</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;line&#39; \n    },\n    name : &#39;checkbox-line&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive menu item. Inactive menu item is displayed, but not available for user actions.</p>\n<p>Such a group will not obtain a focus (<code>_focused</code> modifier will not be toggled).</p>\n<p>When a <code>_disabled</code> modifier is set for the group, all it&#39;s switches also will be disabled. As a result, the following will not be performed on switches:</p>\n<ul>\n<li>state modifiers <code>_hovered</code>, <code>_pressed</code> and <code>_focused</code> toggling;</li>\n<li>switching between <code>_checked</code> modifier&#39;s values.</li>\n</ul>\n<p>Modifier is available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/checkbox-group/0fQuAArjlUOj9blciZz3wIEpK-4 -->\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"-_focused-\"><code>_focused</code></h4>\n<p>A <code>_focused</code> \n_focused modifier is automatically toggled when one of the block&#39;s elements is in focus. For example, on mouse click or by <code>Tab</code> key press. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/checkbox-group/sXOo9d9aGajzFuorGRIhhEViolU -->\n\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>checkbox</code></li>\n<li><code>jquery</code></li>\n</ul>\n\n<h1 id=\"checkbox\">checkbox</h1>\n<p>Block <code>checkbox</code> is a graphical user interface element that allows user to make a binary choice. The block is used when more then one case should be selected.</p>\n<p>Block creates a container that includes a native checkbox control (<code>control</code> element) <code>&lt;input class=&quot;checkbox__control&quot; type=&quot;checkbox&quot; attributes&gt;</code> that is hidden if a <code>theme</code> modifier is specified.</p>\n<p><code>autocomplete</code> attribute is forced to <code>off</code> state to provide correct behavior of the block.</p>\n<!-- bem-example: touch-pad.examples/checkbox-group/XI4uPzI90-UiMiWRig9noeu3mrg -->\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified within the corresponding fields of the block BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies text string value of a checkbox.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies a checkbox name. A mandatory attribute. The name part of the name/val pair associated with this element for form&#39;s submission purposes.</td>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies a checkbox value. Value part of the name/val pair associated with this element for the form&#39;s submission purposes.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>An icon that is rendered using an <code>icon</code> block.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Block supports following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>See the following examples for demonstration:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/checkbox-group/sae-WwdkdYcrwwgUC5hw2NDih4 -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/checkbox-group/SojNrUmXHg8qOEVNxLMELyPxf1I -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/checkbox-group/Sgn48vD0-J9Y9jIc1geFcHu6qVA -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier for <em>normal</em> theme only.\nProvides checkbox text elements with font size value.</p>\n<p>There are two sizes available: <strong>M</strong>, <strong>L</strong>.</p>\n<p>See the following examples for demonstration:</p>\n<table>\n    <tr>\n        <th>Block size</th>\n        <th>Font size</th>\n        <th>String height<br>of <code>__box</code></th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;\n    },\n    text : &#39;Size M&#39;,\n    name: &#39;name2&#39;,\n    val: &#39;2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>17px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;\n    },\n    text : &#39;Size L&#39;,\n    name: &#39;name3&#39;,\n    val: &#39;3&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The <code>checkbox</code> block can be rendered as a button. If needed, use <code>type</code> modifier with <code>button</code> value. In this case <code>checked</code> state of a checkbox is defined by clicking the button.</p>\n<!-- bem-example: touch-pad.examples/checkbox-group/jnUIxNLmi2Ktczi3mi_QWJt7-cc -->\n\n<h3 id=\"states-of-a-checkbox\">States of a checkbox</h3>\n<h4 id=\"_focused\">_focused</h4>\n<p>Checkbox is focused if block has <code>focused</code> modifier with <code>true</code> value. If block is designed as a button, in <code>focused</code> state it has a yellow shadow.</p>\n<p>You can tick off the focused checkbox using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: touch-pad.examples/checkbox-group/dOZ5XkX9ojCi2r9kiY4DJa4YWvA -->\n\n<!-- bem-example: touch-pad.examples/checkbox-group/v-9BRGnxLdDNcDKCfuStYG9PRYU -->\n\n<h4 id=\"-_disabled-\"><code>_disabled</code></h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, the checkbox is visible but not available for user&#39;s action.</p>\n<p>Disabled checkbox cannot be focused by pressing <code>Tab</code> or on mouse click.</p>\n<!-- bem-example: touch-pad.examples/checkbox-group/Dz3sVcJ6LQvatoLktNJM35QPIso -->\n\n<!-- bem-example: touch-pad.examples/checkbox-group/Lc_qQBikKsf-9GuBeR0FLc4-3k0 -->\n#### <code>_checked</code>\n\n<code>checked</code> modifier with <code>true</code> value defines checkbox as checked.\n\n<code>checked</code> modifier can be used for all checkboxes within the group.\n\n<!-- bem-example: touch-pad.examples/checkbox-group/QcTYyDncRH6DrvinlVti5iujuxU -->\n\n<!-- bem-example: touch-pad.examples/checkbox-group/9OMss9AsUlfFVAPsG8SlTTcVlLI -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p><code>box</code> element is used to draw the checkbox. Native checkbox is hidden.</p>\n<p><code>box</code> element is added to the block on template engine level.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p><code>control</code> element is used to provide native control checkbox functionality.</p>\n<p><code>control</code> element is added to the block on template engine level.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    }
                },
                {
                    "name": "control",
                    "data": {
                        "ru": {
                            "name": "control",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/control-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "control",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/control-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "control-group",
                    "data": {
                        "ru": {
                            "name": "control-group",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/control-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"control-group\">control-group</h1>\n<p>Блок <code>control-group</code> – это обертка, предназначенная для визуальной группировки других блоков. Группируемые блоки помещаются в поле <code>content</code> BEMJSON декларации.</p>\n<p>Блок реализован в технологии CSS и не вводит никакой дополнительной логики. Для вложенных блоков должна быть установлена тема <em>normal</em>.</p>\n<p>В результате применения шаблонов, блок <code>control-group</code> становится на странице HTML-элементом с тегом <code>&lt;div&gt;</code>.</p>\n<h2 id=\"-\">Варианты использования</h2>\n<p>Блок позволяет визуально группировать следующие блоки:</p>\n<ul>\n<li><code>input</code> – поле ввода;</li>\n<li><code>button</code> – кнопка.</li>\n</ul>\n<p>Например:</p>\n<!-- bem-example: touch-pad.examples/control-group/fejhOE157s9FNaOpEk9kSMdri-o -->\n\n\n<p>Кроме того, можно группировать блоки, использующие <code>input</code> или <code>button</code>, как один из компонентов. Например, в группу можно включить блок <code>select</code>, управляющим компонентом для которого служит блок <code>button</code>: </p>\n<!-- bem-example: touch-pad.examples/control-group/lHp4oG073ZGY5eBJUg8oGuaTzJY -->\n\n<p>Могут быть сгруппированы следующие блоки, использующие в качестве компонента блок <code>button</code>:</p>\n<ul>\n<li><code>select</code>;</li>\n<li><code>dropdown</code> (с модификатором <code>dropdown_switcher_button</code>);</li>\n<li><code>checkbox</code> (с модификатором <code>checkbox_type_button</code>);</li>\n<li><code>radio</code> (с модификатором <code>radio_type_button</code>).</li>\n</ul>\n<h2 id=\"-\">Влияние группировки на блоки</h2>\n<h3 id=\"-input-\"><code>input</code></h3>\n<p>Для всех сгруппированных блоков <code>input</code>, кроме последнего, не отображается правая граница (CSS свойство <code>right</code> устанавливается равным нулю для псевдоэлемента <code>:before</code>). Для последнего блока группы толщина правой границы равна 1px.</p>\n<p>Например:</p>\n<!-- bem-example: touch-pad.examples/control-group/Vn0lE-sI73yNqDW_-Ki-KHmd-HE -->\n\n\n<h3 id=\"-button-\"><code>button</code></h3>\n<p>Для блоков <code>button</code> группировка влияет на скругление углов и наличие правой границы. Внешний вид зависит от положения блока <code>button</code> внутри группы – первый и последний элементы группы визуально отличаются от прочих:</p>\n<table>\n    <tr>\n        <th>Положение в группе</th>\n        <th>Скругление углов</th>\n        <th>Правый отступ</th>\n    </tr>\n    <tr>\n        <td>Первый</td>\n        <td>Скруглены левые углы, верхний и нижний</td>\n        <td>-</td>\n    </tr>\n    <tr>\n        <td>Последний</td>\n        <td>Скруглены правые углы, верхний и нижний</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <td>Не из крайних</td>\n        <td>Без скругления углов</td>\n        <td>-</td>\n    </tr><br></table>\n\n<p>Например:</p>\n<!-- bem-example: touch-pad.examples/control-group/1bLuZM-NN_21QWtOqEuefvxxCuE -->\n"
                        },
                        "en": {
                            "name": "control-group",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/control-group/simple"
                                }
                            ],
                            "description": ""
                        }
                    },
                    "jsdoc": ""
                },
                {
                    "name": "dropdown",
                    "data": {
                        "ru": {
                            "name": "dropdown",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/dropdown/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/dropdown/simple"
                                }
                            ],
                            "description": "<h1 id=\"dropdown\">dropdown</h1>\n<p>Блок <code>dropdown</code> используется для создания выпадающих элементов и позволяет изменять их состояние, поведение и внешний вид. Блок состоит из двух компонентов – управляющего компонента и попапа (блок <code>popup</code>), который отображается поверх остальных элементов страницы.</p>\n<p>Управляющий компонент при щелчке мышью вызывает попап (устанавливает для блока <code>popup</code> модификатор <code>_visible</code>).</p>\n<p>В зависимости от значения модификатора <code>_switcher</code> управляющим компонентом может служить ссылка, псевдоссылка или кнопка.</p>\n<h2 id=\"-\">Допустимые параметры блока</h2>\n<p>Допустимые параметры блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>switcher</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Текст управляющего компонента. Может содержать фрагмент BEMJSON, например, если нужно обернуть управляющий компонент в другой блок или передать ему дополнительные параметры. </td>\n    </tr>\n    <tr>\n        <td>popup</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Текст или фрагмент BEMJSON, отображаемый во всплывающем окне <code>popup</code>. BEMJSON при этом будет преобразован в HTML.</td>\n    </tr>\n</table>\n\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Наглядно показано на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/dropdown/WcgFmT2l-N83y2w6hRJ-qqSpzkY -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/dropdown/3LxBJkGCYdsRIM3jgENaGnBRRuI -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/dropdown/7xwP-2BJ2nd_leTd5MyNfCK8-wA -->\n\n\n\n<h3 id=\"-_switcher-\">Управляющий компонент <code>_switcher</code></h3>\n<p>Обязательный модификатор.</p>\n<p>Модификатор отвечает за то, какой блок будет использоваться в качестве управляющего компонента:</p>\n<ul>\n<li><code>_switcher_link</code> - ссылка. В качестве управляющего компонента используется блок <code>link</code>.</li>\n<li><code>_switcher_button</code> - кнопка. В качестве управляющего компонента используется блок <code>button</code>.</li>\n</ul>\n<p>Реализован во всех темах.</p>\n<!-- bem-example: touch-pad.examples/dropdown/TZQCpS37p6PxRpc44EhMDX395AA -->\n\n\n<h3 id=\"-_disabled-\">Неактивен <code>_disabled</code></h3>\n<p>В состоянии &quot;неактивен&quot; дропдаун отображается, но недоступен для действий пользователя.</p>\n<p>Для такого блока не будет устанавливаться состояние <code>_opened</code> при щелчке мышью по управляющему компоненту.</p>\n<p>При установке для блока модификатора <code>_disabled</code> для компонентов блока не будут производиться следующие действия:</p>\n<ul>\n<li>Блок </code>popup – установка модификатора <code>_visible</code>;</li>\n<li>Управляющий компонент <code>link</code> – установка состояния <code>_focused</code>. Ссылка не получает фокус по щелчку мышью или по нажатию клавиши <code>Tab</code>;</li>\n<li>Управляющий компонент <code>button</code>:<ul>\n<li>установка состояния <code>_focused</code>. Кнопка не получает фокус по щелчку мышью или по нажатию клавиши <code>Tab</code>;</li>\n<li>установка состояния <code>_hovered</code> при наведении указателем мыши.</li>\n</ul>\n</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/dropdown/T2LPHF5xz8GwGt4VOGdjyOJF_lA -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_opened-\">Открыт <code>_opened</code></h4>\n<p>Модификатор <code>_opened</code> в значении <code>true</code> автоматически выставляется блоку при щелчке мышью по управляющему компоненту блока.</p>\n<!-- bem-example: touch-pad.examples/dropdown/ZBE6qMuVVtpA4JVJk1Z0eHxMx2Y -->\n\n\n<p>Модификатор снимается при повторном щелчке мышью по управляющему компоненту или за пределами попапа (зависит от наличия модификатора <code>_autoclosable</code> блока <code>popup</code>).</p>\n<h2 id=\"bemjson-switcher-popup-\">BEMJSON в атрибутах <code>switcher</code> и <code>popup</code></h2>\n<p>Атрибуты управляющего компонента и попапа могут содержать фрагмент БЭМ-дерева, например, если нужно обернуть управляющий компонент в другой блок или передать ему дополнительные параметры.</p>\n<p>Например, можно сделать кнопку управляющего компонента &quot;залипающей&quot;:</p>\n<!-- bem-example: touch-pad.examples/dropdown/8Fm0DE_2FJy1NDrA8TqWefQAcRg -->\n\n\n<p>Или создать на основе блока выпадающий селект:</p>\n<!-- bem-example: touch-pad.examples/dropdown/vkuviqNPhqQ2uV_ZhFfhVegfskc -->\n\n\n<h2 id=\"-\">Зависимости блока</h2>\n<p>Блок <code>dropdown</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>dom</code></li>\n<li><code>popup</code></li>\n<li><code>button</code>/<code>link</code> (в зависимости от управляющего компонента <code>_switcher</code>)</li>\n</ul>\n\n<h1 id=\"popup\">popup</h1>\n<p>Блок <code>popup</code> используется для создания выпадающих элементов и позволяет изменять их состояние, поведение и внешний вид. Блок отображается поверх остальных элементов страницы.</p>\n<p>Попап может быть вызван различными элементами страницы, например, кнопками или псевдоссылками.</p>\n<p>В момент первого показа (установка модификатора <code>_visible</code>) DOM-элемент блока создается в конце <code>&lt;body&gt;</code>.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/dropdown/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/dropdown/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/dropdown/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n\n<h3 id=\"-_visible-\">Видимый <code>_visible</code></h3>\n<p>Модификатор, отвечающий за видимость блока. При значении модификатора <code>false</code> блок не отображается.</p>\n<!-- bem-example: touch-pad.examples/dropdown/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"-_direction-\">Расположение относительно родителя <code>_direction</code></h3>\n<p>Модификатор управляет положением попапа на странице относительно вызвавшего его блока. Расположение блока определяется автоматически, исходя из массива допустимых расположений и положения родителя на странице.</p>\n<p>Выбранное расположение влияет на направление анимации раскрытия.</p>\n<p>По умолчанию используется следующий массив допустимых расположений:</p>\n<table>\n    <tr>\n        <th> Направление раскрытия </td>\n        <th> Индекс в массиве </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>Чтобы управлять расположением попапа, можно ограничить массив расположений, оставив только требуемые. Пользовательский массив нужно передать в качестве JS-параметра с ключом <code>directions</code>. При этом из значений массива будет выбрано наиболее подходящее, исходя из положения родителя на странице.</p>\n<p>Например, если требуется, чтобы попап раскрывался над родителем:</p>\n<!-- bem-example: touch-pad.examples/dropdown/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Или разместить попап справа по центру:</p>\n<!-- bem-example: touch-pad.examples/dropdown/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"-_autoclosable-\">Автоматическое скрытие <code>_autoclosable</code></h3>\n<p>Модификатор отвечает за автоматическое скрытие попапа при клике вне блока. При установке модификатора <code>_autoclosable</code> в значении <code>_true</code> блок будет скрываться при щелчке за его пределами (будет снят модификатор <code>_visible</code>).</p>\n<!-- bem-example: touch-pad.examples/dropdown/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"-popup-\">Взаимосвязи между popup&#39;ами</h2>\n<p>Так как попап выносит себя в конец <code>&lt;body&gt;</code>, чтобы перекрывать другие элементы страницы, возникает необходимость в построении взаимосвязей. Блок умеет выстраивать связи Parent → [ Child, Child, ... ]. Для этого он выполняет проверку, вложен ли блок, вызывающий попап в другой <code>popup</code>. Потомки знают о наличии родителя.\nЕсли бы этих взаимосвязей не было, то родительский попап (при наличии модификатора <code>autoclosable</code> со значением <code>true</code>) закрылся бы при клике внутри дочернего.</p>\n<p>Другими словами модификатор <code>autoclosable</code> со значением <code>true</code> означает, что попап закроется сам и закроет свои дочерние блоки при клике за пределами его самого и дочерних попапов.</p>\n<p>Дочерние блоки popup можно рассматривать в виде цепочки 1 → 2 → 3 → 4. При клике на втором попапе – закрываются третий и четвертый. При клике в первом – закрываются второй, третий, четвертый. При клике за пределами любого попапа из цепочки – закроются все.</p>\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>popup</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "dropdown",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/dropdown/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/dropdown/simple"
                                }
                            ],
                            "description": "<h1 id=\"dropdown\">dropdown</h1>\n<p>A <code>dropdown</code> block is used to create different types of dropdowns.  It allows to manage state, behavior and appearance of dropdowns. Block consist of two components – the control component and the popup window (<code>popup</code> block). Popup window is displayed in front of all other page elements.</p>\n<p>On mouse click over control component it shows the popup window (toggles <code>_visible</code> modifier for the <code>popup</code> block).</p>\n<p>Depending on a <code>_switcher</code> modifier value, either link, pseudo link or button can be used as a control component.</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in a corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>switcher</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Label for the control component. May contain a string with the text label or BEMJSON notation of nested BEM-entities. For example, it allows to wrap the control component with other block or pass it an additional attribute values.</td>\n    </tr>\n       <tr>\n        <td>popup</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Text value or BEMJSON description of popup window content. In runtime BEMJSON entities will be rendered into HTML.</td>\n    </tr>\n</table>\n\n<p>Also, BEMJSON declaration can contain an arbitrary fields used for templating.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to block.</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/dropdown/WcgFmT2l-N83y2w6hRJ-qqSpzkY -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/dropdown/3LxBJkGCYdsRIM3jgENaGnBRRuI -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/dropdown/7xwP-2BJ2nd_leTd5MyNfCK8-wA -->\n\n\n<h3 id=\"control-component-type-_switcher-\">Control component type <code>_switcher</code></h3>\n<p>Mandatory modifier. It specifies which block to use as a control component. Next types are available:</p>\n<ul>\n<li><code>_switcher_link</code> - the pseudo link. <code>link</code> block is used as a base of the control component. </li>\n<li><code>_switcher_button</code> - the button. <code>button</code> block is used as a base of the control component. </li>\n</ul>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/dropdown/TZQCpS37p6PxRpc44EhMDX395AA -->\n\n\n<h3 id=\"-_disabled-\"><code>_disabled</code></h3>\n<p>If a <code>_disabled</code> modifier is set, the dropdown is displayed but not available for user&#39;s actions.</p>\n<p>For such disabled block an <code>_opened</code> state will not be toggled on mouse click.</p>\n<p>If a <code>_disabled</code> modifier set, it prevents the block components from the following actions:</p>\n<ul>\n<li><code>popup</code> block – <code>_visible</code> modifier toggle;</li>\n<li><code>link</code> control component – <code>_focused</code> state toggle. Link does not obtain focus on mouse click or by <code>Tab</code> key press;</li>\n<li><code>button</code> control component:<ul>\n<li><code>_focused</code> state toggle. Button will not obtain focus on mouse click or by <code>Tab</code> key press;</li>\n<li><code>_hovered</code> state toggle on mouse pointer hover.</li>\n</ul>\n</li>\n</ul>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/dropdown/T2LPHF5xz8GwGt4VOGdjyOJF_lA -->\n\n\n<h3 id=\"dropdown-s-states\">dropdown&#39;s states</h3>\n<h4 id=\"-_opened-\"><code>_opened</code></h4>\n<p><code>_opened</code> modifier toggles automatically on mouse click on the control component.</p>\n<!-- bem-example: touch-pad.examples/dropdown/ZBE6qMuVVtpA4JVJk1Z0eHxMx2Y -->\n\n\n<p>Modifier can be removed by re-clicking on the control component or outside popup&#39;s window (in case of <code>_autoclosable</code> modifier availability for <code>popup</code> block).</p>\n<h2 id=\"bemjson-value-of-switcher-and-popup-attributes\">BEMJSON value of <code>switcher</code> and <code>popup</code> attributes</h2>\n<p>As the control component and the popup attributes can contain BEM-entities it can be used for different purposes such as:</p>\n<ul>\n<li>control component warping or modifying;</li>\n<li>passing additional attribute values to control component;</li>\n<li>creating nested content in popup window.</li>\n</ul>\n<p>For example, you can make a control component&#39;s button toggleable:</p>\n<!-- bem-example: touch-pad.examples/dropdown/8Fm0DE_2FJy1NDrA8TqWefQAcRg -->\n\n\n<p>Or make dropdown list selector based on block:</p>\n<!-- bem-example: touch-pad.examples/dropdown/vkuviqNPhqQ2uV_ZhFfhVegfskc -->\n\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The <code>dropdown</code> block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>dom</code></li>\n<li><code>popup</code></li>\n<li><code>button</code>/<code>link</code> (depending on <code>_switcher</code> control component type)</li>\n</ul>\n\n<h1 id=\"popup\">popup</h1>\n<p>A <code>popup</code> block is used for popups creation. It allows to manage state, behavior and appearance of popups. Block is displayed in front of all other page elements.</p>\n<p>Popup can be displayed by different page elements like pseudo links or buttons.</p>\n<p>At the moment of first display (<code>_visible</code> modifier toggle) block&#39;s DOM element is created in the end of document <code>&lt;body&gt;</code>.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to block.</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/dropdown/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/dropdown/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/dropdown/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n<h3 id=\"visibility-_visible-\">Visibility <code>_visible</code></h3>\n<p>A <code>_visible</code> modifier allow to control block visibility. If it&#39;s not set, block will not be displayed.</p>\n<!-- bem-example: touch-pad.examples/dropdown/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"alignment-respect-to-its-parent-_direction-\">Alignment respect to its parent <code>_direction</code></h3>\n<p>Modifier controls the position of popup window relative to the block which opened it – popup&#39;s alignment. Popup window&#39;s position is detected automatically basing on the admissible directions array and the parent block&#39;s position.</p>\n<p>Chosen alignment will affect the opening animation direction.</p>\n<p>By default following admissible directions array is used:</p>\n<table>\n    <tr>\n        <th> Direction </td>\n        <th> Index in array </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>To control the popup window position you can provide directions array with desired directions set only. According to parent block&#39;s position on a page the most suitable directions will be chosen among the provided values.</p>\n<p>For example, if the popup window should be opened at the top of the parent block:</p>\n<!-- bem-example: touch-pad.examples/dropdown/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Or if it should be opened strictly at the center-right position:</p>\n<!-- bem-example: touch-pad.examples/dropdown/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"automatic-closure-_autoclosable-\">Automatic closure  <code>_autoclosable</code></h3>\n<p>With <code>_autoclosable</code> modifier toggled block will automatically hide away on mouse click outside popup window (<code>_visible</code> modifier will be removed).</p>\n<!-- bem-example: touch-pad.examples/dropdown/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"relations-between-popup-s\">Relations between popup&#39;s</h2>\n<p>As long as popup&#39;s parent block itself can be nested in another popup block there is a need in a popup&#39;s relations handling. Block can handle Parent → [ Child, Child, ... ] relations by checking if the parent block is nested in another popup block. So, the children knows about the parent blocks existence.</p>\n<p>If there were no such relations, the parent popup block will be closed on mouse click on the child block regardless of the fact that <code>_autoclosable</code> modifier is set to <code>true</code>.</p>\n<p>This means that with <code>autoclosable</code> modifier toggled block will close itself and close all of it children on mouse click outside block&#39;s window or it child&#39;s window.</p>\n<p>Child popup blocks can be regarded as a chain of 1 → 2 → 3 → 4. By clicking on the second element of chain, third and forth will be closed. By clicking on first, the second, third and forth will be closed. On click outside of any popup window of the chain element all popups will be closed.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"dropdown-module\">dropdown Module</h1>\n<h2 id=\"dropdown-block\">dropdown Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getpopup-popup-\">getPopup () → {popup}</h4>\n<p>Returns popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<h4 id=\"getswitcher-i-bem__dom-\">getSwitcher () → {i-bem__dom}</h4>\n<p>Returns switcher</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{i-bem__dom}</p>\n<h3 id=\"static-methods\">Static methods</h3>\n<h4 id=\"onswitcherclick-e-protected\">onSwitcherClick ( e )  protected</h4>\n<p>On BEM click event handler</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>e {events:Event}</li>\n</ul>\n<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup_autoclosable_true\">popup_autoclosable_true</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup_autoclosable_true\">popup_autoclosable_true</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n"
                },
                {
                    "name": "icon",
                    "data": {
                        "ru": {
                            "name": "icon",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/icon/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/icon/simple"
                                }
                            ],
                            "description": "<h1 id=\"icon\">icon</h1>\n<p>Блок <code>icon</code> используется в качестве графического элемента в других блоках. В HTML представлен тегом <code>&lt;i&gt;</code>. Иконка задается через свойство <code>background</code> и, соответственно, не имеет возможности фоллбека.</p>\n<p>Иконку можно передать как через модификатор, так и через поле <code>url</code>:</p>\n<!-- bem-example: touch-pad.examples/icon/b2PchFG0vbxDCGt-_1VzrN-GK0 -->\n\n<!-- bem-example: touch-pad.examples/icon/bek_pi0vSgei-mm8QD-H3qy_E0c -->\n\n<!-- bem-example: touch-pad.examples/icon/bqsLdaiup-wWnOz-fYrlos47T_c -->\n\n<!-- bem-example: touch-pad.examples/icon/w_tWuwVyYuwv7N6i7jChuJOj8Vc -->\n"
                        },
                        "en": {
                            "name": "icon",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/icon/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/icon/simple"
                                }
                            ],
                            "description": "<h1 id=\"icon\">icon</h1>\n<p><code>&lt;i&gt;</code>-based block for using as a graphical element in other blocks, not for independent usage. Icon is set as <code>background</code> property and unables to fallback.</p>\n<p>In BEMJSON you can use both the modifier and the <code>url</code> field for an icon representation:\n<!-- bem-example: touch-pad.examples/icon/b2PchFG0vbxDCGt-_1VzrN-GK0 --></p>\n<!-- bem-example: touch-pad.examples/icon/bek_pi0vSgei-mm8QD-H3qy_E0c -->\n\n<!-- bem-example: touch-pad.examples/icon/ozTrvWSbAw8rmCSYD_YNMb4uO80 -->\n\n<!-- bem-example: touch-pad.examples/icon/w_tWuwVyYuwv7N6i7jChuJOj8Vc -->\n"
                        }
                    },
                    "jsdoc": ""
                },
                {
                    "name": "image",
                    "jsdoc": "",
                    "data": {
                        "ru": {
                            "name": "image",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/image/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/image/simple"
                                }
                            ],
                            "description": "<h1 id=\"image\">image</h1>\n<p>Блок <code>image</code> используется для вставки картинок.</p>\n<p>В HTML представлен тегом <code>&lt;img&gt;</code>.</p>\n<!-- bem-example: touch-pad.examples/image/lC8WanGqU6n--Ri8zFvBCOidyB8 -->\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>title</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя картинки.</td>\n    </tr>\n    <tr>\n        <td>alt</td>\n        <td>\n            <code>String</code></td>\n        <td>Обязательный атрибут. Устанавливает альтернативный текст для изображений. Такой текст позволяет получить текстовую информацию о картинке при отключенной в браузере загрузке изображений. <br>Блок распознается программами чтения с экрана для альтернативного воспроизведения.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Адрес ссылки, по которой подгружается картинка.</td>\n    </tr>\n    <tr>\n        <td>width, height</td>\n        <td>\n            <code>Number</code>\n        </td>\n        <td>Значения, которые будут переданы в одноименные атрибуты картинки.</td>\n    </tr>\n</table>\n\n"
                        },
                        "en": {
                            "name": "image",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/image/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/image/simple"
                                }
                            ],
                            "description": "<h1 id=\"image\">image</h1>\n<p><code>&lt;img&gt;</code>-based block is designed for images pasting, using as a content (logo, for example).</p>\n<!-- bem-example: touch-pad.examples/image/lC8WanGqU6n--Ri8zFvBCOidyB8 -->\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified within corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>title</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies icon name.</td>\n    </tr>\n    <tr>\n        <td>alt</td>\n        <td>\n            <code>String</code></td>\n        <td>A mandatory attribute. Specifies an alternate text for images. This text type allows user to obtain text information about an image when it is impossible to download. <br> This block is recognized by screen readers for alternative playback.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>An url address to open image.</td>\n    </tr>\n    <tr>\n        <td>width, height</td>\n        <td>\n            <code>Number</code>\n        </td>\n        <td>Values ​​that will be transferred to image&#39;s attributes with same names.</td>\n    </tr>\n</table>\n\n<p>Other valid block&#39;s attributes could be specified in <code>attrs</code> field in BEMJSON.</p>\n"
                        }
                    }
                },
                {
                    "name": "input",
                    "data": {
                        "ru": {
                            "name": "input",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/input/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/input/simple"
                                }
                            ],
                            "description": "<h1 id=\"input\">input</h1>\n<p>Блок <code>input</code> служит для создания различных типов текстовых полей:</p>\n<ul>\n<li>поле ввода (значение по умолчанию);</li>\n<li>текстовая область;</li>\n<li>поле с паролем;</li>\n<li>поисковая форма.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON-блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Значение, отправляемое на сервер. По умолчанию пустое.</td>\n    </tr>\n    <tr>\n        <td>placeholder</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Подсказка в поле ввода.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Уникальный идентификатор блока. По умолчанию генерируется случайным образом, если явно не задан в BEMJSON.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя полю ввода.</td>\n    </tr>\n    <tr>\n        <td>maxLength</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет максимальное количество вводимых символов.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет последовательность перехода между полями ввода при нажатии на <code>Tab</code>.</td>\n    </tr>\n</table>\n\n\n<p>Другие допустимые атрибуты блока могут быть заданы в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/input/hwtIQVRUxvCPVxAJgWKBqBRt6Is -->\n<strong>simple</strong>\n\n<!-- bem-example: touch-pad.examples/input/yAehEbulTw29FYJa_ye7ntQkTkU -->\n<strong>normal</strong>\n\n<!-- bem-example: touch-pad.examples/input/m1GvVMb4ZI4DvaKjyQWVNZLyquA -->\n\n<h3 id=\"-_size-\">Размеры <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам текстовых полей.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота<br>строки</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;s&#39; },\n    placeholder : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39; },\n    placeholder : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;l&#39; },\n    placeholder : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;xl&#39; },\n    placeholder : &#39;X-Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Типы <code>_type</code></h3>\n<p>Блок представлен следующими типами:</p>\n<ul>\n<li>текстовая область (<code>input_type_textarea</code>)</li>\n<li>поле с паролем (<code>input_type_password</code>)</li>\n<li>поисковая форма (<code>input_type_search</code>)</li>\n</ul>\n<p>Без указания типа поля блок <code>input</code> по умолчанию получает значение <code>&lt;input type=&quot;text&quot;/&gt;</code>.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Реализация</th>\n    </tr>\n    <tr>\n        <td>\n            <code>_textarea</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;textarea&#39; },\n    placeholder : &#39;Тексторвая область&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_password</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39;, type : &#39;password&#39; },\n    placeholder : &#39;Поле с паролем&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_search</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;search&#39; },\n    placeholder : &#39;Поисковая форма&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии блока «неактивен» поле ввода и все его элементы становятся недоступными для действий пользователя.</p>\n<p>Если модификатор <code>disabled</code> не установлен, инпут по умолчанию активен.</p>\n<!-- bem-example: touch-pad.examples/input/_rQiPCz_bRgjryQQWFEhXhyJnyM -->\n\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> поле ввода находится в фокусе.</p>\n<!-- bem-example: touch-pad.examples/input/4hhBI_vwtFJlpwXu8DnFh6HdrYY -->\n\n<h3 id=\"-_has-clear-\">Очистка содержимого <code>_has-clear</code></h3>\n<p>Модификатор <code>has-clear</code> в значении <code>true</code> отображает в инпуте крестик для очистки содержимого (элемент <code>clear</code>).</p>\n<!-- bem-example: touch-pad.examples/input/JCaTuV74Ua-xND0IW39wBPdvHBI -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<p>Визуально представлен следующими элементами:</p>\n<h3 id=\"__box\">__box</h3>\n<p>Обязательный элемент.</p>\n<p>Элемент, группирующий нативный контрол <code>&lt;input&gt;</code> и дополнительные элементы (например, <code>__clear</code>).</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>Кнопка очистки содержимого инпута («крестик»).</p>\n<p>По умолчанию модификатор <code>has-clear</code> имеет значение <code>false</code>, при котором крестик не отображается. Для отображения крестика нужно установить модификатор в значение <code>true</code>.</p>\n<!-- bem-example: touch-pad.examples/input/SwtjmJjtMXak9KKSsPMLXihNiQI -->\n\n<h3 id=\"__control\">__control</h3>\n<p>Обязательный элемент.</p>\n<p>BEMHTML- или BH-шаблоном преобразуется в нативный контрол <code>&lt;input&gt;</code> или <code>&lt;textarea&gt;</code>.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "input",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/input/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/input/simple"
                                }
                            ],
                            "description": "<h1 id=\"input\">input</h1>\n<p><code>input</code> block is designed to create different types of text fields:</p>\n<ul>\n<li>input field (default value);</li>\n<li>text area;</li>\n<li>password field;</li>\n<li>search form.</li>\n</ul>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified within corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Value to be sent to server. It is empty by default.</td>\n    </tr>\n    <tr>\n        <td>placeholder</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>A short hint that describes expected value of an input field.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Unique block identifier. The value is generated randomly by default. Could be specified manually in BEMJSON file.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Defines name of an input field.</td>\n    </tr>\n    <tr>\n        <td>maxLength</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies maximum number of characters allowed in input field.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies the position of current <code>input</code> block in the tabbing order for current page.</td>\n    </tr>\n</table>\n\n<p>Other valid block&#39;s attributes could be specified in <code>attrs</code> field in BEMJSON.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Block supports following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, native representation (<em>default</em>) of a control is available.</p>\n<p>See the following examples for demonstration:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/input/hwtIQVRUxvCPVxAJgWKBqBRt6Is -->\n<strong>simple</strong>\n\n<!-- bem-example: touch-pad.examples/input/yAehEbulTw29FYJa_ye7ntQkTkU -->\n<strong>normal</strong>\n\n<!-- bem-example: touch-pad.examples/input/m1GvVMb4ZI4DvaKjyQWVNZLyquA -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.</p>\n<p>Provides size values to all types of text fields.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>See the following examples for demonstration:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Font size</th>\n        <th>String height</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;s&#39; },\n    placeholder : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39; },\n    placeholder : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;l&#39; },\n    placeholder : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;xl&#39; },\n    placeholder : &#39;X-Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>Following types of <code>input</code> block are available:</p>\n<ul>\n<li>text area (use <code>textarea</code> modifier);</li>\n<li>password field (use <code>password</code> modifier);</li>\n<li>search form (use <code>search</code> modifier).</li>\n</ul>\n<p>If a <code>type</code> modifier is not specified, the <code>input</code> block obtains <code>&lt;input type=&quot;text&quot;/&gt;</code> value by default.</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>\n            <code>_textarea</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;textarea&#39; },\n    placeholder : &#39;Text area&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_password</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39;, type : &#39;password&#39; },\n    placeholder : &#39;Password field&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_search</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;search&#39; },\n    placeholder : &#39;Search form&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"block-s-state\">Block&#39;s state</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If block is disabled, all its elements become unavailable for user&#39;s action.</p>\n<p><code>input</code> block is active by default even if <code>disabled</code> modifier is not specified.</p>\n<!-- bem-example: touch-pad.examples/input/K-P-esXffR8hGOoR7jna6S2YiJQ -->\n\n<h4 id=\"_focused\">_focused</h4>\n<p>An input field is focused if a block has a <code>focused</code> modifier with <code>true</code> value.</p>\n<!-- bem-example: touch-pad.examples/input/qCSnME17SEWdiXIYzAUquHUowlo -->\n\n<h3 id=\"_has-clear\">_has-clear</h3>\n<p><code>clear</code> cross element (<code>clear</code>) appears in input field if a block has <code>has-clear</code> modifier with <code>true</code> value.</p>\n<!-- bem-example: touch-pad.examples/input/_9h_vL43Yf85tOZ7QzUlcBNd-PE -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<p>The following elements provide visual representation of <code>input</code> block:</p>\n<h3 id=\"__box\">__box</h3>\n<p>An element for grouping native <code>&lt;input&gt;</code> field and additional elements (e.g <code>__clear</code>).</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>A button (cross element) intended to clear an <code>input</code> field content.</p>\n<p>To add a cross element into an <code>input</code> field specify <code>has-clear</code> modifier with <code>true</code> value in BEMJSON file.</p>\n<p>Cross element is unavailable if block has not <code>has-clear</code> modifier or if <code>has-clear</code> modifier has <code>false</code> value.</p>\n<!-- bem-example: touch-pad.examples/input/oL605Mco7dZbQOD7Rga3BNjDmUY -->\n\n<h3 id=\"__control\">__control</h3>\n<p>Mandatory element.</p>\n<p>This element is processed by BEMHTML or BH template engine to native <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code> control.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"input-module\">input Module</h1>\n<h2 id=\"input-block\">input Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"setval-val-data-input-\">setVal ( val, [data] ) → {input}</h4>\n<p>Sets control value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {String}<br/>\nvalue</li>\n<li>[data] {Object}<br/>\nadditional data</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{input}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "link",
                    "jsdoc": "<h1 id=\"link-module\">link Module</h1>\n<h2 id=\"undefined\">undefined</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"geturl-string-\">getUrl () → {String}</h4>\n<p>Returns url</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"seturl-url-link-\">setUrl ( url ) → {link}</h4>\n<p>Sets url</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>url {String}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{link}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n",
                    "data": {
                        "ru": {
                            "name": "link",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/link/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/link/simple"
                                }
                            ],
                            "description": "<h1 id=\"link\">link</h1>\n<p>Блок <code>link</code> используется для создания различных типов ссылок и предоставляет возможность изменять их состояние, внешний вид и поведение.</p>\n<h2 id=\"-\">Варианты использования ссылок</h2>\n<p>Блок <strong>link</strong> служит для создания следующих типов ссылок:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычная ссылка</td>\n        <td>Применяется для любых ссылок веб-интерфейса. Используется по умолчанию.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;link&#39;,\n    url : &#39; #&#39;,\n    content : &#39;link&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Псевдоссылка</td>\n        <td>Разновидность ссылки, для которой не производится переход на новую страницу по щелчку мыши. Применяется для вызова сценариев.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;link&#39;,\n    mods : { pseudo : true, theme: &#39;normal&#39; },\n    content : &#39;pseudo&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Допустимые параметры блока</h2>\n<p>Допустимые параметры блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Адрес ссылки. Если указан, значение <code>url</code> становится атрибутом <code>href</code>. Обязательный параметр для обычной ссылки. Если в качестве значения передан BEMJSON, он будет обработан и вернет строку.</td>\n    </tr>\n    <tr>\n        <td>title</td>\n        <td><code>String</code></td>\n        <td>Текст всплывающей подсказки</td>\n    </tr>\n    <tr>\n        <td>target</td>\n        <td><code>String</code></td>\n        <td>Целевое окно. Обычно атрибут указывается со значением <code>_blank</code>, чтобы открыть адрес ссылки в новом окне.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td><code>Number</code></td>\n        <td> Индекс, задающий последовательность перехода между ссылками при нажатии на клавишу <code>Tab</code>. Атрибут преобразуется в нативный атрибут <code>tabindex</code>.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Например:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/link/Y3yr9bNzwYkA9sSkV8EkqO30JYI -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/link/rVrcuNJ0PMv5S2Q4KNH4HsM6Zds -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/link/v4bNHfaIobOFWcneUxLQDbb4T9g -->\n\n<h3 id=\"-_pseudo-\">Псевдоссылка <code>_pseudo</code></h3>\n<!-- bem-example: touch-pad.examples/link/chWrNSQqHxfoi-xep8pjJQnF124 -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>_focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью. Нажатие по ней можно выполнить клавишей <code>Enter</code>.</p>\n<pre><code>{\n    block : &#39;link&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        focused : true\n    },\n    url : &#39;#&#39;,\n    content : &#39;_focused&#39;\n}\n</code></pre><h4 id=\"-_disabled-\">Неактивна <code>_disabled</code></h4>\n<p>В состоянии &quot;не активна&quot; ссылка отображается, но недоступна для действий пользователя.</p>\n<p>Для такой ссылки не будет:</p>\n<ul>\n<li>устанавливаться модификатор <code>_focused</code> в момент получения фокуса;</li>\n<li>осуществляться переход, если задан атрибут <code>url</code>;</li>\n<li>генерироваться БЭМ-событие <code>click</code>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/link/MlN17lxDfpZbuzsh5l2N1VNo16U -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>link</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>control</code></li>\n<li><code>i-bem__dom</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "link",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/link/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/link/simple"
                                }
                            ],
                            "description": "<h1 id=\"link\">link</h1>\n<p>A <code>link</code> block is used for a various types of links creation. It allows to manage state, behaviour and appearance of a links.</p>\n<h2 id=\"link-use-cases\">link use cases</h2>\n<p>The block is used for creation of following link types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Basic link</td>\n        <td>Is used to set up various kinds of links. A default type.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;link&#39;,\n    url : &#39; #&#39;,\n    content : &#39;link&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Pseudo link</td>\n        <td>The variation of link that will not be followed by a browser on click. Used mainly for scripts invocation.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;link&#39;,\n    mods : { pseudo : true, theme: &#39;normal&#39; },\n    content : &#39;pseudo&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Link&#39;s URL. If presented an <code>url</code> value, will renders to <code>href</code> HTML attribute. Is mandatory for a normal link. If BEMJSON is passed as the value, it will be processed and will return the string.</td>\n    </tr>\n    <tr>\n        <td>title</td>\n        <td><code>String</code></td>\n        <td>Popup label&#39;s text.</td>\n    </tr><br>    <tr>\n        <td>target</td>\n        <td><code>String</code></td>\n        <td>Target window. Mainly used with a <code>_blank</code> value to open the link in new window.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td><code>Number</code></td>\n        <td>Index to define an order of links focusing on <code>Tab</code> key press. Will be rendered to native <code>tabindex</code> HTML attribute.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/link/Y3yr9bNzwYkA9sSkV8EkqO30JYI -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/link/rVrcuNJ0PMv5S2Q4KNH4HsM6Zds -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/link/v4bNHfaIobOFWcneUxLQDbb4T9g -->\n\n\n<h3 id=\"pseudo-link-_pseudo-\">Pseudo link <code>_pseudo</code></h3>\n<!-- bem-example: touch-pad.examples/link/chWrNSQqHxfoi-xep8pjJQnF124 -->\n\n\n<h3 id=\"link-s-states\">Link&#39;s states</h3>\n<h4 id=\"in-focus-_focused-\">In focus <code>_focused</code></h4>\n<p>A <code>_focused</code> modifier is automaticly toggles to the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press. Focused link can be followed by Enter key press.</p>\n<p>Available for all block themes.</p>\n<pre><code>{\n    block : &#39;link&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        focused : true\n    },\n    url : &#39;#&#39;,\n    content : &#39;_focused&#39;\n}\n</code></pre><h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive link. Inactive link is displayed but not available for user actions.  </p>\n<p>For such a link will not be performed:</p>\n<ul>\n<li><code>_focused</code> state modifier toggling, when in focus;</li>\n<li>redirection to the link address if an <code>url</code> attribute is provided;</li>\n<li><code>click</code> BEM event emiting.</li>\n</ul>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/link/MlN17lxDfpZbuzsh5l2N1VNo16U -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>control</code></li>\n<li><code>i-bem__dom</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    }
                },
                {
                    "name": "menu",
                    "jsdoc": "<h1 id=\"menu-module\">menu Module</h1>\n<h2 id=\"menu-block\">menu Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getitems-menu-item-\">getItems () → {menu-item}</h4>\n<p>Returns items</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{menu-item}</p>\n<h4 id=\"setcontent-content-menu-\">setContent ( content ) → {menu}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{menu}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"menu-item-module\">menu-item Module</h1>\n<h2 id=\"menu-item-block\">menu-item Block</h2>\n<h3 id=\"block-parameters-\">Block parameters:</h3>\n<ul>\n<li>val {*}<br/>\nValue of item</li>\n</ul>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"isvaleq-val-boolean-\">isValEq ( val ) → {Boolean}</h4>\n<p>Checks whether given value is equal to current value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {*}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getval-\">getVal () → {*}</h4>\n<p>Returns item value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{*}</p>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns item text</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n",
                    "data": {
                        "ru": {
                            "name": "menu",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/menu/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/menu/simple"
                                }
                            ],
                            "description": "<h1 id=\"menu\">menu</h1>\n<p>Блок <code>menu</code> используется для создания различных типов меню и селектов.</p>\n<p>Он предоставляет возможность изменять размер и внешний вид блоков меню, управлять поведением вложенных блоков – пунктов меню или селекта.</p>\n<p>В результате BEMHTML-преобразований на странице блок становится HTML-элементом с тегом <code>&lt;div&gt;</code> и свойством <code>role=&quot;menu&quot;</code>. HTML-элементом, содащим набор переключателей – пунктов меню (блок <code>menu-item</code>).</p>\n<h2 id=\"-\">Варианты использования меню</h2>\n<p>Блок <code>menu</code> служит для создания различных типов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Меню-переключатель</td>\n        <td>Применяется для создания меню или селектов, позволяющих только одиночный выбор.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;, \n        mode : &#39;radio&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Селект с множественным выбором (<code>_mode_check</code>)</td>\n        <td>При щелчке мышью по пункту меню его состояние меняется на противоположное. Если пункт был активен – он деактивируется и наоборот.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n<tr>\n        <td>Простой список (без модификатора <code>_mode</code>)</td>\n        <td>При щелчке мышью по пункту меню его состояние не меняется. Модификатор <code>_cheked</code> не устанавливается.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/menu/vAAUvyJpkNyuM0yEru7LP3dZ7xE -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/menu/JgK_lg3CEjumbM6ThTKEOcNpfH0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/menu/MGiZ5_2bYS32yaxnY5iD9OevjVk -->\n\n\n<h3 id=\"-_size-\">Размеры меню <code>_size</code></h3>\n<p>Задает размер всем типам меню. Обязательный модификатор.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер/Параметры</th>\n        <th>Размер шрифта</th>\n        <th>Высота строки <code>line-heigh</code></th>\n        <th>Левый отступ <code>padding-left</code></th>\n        <th>Отступ <code>padding</code></th>\n        <th>Размер &quot;галочки&quot; для темы normal</code></th>\n    </tr>\n    <tr>\n        <td>s</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;s&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>m</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;m&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>l</td>\n        <td>15px</td>\n        <td>28px</td>\n        <td>34px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;l&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>xl</td>\n        <td>15px</td>\n        <td>32px</td>\n        <td>40px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;xl&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-_mode-\">Способ выбора пунктов <code>_mode</code></h3>\n<p>Модификатор <code>_mode</code> управляет поведением пунктов меню при щелчке по ним мышью, например, возможностью множественного выбора пунктов меню.</p>\n<p>Доступны следующие значения модификатора:</p>\n<ul>\n<li><code>check</code> – селект. Пункт, по которому был произведен щелчек мышью, изменит состояние на противоположное и будет менять состояние при повторных щелчках. Доступна возможность множественного выбора пунктов;</li>\n<li><code>radio</code> – переключатель. При щелчке мышью будет производиться переключение активных пунктов меню. При повторном щелчке пункт, по которому он был произведен, останется <strong>активным</strong>. Множественный выбор недоступен;</li>\n<li><code>radio-check</code> – переключатель. При щелчке мышью будет производиться переключение активных пунктов меню. При повторном щелчке пункт, по которому он был произведен, станет <strong>неактивным</strong>. Множественный выбор недоступен.</li>\n</ul>\n<p>Реализован во всех темах блока.</p>\n<table>\n    <tr>\n        <th>Выбор пунктов</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Только один (<code>_mode_radio</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Множественный выбор или ни одного (<code>_mode_check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Один или ни одного (<code>_mode_radio-check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio-check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>_focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/menu/lFNP7KamARohsQ5DCX0QQZU1ACQ -->\n\n\n<h2 id=\"-\">Элементы блока</h2>\n<p>Визуально представлен следующими элементами:</p>\n<h3 id=\"__group\">__group</h3>\n<p>Элемент <code>__group</code> служит для группировки пунктов меню. Пункты, которые нужно сгруппировать, помещаются в поле <code>content</code> элемента. Группы визуально отделяются серой чертой.</p>\n<p>Например:</p>\n<!-- bem-example: touch-pad.examples/menu/WSrgcU6mXH0StKcrKnckCnH3lrc -->\n\n\n<h3 id=\"__group-title\">__group-title</h3>\n<p>Элемент позволяет задать заголовок для группы пунктов меню, создаваемой с помощью элемента <code>__group</code>.</p>\n<p>Например:</p>\n<!-- bem-example: touch-pad.examples/menu/yGGZayW6DClbboVCxBRriqv3YcU -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>menu-item</code></li>\n<li><code>dom</code></li>\n<li><code>keyboard</code></li>\n<li><code>control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n\n<h1 id=\"menu-item\">menu-item</h1>\n<p>Блок <code>menu-item</code> служит для создания пунктов меню или селекта. Используется внутри блока <code>menu</code>. Блок <code>menu-item</code> предоставляет возможность изменять состояние, содержимое и тип пунктов меню.</p>\n<p>Блок <code>menu-item</code> в результате BEMHTML-преобразований на странице становится HTML-элементом с тегом <code>&lt;div&gt;</code> со свойством <code>role=&quot;menuitem&quot;</code>.</p>\n<h2 id=\"-\">Варианты использования пунктов меню</h2>\n<p>Блок <code>menu-item</code> служит для создания различных типов пунктов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Переключатель</td>\n        <td>Применяется для любых выпадающих списков, табов, пунктов меню и селектов и т.п. Используется по умолчанию.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Ссылка</td>\n        <td>Элемент меню со ссылкой. Блок <code>link</code> помещается в поле <code>content</code> BEMJSON-декларации блока. Так же требуется установить блоку модификатор <code>type</code> в значение <code>link</code>.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое пунктом меню, если он выбран.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/menu/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/menu/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/menu/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"-_type-\">Типы блока <code>_type</code></h3>\n<p>Модификатор <code>_type</code> в значении <code>_link</code> позволяет создавать пункт меню-ссылку. Блок <code>link</code> при этом помещается в поле <code>content</code> BEMJSON-декларации блока. Если модификатор <code>_type_link</code> не установлен, вложенная ссылка будет доступна для действий пользователя при установленном модификаторе <code>_disabled</code>.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/menu/47lHiiyDspaBs5AiC22G42Y-N_o -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии &quot;неактивен&quot; пункт меню отображается, но недоступен для действий пользователя.  </p>\n<p>Такой пункт меню не изменяет состояние при щелчке мышью. Если для блока установлен модификатор <code>_type_link</code>, переход по ссылке не осуществляется. </p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/menu/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие &quot;наведение курсором&quot; на пункт меню.</p>\n<p>Реализован во всех темах блока.</p>\n<p>Автоматически выставляется при наведении указателем мыши на пункт меню.</p>\n<!-- bem-example: touch-pad.examples/menu/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"-_checked-\">Выбранный пункт меню <code>_checked</code></h4>\n<p>Модификатор задает выбранный пункт меню.</p>\n<!-- bem-example: touch-pad.examples/menu/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>В блоке <code>menu</code> модификатор <code>_checked</code> устанавливается для пункта при щелчке мышью:</p>\n<!-- bem-example: touch-pad.examples/menu/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu-item</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "menu",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/menu/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/menu/simple"
                                }
                            ],
                            "description": "<h1 id=\"menu\">menu</h1>\n<p>A <code>menu</code> block is used for creation of various types of menus and lists. It allows to manage state, behavior and appearance of menus.</p>\n<p>As a result of BEMHTML transformations, a block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menu&quot;</code> attribute set. The block&#39;s HTML element contains a set of switches – the <code>menu-item</code> blocks.</p>\n<p>It allow to manage the appearance, state and size of a menu blocks as well as manage the nested <code>menu-items</code> block&#39;s appearance.</p>\n<h2 id=\"menu-use-cases\">menu use cases</h2>\n<p>A <code>menu</code> block is used for creation of following menu types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Switch menu</td>\n        <td>Used for creation of lists with a single selectable item.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;, \n        mode : &#39;radio&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A multi selectable list. (<code>_mode_check</code>)</td>\n        <td>Clicking on a list items will perform item&#39;s state switching to opposite. If an item was active it will be deactivated, and vice versa.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n<tr>\n        <td>Basic list (with <code>_mode</code> modifier is unset)</td>\n        <td>Menu item&#39;s state will not change on mouse click. A <code>_cheked</code> state modifier will not be toggled.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/menu/vAAUvyJpkNyuM0yEru7LP3dZ7xE -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/menu/JgK_lg3CEjumbM6ThTKEOcNpfH0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/menu/MGiZ5_2bYS32yaxnY5iD9OevjVk -->\n\n<h3 id=\"the-sizes-_size-\">The sizes <code>_size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides a size value to all types of radio groups.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<table>\n    <tr>\n        <th>A <code>_size</code> value</th>\n        <th>Font size</th>\n        <th>Line height <code>line-heigh</code></th>\n        <th>Left padding <code>padding-left</code></th>\n        <th>Global <code>padding</code></th>\n        <th>The tick&#39;s icon size for normal theme</code></th>\n    </tr>\n    <tr>\n        <td>s</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;s&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>m</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;m&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>l</td>\n        <td>15px</td>\n        <td>28px</td>\n        <td>34px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;l&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>xl</td>\n        <td>15px</td>\n        <td>32px</td>\n        <td>40px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;xl&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"menu-item-selection-options-_mode-\">Menu item selection options <code>_mode</code></h3>\n<p>A <code>_mode</code> modifier defines a menu item&#39;s reaction on mouse click. For example, it controls multiple items selectability.</p>\n<p>Following modifier values are available:</p>\n<ul>\n<li><code>check</code> – a selectable list. A menu item will change it&#39;s state to opposite on each mouse click. An active item will become inactive and vice versa. Multiple choice is available;</li>\n<li><code>radio</code> – a switcher. Inactive menu item will be activated on mouse click. On re-clicking the menu item will remain <strong>active</strong>. Multiple choice not available;</li>\n<li><code>radio-check</code> – a switcher. Inactive menu item will be activated on mouse click. On re-clicking the active menu item will become <strong>inactive</strong>. Multiple choice not available.</li>\n</ul>\n<p>Available for all block themes.</p>\n<table>\n    <tr>\n        <th>List items selectability</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Only one (<code>_mode_radio</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Plural selection or none (<code>_mode_check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>One or none (<code>_mode_radio-check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio-check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"in-focus-_focused-\">In focus <code>_focused</code></h4>\n<p>A <code>_focused</code> modifier is automatically toggles for the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/menu/2y_zCWFJ78bAFa8UEqIdsRPc3qM -->\n\n<h2 id=\"the-block-s-elements\">The block&#39;s elements</h2>\n<p>The <code>menu</code> block is visually represented by following elements:</p>\n<h3 id=\"__group\">__group</h3>\n<p>A <code>__group</code> element is used for menu items grouping. An Items that needed grouping should be placed to the element BEMJSON declaration&#39;s <code>content</code> field. The group elements are visually separated by a gray line.</p>\n<p>For example:</p>\n<!-- bem-example: touch-pad.examples/menu/WSrgcU6mXH0StKcrKnckCnH3lrc -->\n\n\n<h3 id=\"__group-title\">__group-title</h3>\n<p>This element allows to create a title for a menu items group, created using a <code>_group</code> element.</p>\n<p>For example:</p>\n<!-- bem-example: touch-pad.examples/menu/8LCJ2Asb6uR2ZHALf5iscb_n2RU -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>menu-item</code></li>\n<li><code>dom</code></li>\n<li><code>keyboard</code></li>\n<li><code>control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n\n<h1 id=\"menu-item\">menu item</h1>\n<p>A <code>menu-item</code> block is used for creation of various types of menu and list items. It is used inside a <code>menu</code> block. The <code>menu-item</code> block allows to manage state, content and type of menu items.</p>\n<p>As a result of BEMHTML transformations block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menuitem&quot;</code> attribute set.</p>\n<h2 id=\"menu-item-use-cases\">menu item use cases</h2>\n<p>The block helps to create following menu item types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>An example</th>\n    </tr>\n    <tr>\n        <td>A switch element</td>\n        <td>Is used to set up a dropdowns, tab menus, lists and menu items, etc.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A link element (<code>_type_link</code>)</td>\n        <td>An element with nested depended link. A <code>link</code> block should be placed into block&#39;s BEMJSON declaration <code>content</code> field. The <code>_type_link</code> modifier is required.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>A value returned by menu item if selected.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/menu/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/menu/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/menu/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive menu item. Inactive menu item is displayed, but not available for user actions.  </p>\n<p>If a <code>_type_link</code> modifier is set for the block with a nested link, the link will not be followed on mouse click.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/menu/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"mouse-over-_hovered-\">Mouse over <code>_hovered</code></h4>\n<p>This modifier is automatically toggled when the mouse pointer is over the block. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/menu/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"selected-menu-item-_checked-\">Selected menu item <code>_checked</code></h4>\n<p>Modifier defines the selected menu item.</p>\n<!-- bem-example: touch-pad.examples/menu/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>For the <code>menu-item</code> blocks nested in a <code>menu</code> block <code>_checked</code> state toggles automatically on mouse click. </p>\n<!-- bem-example: touch-pad.examples/menu/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n"
                        }
                    }
                },
                {
                    "name": "menu-item",
                    "jsdoc": "<h1 id=\"menu-item-module\">menu-item Module</h1>\n<h2 id=\"menu-item-block\">menu-item Block</h2>\n<h3 id=\"block-parameters-\">Block parameters:</h3>\n<ul>\n<li>val {*}<br/>\nValue of item</li>\n</ul>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"isvaleq-val-boolean-\">isValEq ( val ) → {Boolean}</h4>\n<p>Checks whether given value is equal to current value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {*}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getval-\">getVal () → {*}</h4>\n<p>Returns item value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{*}</p>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns item text</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n",
                    "data": {
                        "ru": {
                            "name": "menu-item",
                            "examples": [],
                            "description": "<h1 id=\"menu-item\">menu-item</h1>\n<p>Блок <code>menu-item</code> служит для создания пунктов меню или селекта. Используется внутри блока <code>menu</code>. Блок <code>menu-item</code> предоставляет возможность изменять состояние, содержимое и тип пунктов меню.</p>\n<p>Блок <code>menu-item</code> в результате BEMHTML-преобразований на странице становится HTML-элементом с тегом <code>&lt;div&gt;</code> со свойством <code>role=&quot;menuitem&quot;</code>.</p>\n<h2 id=\"-\">Варианты использования пунктов меню</h2>\n<p>Блок <code>menu-item</code> служит для создания различных типов пунктов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Переключатель</td>\n        <td>Применяется для любых выпадающих списков, табов, пунктов меню и селектов и т.п. Используется по умолчанию.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Ссылка</td>\n        <td>Элемент меню со ссылкой. Блок <code>link</code> помещается в поле <code>content</code> BEMJSON-декларации блока. Так же требуется установить блоку модификатор <code>type</code> в значение <code>link</code>.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое пунктом меню, если он выбран.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/menu-item/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/menu-item/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/menu-item/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"-_type-\">Типы блока <code>_type</code></h3>\n<p>Модификатор <code>_type</code> в значении <code>_link</code> позволяет создавать пункт меню-ссылку. Блок <code>link</code> при этом помещается в поле <code>content</code> BEMJSON-декларации блока. Если модификатор <code>_type_link</code> не установлен, вложенная ссылка будет доступна для действий пользователя при установленном модификаторе <code>_disabled</code>.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/menu-item/47lHiiyDspaBs5AiC22G42Y-N_o -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии &quot;неактивен&quot; пункт меню отображается, но недоступен для действий пользователя.  </p>\n<p>Такой пункт меню не изменяет состояние при щелчке мышью. Если для блока установлен модификатор <code>_type_link</code>, переход по ссылке не осуществляется. </p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/menu-item/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие &quot;наведение курсором&quot; на пункт меню.</p>\n<p>Реализован во всех темах блока.</p>\n<p>Автоматически выставляется при наведении указателем мыши на пункт меню.</p>\n<!-- bem-example: touch-pad.examples/menu-item/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"-_checked-\">Выбранный пункт меню <code>_checked</code></h4>\n<p>Модификатор задает выбранный пункт меню.</p>\n<!-- bem-example: touch-pad.examples/menu-item/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>В блоке <code>menu</code> модификатор <code>_checked</code> устанавливается для пункта при щелчке мышью:</p>\n<!-- bem-example: touch-pad.examples/menu-item/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu-item</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "menu-item",
                            "examples": [],
                            "description": "<h1 id=\"menu-item\">menu item</h1>\n<p>A <code>menu-item</code> block is used for creation of various types of menu and list items. It is used inside a <code>menu</code> block. The <code>menu-item</code> block allows to manage state, content and type of menu items.</p>\n<p>As a result of BEMHTML transformations block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menuitem&quot;</code> attribute set.</p>\n<h2 id=\"menu-item-use-cases\">menu item use cases</h2>\n<p>The block helps to create following menu item types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>An example</th>\n    </tr>\n    <tr>\n        <td>A switch element</td>\n        <td>Is used to set up a dropdowns, tab menus, lists and menu items, etc.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A link element (<code>_type_link</code>)</td>\n        <td>An element with nested depended link. A <code>link</code> block should be placed into block&#39;s BEMJSON declaration <code>content</code> field. The <code>_type_link</code> modifier is required.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>A value returned by menu item if selected.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/menu-item/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/menu-item/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/menu-item/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive menu item. Inactive menu item is displayed, but not available for user actions.  </p>\n<p>If a <code>_type_link</code> modifier is set for the block with a nested link, the link will not be followed on mouse click.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/menu-item/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"mouse-over-_hovered-\">Mouse over <code>_hovered</code></h4>\n<p>This modifier is automatically toggled when the mouse pointer is over the block. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/menu-item/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"selected-menu-item-_checked-\">Selected menu item <code>_checked</code></h4>\n<p>Modifier defines the selected menu item.</p>\n<!-- bem-example: touch-pad.examples/menu-item/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>For the <code>menu-item</code> blocks nested in a <code>menu</code> block <code>_checked</code> state toggles automatically on mouse click. </p>\n<!-- bem-example: touch-pad.examples/menu-item/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n"
                        }
                    }
                },
                {
                    "name": "popup",
                    "data": {
                        "ru": {
                            "name": "popup",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/popup/destruct"
                                },
                                {
                                    "url": "touch-pad.tests/popup/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/popup/horiz-scroll"
                                },
                                {
                                    "url": "touch-pad.tests/popup/nested"
                                },
                                {
                                    "url": "touch-pad.tests/popup/simple"
                                },
                                {
                                    "url": "touch-pad.tests/popup/vert-scroll"
                                }
                            ],
                            "description": "<h1 id=\"popup\">popup</h1>\n<p>Блок <code>popup</code> используется для создания выпадающих элементов и позволяет изменять их состояние, поведение и внешний вид. Блок отображается поверх остальных элементов страницы.</p>\n<p>Попап может быть вызван различными элементами страницы, например, кнопками или псевдоссылками.</p>\n<p>В момент первого показа (установка модификатора <code>_visible</code>) DOM-элемент блока создается в конце <code>&lt;body&gt;</code>.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/popup/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/popup/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/popup/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n\n<h3 id=\"-_visible-\">Видимый <code>_visible</code></h3>\n<p>Модификатор, отвечающий за видимость блока. При значении модификатора <code>false</code> блок не отображается.</p>\n<!-- bem-example: touch-pad.examples/popup/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"-_direction-\">Расположение относительно родителя <code>_direction</code></h3>\n<p>Модификатор управляет положением попапа на странице относительно вызвавшего его блока. Расположение блока определяется автоматически, исходя из массива допустимых расположений и положения родителя на странице.</p>\n<p>Выбранное расположение влияет на направление анимации раскрытия.</p>\n<p>По умолчанию используется следующий массив допустимых расположений:</p>\n<table>\n    <tr>\n        <th> Направление раскрытия </td>\n        <th> Индекс в массиве </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>Чтобы управлять расположением попапа, можно ограничить массив расположений, оставив только требуемые. Пользовательский массив нужно передать в качестве JS-параметра с ключом <code>directions</code>. При этом из значений массива будет выбрано наиболее подходящее, исходя из положения родителя на странице.</p>\n<p>Например, если требуется, чтобы попап раскрывался над родителем:</p>\n<!-- bem-example: touch-pad.examples/popup/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Или разместить попап справа по центру:</p>\n<!-- bem-example: touch-pad.examples/popup/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"-_autoclosable-\">Автоматическое скрытие <code>_autoclosable</code></h3>\n<p>Модификатор отвечает за автоматическое скрытие попапа при клике вне блока. При установке модификатора <code>_autoclosable</code> в значении <code>_true</code> блок будет скрываться при щелчке за его пределами (будет снят модификатор <code>_visible</code>).</p>\n<!-- bem-example: touch-pad.examples/popup/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"-popup-\">Взаимосвязи между popup&#39;ами</h2>\n<p>Так как попап выносит себя в конец <code>&lt;body&gt;</code>, чтобы перекрывать другие элементы страницы, возникает необходимость в построении взаимосвязей. Блок умеет выстраивать связи Parent → [ Child, Child, ... ]. Для этого он выполняет проверку, вложен ли блок, вызывающий попап в другой <code>popup</code>. Потомки знают о наличии родителя.\nЕсли бы этих взаимосвязей не было, то родительский попап (при наличии модификатора <code>autoclosable</code> со значением <code>true</code>) закрылся бы при клике внутри дочернего.</p>\n<p>Другими словами модификатор <code>autoclosable</code> со значением <code>true</code> означает, что попап закроется сам и закроет свои дочерние блоки при клике за пределами его самого и дочерних попапов.</p>\n<p>Дочерние блоки popup можно рассматривать в виде цепочки 1 → 2 → 3 → 4. При клике на втором попапе – закрываются третий и четвертый. При клике в первом – закрываются второй, третий, четвертый. При клике за пределами любого попапа из цепочки – закроются все.</p>\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>popup</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "popup",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/popup/destruct"
                                },
                                {
                                    "url": "touch-pad.tests/popup/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/popup/horiz-scroll"
                                },
                                {
                                    "url": "touch-pad.tests/popup/nested"
                                },
                                {
                                    "url": "touch-pad.tests/popup/simple"
                                },
                                {
                                    "url": "touch-pad.tests/popup/vert-scroll"
                                }
                            ],
                            "description": "<h1 id=\"popup\">popup</h1>\n<p>A <code>popup</code> block is used for popups creation. It allows to manage state, behavior and appearance of popups. Block is displayed in front of all other page elements.</p>\n<p>Popup can be displayed by different page elements like pseudo links or buttons.</p>\n<p>At the moment of first display (<code>_visible</code> modifier toggle) block&#39;s DOM element is created in the end of document <code>&lt;body&gt;</code>.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to block.</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/popup/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/popup/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/popup/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n<h3 id=\"visibility-_visible-\">Visibility <code>_visible</code></h3>\n<p>A <code>_visible</code> modifier allow to control block visibility. If it&#39;s not set, block will not be displayed.</p>\n<!-- bem-example: touch-pad.examples/popup/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"alignment-respect-to-its-parent-_direction-\">Alignment respect to its parent <code>_direction</code></h3>\n<p>Modifier controls the position of popup window relative to the block which opened it – popup&#39;s alignment. Popup window&#39;s position is detected automatically basing on the admissible directions array and the parent block&#39;s position.</p>\n<p>Chosen alignment will affect the opening animation direction.</p>\n<p>By default following admissible directions array is used:</p>\n<table>\n    <tr>\n        <th> Direction </td>\n        <th> Index in array </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>To control the popup window position you can provide directions array with desired directions set only. According to parent block&#39;s position on a page the most suitable directions will be chosen among the provided values.</p>\n<p>For example, if the popup window should be opened at the top of the parent block:</p>\n<!-- bem-example: touch-pad.examples/popup/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Or if it should be opened strictly at the center-right position:</p>\n<!-- bem-example: touch-pad.examples/popup/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"automatic-closure-_autoclosable-\">Automatic closure  <code>_autoclosable</code></h3>\n<p>With <code>_autoclosable</code> modifier toggled block will automatically hide away on mouse click outside popup window (<code>_visible</code> modifier will be removed).</p>\n<!-- bem-example: touch-pad.examples/popup/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"relations-between-popup-s\">Relations between popup&#39;s</h2>\n<p>As long as popup&#39;s parent block itself can be nested in another popup block there is a need in a popup&#39;s relations handling. Block can handle Parent → [ Child, Child, ... ] relations by checking if the parent block is nested in another popup block. So, the children knows about the parent blocks existence.</p>\n<p>If there were no such relations, the parent popup block will be closed on mouse click on the child block regardless of the fact that <code>_autoclosable</code> modifier is set to <code>true</code>.</p>\n<p>This means that with <code>autoclosable</code> modifier toggled block will close itself and close all of it children on mouse click outside block&#39;s window or it child&#39;s window.</p>\n<p>Child popup blocks can be regarded as a chain of 1 → 2 → 3 → 4. By clicking on the second element of chain, third and forth will be closed. By clicking on first, the second, third and forth will be closed. On click outside of any popup window of the chain element all popups will be closed.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup-block\">popup Block</h2>\n<h3 id=\"block-parameters-\">Block parameters:</h3>\n<ul>\n<li>[mainOffset=0] {Number}<br/>\noffset along the main direction</li>\n<li>[secondaryOffset=0] {Number}<br/>\noffset along the secondary direction</li>\n<li>[viewportOffset=0] {Number}<br/>\noffset from the viewport (window)</li>\n<li>[directions] {[object Object]}<br/>\nallowed directions</li>\n</ul>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n"
                },
                {
                    "name": "radio",
                    "data": {
                        "ru": {
                            "name": "radio",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/radio-group/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/radio-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"radio\">radio</h1>\n<p>Блок <code>radio</code> – «радиопереключатель», «радиокнопка». Используется для создания одиночных радиобоксов.</p>\n<p>В реализации блока используется функциональность нативного контрола <code>input</code> с атрибутом <code>type=&quot;radio&quot;</code> – <code>&lt;input name=&quot;name&quot; type=&quot;radio&quot;&gt;</code>, который скрывается при использовании модификатора <code>theme</code>.</p>\n<p>В результате применения шаблонов блок <code>radio</code> отображается на странице как HTML-тег <code>&lt;label&gt;</code> – контейнер, содержащий:</p>\n<ul>\n<li>элемент <code>radio__box</code>, содержащий скрытый контрол <code>input</code> (элемент <code>__control</code>);</li>\n<li>подпись к радиокнопке, если задан BEMJSON-параметр <code>text</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON-блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td><code>name</code></td>\n        <td><code>String|Number</code></td>\n        <td>Имя радиокнопки. Преобразуется в HTML-атрибут <code>name</code> вложенного блока <code>input</code>.</td>\n    </tr>\n    <tr>\n        <td><code>text</code></td>\n        <td><code>String|Number</code></td>\n        <td>Подпись, отображаемая для радиокнопки.</td>\n    </tr>\n    <tr>\n        <td><code>val</code></td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое контролом радиопереключателя <code>radio__control</code>, если выбрана текущая радиокнопка. Преобразуется в HTML-атрибут <code>value</code> вложенного блока <code>input</code>.</td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-theme-\">Темы <code>theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/radio/xr-zTTUYS3DD_e4xJV6Yn3a3BPI -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/radio/pPPjX0UcGCQBYmUNCpE27JADBCU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/radio/L98T9NertqtVCJpvDLdlKg6huWI -->\n\n<h3 id=\"-size-\">Размеры радиопереключателя <code>size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам радиопереключателей.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>В зависимости от значения модификатора <code>type</code> доступны следующие размеры реализации блока:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Обычный радиопереключатель</th>\n        <th>Кнопочный радиопереключатель (<code>radio_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<h3 id=\"-type-\">Тип радиопереключателя <code>type</code></h3>\n<p>Модификатор <code>type</code> со значением <code>button</code> используется для создания кнопочного радиопереключателя – кнопки (блок <code>button</code>) с установленным модификатором <code>button_togglable_radio</code>.</p>\n<p>При этом к блоку <code>button</code> примешивается блок <code>radio</code>, а контентом кнопки становится <code>radio__control</code>.</p>\n<p>Кроме того, при установленном модификаторе <code>radio_type_button</code> для блока задается HTML-атрибут <code>role=&quot;button&quot;</code>.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычный радиопереключатель</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Кнопочный радиопереключатель</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;,\n        type : &#39;button&#39;\n    },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-disabled-\">Неактивен <code>disabled</code></h3>\n<p>В состоянии «неактивен» радиопереключатель отображается, но недоступен для действий пользователя.</p>\n<p>Такой радиопереключатель не будет получать фокус (модификатор <code>focused</code>).</p>\n<p>При установке модификатора <code>disabled</code> для радиопереключателя не будут:</p>\n<ul>\n<li>устанавливаться модификаторы состояния <code>hovered</code>, <code>pressed</code> и <code>focused</code>;</li>\n<li>изменяться значение модификатора <code>checked</code>.</li>\n</ul>\n<!-- bem-example: touch-pad.examples/radio/RBPWsSDN_yrB6HXtmtrnXB3WSMY -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-focused-\">В фокусе <code>focused</code></h4>\n<p>Модификатор <code>focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<!-- bem-example: touch-pad.examples/radio/wEYcA7ioT134yNzBSljZyhtiyg8 -->\n\n<h4 id=\"-checked-\">Выбран <code>checked</code></h4>\n<p>Модификатор <code>checked</code> указывает на то, что радиопереключатель выбран (отмечен).</p>\n<p>Модификатор устанавливается по:</p>\n<ul>\n<li>щелчку мыши по блоку (при повторных щелчках модификатор сохраняется);</li>\n<li>нажатию клавиш <code>Enter</code> или <code>Space</code> (возможность использования клавиши <code>Enter</code> зависит от браузера), если радиопереключатель находится в фокусе (модификатор <code>focused</code>);</li>\n<li>нажатию клавиш стрелок, если фокус установлен на соседний радиопереключатель в радиогруппе или в блоке, содержащем несколько блоков <code>radio</code>.</li>\n</ul>\n<!-- bem-example: touch-pad.examples/radio/TLM9QTv-Pjlfq-MNpduxyTgw0cg -->\n\n<h4 id=\"-radio_type_button-\">Состояния, доступные с модификатором <code>radio_type_button</code></h4>\n<p>При установленном модификаторе <code>radio_type_button</code> к блоку <code>button</code> примешивается блок <code>radio</code>. Как следствие, для блока с модификатором <code>radio_type_button</code> доступны состояния блока <code>button</code>:</p>\n<ul>\n<li><code>hovered</code> – под курсором;</li>\n<li><code>pressed</code> – кнопка нажата.</li>\n</ul>\n<h2 id=\"-\">Элементы</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>Элемент <code>__box</code> используется в стандартной реализации блока как контейнер, содержащий контрол радиокнопки (элемент <code>__control</code>). В результате BEMHTML-преобразований становится HTML-элементом <code>&lt;span&gt;</code>.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p>Элемент <code>__control</code> – контрол радиокнопки. В результате BEMHTML-преобразований становится HTML-элементом <code>&lt;input&gt;</code> с атрибутом <code>type=&quot;radio&quot;</code>. По умолчанию элемент скрыт. В блоке используется только его функциональность.</p>\n<h2 id=\"-\">Зависимости</h2>\n<p>Блок <code>radio</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>control</code></li>\n<li><code>jquery__event</code></li>\n<li><code>__box</code></li>\n<li><code>__control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "radio",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/radio-group/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/radio-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"radio\">radio</h1>\n<p>A <code>radio</code> block is used for creating of a single radio switch. A switch can be represented by the radio switch or by the button. The <code>radio</code> block allows to manage state, content and type of a radio switches.</p>\n<p>The <code>radio</code> blocks are used inside a <code>radio-group</code> block as a group elements.</p>\n<p>As a result of block&#39;s template application, it will be rendered to a <code>&lt;label&gt;</code> HTML element, with following set of nested items:</p>\n<ul>\n<li>a <code>radio__box</code> element with hidden nested <code>input</code> HTML element (a <code>__control</code> element);</li>\n<li>a radio switch label, if the <code>text</code> BEMJSON attribute is passed.</li>\n</ul>\n<p>Block&#39;s implementation use the logic of a native <code>input</code> HTML element with set <code>radio</code> control type: <code>&lt;input name=&quot;name&quot; type=&quot;radio&quot;&gt;</code>. If a <code>theme</code> modifier is set, the <code>input</code> element is hidden by default.</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td><code>name</code></td>\n        <td><code>String|Number</code></td>\n        <td>Radio switch name. Renders to a nested <code>input</code> block&#39;s <code>name</code> HTML attribute.</td>\n    </tr>\n    <tr>\n        <td><code>text</code></td>\n        <td><code>String|Number</code></td>\n        <td>A label for the radio switch.</td>\n    </tr>\n    <tr>\n        <td><code>val</code></td>\n        <td><code>String|Number</code></td>\n        <td>A value which the selected radio switch will return. Renders to a nested <code>input</code> block&#39;s <code>value</code> HTML attribute.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-theme-\">The themes <code>theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/radio/xr-zTTUYS3DD_e4xJV6Yn3a3BPI -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/radio/pPPjX0UcGCQBYmUNCpE27JADBCU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/radio/L98T9NertqtVCJpvDLdlKg6huWI -->\n\n<h3 id=\"the-sizes-size-\">The sizes <code>size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides all types of radio switches with the size value.</p>\n<p>The set of available sizes depends on a <code>type</code> modifier&#39;s value. Following sizes are available:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Default radio switch</th>\n        <th>Button radio switch (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n<h3 id=\"radio-switch-type-type-\">Radio switch type <code>type</code></h3>\n<p>A <code>type</code> modifier can be set to a <code>button</code> state for creating a button radio switch – the <code>button</code> block with a <code>button_togglable_radio</code> modifier set.</p>\n<p>The <code>radio</code> block is mixed up to the <code>button</code> block with nested <code>radio__control</code> element.</p>\n<p>In addition a <code>role=&quot;button&quot;</code> HTML attribute is set for the block.</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Default radio switch</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Button radio switch</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;,\n        type : &#39;button&#39;\n    },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"inactive-disabled-\">Inactive <code>disabled</code></h4>\n<p>A <code>disabled</code> modifier is used for an inactive radio switch creation. An inactive radio switch is displayed but not available for user actions.  </p>\n<p>Inactive radio switch will not obtain focus (a <code>focused</code> modifier toggle) on mouse click or by <code>Tab</code> key press.</p>\n<p>For such a inactive block will not be performed:</p>\n<ul>\n<li><code>hovered</code>, <code>pressed</code> and <code>focused</code> state modifier toggling;</li>\n<li><code>checked</code> modifier value changing.</li>\n</ul>\n<!-- bem-example: touch-pad.examples/radio/RBPWsSDN_yrB6HXtmtrnXB3WSMY -->\n\n\n<h4 id=\"in-focus-focused-\">In focus <code>focused</code></h4>\n<p>A <code>focused</code> modifier is automatically toggled to the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/radio/wEYcA7ioT134yNzBSljZyhtiyg8 -->\n\n\n<h4 id=\"selected-radio-switch-checked-\">Selected radio switch <code>checked</code></h4>\n<p>Modifier defines the selected radio switch.</p>\n<p>The modifier is toggling on:</p>\n<ul>\n<li>mouse click (on re-clicking modifier state remains);</li>\n<li><code>Enter</code> and <code>Space</code> key press (an option of <code>Enter</code> usage depends on a browser), if radio switch is in focus (a <code>focused</code> modifier is toggled);</li>\n<li>arrow key press, if one of the neighbour <code>radio</code> switches is in focus. Neighbour switch can be either a part of the same radio group or independent switch nested in the same block.</li>\n</ul>\n<!-- bem-example: touch-pad.examples/radio/yLi2X_E9s0cnYS8x7h0IvQ3Jmhw -->\n\n\n<h4 id=\"states-available-with-a-radio_type_button-modifier\">States available with a <code>radio_type_button</code> modifier</h4>\n<p>If a <code>radio_type_button</code> modifier is set, a <code>radio</code> block is mixed up to a <code>button</code> block. As a result, for the <code>radio</code> block with the <code>radio_type_button</code> modifier are available following <code>button</code> block&#39;s states:</p>\n<ul>\n<li><code>hovered</code> – mouse pointer over the block;</li>\n<li><code>pressed</code> – button is pressed.</li>\n</ul>\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>A <code>__box</code> element is used in basic block&#39;s implementation as a container with nested control element (a <code>__control</code> element). It renders to a <code>&lt;span&gt;</code> HTML element.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p>A <code>__control</code> element is a radio switch controller. It renders to an <code>&lt;input&gt;</code> HTML element with the <code>type=&quot;radio&quot;</code> attribute is set. In all block themes it is hidden by default. Block uses only the control&#39;s logic.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>control</code></li>\n<li><code>jquery__event</code></li>\n<li><code>__box</code></li>\n<li><code>__control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"radio-module\">radio Module</h1>\n<h2 id=\"radio-block\">radio Block</h2>\n<p>Aughtments {control}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "radio-group",
                    "data": {
                        "ru": {
                            "name": "radio-group",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/radio-group/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/radio-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"radio-group\">radio-group</h1>\n<p>Блок <code>radio-group</code> – «радиогруппа», состоящая из набора зависимых переключателей «радиокнопок» (блоков <code>radio</code>). Радиогруппа используется для выбора единственного варианта из списка. </p>\n<p>Блок <code>radio-group</code> в результате BEMHTML-преобразований на странице становится HTML-элементом с тегом <code>&lt;span&gt;</code> – контейнером, содержащим группу переключателей (радиокнопок).</p>\n<h2 id=\"-\">Допустимые параметры блока</h2>\n<p>Допустимые параметры блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td><code>String</code></td>\n        <td>Имя радиогруппы. Преобразуется в HTML-атрибут <code>name</code> вложенного блока <code>input</code>.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td><code>Array</code></td>\n        <td>Массив хешей. Каждый хеш соответствует одному переключателю и содержит набор его параметров. </td>\n    </tr><br></table>\n\n<p>Среди параметров, передаваемых в атрибуте <code>option</code> для переключателя, обязательными являются:</p>\n<ul>\n<li><code>val</code> (<code>String</code> | <code>Number</code>) – значение, возвращаемое выбранным переключателем (элементом <code>radio__control</code>);</li>\n<li><code>text</code> (<code>String</code>) – подпись, отображаемая для текущего переключателя. </li>\n</ul>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-theme-\">Темы блока <code>theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером. </p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/radio-group/7DyHwAbpYHpT5TcturqqL57OMbA -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/radio-group/3eOE97EmaqvVB-6XycKG7cpGY5Y -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/radio-group/3iTePRGPbj1_dKvtQGd2bMai-Ac -->\n\n\n\n<h3 id=\"-size-\">Размеры переключателей группы <code>size</code></h3>\n<p>Задает размер переключателей для всех типов радиогрупп. Обязательный модификатор. </p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>В зависимости от значения модификатора <code>type</code> доступны следующие размеры реализации блока:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Обычная радиогруппа</th>\n        <th>Кнопочная радиогруппа (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<p>Размеры на примере темы <em>normal</em> с модификатором <code>radio-group_type_button</code>:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;s&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-S&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-M&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-L&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;xl&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-XL&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-type-\">Тип радиогруппы <code>type</code></h3>\n<p>Модификатор <code>type</code> может иметь следующие значения:</p>\n<ul>\n<li><code>button</code>. Используется для создания кнопочной радиогруппы – блока кнопок-переключателей;</li>\n<li><code>line</code>. Используется для создания радиогруппы с выравниванием в строку. После каждого переключателя группы кроме последнего автоматически добавляется отступ справа. Размер отступа зависит от значения модификатора <code>size</code>. Реализован только в теме <em>normal</em>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычная радиогруппа</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Кнопочная радиогруппа</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Строчная радиогруппа (<code>_type_line</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;line&#39; \n    },\n    name : &#39;radio-line&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h3 id=\"-disabled-\">Неактивна <code>disabled</code></h3>\n<p>В состоянии &quot;неактивна&quot; радиогруппа отображается, но недоступна для действий пользователя.  </p>\n<p>Такая радиогруппа не будет получать фокус (модификатор <code>focused</code>).</p>\n<p>При установке модификатора <code>disabled</code> для радиогруппы всем ее переключателям также устанавливается модификатор <code>disabled</code>. Как следствие для них не будут:</p>\n<ul>\n<li>устанавливаться модификаторы состояния <code>hovered</code>, <code>pressed</code> и <code>focused</code>;</li>\n<li>изменяться значения модификатора <code>checked</code>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/radio-group/z74-X9bjA8-9fMUlFI8AH9R8Dfo -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-focused-\">В фокусе <code>focused</code></h4>\n<p>Модификатор <code>focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда один из его элементов находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/radio-group/8YPfPGsfRbco7RPs63oF47Bj5d8 -->\n\n<h2 id=\"-\">Зависимости блока</h2>\n<p>Блок <code>radio-group</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>radio</code></li>\n<li><code>jquery</code></li>\n<li><code>radio-group_type_button</code> (у которого в зависимостях есть блок <code>button</code>)</li>\n</ul>\n\n<h1 id=\"radio\">radio</h1>\n<p>Блок <code>radio</code> – «радиопереключатель», «радиокнопка». Используется для создания одиночных радиобоксов.</p>\n<p>В реализации блока используется функциональность нативного контрола <code>input</code> с атрибутом <code>type=&quot;radio&quot;</code> – <code>&lt;input name=&quot;name&quot; type=&quot;radio&quot;&gt;</code>, который скрывается при использовании модификатора <code>theme</code>.</p>\n<p>В результате применения шаблонов блок <code>radio</code> отображается на странице как HTML-тег <code>&lt;label&gt;</code> – контейнер, содержащий:</p>\n<ul>\n<li>элемент <code>radio__box</code>, содержащий скрытый контрол <code>input</code> (элемент <code>__control</code>);</li>\n<li>подпись к радиокнопке, если задан BEMJSON-параметр <code>text</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON-блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td><code>name</code></td>\n        <td><code>String|Number</code></td>\n        <td>Имя радиокнопки. Преобразуется в HTML-атрибут <code>name</code> вложенного блока <code>input</code>.</td>\n    </tr>\n    <tr>\n        <td><code>text</code></td>\n        <td><code>String|Number</code></td>\n        <td>Подпись, отображаемая для радиокнопки.</td>\n    </tr>\n    <tr>\n        <td><code>val</code></td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое контролом радиопереключателя <code>radio__control</code>, если выбрана текущая радиокнопка. Преобразуется в HTML-атрибут <code>value</code> вложенного блока <code>input</code>.</td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-theme-\">Темы <code>theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/radio-group/xr-zTTUYS3DD_e4xJV6Yn3a3BPI -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/radio-group/pPPjX0UcGCQBYmUNCpE27JADBCU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/radio-group/L98T9NertqtVCJpvDLdlKg6huWI -->\n\n<h3 id=\"-size-\">Размеры радиопереключателя <code>size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам радиопереключателей.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>В зависимости от значения модификатора <code>type</code> доступны следующие размеры реализации блока:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Обычный радиопереключатель</th>\n        <th>Кнопочный радиопереключатель (<code>radio_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<h3 id=\"-type-\">Тип радиопереключателя <code>type</code></h3>\n<p>Модификатор <code>type</code> со значением <code>button</code> используется для создания кнопочного радиопереключателя – кнопки (блок <code>button</code>) с установленным модификатором <code>button_togglable_radio</code>.</p>\n<p>При этом к блоку <code>button</code> примешивается блок <code>radio</code>, а контентом кнопки становится <code>radio__control</code>.</p>\n<p>Кроме того, при установленном модификаторе <code>radio_type_button</code> для блока задается HTML-атрибут <code>role=&quot;button&quot;</code>.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычный радиопереключатель</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Кнопочный радиопереключатель</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;,\n        type : &#39;button&#39;\n    },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-disabled-\">Неактивен <code>disabled</code></h3>\n<p>В состоянии «неактивен» радиопереключатель отображается, но недоступен для действий пользователя.</p>\n<p>Такой радиопереключатель не будет получать фокус (модификатор <code>focused</code>).</p>\n<p>При установке модификатора <code>disabled</code> для радиопереключателя не будут:</p>\n<ul>\n<li>устанавливаться модификаторы состояния <code>hovered</code>, <code>pressed</code> и <code>focused</code>;</li>\n<li>изменяться значение модификатора <code>checked</code>.</li>\n</ul>\n<!-- bem-example: touch-pad.examples/radio-group/RBPWsSDN_yrB6HXtmtrnXB3WSMY -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-focused-\">В фокусе <code>focused</code></h4>\n<p>Модификатор <code>focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<!-- bem-example: touch-pad.examples/radio-group/wEYcA7ioT134yNzBSljZyhtiyg8 -->\n\n<h4 id=\"-checked-\">Выбран <code>checked</code></h4>\n<p>Модификатор <code>checked</code> указывает на то, что радиопереключатель выбран (отмечен).</p>\n<p>Модификатор устанавливается по:</p>\n<ul>\n<li>щелчку мыши по блоку (при повторных щелчках модификатор сохраняется);</li>\n<li>нажатию клавиш <code>Enter</code> или <code>Space</code> (возможность использования клавиши <code>Enter</code> зависит от браузера), если радиопереключатель находится в фокусе (модификатор <code>focused</code>);</li>\n<li>нажатию клавиш стрелок, если фокус установлен на соседний радиопереключатель в радиогруппе или в блоке, содержащем несколько блоков <code>radio</code>.</li>\n</ul>\n<!-- bem-example: touch-pad.examples/radio-group/TLM9QTv-Pjlfq-MNpduxyTgw0cg -->\n\n<h4 id=\"-radio_type_button-\">Состояния, доступные с модификатором <code>radio_type_button</code></h4>\n<p>При установленном модификаторе <code>radio_type_button</code> к блоку <code>button</code> примешивается блок <code>radio</code>. Как следствие, для блока с модификатором <code>radio_type_button</code> доступны состояния блока <code>button</code>:</p>\n<ul>\n<li><code>hovered</code> – под курсором;</li>\n<li><code>pressed</code> – кнопка нажата.</li>\n</ul>\n<h2 id=\"-\">Элементы</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>Элемент <code>__box</code> используется в стандартной реализации блока как контейнер, содержащий контрол радиокнопки (элемент <code>__control</code>). В результате BEMHTML-преобразований становится HTML-элементом <code>&lt;span&gt;</code>.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p>Элемент <code>__control</code> – контрол радиокнопки. В результате BEMHTML-преобразований становится HTML-элементом <code>&lt;input&gt;</code> с атрибутом <code>type=&quot;radio&quot;</code>. По умолчанию элемент скрыт. В блоке используется только его функциональность.</p>\n<h2 id=\"-\">Зависимости</h2>\n<p>Блок <code>radio</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>control</code></li>\n<li><code>jquery__event</code></li>\n<li><code>__box</code></li>\n<li><code>__control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "radio-group",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/radio-group/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/radio-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"radio-group\">radio-group</h1>\n<p>A <code>radio-group</code> block is a set of dependent switches – radio buttons (a <code>radio</code> block). It is used for a single option selection from the list of options. </p>\n<p>On a web page, a <code>radio-group</code> block will be rendered to a <code>&lt;span&gt;</code> HTML element, with nested set of a switches (radio buttons).</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td><code>String</code></td>\n        <td>Radio button group&#39;s name. Renders to the nested <code>input</code> block&#39;s <code>name</code> HTML attribute.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td><code>Array</code></td>\n        <td>Option objects array. Each object in the array are corresponds to one switch and contains it&#39;s attributes set.</td>\n    </tr><br></table>\n\n<p>Among the attributes passing to an <code>option</code> field for the switch the following are mandatory:</p>\n<ul>\n<li><code>val</code> (<code>String</code> | <code>Number</code>) – value returned by selected switcher (a &#39;radio__control&#39; element);</li>\n<li><code>text</code> (<code>String</code>) – a text label for the current switch.</li>\n</ul>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-theme-\">The themes <code>theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/radio-group/7DyHwAbpYHpT5TcturqqL57OMbA -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/radio-group/3eOE97EmaqvVB-6XycKG7cpGY5Y -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/radio-group/3iTePRGPbj1_dKvtQGd2bMai-Ac -->\n\n\n<h3 id=\"the-sizes-size-\">The sizes <code>size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides the size value to all types of radio groups.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Depending on a <code>type</code> modifier value following sizes are available:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Normal radio group</th>\n        <th>Button radio group (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<p>Here are some examples with <em>normal</em> theme and and with set <code>radio-group_type_button</code> modifier:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;s&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-S&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-M&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-L&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;xl&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-XL&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"radio-group-type-type-\">Radio group type <code>type</code></h3>\n<p>A <code>type</code> modifier can have following values:</p>\n<ul>\n<li><code>button</code>. It is used for creation of a button radio group – a block of button switcher;</li>\n<li><code>line</code>. Is used for a line-aligned radio group creation. Right gap is automatically added after each switch of the group except the last one. Available only for <em>normal</em> theme.</li>\n</ul>\n<table>\n    <tr>\n        <th>Type</th>\n\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Normal radio group</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Button radio group</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Line-aligned radio group (<code>_type_line</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;line&#39; \n    },\n    name : &#39;radio-line&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h3 id=\"inactive-disabled-\">Inactive <code>disabled</code></h3>\n<p>A <code>radio-group_disabled</code> modifier is used for an inactive radio group creation. An inactive group is displayed but not available for user actions.  </p>\n<p>Such a group will not obtain focus (<code>radio-group_focused</code> modifier will not be toggled).</p>\n<p>When a <code>disabled</code> modifier is set to the group all it&#39;s switches will also be disabled. As a result, for the group&#39;s switches will not be performed:</p>\n<ul>\n<li>state modifiers <code>hovered</code>, <code>pressed</code> and <code>focused</code> toggling;</li>\n<li>switching between <code>checked</code> modifier&#39;s values.</li>\n</ul>\n<p>Modifier is available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/radio-group/z74-X9bjA8-9fMUlFI8AH9R8Dfo -->\n\n\n<h3 id=\"radio-group-s-states\">Radio group&#39;s states</h3>\n<h4 id=\"-focused-\"><code>focused</code></h4>\n<p>A <code>radio-group_focused</code> modifier is automaticly toggles when one of the block elements is in focus. For example, on mouse click or by <code>Tab</code> key press. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/radio-group/8YPfPGsfRbco7RPs63oF47Bj5d8 -->\n\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>radio</code></li>\n<li><code>jquery</code></li>\n<li><code>radio-group_type_button</code> (which is depends on <code>button</code> block)</li>\n</ul>\n\n<h1 id=\"radio\">radio</h1>\n<p>A <code>radio</code> block is used for creating of a single radio switch. A switch can be represented by the radio switch or by the button. The <code>radio</code> block allows to manage state, content and type of a radio switches.</p>\n<p>The <code>radio</code> blocks are used inside a <code>radio-group</code> block as a group elements.</p>\n<p>As a result of block&#39;s template application, it will be rendered to a <code>&lt;label&gt;</code> HTML element, with following set of nested items:</p>\n<ul>\n<li>a <code>radio__box</code> element with hidden nested <code>input</code> HTML element (a <code>__control</code> element);</li>\n<li>a radio switch label, if the <code>text</code> BEMJSON attribute is passed.</li>\n</ul>\n<p>Block&#39;s implementation use the logic of a native <code>input</code> HTML element with set <code>radio</code> control type: <code>&lt;input name=&quot;name&quot; type=&quot;radio&quot;&gt;</code>. If a <code>theme</code> modifier is set, the <code>input</code> element is hidden by default.</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td><code>name</code></td>\n        <td><code>String|Number</code></td>\n        <td>Radio switch name. Renders to a nested <code>input</code> block&#39;s <code>name</code> HTML attribute.</td>\n    </tr>\n    <tr>\n        <td><code>text</code></td>\n        <td><code>String|Number</code></td>\n        <td>A label for the radio switch.</td>\n    </tr>\n    <tr>\n        <td><code>val</code></td>\n        <td><code>String|Number</code></td>\n        <td>A value which the selected radio switch will return. Renders to a nested <code>input</code> block&#39;s <code>value</code> HTML attribute.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-theme-\">The themes <code>theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/radio-group/xr-zTTUYS3DD_e4xJV6Yn3a3BPI -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/radio-group/pPPjX0UcGCQBYmUNCpE27JADBCU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/radio-group/L98T9NertqtVCJpvDLdlKg6huWI -->\n\n<h3 id=\"the-sizes-size-\">The sizes <code>size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides all types of radio switches with the size value.</p>\n<p>The set of available sizes depends on a <code>type</code> modifier&#39;s value. Following sizes are available:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Default radio switch</th>\n        <th>Button radio switch (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n<h3 id=\"radio-switch-type-type-\">Radio switch type <code>type</code></h3>\n<p>A <code>type</code> modifier can be set to a <code>button</code> state for creating a button radio switch – the <code>button</code> block with a <code>button_togglable_radio</code> modifier set.</p>\n<p>The <code>radio</code> block is mixed up to the <code>button</code> block with nested <code>radio__control</code> element.</p>\n<p>In addition a <code>role=&quot;button&quot;</code> HTML attribute is set for the block.</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Default radio switch</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Button radio switch</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;,\n        type : &#39;button&#39;\n    },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"inactive-disabled-\">Inactive <code>disabled</code></h4>\n<p>A <code>disabled</code> modifier is used for an inactive radio switch creation. An inactive radio switch is displayed but not available for user actions.  </p>\n<p>Inactive radio switch will not obtain focus (a <code>focused</code> modifier toggle) on mouse click or by <code>Tab</code> key press.</p>\n<p>For such a inactive block will not be performed:</p>\n<ul>\n<li><code>hovered</code>, <code>pressed</code> and <code>focused</code> state modifier toggling;</li>\n<li><code>checked</code> modifier value changing.</li>\n</ul>\n<!-- bem-example: touch-pad.examples/radio-group/RBPWsSDN_yrB6HXtmtrnXB3WSMY -->\n\n\n<h4 id=\"in-focus-focused-\">In focus <code>focused</code></h4>\n<p>A <code>focused</code> modifier is automatically toggled to the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/radio-group/wEYcA7ioT134yNzBSljZyhtiyg8 -->\n\n\n<h4 id=\"selected-radio-switch-checked-\">Selected radio switch <code>checked</code></h4>\n<p>Modifier defines the selected radio switch.</p>\n<p>The modifier is toggling on:</p>\n<ul>\n<li>mouse click (on re-clicking modifier state remains);</li>\n<li><code>Enter</code> and <code>Space</code> key press (an option of <code>Enter</code> usage depends on a browser), if radio switch is in focus (a <code>focused</code> modifier is toggled);</li>\n<li>arrow key press, if one of the neighbour <code>radio</code> switches is in focus. Neighbour switch can be either a part of the same radio group or independent switch nested in the same block.</li>\n</ul>\n<!-- bem-example: touch-pad.examples/radio-group/yLi2X_E9s0cnYS8x7h0IvQ3Jmhw -->\n\n\n<h4 id=\"states-available-with-a-radio_type_button-modifier\">States available with a <code>radio_type_button</code> modifier</h4>\n<p>If a <code>radio_type_button</code> modifier is set, a <code>radio</code> block is mixed up to a <code>button</code> block. As a result, for the <code>radio</code> block with the <code>radio_type_button</code> modifier are available following <code>button</code> block&#39;s states:</p>\n<ul>\n<li><code>hovered</code> – mouse pointer over the block;</li>\n<li><code>pressed</code> – button is pressed.</li>\n</ul>\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>A <code>__box</code> element is used in basic block&#39;s implementation as a container with nested control element (a <code>__control</code> element). It renders to a <code>&lt;span&gt;</code> HTML element.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p>A <code>__control</code> element is a radio switch controller. It renders to an <code>&lt;input&gt;</code> HTML element with the <code>type=&quot;radio&quot;</code> attribute is set. In all block themes it is hidden by default. Block uses only the control&#39;s logic.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>control</code></li>\n<li><code>jquery__event</code></li>\n<li><code>__box</code></li>\n<li><code>__control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"radio-group-module\">radio-group Module</h1>\n<h2 id=\"radio-group-block\">radio-group Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"setval-val-data-radio-group-\">setVal ( val, [data] ) → {radio-group}</h4>\n<p>Sets control value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {String}<br/>\nvalue</li>\n<li>[data] {Object}<br/>\nadditional data</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{radio-group}</p>\n<p>this</p>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getradios-radio-\">getRadios () → {radio}</h4>\n<p>Returns options</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{radio}</p>\n<h1 id=\"radio-module\">radio Module</h1>\n<h2 id=\"radio-block\">radio Block</h2>\n<p>Aughtments {control}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "select",
                    "jsdoc": "<h1 id=\"select-module\">select Module</h1>\n<h2 id=\"select-block\">select Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getval-\">getVal () → {*}</h4>\n<p>Get value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{*}</p>\n<h4 id=\"setval-val-select-\">setVal ( val ) → {select}</h4>\n<p>Set value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {*}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{select}</p>\n<p>this</p>\n<h1 id=\"button-module\">button Module</h1>\n<h2 id=\"button-block\">button Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns text of the button</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"settext-text-button-\">setText ( text ) → {button}</h4>\n<p>Sets text to the button</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>text {String}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{button}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"menu-module\">menu Module</h1>\n<h2 id=\"menu-block\">menu Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getitems-menu-item-\">getItems () → {menu-item}</h4>\n<p>Returns items</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{menu-item}</p>\n<h4 id=\"setcontent-content-menu-\">setContent ( content ) → {menu}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{menu}</p>\n<p>this</p>\n<h1 id=\"menu-item-module\">menu-item Module</h1>\n<h2 id=\"menu-item-block\">menu-item Block</h2>\n<h3 id=\"block-parameters-\">Block parameters:</h3>\n<ul>\n<li>val {*}<br/>\nValue of item</li>\n</ul>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"isvaleq-val-boolean-\">isValEq ( val ) → {Boolean}</h4>\n<p>Checks whether given value is equal to current value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {*}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getval-\">getVal () → {*}</h4>\n<p>Returns item value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{*}</p>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns item text</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup_autoclosable_true\">popup_autoclosable_true</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup_autoclosable_true\">popup_autoclosable_true</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n",
                    "data": {
                        "ru": {
                            "name": "select",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/select/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/select/simple"
                                }
                            ],
                            "description": "<h1 id=\"select\">select</h1>\n<p>Блок <code>select</code> («селект») – раскрывающийся список выбора. Реализация блока основана на блоках <code>button</code>, <code>popup</code>, <code>menu</code> и <code>menu-item</code>. Визуально представлен кнопкой и выпадающим списком с элементами меню. Щелчок по кнопке раскрывает выпадающий список под или над кнопкой в зависимости от ее положения на странице (<code>{ directions : [&#39;bottom-left&#39;, &#39;bottom-right&#39;, &#39;top-left&#39;, &#39;top-right&#39;] }</code>). Щелчок вне зоны попапа автоматически скрывает его (<code>{ autoclosable : true }</code>).</p>\n<p>Раскрывающийся список имеет всего один уровень вложенности и позволяет выбрать:</p>\n<ul>\n<li>только один элемент из списка (<code>select_mode_radio</code>);</li>\n<li>один, несколько или ни одного элемента из списка (<code>select_mode_check</code>);</li>\n<li>один или ни одного элемента из списка (<code>select_mode_radio-check</code>).</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON-блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя выпадающего списка.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает уникальный идентификатор селекта.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Задает массив пунктов списка. Каждый пункт имеет обязательный атрибут <code>val</code>, реализованный скрытым элементом <code>control</code>.</td>\n    </tr>\n    <tr>\n        <td>textMaxWidth</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Устанавливает максимальную ширину кнопки селекта. Ширина раскрывающегося списка при этом вычисляется в зависимости от ширины пунктов.</td>\n    </tr>\n    <tr>\n        <td>optionsMaxHeight</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Устанавливает максимальную высоту выпадающего списка.<br>Если все пункты списка не вмещаются, появляется скролл.<br> Если значение не указано, высота выпадающего списка по умолчанию будет вычисляться в зависимости от количества пунктов.</td>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение раскрывающегося списка выбора в случае, если ни один из пунктов не отмечен.<br> Применяется только для селектов с установленным модификатором <code>mode</code> в значении <code>check</code> или <code>radio-check</code>.</td>\n    </tr>\n</table>\n\n<p>Другие допустимые атрибуты блока могут задаваться в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Если модификатор темы не указан, отображается кастомная реализация контрола без применения стилей.</p>\n<p>Наглядно показано на примерах ниже:</p>\n<!-- bem-example: touch-pad.examples/select/KnPV22VFNtI4S-O8Wpqq1LxdReY -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/select/Cm3ZrvxjfRMKNGE1uZyeeDtczwo -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/select/walnTtaHw3moIy8I9-6eOB25lMw -->\n\n<h3 id=\"-_mode-\">Типы <code>_mode</code></h3>\n<p>Обязательный модификатор.</p>\n<p>Блок представлен следующими типами:</p>\n<ul>\n<li>селект с множественным выбором, который позволяет оставить список без выбранных элементов (<code>select_mode_check</code>). При щелчке мышью по пункту списка, его состояние меняется на противоположное. Если пункт был активен – он деактивируется, и наоборот.</li>\n</ul>\n<!-- bem-example: touch-pad.examples/select/hpUbeKC_5hYtmemMemDzuUiqED8 -->\n\n<ul>\n<li>меню-переключатель (<code>select_mode_radio</code>). Применяется для создания селектов, позволяющих только одиночный выбор.\nДля этого типа селекта текст в кнопке устанавливается в зависимости от выбранного элемента. Если элемент не выбран, то по умолчанию выбирается первый пункт из списка.</li>\n</ul>\n<!-- bem-example: touch-pad.examples/select/zeJPZbtVz42oYU7GxOeTA7fv-ag -->\n\n<ul>\n<li>селект с одиночным выбором, который позволяет оставить список без выбранных элементов (<code>select_mode_radio-check</code>). При щелчке мышью по пункту списка, его состояние меняется на противоположное. Если пункт был активен – он деактивируется, и наоборот.</li>\n</ul>\n<!-- bem-example: touch-pad.examples/select/ilW6j3BEgfKcwzfrYVtoANn-atA -->\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<h4 id=\"-_width-\">Ширина кнопки селекта <code>_width</code></h4>\n<p>Модификатор <code>width</code> в значении <code>available</code> растягивает кнопку селекта по ширине в зависимости от длины выбранного пункта.</p>\n<!-- bem-example: touch-pad.examples/select/JkxdmzpYd197HKLlAB6yPUU4Vgg -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"-__button-\">Кнопка <code>__button</code></h3>\n<p>Селект визуально представлен кнопкой (элемент <code>button</code>), которая содержит иконку <code>&lt;i&gt;</code>, реализованную блоком <a href=\"../icon/icon.ru.md\">icon</a> с примиксованным элементом <code>tick</code>. Так как иконка является частью кнопки селекта, ее размер устанавливается размером кнопки. Щелчок по кнопке раскрывает список выбора.</p>\n<p>Так как селект реализован с помощью блока <a href=\"../button/button.ru.md\">button</a>, ему можно задавать следующие модификаторы:</p>\n<ul>\n<li><code>theme</code></li>\n<li><code>size</code></li>\n<li><code>focused</code></li>\n<li><code>checked</code></li>\n<li><code>disabled</code></li>\n</ul>\n<h2 id=\"-__control-\">Контрол <code>__control</code></h2>\n<p>Вспомогательный скрытый элемент, который отвечает за формирование элементов списка выбора.</p>\n<h2 id=\"-__menu-\">Меню <code>__menu</code></h2>\n<p>Элемент <code>menu</code> позволяет управлять пунктами списка выбора:</p>\n<ul>\n<li><code>val</code> – значение, возвращаемое пунктом из списка, если он выбран. Обязательный атрибут. Может содержать уникальный идентификатор <code>{ val : { id : 1 } }</code>.</li>\n<li><code>text</code> – название пункта в списке.</li>\n<li><code>checked</code> – присваивается пункту из списка, если он выбран. <code>{ checked : true }</code> – пункт выбран.</li>\n<li><code>checkedText</code> – задает значение, отображаемое в кнопке селекта, для выбранного пункта. Задается только для блока <code>select</code> с модификатором <code>mode</code> в значении <code>check</code>.</li>\n<li><code>icon</code> – графический элемент (иконка)</li>\n</ul>\n<!-- bem-example: touch-pad.examples/select/TUaceOlKTkiAy0Ojt7LQba4Yc_A -->\n\n<p>Элементы списка могут быть объединены в группы. Для группировки пунктов выбора служит элемент <code>group</code>, в который вкладываются необходимые элементы списка. Название группы задается через атрибут <code>title</code>.</p>\n<!-- bem-example: touch-pad.examples/select/CAWbbXgQYp4XtKAtpvG9UGnGOFU -->\n\n<h1 id=\"button\">button</h1>\n<p>Блок <code>button</code> используется для создания различных типов кнопок и предоставляет возможность изменять их размер, состояние, содержимое и внешний вид.</p>\n<h2 id=\"-\">Варианты использования кнопок</h2>\n<ul>\n<li>Обычная кнопка – применяется для любых кнопок веб-интерфейса. Используется по умолчанию.</li>\n<li>Кнопка-ссылка – применяется для перехода по ссылке. Задается модификатором <code>type</code> со значением <code>link</code>.</li>\n<li>Кнопка отправки формы – предназначена для отправки данных формы на сервер (submit). Задается модификатором <code>type</code> со значением <code>submit</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает текст кнопки.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code></td>\n        <td>Кнопка с иконкой, которая формируется блоком <code>icon</code>.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Адрес ссылки. Применяется только при наличии модификатора блока <code>button_type_link</code>. Кнопка становится ссылкой, а значение <code>url</code> – атрибутом <code>href</code>.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Уникальный идентификатор кнопки.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет последовательность перехода между кнопками при нажатии на <code>Tab</code>.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Значение, отправляемое на сервер. По умолчанию пустое.</td>\n    </tr>\n</table>\n\n<p>Другие допустимые атрибуты блока могут задаваться в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/select/pxTNfkqsHxpJmDhwS0QK2QBs3ZY -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/select/KtCevfKa_rzm7MTQMzA65Z0ZREU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/select/Rb77AVqNcSM2UUBxbCkUkHULKWc -->\n\n<h3 id=\"-_size-\">Размеры кнопок <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам кнопок.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>кнопки</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота<br>кнопки</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Типы кнопок <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки-ссылки (<code>_type_link</code>) и кнопки отправки формы (<code>_type_submit</code>).\nВ случак кнопки-ссылки, дополнительно во входных данных необходимо указать обязательный атрибут <code>url</code>. В таком случае кнопка получает тег <code>&lt;a&gt;</code>, а значение <code>url</code> становится атрибутом <code>href</code>.</p>\n<p><strong>Кнопка-ссылка</strong></p>\n<!-- bem-example: touch-pad.examples/select/El0pc_bZgByjhimDRiJmaUa0ubw -->\n\n<p><strong>Кнопка отправки формы</strong></p>\n<!-- bem-example: touch-pad.examples/select/gtF_RY9_ivjSx1sADQLwlLOSzmo -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_disabled-\">Неактивна <code>_disabled</code></h4>\n<p>В состоянии «неактивна» кнопка видна, но недоступна для действий пользователя.</p>\n<p>Такая кнопка не может получить фокус путем нажатия на клавишу <code>Tab</code>, мышью или другими способами.</p>\n<!-- bem-example: touch-pad.examples/select/VrNTsucLZEWlatBulG8rqd0wHxQ -->\n\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> кнопка всегда находится в фокусе. Нажатие по ней можно выполнить клавишей <code>Space</code> или <code>Enter</code>.</p>\n<!-- bem-example: touch-pad.examples/select/ByAZ1dHx4rZKUf9zbxuHmfOmGNs -->\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие «наведение курсором» на кнопку.</p>\n<h4 id=\"-_pressed-\">Нажатие <code>_pressed</code></h4>\n<p>Определяет состояние «нажатие на кнопку» (действие).</p>\n<h4 id=\"-_togglable-\">Залипание <code>_togglable</code></h4>\n<p>Позволяет реализовать залипание кнопки. Допустимые значения: <code>check</code> и <code>radio</code>.</p>\n<!-- bem-example: touch-pad.examples/select/NYbJzppv5-r9T8LQ0_-SaNLJWds -->\n\n<h4 id=\"-_action-\">Визуальное выделение <code>_action</code></h4>\n<p>Визуально выделяет кнопку на странице.</p>\n<!-- bem-example: touch-pad.examples/select/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"-_pseudo-\">Псевдокнопка <code>_pseudo</code></h4>\n<p>При выборе модификатора <code>pseudo</code> со значением <code>true</code>, кнопка получает прозрачный фон.</p>\n<!-- bem-example: touch-pad.examples/select/h_ijyu_mqbPaJBB22OxZERaFyZA -->\n\n<p>В неактивном состоянии границы псевдокнопки исчезают и она сливается со страницей.</p>\n<!-- bem-example: touch-pad.examples/select/igxPz7KCvCVG6TTxlXRYzE2_5pI -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"__text\">__text</h3>\n<p>Технический элемент. Обрамляет текст кнопки.\nНужен для позиционирования текста внутри кнопки, в том числе для случаев использования вместе с иконкой.</p>\n<!-- bem-example: touch-pad.examples/select/RQ8YcvhxhqjSwO3I3VjLBOanRns -->\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n\n<h1 id=\"menu\">menu</h1>\n<p>Блок <code>menu</code> используется для создания различных типов меню и селектов.</p>\n<p>Он предоставляет возможность изменять размер и внешний вид блоков меню, управлять поведением вложенных блоков – пунктов меню или селекта.</p>\n<p>В результате BEMHTML-преобразований на странице блок становится HTML-элементом с тегом <code>&lt;div&gt;</code> и свойством <code>role=&quot;menu&quot;</code>. HTML-элементом, содащим набор переключателей – пунктов меню (блок <code>menu-item</code>).</p>\n<h2 id=\"-\">Варианты использования меню</h2>\n<p>Блок <code>menu</code> служит для создания различных типов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Меню-переключатель</td>\n        <td>Применяется для создания меню или селектов, позволяющих только одиночный выбор.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;, \n        mode : &#39;radio&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Селект с множественным выбором (<code>_mode_check</code>)</td>\n        <td>При щелчке мышью по пункту меню его состояние меняется на противоположное. Если пункт был активен – он деактивируется и наоборот.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n<tr>\n        <td>Простой список (без модификатора <code>_mode</code>)</td>\n        <td>При щелчке мышью по пункту меню его состояние не меняется. Модификатор <code>_cheked</code> не устанавливается.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/select/vAAUvyJpkNyuM0yEru7LP3dZ7xE -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/select/JgK_lg3CEjumbM6ThTKEOcNpfH0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/select/MGiZ5_2bYS32yaxnY5iD9OevjVk -->\n\n\n<h3 id=\"-_size-\">Размеры меню <code>_size</code></h3>\n<p>Задает размер всем типам меню. Обязательный модификатор.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер/Параметры</th>\n        <th>Размер шрифта</th>\n        <th>Высота строки <code>line-heigh</code></th>\n        <th>Левый отступ <code>padding-left</code></th>\n        <th>Отступ <code>padding</code></th>\n        <th>Размер &quot;галочки&quot; для темы normal</code></th>\n    </tr>\n    <tr>\n        <td>s</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;s&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>m</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;m&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>l</td>\n        <td>15px</td>\n        <td>28px</td>\n        <td>34px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;l&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>xl</td>\n        <td>15px</td>\n        <td>32px</td>\n        <td>40px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;xl&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-_mode-\">Способ выбора пунктов <code>_mode</code></h3>\n<p>Модификатор <code>_mode</code> управляет поведением пунктов меню при щелчке по ним мышью, например, возможностью множественного выбора пунктов меню.</p>\n<p>Доступны следующие значения модификатора:</p>\n<ul>\n<li><code>check</code> – селект. Пункт, по которому был произведен щелчек мышью, изменит состояние на противоположное и будет менять состояние при повторных щелчках. Доступна возможность множественного выбора пунктов;</li>\n<li><code>radio</code> – переключатель. При щелчке мышью будет производиться переключение активных пунктов меню. При повторном щелчке пункт, по которому он был произведен, останется <strong>активным</strong>. Множественный выбор недоступен;</li>\n<li><code>radio-check</code> – переключатель. При щелчке мышью будет производиться переключение активных пунктов меню. При повторном щелчке пункт, по которому он был произведен, станет <strong>неактивным</strong>. Множественный выбор недоступен.</li>\n</ul>\n<p>Реализован во всех темах блока.</p>\n<table>\n    <tr>\n        <th>Выбор пунктов</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Только один (<code>_mode_radio</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Множественный выбор или ни одного (<code>_mode_check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Один или ни одного (<code>_mode_radio-check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio-check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>_focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/select/lFNP7KamARohsQ5DCX0QQZU1ACQ -->\n\n\n<h2 id=\"-\">Элементы блока</h2>\n<p>Визуально представлен следующими элементами:</p>\n<h3 id=\"__group\">__group</h3>\n<p>Элемент <code>__group</code> служит для группировки пунктов меню. Пункты, которые нужно сгруппировать, помещаются в поле <code>content</code> элемента. Группы визуально отделяются серой чертой.</p>\n<p>Например:</p>\n<!-- bem-example: touch-pad.examples/select/WSrgcU6mXH0StKcrKnckCnH3lrc -->\n\n\n<h3 id=\"__group-title\">__group-title</h3>\n<p>Элемент позволяет задать заголовок для группы пунктов меню, создаваемой с помощью элемента <code>__group</code>.</p>\n<p>Например:</p>\n<!-- bem-example: touch-pad.examples/select/yGGZayW6DClbboVCxBRriqv3YcU -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>menu-item</code></li>\n<li><code>dom</code></li>\n<li><code>keyboard</code></li>\n<li><code>control</code></li>\n</ul>\n\n<h1 id=\"menu-item\">menu-item</h1>\n<p>Блок <code>menu-item</code> служит для создания пунктов меню или селекта. Используется внутри блока <code>menu</code>. Блок <code>menu-item</code> предоставляет возможность изменять состояние, содержимое и тип пунктов меню.</p>\n<p>Блок <code>menu-item</code> в результате BEMHTML-преобразований на странице становится HTML-элементом с тегом <code>&lt;div&gt;</code> со свойством <code>role=&quot;menuitem&quot;</code>.</p>\n<h2 id=\"-\">Варианты использования пунктов меню</h2>\n<p>Блок <code>menu-item</code> служит для создания различных типов пунктов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Переключатель</td>\n        <td>Применяется для любых выпадающих списков, табов, пунктов меню и селектов и т.п. Используется по умолчанию.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Ссылка</td>\n        <td>Элемент меню со ссылкой. Блок <code>link</code> помещается в поле <code>content</code> BEMJSON-декларации блока. Так же требуется установить блоку модификатор <code>type</code> в значение <code>link</code>.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое пунктом меню, если он выбран.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/select/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/select/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/select/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"-_type-\">Типы блока <code>_type</code></h3>\n<p>Модификатор <code>_type</code> в значении <code>_link</code> позволяет создавать пункт меню-ссылку. Блок <code>link</code> при этом помещается в поле <code>content</code> BEMJSON-декларации блока. Если модификатор <code>_type_link</code> не установлен, вложенная ссылка будет доступна для действий пользователя при установленном модификаторе <code>_disabled</code>.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/select/47lHiiyDspaBs5AiC22G42Y-N_o -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии &quot;неактивен&quot; пункт меню отображается, но недоступен для действий пользователя.  </p>\n<p>Такой пункт меню не изменяет состояние при щелчке мышью. Если для блока установлен модификатор <code>_type_link</code>, переход по ссылке не осуществляется. </p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-pad.examples/select/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие &quot;наведение курсором&quot; на пункт меню.</p>\n<p>Реализован во всех темах блока.</p>\n<p>Автоматически выставляется при наведении указателем мыши на пункт меню.</p>\n<!-- bem-example: touch-pad.examples/select/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"-_checked-\">Выбранный пункт меню <code>_checked</code></h4>\n<p>Модификатор задает выбранный пункт меню.</p>\n<!-- bem-example: touch-pad.examples/select/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>В блоке <code>menu</code> модификатор <code>_checked</code> устанавливается для пункта при щелчке мышью:</p>\n<!-- bem-example: touch-pad.examples/select/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu-item</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n\n<h1 id=\"popup\">popup</h1>\n<p>Блок <code>popup</code> используется для создания выпадающих элементов и позволяет изменять их состояние, поведение и внешний вид. Блок отображается поверх остальных элементов страницы.</p>\n<p>Попап может быть вызван различными элементами страницы, например, кнопками или псевдоссылками.</p>\n<p>В момент первого показа (установка модификатора <code>_visible</code>) DOM-элемент блока создается в конце <code>&lt;body&gt;</code>.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/select/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/select/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/select/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n\n<h3 id=\"-_visible-\">Видимый <code>_visible</code></h3>\n<p>Модификатор, отвечающий за видимость блока. При значении модификатора <code>false</code> блок не отображается.</p>\n<!-- bem-example: touch-pad.examples/select/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"-_direction-\">Расположение относительно родителя <code>_direction</code></h3>\n<p>Модификатор управляет положением попапа на странице относительно вызвавшего его блока. Расположение блока определяется автоматически, исходя из массива допустимых расположений и положения родителя на странице.</p>\n<p>Выбранное расположение влияет на направление анимации раскрытия.</p>\n<p>По умолчанию используется следующий массив допустимых расположений:</p>\n<table>\n    <tr>\n        <th> Направление раскрытия </td>\n        <th> Индекс в массиве </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>Чтобы управлять расположением попапа, можно ограничить массив расположений, оставив только требуемые. Пользовательский массив нужно передать в качестве JS-параметра с ключом <code>directions</code>. При этом из значений массива будет выбрано наиболее подходящее, исходя из положения родителя на странице.</p>\n<p>Например, если требуется, чтобы попап раскрывался над родителем:</p>\n<!-- bem-example: touch-pad.examples/select/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Или разместить попап справа по центру:</p>\n<!-- bem-example: touch-pad.examples/select/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"-_autoclosable-\">Автоматическое скрытие <code>_autoclosable</code></h3>\n<p>Модификатор отвечает за автоматическое скрытие попапа при клике вне блока. При установке модификатора <code>_autoclosable</code> в значении <code>_true</code> блок будет скрываться при щелчке за его пределами (будет снят модификатор <code>_visible</code>).</p>\n<!-- bem-example: touch-pad.examples/select/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"-popup-\">Взаимосвязи между popup&#39;ами</h2>\n<p>Так как попап выносит себя в конец <code>&lt;body&gt;</code>, чтобы перекрывать другие элементы страницы, возникает необходимость в построении взаимосвязей. Блок умеет выстраивать связи Parent → [ Child, Child, ... ]. Для этого он выполняет проверку, вложен ли блок, вызывающий попап в другой <code>popup</code>. Потомки знают о наличии родителя.\nЕсли бы этих взаимосвязей не было, то родительский попап (при наличии модификатора <code>autoclosable</code> со значением <code>true</code>) закрылся бы при клике внутри дочернего.</p>\n<p>Другими словами модификатор <code>autoclosable</code> со значением <code>true</code> означает, что попап закроется сам и закроет свои дочерние блоки при клике за пределами его самого и дочерних попапов.</p>\n<p>Дочерние блоки popup можно рассматривать в виде цепочки 1 → 2 → 3 → 4. При клике на втором попапе – закрываются третий и четвертый. При клике в первом – закрываются второй, третий, четвертый. При клике за пределами любого попапа из цепочки – закроются все.</p>\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>popup</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "select",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/select/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/select/simple"
                                }
                            ],
                            "description": "<h1 id=\"button\">button</h1>\n<p>The <code>button</code> block is used for different types of buttons creation. It allows you to manage size, sate, content and appearance of a button.</p>\n<h2 id=\"button-use-cases\">Button use cases</h2>\n<ul>\n<li>button – is used to create the majority of web inteface buttons. Used by default.</li>\n<li>link-button – a button that provides link functionality. Must have a mandatory modifier <code>type</code> with <code>link</code> value.</li>\n<li>action button – a button designed to send data to the server (submit). Must be always located inside a form. Sets <code>type</code> modifier with <code>submit</code> value in BEMJSON to create an action button.</li>\n</ul>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified in corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attributes</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Text of a button.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Button with an icon provided by an <code>icon</code> block.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>URL address. It is used only if <code>button_type_link</code> modifier is specified. In this case a button\n            acts as a link and <code>url</code> value is represented as a <code>href</code> attribute.\n        </td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Unique identifier of a button.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Defines tab order between the buttons.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Value to be sent to a server. It is empty by default.</td>\n    </tr>\n</table>\n\n<p>The other valid block&#39;s attributes could be specified in the <code>attrs</code> field in BEMJSON.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>The block supports the following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>Following examples demonstrate this:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-pad.examples/select/b7paW80CenjDPGtPNxSCdPuUKqg -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/select/8MGVemijL_tqZt4Z3DsedAxNwDo -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/select/u1hTHzxMhorqFlZaZXNkPIBN4WU -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier that is available for <em>normal</em> theme only.</p>\n<p>Provides all types of buttons with the <code>size</code> value.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Following examples demonstrate this:</p>\n<table>\n  <tr>\n    <th>Size</th>\n    <th>Font size</th>\n    <th>Button height</th>\n    <th>Example</th>\n  </tr>\n  <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The block could be represented as a <code>link-button</code> (<code>button_type_link</code>).</p>\n<p>This button type has mandatory attribute <code>url</code> that should be specified in BEMJSON input data. A link-button has an <code>&lt;a&gt;</code> attribute. <code>url</code> value becomes <code>href</code> attribute.</p>\n<pre><code>{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;link&#39; },\n    url : &#39;#&#39;,\n    text : &#39;Link-button&#39;\n}\n</code></pre><h3 id=\"button-s-states\">Button&#39;s states</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, button is visible but not available for user action.</p>\n<p>Disabled button cannot be focused by pressing a <code>Tab</code> or on mouse click.</p>\n<pre><code class=\"lang-bemjsom\">{\n    block : &#39;button&#39;,\n    text : &#39;Disabled&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, disabled : true }\n}\n</code></pre>\n<h4 id=\"_focused\">_focused</h4>\n<p>If <code>focused</code> modifier has <code>true</code> value, the button is always focused. You can click the focused button using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: touch-pad.examples/select/UkvwYMbpDOkZaq5dm0uIlVbQ9GA -->\n\n<h4 id=\"_hovered\">_hovered</h4>\n<p>Defines &quot;hover&quot; action.</p>\n<h4 id=\"_pressed\">_pressed</h4>\n<p>Defines &quot;pressed&quot; state of a button.</p>\n<h4 id=\"_togglable\">_togglable</h4>\n<p>Defines a state of the pressed button when the first click presses the button, and the second returns it to its original state.</p>\n<!-- bem-example: touch-pad.examples/select/xAkZMTZIyMq8S8Cc5mWrpqEj5Cc -->\n\n<h4 id=\"_action\">_action</h4>\n<p>Visually highlights a button on a page.</p>\n<!-- bem-example: touch-pad.examples/select/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"_pseudo\">_pseudo</h4>\n<p>If <code>pseudo</code> modifier has <code>true</code> value, the button background becomes transparent.</p>\n<!-- bem-example: touch-pad.examples/select/GVMyNpdJjINIl0Ab_qhtsWRf_YA -->\nIf pseudo button is disabled, its boarders disappear.\n\n<!-- bem-example: touch-pad.examples/select/fc2vxXBIzzk2stACB-J9vRKlYQ4 -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"__text\">__text</h3>\n<p>This auxiliary element sets a text position inside the button.</p>\n<!-- bem-example: touch-pad.examples/select/t_3HDmaOrqYMmf-3NPSa4KJZWBY -->\n\n<h2 id=\"block-s-dependencies\">Block&#39;s dependencies</h2>\n<ul>\n<li><code>control</code>, that provides public API for the controls</li>\n<li><code>i-bem__dom</code></li>\n<li><code>keyboard</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n\n<h1 id=\"menu\">menu</h1>\n<p>A <code>menu</code> block is used for creation of various types of menus and lists. It allows to manage state, behavior and appearance of menus.</p>\n<p>As a result of BEMHTML transformations, a block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menu&quot;</code> attribute set. The block&#39;s HTML element contains a set of switches – the <code>menu-item</code> blocks.</p>\n<p>It allow to manage the appearance, state and size of a menu blocks as well as manage the nested <code>menu-items</code> block&#39;s appearance.</p>\n<h2 id=\"menu-use-cases\">menu use cases</h2>\n<p>A <code>menu</code> block is used for creation of following menu types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Switch menu</td>\n        <td>Used for creation of lists with a single selectable item.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;, \n        mode : &#39;radio&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A multi selectable list. (<code>_mode_check</code>)</td>\n        <td>Clicking on a list items will perform item&#39;s state switching to opposite. If an item was active it will be deactivated, and vice versa.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n<tr>\n        <td>Basic list (with <code>_mode</code> modifier is unset)</td>\n        <td>Menu item&#39;s state will not change on mouse click. A <code>_cheked</code> state modifier will not be toggled.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/select/vAAUvyJpkNyuM0yEru7LP3dZ7xE -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/select/JgK_lg3CEjumbM6ThTKEOcNpfH0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/select/MGiZ5_2bYS32yaxnY5iD9OevjVk -->\n\n<h3 id=\"the-sizes-_size-\">The sizes <code>_size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides a size value to all types of radio groups.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<table>\n    <tr>\n        <th>A <code>_size</code> value</th>\n        <th>Font size</th>\n        <th>Line height <code>line-heigh</code></th>\n        <th>Left padding <code>padding-left</code></th>\n        <th>Global <code>padding</code></th>\n        <th>The tick&#39;s icon size for normal theme</code></th>\n    </tr>\n    <tr>\n        <td>s</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;s&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>m</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;m&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>l</td>\n        <td>15px</td>\n        <td>28px</td>\n        <td>34px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;l&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>xl</td>\n        <td>15px</td>\n        <td>32px</td>\n        <td>40px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;xl&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"menu-item-selection-options-_mode-\">Menu item selection options <code>_mode</code></h3>\n<p>A <code>_mode</code> modifier defines a menu item&#39;s reaction on mouse click. For example, it controls multiple items selectability.</p>\n<p>Following modifier values are available:</p>\n<ul>\n<li><code>check</code> – a selectable list. A menu item will change it&#39;s state to opposite on each mouse click. An active item will become inactive and vice versa. Multiple choice is available;</li>\n<li><code>radio</code> – a switcher. Inactive menu item will be activated on mouse click. On re-clicking the menu item will remain <strong>active</strong>. Multiple choice not available;</li>\n<li><code>radio-check</code> – a switcher. Inactive menu item will be activated on mouse click. On re-clicking the active menu item will become <strong>inactive</strong>. Multiple choice not available.</li>\n</ul>\n<p>Available for all block themes.</p>\n<table>\n    <tr>\n        <th>List items selectability</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Only one (<code>_mode_radio</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Plural selection or none (<code>_mode_check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>One or none (<code>_mode_radio-check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio-check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"in-focus-_focused-\">In focus <code>_focused</code></h4>\n<p>A <code>_focused</code> modifier is automatically toggles for the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/select/2y_zCWFJ78bAFa8UEqIdsRPc3qM -->\n\n<h2 id=\"the-block-s-elements\">The block&#39;s elements</h2>\n<p>The <code>menu</code> block is visually represented by following elements:</p>\n<h3 id=\"__group\">__group</h3>\n<p>A <code>__group</code> element is used for menu items grouping. An Items that needed grouping should be placed to the element BEMJSON declaration&#39;s <code>content</code> field. The group elements are visually separated by a gray line.</p>\n<p>For example:</p>\n<!-- bem-example: touch-pad.examples/select/WSrgcU6mXH0StKcrKnckCnH3lrc -->\n\n\n<h3 id=\"__group-title\">__group-title</h3>\n<p>This element allows to create a title for a menu items group, created using a <code>_group</code> element.</p>\n<p>For example:</p>\n<!-- bem-example: touch-pad.examples/select/8LCJ2Asb6uR2ZHALf5iscb_n2RU -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>menu-item</code></li>\n<li><code>dom</code></li>\n<li><code>keyboard</code></li>\n<li><code>control</code></li>\n</ul>\n\n<h1 id=\"menu-item\">menu item</h1>\n<p>A <code>menu-item</code> block is used for creation of various types of menu and list items. It is used inside a <code>menu</code> block. The <code>menu-item</code> block allows to manage state, content and type of menu items.</p>\n<p>As a result of BEMHTML transformations block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menuitem&quot;</code> attribute set.</p>\n<h2 id=\"menu-item-use-cases\">menu item use cases</h2>\n<p>The block helps to create following menu item types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>An example</th>\n    </tr>\n    <tr>\n        <td>A switch element</td>\n        <td>Is used to set up a dropdowns, tab menus, lists and menu items, etc.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A link element (<code>_type_link</code>)</td>\n        <td>An element with nested depended link. A <code>link</code> block should be placed into block&#39;s BEMJSON declaration <code>content</code> field. The <code>_type_link</code> modifier is required.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>A value returned by menu item if selected.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/select/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/select/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/select/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive menu item. Inactive menu item is displayed, but not available for user actions.  </p>\n<p>If a <code>_type_link</code> modifier is set for the block with a nested link, the link will not be followed on mouse click.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/select/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"mouse-over-_hovered-\">Mouse over <code>_hovered</code></h4>\n<p>This modifier is automatically toggled when the mouse pointer is over the block. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-pad.examples/select/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"selected-menu-item-_checked-\">Selected menu item <code>_checked</code></h4>\n<p>Modifier defines the selected menu item.</p>\n<!-- bem-example: touch-pad.examples/select/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>For the <code>menu-item</code> blocks nested in a <code>menu</code> block <code>_checked</code> state toggles automatically on mouse click. </p>\n<!-- bem-example: touch-pad.examples/select/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n\n<h1 id=\"popup\">popup</h1>\n<p>A <code>popup</code> block is used for popups creation. It allows to manage state, behavior and appearance of popups. Block is displayed in front of all other page elements.</p>\n<p>Popup can be displayed by different page elements like pseudo links or buttons.</p>\n<p>At the moment of first display (<code>_visible</code> modifier toggle) block&#39;s DOM element is created in the end of document <code>&lt;body&gt;</code>.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to block.</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-pad.examples/select/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-pad.examples/select/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-pad.examples/select/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n<h3 id=\"visibility-_visible-\">Visibility <code>_visible</code></h3>\n<p>A <code>_visible</code> modifier allow to control block visibility. If it&#39;s not set, block will not be displayed.</p>\n<!-- bem-example: touch-pad.examples/select/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"alignment-respect-to-its-parent-_direction-\">Alignment respect to its parent <code>_direction</code></h3>\n<p>Modifier controls the position of popup window relative to the block which opened it – popup&#39;s alignment. Popup window&#39;s position is detected automatically basing on the admissible directions array and the parent block&#39;s position.</p>\n<p>Chosen alignment will affect the opening animation direction.</p>\n<p>By default following admissible directions array is used:</p>\n<table>\n    <tr>\n        <th> Direction </td>\n        <th> Index in array </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>To control the popup window position you can provide directions array with desired directions set only. According to parent block&#39;s position on a page the most suitable directions will be chosen among the provided values.</p>\n<p>For example, if the popup window should be opened at the top of the parent block:</p>\n<!-- bem-example: touch-pad.examples/select/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Or if it should be opened strictly at the center-right position:</p>\n<!-- bem-example: touch-pad.examples/select/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"automatic-closure-_autoclosable-\">Automatic closure  <code>_autoclosable</code></h3>\n<p>With <code>_autoclosable</code> modifier toggled block will automatically hide away on mouse click outside popup window (<code>_visible</code> modifier will be removed).</p>\n<!-- bem-example: touch-pad.examples/select/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"relations-between-popup-s\">Relations between popup&#39;s</h2>\n<p>As long as popup&#39;s parent block itself can be nested in another popup block there is a need in a popup&#39;s relations handling. Block can handle Parent → [ Child, Child, ... ] relations by checking if the parent block is nested in another popup block. So, the children knows about the parent blocks existence.</p>\n<p>If there were no such relations, the parent popup block will be closed on mouse click on the child block regardless of the fact that <code>_autoclosable</code> modifier is set to <code>true</code>.</p>\n<p>This means that with <code>autoclosable</code> modifier toggled block will close itself and close all of it children on mouse click outside block&#39;s window or it child&#39;s window.</p>\n<p>Child popup blocks can be regarded as a chain of 1 → 2 → 3 → 4. By clicking on the second element of chain, third and forth will be closed. By clicking on first, the second, third and forth will be closed. On click outside of any popup window of the chain element all popups will be closed.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        }
                    }
                },
                {
                    "name": "spin",
                    "data": {
                        "ru": {
                            "name": "spin",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/spin/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/spin/simple"
                                }
                            ],
                            "description": "<h1 id=\"spin\">spin</h1>\n<p>Блок <code>spin</code> визуально иллюстрирует ход выполнения какого-либо процесса. Например, загрузки сайта или медиа-файла.</p>\n<p>Вращается прелоадер при помощи только CSS3-анимации.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы оформления <code>_theme</code></h3>\n<p>Обязательный модификатор, так как блок не имеет нативного состояния контрола.</p>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/spin/8nRZMnjcoWEtDxk8S584ZVjCjgM -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/spin/dw4UDnC7PHm5UQ_f-yKnadONEQ4 -->\n\n<h3 id=\"-_size-\">Размеры <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер блоку <code>spin</code>.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно пять размеров реализации блока: <strong>xs</strong>, <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>блока</th>\n        <th>Размер, px</th>\n        <th>Реализация</th>\n    </tr>\n    <tr>\n        <th>XS</th>\n        <td>16px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xs&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_progress-\">Вращение прелоадера <code>_progress</code></h3>\n<p>Модификатор <code>progress</code> в значении <code>true</code> задает вращение прелоадера и показывает его на странице. Когда прелоадер виден, он крутится.</p>\n<p>Модификатор <code>progress</code> в значении <code>false</code> останавливает прелоадер и скрывает его со страницы.</p>\n"
                        },
                        "en": {
                            "name": "spin",
                            "examples": [
                                {
                                    "url": "touch-pad.tests/spin/gemini"
                                },
                                {
                                    "url": "touch-pad.tests/spin/simple"
                                }
                            ],
                            "description": "<h1 id=\"spin\">spin</h1>\n<p>This block indicates the progress of some process (e.g. site page or some media file loading).</p>\n<p>Rotation of the <code>spin</code> block is implemented by CSS3 animation.</p>\n<h2 id=\"block-modifiers\">Block Modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Mandatory modifier. The <code>spin</code> block doesn&#39;t have native control representation (<em>default</em>).</p>\n<p>This block supports following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Following examples demonstrate this:</p>\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-pad.examples/spin/8nRZMnjcoWEtDxk8S584ZVjCjgM -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-pad.examples/spin/dw4UDnC7PHm5UQ_f-yKnadONEQ4 -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier.</p>\n<p>There are five sizes available: <strong>XS</strong>, <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Following examples demonstrate this:</p>\n<table>\n    <tr>\n        <th>Block&#39;s size</th>\n        <th>Size, px</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>XS</th>\n        <td>16px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xs&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_progress\">_progress</h3>\n<p><code>progress</code> modifier with <code>true</code> value activates the spin. <code>spin</code> block rotates only in visible state.</p>\n<p><code>progress</code> modifies with <code>false</code> value paused rotation of <code>spin</code> block and hides it from the page.</p>\n"
                        }
                    },
                    "jsdoc": ""
                }
            ]
        },
        {
            "name": "touch-phone.docs",
            "blocks": [
                {
                    "name": "attach",
                    "jsdoc": "<h1 id=\"attach-module\">attach Module</h1>\n<h2 id=\"attach-block\">attach Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"clear-data-attach-\">clear ( [data] ) → {attach}</h4>\n<p>Clear control value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>[data] {Object}<br/>\nadditional data</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{attach}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"button-module\">button Module</h1>\n<h2 id=\"button-block\">button Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns text of the button</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"settext-text-button-\">setText ( text ) → {button}</h4>\n<p>Sets text to the button</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>text {String}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{button}</p>\n<p>this</p>\n",
                    "data": {
                        "ru": {
                            "name": "attach",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/attach/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/attach/simple"
                                }
                            ],
                            "description": "<h1 id=\"attach\">attach</h1>\n<p>Блок <code>attach</code> служит для загрузки файла, предназначенного для отправки на сервер.</p>\n<p>По умолчанию блок визуально представлен кнопкой на основе блока <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/button/button.ru.md\">button</a>, открывающей системное окно загрузки файла, и текстовым сообщением «Файл не выбран». После загрузки файла отображаются следующие элементы:</p>\n<ul>\n<li>иконка файла (блок <code>icon</code>);</li>\n<li>имя файла (элемент <code>text</code>);</li>\n<li>крестик для отмены (элемент <code>clear</code>).</li>\n</ul>\n<p>Не позволяет прикреплять несколько файлов и не поддерживает drag-and-drop.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы оформления  <code>_theme</code></h3>\n<p>Блок представлен только в теме <em>simple</em>.</p>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/attach/2LkwTGo-4d7fxgnG4skRO2tHoic -->\n<strong>simple</strong>\n\n<!-- bem-example: touch-phone.examples/attach/nwytMff5nyXPoczzUvwVbgD7YQQ -->\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии блока «неактивен» кнопка выбора становится недоступной для действий пользователя.</p>\n<p>Если модификатор <code>disabled</code> не выбран, кнопка по умолчанию активна.</p>\n<!-- bem-example: touch-phone.examples/attach/TlYDF2oQVo93Y7ocT-4hcsjHHB8 -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<p>Визуально представлен следующими элементами:</p>\n<h3 id=\"__button\">__button</h3>\n<p>Обязательный элемент.\nКнопка выбора файла. Открывает системное окно загрузки файла. Создается на основе блока <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/button/button.ru.md\">button</a> и использует его поведение (JS) и внешний вид (CSS). Контент кнопки задается во входных данных.</p>\n<!-- bem-example: touch-phone.examples/attach/c3tTTsQQpS_wyaTRUODJQMWC3x8 -->\n\n<h3 id=\"__control\">__control</h3>\n<p>Нативный контрол «прикрепить файл».</p>\n<p>Преобразуется BEMHTML- и BH-шаблонами в нативный элемент прикрепления файла с атрибутами <code>&lt;input class=&quot;attach__control&quot; type=&quot;file&quot;&gt;</code>.</p>\n<h3 id=\"__no-file\">__no-file</h3>\n<p>Элемент для отображения текста, когда файл не выбран.</p>\n<p>Если тема <em>simple</em> не указана для блока <code>attach</code>, будет отображаться значение нативного контрола «Файл не выбран».</p>\n<h3 id=\"__file\">__file</h3>\n<p>Контейнер с информацией о прикрепленном файле.</p>\n<p>Формируется из следующих элементов блока:</p>\n<ul>\n<li><code>__text</code></li>\n<li><code>__clear</code></li>\n</ul>\n<p>Может содержать блок <code>icon</code>. В зависимости от типа файла блоку <code>icon</code> добавляется соответствующий модификатор, которому будет назначена иконка типа файла.</p>\n<h3 id=\"__text\">__text</h3>\n<p>Имя файла. Появляется после прикрепления файла.</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>Кнопка отмены выбранного файла (крестик). Появляется после прикрепления файла.</p>\n<p>Элемент реализован для темы <em>simple</em>.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n\n<h1 id=\"button\">button</h1>\n<p>Блок <code>button</code> используется для создания различных типов кнопок и предоставляет возможность изменять их размер, состояние, содержимое и внешний вид.</p>\n<h2 id=\"-\">Варианты использования кнопок</h2>\n<ul>\n<li>Обычная кнопка – применяется для любых кнопок веб-интерфейса. Используется по умолчанию.</li>\n<li>Кнопка-ссылка – применяется для перехода по ссылке. Задается модификатором <code>type</code> со значением <code>link</code>.</li>\n<li>Кнопка отправки формы – предназначена для отправки данных формы на сервер (submit). Задается модификатором <code>type</code> со значением <code>submit</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает текст кнопки.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code></td>\n        <td>Кнопка с иконкой, которая формируется блоком <code>icon</code>.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Адрес ссылки. Применяется только при наличии модификатора блока <code>button_type_link</code>. Кнопка становится ссылкой, а значение <code>url</code> – атрибутом <code>href</code>.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Уникальный идентификатор кнопки.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет последовательность перехода между кнопками при нажатии на <code>Tab</code>.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Значение, отправляемое на сервер. По умолчанию пустое.</td>\n    </tr>\n</table>\n\n<p>Другие допустимые атрибуты блока могут задаваться в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/attach/pxTNfkqsHxpJmDhwS0QK2QBs3ZY -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/attach/KtCevfKa_rzm7MTQMzA65Z0ZREU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/attach/Rb77AVqNcSM2UUBxbCkUkHULKWc -->\n\n<h3 id=\"-_size-\">Размеры кнопок <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам кнопок.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>кнопки</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота<br>кнопки</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Типы кнопок <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки-ссылки (<code>_type_link</code>) и кнопки отправки формы (<code>_type_submit</code>).\nВ случак кнопки-ссылки, дополнительно во входных данных необходимо указать обязательный атрибут <code>url</code>. В таком случае кнопка получает тег <code>&lt;a&gt;</code>, а значение <code>url</code> становится атрибутом <code>href</code>.</p>\n<p><strong>Кнопка-ссылка</strong></p>\n<!-- bem-example: touch-phone.examples/attach/El0pc_bZgByjhimDRiJmaUa0ubw -->\n\n<p><strong>Кнопка отправки формы</strong></p>\n<!-- bem-example: touch-phone.examples/attach/gtF_RY9_ivjSx1sADQLwlLOSzmo -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_disabled-\">Неактивна <code>_disabled</code></h4>\n<p>В состоянии «неактивна» кнопка видна, но недоступна для действий пользователя.</p>\n<p>Такая кнопка не может получить фокус путем нажатия на клавишу <code>Tab</code>, мышью или другими способами.</p>\n<!-- bem-example: touch-phone.examples/attach/VrNTsucLZEWlatBulG8rqd0wHxQ -->\n\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> кнопка всегда находится в фокусе. Нажатие по ней можно выполнить клавишей <code>Space</code> или <code>Enter</code>.</p>\n<!-- bem-example: touch-phone.examples/attach/ByAZ1dHx4rZKUf9zbxuHmfOmGNs -->\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие «наведение курсором» на кнопку.</p>\n<h4 id=\"-_pressed-\">Нажатие <code>_pressed</code></h4>\n<p>Определяет состояние «нажатие на кнопку» (действие).</p>\n<h4 id=\"-_togglable-\">Залипание <code>_togglable</code></h4>\n<p>Позволяет реализовать залипание кнопки. Допустимые значения: <code>check</code> и <code>radio</code>.</p>\n<!-- bem-example: touch-phone.examples/attach/NYbJzppv5-r9T8LQ0_-SaNLJWds -->\n\n<h4 id=\"-_action-\">Визуальное выделение <code>_action</code></h4>\n<p>Визуально выделяет кнопку на странице.</p>\n<!-- bem-example: touch-phone.examples/attach/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"-_pseudo-\">Псевдокнопка <code>_pseudo</code></h4>\n<p>При выборе модификатора <code>pseudo</code> со значением <code>true</code>, кнопка получает прозрачный фон.</p>\n<!-- bem-example: touch-phone.examples/attach/h_ijyu_mqbPaJBB22OxZERaFyZA -->\n\n<p>В неактивном состоянии границы псевдокнопки исчезают и она сливается со страницей.</p>\n<!-- bem-example: touch-phone.examples/attach/igxPz7KCvCVG6TTxlXRYzE2_5pI -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"__text\">__text</h3>\n<p>Технический элемент. Обрамляет текст кнопки.\nНужен для позиционирования текста внутри кнопки, в том числе для случаев использования вместе с иконкой.</p>\n<!-- bem-example: touch-phone.examples/attach/RQ8YcvhxhqjSwO3I3VjLBOanRns -->\n\n<h1 id=\"icon\">icon</h1>\n<p>Блок <code>icon</code> используется в качестве графического элемента в других блоках. В HTML представлен тегом <code>&lt;i&gt;</code>. Иконка задается через свойство <code>background</code> и, соответственно, не имеет возможности фоллбека.</p>\n<p>Иконку можно передать как через модификатор, так и через поле <code>url</code>:</p>\n<!-- bem-example: touch-phone.examples/attach/b2PchFG0vbxDCGt-_1VzrN-GK0 -->\n\n<!-- bem-example: touch-phone.examples/attach/bek_pi0vSgei-mm8QD-H3qy_E0c -->\n\n<!-- bem-example: touch-phone.examples/attach/bqsLdaiup-wWnOz-fYrlos47T_c -->\n\n<!-- bem-example: touch-phone.examples/attach/w_tWuwVyYuwv7N6i7jChuJOj8Vc -->\n"
                        },
                        "en": {
                            "name": "attach",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/attach/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/attach/simple"
                                }
                            ],
                            "description": "<h1 id=\"attach\">attach</h1>\n<p><code>attach</code> block is used to upload a file to be sent to a server.</p>\n<p>This block is visually represented by:</p>\n<ul>\n<li>button (<code>button</code> element is based on the <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/button/button.en.md\">button</a> block) that opens a system window for a file upload;</li>\n<li>text message &quot;No file selected&quot;.</li>\n</ul>\n<p>When file upload is complete, the following elements become available:</p>\n<ul>\n<li>file icon (<code>icon</code> block);</li>\n<li>file name (<code>text</code> element);</li>\n<li>deletion cross element (<code>clear</code> element).</li>\n</ul>\n<p>Block functionality does not support:</p>\n<ul>\n<li>more than one file attaching;</li>\n<li>drag-and-drop.</li>\n</ul>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>The block supports only a theme called <em>simple</em>.</p>\n<p>If theme is not specified, only native representation of the block is available (<em>default</em>).</p>\n<p>See the following examples for demonstration:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/attach/ZFs05u8kewAq9F9n8d6YPWyDNgk -->\n<strong>simple</strong>\n\n<!-- bem-example: touch-phone.examples/attach/8pRQhEhxOlmCQHlJitiM8RB4UoE -->\n\n<h3 id=\"block-states\">Block states</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If block is disabled, a file selection button becomes unavailable for user&#39;s manipulations.</p>\n<p>The button is active by default, even if <code>disabled</code> modifier is not specified.</p>\n<!-- bem-example: touch-phone.examples/attach/AkDH5qgUPbMKtFX988WrjrO4Yog -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<p>The block is visually represented by the following elements:</p>\n<h3 id=\"__button\">__button</h3>\n<p>A mandatory element.</p>\n<p>A file selection button. It is designed for opening a system window for file upload. It is based on <a href=\"https://github.com/bem/bem-components/blob/v2/common.blocks/button/button.en.md\">button</a> block and inherits its behavior (JS) and formatting (CSS). Content of a button should be specified in input data.</p>\n<!-- bem-example: touch-phone.examples/attach/0e8PrnldKFxjKeNoH1_3eiHXjqM -->\n\n<h3 id=\"__control\">__control</h3>\n<p>A native control for file attaching.</p>\n<p>It is rendered by BEMHTML and BH template engines as a native control of file attaching with attributes: <code>&lt;input class=&quot;attach__control&quot; type=&quot;file&quot;&gt;</code>.</p>\n<h3 id=\"__no-file\">__no-file</h3>\n<p>Element for description rendering with no file selected.</p>\n<p>If a theme <em>simple</em> is not declared, the text message &quot;no file selected&quot; is used by default.</p>\n<h3 id=\"__file\">__file</h3>\n<p>A container with attached file information.</p>\n<p>It consists of the following elements of the block:</p>\n<ul>\n<li><code>text</code></li>\n<li><code>clear</code></li>\n</ul>\n<p>The element could contain an <code>icon</code> block. Depending on a file type an <code>icon</code> block could obtain corresponding modifier that specifies a type file icon to be assigned.</p>\n<h3 id=\"__text\">__text</h3>\n<p>File name. It becomes available when you have attached the file.</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>Clear attachment button (deletion cross element). It becomes available when you have attched the file.</p>\n<p>The element is available for a <em>simple</em> theme of <code>attach</code> block.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n\n<h1 id=\"button\">button</h1>\n<p>The <code>button</code> block is used for different types of buttons creation. It allows you to manage size, sate, content and appearance of a button.</p>\n<h2 id=\"button-use-cases\">Button use cases</h2>\n<ul>\n<li>button – is used to create the majority of web inteface buttons. Used by default.</li>\n<li>link-button – a button that provides link functionality. Must have a mandatory modifier <code>type</code> with <code>link</code> value.</li>\n<li>action button – a button designed to send data to the server (submit). Must be always located inside a form. Sets <code>type</code> modifier with <code>submit</code> value in BEMJSON to create an action button.</li>\n</ul>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified in corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attributes</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Text of a button.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Button with an icon provided by an <code>icon</code> block.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>URL address. It is used only if <code>button_type_link</code> modifier is specified. In this case a button\n            acts as a link and <code>url</code> value is represented as a <code>href</code> attribute.\n        </td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Unique identifier of a button.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Defines tab order between the buttons.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Value to be sent to a server. It is empty by default.</td>\n    </tr>\n</table>\n\n<p>The other valid block&#39;s attributes could be specified in the <code>attrs</code> field in BEMJSON.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>The block supports the following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>Following examples demonstrate this:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/attach/b7paW80CenjDPGtPNxSCdPuUKqg -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/attach/8MGVemijL_tqZt4Z3DsedAxNwDo -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/attach/u1hTHzxMhorqFlZaZXNkPIBN4WU -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier that is available for <em>normal</em> theme only.</p>\n<p>Provides all types of buttons with the <code>size</code> value.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Following examples demonstrate this:</p>\n<table>\n  <tr>\n    <th>Size</th>\n    <th>Font size</th>\n    <th>Button height</th>\n    <th>Example</th>\n  </tr>\n  <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The block could be represented as a <code>link-button</code> (<code>button_type_link</code>).</p>\n<p>This button type has mandatory attribute <code>url</code> that should be specified in BEMJSON input data. A link-button has an <code>&lt;a&gt;</code> attribute. <code>url</code> value becomes <code>href</code> attribute.</p>\n<pre><code>{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;link&#39; },\n    url : &#39;#&#39;,\n    text : &#39;Link-button&#39;\n}\n</code></pre><h3 id=\"button-s-states\">Button&#39;s states</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, button is visible but not available for user action.</p>\n<p>Disabled button cannot be focused by pressing a <code>Tab</code> or on mouse click.</p>\n<pre><code class=\"lang-bemjsom\">{\n    block : &#39;button&#39;,\n    text : &#39;Disabled&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, disabled : true }\n}\n</code></pre>\n<h4 id=\"_focused\">_focused</h4>\n<p>If <code>focused</code> modifier has <code>true</code> value, the button is always focused. You can click the focused button using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: touch-phone.examples/attach/UkvwYMbpDOkZaq5dm0uIlVbQ9GA -->\n\n<h4 id=\"_hovered\">_hovered</h4>\n<p>Defines &quot;hover&quot; action.</p>\n<h4 id=\"_pressed\">_pressed</h4>\n<p>Defines &quot;pressed&quot; state of a button.</p>\n<h4 id=\"_togglable\">_togglable</h4>\n<p>Defines a state of the pressed button when the first click presses the button, and the second returns it to its original state.</p>\n<!-- bem-example: touch-phone.examples/attach/xAkZMTZIyMq8S8Cc5mWrpqEj5Cc -->\n\n<h4 id=\"_action\">_action</h4>\n<p>Visually highlights a button on a page.</p>\n<!-- bem-example: touch-phone.examples/attach/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"_pseudo\">_pseudo</h4>\n<p>If <code>pseudo</code> modifier has <code>true</code> value, the button background becomes transparent.</p>\n<!-- bem-example: touch-phone.examples/attach/GVMyNpdJjINIl0Ab_qhtsWRf_YA -->\nIf pseudo button is disabled, its boarders disappear.\n\n<!-- bem-example: touch-phone.examples/attach/fc2vxXBIzzk2stACB-J9vRKlYQ4 -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"__text\">__text</h3>\n<p>This auxiliary element sets a text position inside the button.</p>\n<!-- bem-example: touch-phone.examples/attach/t_3HDmaOrqYMmf-3NPSa4KJZWBY -->\n\n<h2 id=\"block-s-dependencies\">Block&#39;s dependencies</h2>\n<ul>\n<li><code>control</code>, that provides public API for the controls</li>\n<li><code>i-bem__dom</code></li>\n<li><code>keyboard</code></li>\n</ul>\n\n<h1 id=\"icon\">icon</h1>\n<p><code>&lt;i&gt;</code>-based block for using as a graphical element in other blocks, not for independent usage. Icon is set as <code>background</code> property and unables to fallback.</p>\n<p>In BEMJSON you can use both the modifier and the <code>url</code> field for an icon representation:\n<!-- bem-example: touch-phone.examples/attach/b2PchFG0vbxDCGt-_1VzrN-GK0 --></p>\n<!-- bem-example: touch-phone.examples/attach/bek_pi0vSgei-mm8QD-H3qy_E0c -->\n\n<!-- bem-example: touch-phone.examples/attach/ozTrvWSbAw8rmCSYD_YNMb4uO80 -->\n\n<!-- bem-example: touch-phone.examples/attach/w_tWuwVyYuwv7N6i7jChuJOj8Vc -->\n"
                        }
                    }
                },
                {
                    "name": "button",
                    "data": {
                        "ru": {
                            "name": "button",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/button/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/button/simple"
                                }
                            ],
                            "description": "<h1 id=\"button\">button</h1>\n<p>Блок <code>button</code> используется для создания различных типов кнопок и предоставляет возможность изменять их размер, состояние, содержимое и внешний вид.</p>\n<h2 id=\"-\">Варианты использования кнопок</h2>\n<ul>\n<li>Обычная кнопка – применяется для любых кнопок веб-интерфейса. Используется по умолчанию.</li>\n<li>Кнопка-ссылка – применяется для перехода по ссылке. Задается модификатором <code>type</code> со значением <code>link</code>.</li>\n<li>Кнопка отправки формы – предназначена для отправки данных формы на сервер (submit). Задается модификатором <code>type</code> со значением <code>submit</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает текст кнопки.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code></td>\n        <td>Кнопка с иконкой, которая формируется блоком <code>icon</code>.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Адрес ссылки. Применяется только при наличии модификатора блока <code>button_type_link</code>. Кнопка становится ссылкой, а значение <code>url</code> – атрибутом <code>href</code>.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Уникальный идентификатор кнопки.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет последовательность перехода между кнопками при нажатии на <code>Tab</code>.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Значение, отправляемое на сервер. По умолчанию пустое.</td>\n    </tr>\n</table>\n\n<p>Другие допустимые атрибуты блока могут задаваться в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/button/pxTNfkqsHxpJmDhwS0QK2QBs3ZY -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/button/KtCevfKa_rzm7MTQMzA65Z0ZREU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/button/Rb77AVqNcSM2UUBxbCkUkHULKWc -->\n\n<h3 id=\"-_size-\">Размеры кнопок <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам кнопок.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>кнопки</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота<br>кнопки</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Типы кнопок <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки-ссылки (<code>_type_link</code>) и кнопки отправки формы (<code>_type_submit</code>).\nВ случак кнопки-ссылки, дополнительно во входных данных необходимо указать обязательный атрибут <code>url</code>. В таком случае кнопка получает тег <code>&lt;a&gt;</code>, а значение <code>url</code> становится атрибутом <code>href</code>.</p>\n<p><strong>Кнопка-ссылка</strong></p>\n<!-- bem-example: touch-phone.examples/button/El0pc_bZgByjhimDRiJmaUa0ubw -->\n\n<p><strong>Кнопка отправки формы</strong></p>\n<!-- bem-example: touch-phone.examples/button/gtF_RY9_ivjSx1sADQLwlLOSzmo -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_disabled-\">Неактивна <code>_disabled</code></h4>\n<p>В состоянии «неактивна» кнопка видна, но недоступна для действий пользователя.</p>\n<p>Такая кнопка не может получить фокус путем нажатия на клавишу <code>Tab</code>, мышью или другими способами.</p>\n<!-- bem-example: touch-phone.examples/button/VrNTsucLZEWlatBulG8rqd0wHxQ -->\n\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> кнопка всегда находится в фокусе. Нажатие по ней можно выполнить клавишей <code>Space</code> или <code>Enter</code>.</p>\n<!-- bem-example: touch-phone.examples/button/ByAZ1dHx4rZKUf9zbxuHmfOmGNs -->\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие «наведение курсором» на кнопку.</p>\n<h4 id=\"-_pressed-\">Нажатие <code>_pressed</code></h4>\n<p>Определяет состояние «нажатие на кнопку» (действие).</p>\n<h4 id=\"-_togglable-\">Залипание <code>_togglable</code></h4>\n<p>Позволяет реализовать залипание кнопки. Допустимые значения: <code>check</code> и <code>radio</code>.</p>\n<!-- bem-example: touch-phone.examples/button/NYbJzppv5-r9T8LQ0_-SaNLJWds -->\n\n<h4 id=\"-_action-\">Визуальное выделение <code>_action</code></h4>\n<p>Визуально выделяет кнопку на странице.</p>\n<!-- bem-example: touch-phone.examples/button/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"-_pseudo-\">Псевдокнопка <code>_pseudo</code></h4>\n<p>При выборе модификатора <code>pseudo</code> со значением <code>true</code>, кнопка получает прозрачный фон.</p>\n<!-- bem-example: touch-phone.examples/button/h_ijyu_mqbPaJBB22OxZERaFyZA -->\n\n<p>В неактивном состоянии границы псевдокнопки исчезают и она сливается со страницей.</p>\n<!-- bem-example: touch-phone.examples/button/igxPz7KCvCVG6TTxlXRYzE2_5pI -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"__text\">__text</h3>\n<p>Технический элемент. Обрамляет текст кнопки.\nНужен для позиционирования текста внутри кнопки, в том числе для случаев использования вместе с иконкой.</p>\n<!-- bem-example: touch-phone.examples/button/RQ8YcvhxhqjSwO3I3VjLBOanRns -->\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "button",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/button/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/button/simple"
                                }
                            ],
                            "description": "<h1 id=\"button\">button</h1>\n<p>The <code>button</code> block is used for different types of buttons creation. It allows you to manage size, sate, content and appearance of a button.</p>\n<h2 id=\"button-use-cases\">Button use cases</h2>\n<ul>\n<li>button – is used to create the majority of web inteface buttons. Used by default.</li>\n<li>link-button – a button that provides link functionality. Must have a mandatory modifier <code>type</code> with <code>link</code> value.</li>\n<li>action button – a button designed to send data to the server (submit). Must be always located inside a form. Sets <code>type</code> modifier with <code>submit</code> value in BEMJSON to create an action button.</li>\n</ul>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified in corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attributes</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Text of a button.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Button with an icon provided by an <code>icon</code> block.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>URL address. It is used only if <code>button_type_link</code> modifier is specified. In this case a button\n            acts as a link and <code>url</code> value is represented as a <code>href</code> attribute.\n        </td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Unique identifier of a button.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Defines tab order between the buttons.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Value to be sent to a server. It is empty by default.</td>\n    </tr>\n</table>\n\n<p>The other valid block&#39;s attributes could be specified in the <code>attrs</code> field in BEMJSON.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>The block supports the following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>Following examples demonstrate this:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/button/b7paW80CenjDPGtPNxSCdPuUKqg -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/button/8MGVemijL_tqZt4Z3DsedAxNwDo -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/button/u1hTHzxMhorqFlZaZXNkPIBN4WU -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier that is available for <em>normal</em> theme only.</p>\n<p>Provides all types of buttons with the <code>size</code> value.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Following examples demonstrate this:</p>\n<table>\n  <tr>\n    <th>Size</th>\n    <th>Font size</th>\n    <th>Button height</th>\n    <th>Example</th>\n  </tr>\n  <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The block could be represented as a <code>link-button</code> (<code>button_type_link</code>).</p>\n<p>This button type has mandatory attribute <code>url</code> that should be specified in BEMJSON input data. A link-button has an <code>&lt;a&gt;</code> attribute. <code>url</code> value becomes <code>href</code> attribute.</p>\n<pre><code>{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;link&#39; },\n    url : &#39;#&#39;,\n    text : &#39;Link-button&#39;\n}\n</code></pre><h3 id=\"button-s-states\">Button&#39;s states</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, button is visible but not available for user action.</p>\n<p>Disabled button cannot be focused by pressing a <code>Tab</code> or on mouse click.</p>\n<pre><code class=\"lang-bemjsom\">{\n    block : &#39;button&#39;,\n    text : &#39;Disabled&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, disabled : true }\n}\n</code></pre>\n<h4 id=\"_focused\">_focused</h4>\n<p>If <code>focused</code> modifier has <code>true</code> value, the button is always focused. You can click the focused button using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: touch-phone.examples/button/UkvwYMbpDOkZaq5dm0uIlVbQ9GA -->\n\n<h4 id=\"_hovered\">_hovered</h4>\n<p>Defines &quot;hover&quot; action.</p>\n<h4 id=\"_pressed\">_pressed</h4>\n<p>Defines &quot;pressed&quot; state of a button.</p>\n<h4 id=\"_togglable\">_togglable</h4>\n<p>Defines a state of the pressed button when the first click presses the button, and the second returns it to its original state.</p>\n<!-- bem-example: touch-phone.examples/button/xAkZMTZIyMq8S8Cc5mWrpqEj5Cc -->\n\n<h4 id=\"_action\">_action</h4>\n<p>Visually highlights a button on a page.</p>\n<!-- bem-example: touch-phone.examples/button/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"_pseudo\">_pseudo</h4>\n<p>If <code>pseudo</code> modifier has <code>true</code> value, the button background becomes transparent.</p>\n<!-- bem-example: touch-phone.examples/button/GVMyNpdJjINIl0Ab_qhtsWRf_YA -->\nIf pseudo button is disabled, its boarders disappear.\n\n<!-- bem-example: touch-phone.examples/button/fc2vxXBIzzk2stACB-J9vRKlYQ4 -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"__text\">__text</h3>\n<p>This auxiliary element sets a text position inside the button.</p>\n<!-- bem-example: touch-phone.examples/button/t_3HDmaOrqYMmf-3NPSa4KJZWBY -->\n\n<h2 id=\"block-s-dependencies\">Block&#39;s dependencies</h2>\n<ul>\n<li><code>control</code>, that provides public API for the controls</li>\n<li><code>i-bem__dom</code></li>\n<li><code>keyboard</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"button-module\">button Module</h1>\n<h2 id=\"button-block\">button Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns text of the button</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"settext-text-button-\">setText ( text ) → {button}</h4>\n<p>Sets text to the button</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>text {String}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{button}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "checkbox",
                    "data": {
                        "ru": {
                            "name": "checkbox",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/checkbox/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/checkbox/simple"
                                },
                                {
                                    "url": "touch-phone.tests/checkbox-group/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/checkbox-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"checkbox\">checkbox</h1>\n<p>Блок <code>checkbox</code> («чекбокс») позволяет управлять параметром выбора с двумя состояниями – включено и выключено. Используется, когда необходимо выбрать более одного варианта из предложенных.</p>\n<p>Блок создает контейнер, содержащий нативный контрол чекбокс (элемент <code>control</code>) <code>&lt;input class=&quot;checkbox__control&quot; type=&quot;checkbox&quot;&gt;</code>, который скрывается при использовании модификатора <code>theme</code>.</p>\n<p>Атрибут <code>autocomplete</code> принудительно переведен в состояние <code>off</code> для обеспечения корректной работы блока.</p>\n<!-- bem-example: touch-phone.examples/checkbox/XI4uPzI90-UiMiWRig9noeu3mrg -->\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение текстовой строке чекбокса.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя чекбокса. Обязательный атрибут. Является частью пары имя / значение (name / value), используемой с целью отправки формы.</td>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение чекбокса. Является частью пары имя / значение (name / value), используемой с целью отправки формы.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Иконка, которая отображается с помощью блока <code>icon</code>.</td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/checkbox/sae-WwdkdYcrwwgUC5hw2NDih4 -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/checkbox/SojNrUmXHg8qOEVNxLMELyPxf1I -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/checkbox/Sgn48vD0-J9Y9jIc1geFcHu6qVA -->\n\n<h3 id=\"-_size-\">Размер <code>_size</code></h3>\n<p>Задает размер шрифта.</p>\n<p>Обязательный модификатор. Реализован только в теме <em>normal</em>.</p>\n<p>Доступно два размера реализации блока: <strong>M</strong>, <strong>L</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>блока</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота строки<br>элемента <code>__box</code></th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;\n    },\n    text : &#39;Размер M&#39;,\n    name: &#39;name2&#39;,\n    val: &#39;2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>17px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;\n    },\n    text : &#39;Размер L&#39;,\n    name: &#39;name3&#39;,\n    val: &#39;3&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Тип <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки (модификатор <code>type</code> в значении <code>button</code>). В таком случае выбор элемента происходит нажатием на кнопку.</p>\n<!-- bem-example: touch-phone.examples/checkbox/GSqTjc8TX7KG5JpqDbcpS1N0CZM -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> чекбокс всегда находится в фокусе. Если блок представлен в виде кнопки, она приобретает желтую тень. Нажатие по чекбоксу можно выполнить клавишей <code>Space</code> или <code>Enter</code>. Переход по контролам формы осуществляется клавишей <code>Tab</code>.</p>\n<!-- bem-example: touch-phone.examples/checkbox/79qZiqVxBY5r5ZaX_gUFH7MMT5Y -->\n\n<!-- bem-example: touch-phone.examples/checkbox/tU4ymq_plszDwGgrM91feVLkv6s -->\n\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии «неактивен» чекбокс виден, но недоступен для действий пользователя.</p>\n<p>Такой чекбос не может получить фокус путем нажатия на клавишу <code>Tab</code> мышью или другими способами.</p>\n<!-- bem-example: touch-phone.examples/checkbox/GiSyOjElYwkWa_mbNQ4LvfexC8o -->\n\n<!-- bem-example: touch-phone.examples/checkbox/MiwyveGqb-Q3hDh6b5dvanmXUc0 -->\n\n<h4 id=\"-_checked-\">Отмечен <code>_checked</code></h4>\n<p>Модификатор <code>checked</code> в значении <code>true</code> определяет, что чекбокс отмечен (выбран).</p>\n<p>Модификатор <code>checked</code> может быть применен ко всем чекбоксам в группе.</p>\n<!-- bem-example: touch-phone.examples/checkbox/IMYtMHFDZhN_agFpLXmNIDTAK4Q -->\n\n<!-- bem-example: touch-phone.examples/checkbox/ZWO500NSNVuNcdNcItDCWIHDH3o -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>Элемент <code>box</code> служит для отрисовки чекбокса, нативный чекбокс скрыт.</p>\n<p>Добавляется блоку на уровне шаблонизатора.</p>\n<h3 id=\"-__control-\">Контрол <code>__control</code></h3>\n<p>Элемент <code>control</code> служит для использования функциональности нативного контрола чекбокса.</p>\n<p>Добавляется блоку на уровне шаблонизатора.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "checkbox",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/checkbox/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/checkbox/simple"
                                },
                                {
                                    "url": "touch-phone.tests/checkbox-group/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/checkbox-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"checkbox\">checkbox</h1>\n<p>Block <code>checkbox</code> is a graphical user interface element that allows user to make a binary choice. The block is used when more then one case should be selected.</p>\n<p>Block creates a container that includes a native checkbox control (<code>control</code> element) <code>&lt;input class=&quot;checkbox__control&quot; type=&quot;checkbox&quot; attributes&gt;</code> that is hidden if a <code>theme</code> modifier is specified.</p>\n<p><code>autocomplete</code> attribute is forced to <code>off</code> state to provide correct behavior of the block.</p>\n<!-- bem-example: touch-phone.examples/checkbox/XI4uPzI90-UiMiWRig9noeu3mrg -->\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified within the corresponding fields of the block BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies text string value of a checkbox.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies a checkbox name. A mandatory attribute. The name part of the name/val pair associated with this element for form&#39;s submission purposes.</td>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies a checkbox value. Value part of the name/val pair associated with this element for the form&#39;s submission purposes.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>An icon that is rendered using an <code>icon</code> block.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Block supports following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>See the following examples for demonstration:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/checkbox/sae-WwdkdYcrwwgUC5hw2NDih4 -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/checkbox/SojNrUmXHg8qOEVNxLMELyPxf1I -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/checkbox/Sgn48vD0-J9Y9jIc1geFcHu6qVA -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier for <em>normal</em> theme only.\nProvides checkbox text elements with font size value.</p>\n<p>There are two sizes available: <strong>M</strong>, <strong>L</strong>.</p>\n<p>See the following examples for demonstration:</p>\n<table>\n    <tr>\n        <th>Block size</th>\n        <th>Font size</th>\n        <th>String height<br>of <code>__box</code></th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;\n    },\n    text : &#39;Size M&#39;,\n    name: &#39;name2&#39;,\n    val: &#39;2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>17px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;\n    },\n    text : &#39;Size L&#39;,\n    name: &#39;name3&#39;,\n    val: &#39;3&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The <code>checkbox</code> block can be rendered as a button. If needed, use <code>type</code> modifier with <code>button</code> value. In this case <code>checked</code> state of a checkbox is defined by clicking the button.</p>\n<!-- bem-example: touch-phone.examples/checkbox/jnUIxNLmi2Ktczi3mi_QWJt7-cc -->\n\n<h3 id=\"states-of-a-checkbox\">States of a checkbox</h3>\n<h4 id=\"_focused\">_focused</h4>\n<p>Checkbox is focused if block has <code>focused</code> modifier with <code>true</code> value. If block is designed as a button, in <code>focused</code> state it has a yellow shadow.</p>\n<p>You can tick off the focused checkbox using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: touch-phone.examples/checkbox/dOZ5XkX9ojCi2r9kiY4DJa4YWvA -->\n\n<!-- bem-example: touch-phone.examples/checkbox/v-9BRGnxLdDNcDKCfuStYG9PRYU -->\n\n<h4 id=\"-_disabled-\"><code>_disabled</code></h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, the checkbox is visible but not available for user&#39;s action.</p>\n<p>Disabled checkbox cannot be focused by pressing <code>Tab</code> or on mouse click.</p>\n<!-- bem-example: touch-phone.examples/checkbox/Dz3sVcJ6LQvatoLktNJM35QPIso -->\n\n<!-- bem-example: touch-phone.examples/checkbox/Lc_qQBikKsf-9GuBeR0FLc4-3k0 -->\n#### <code>_checked</code>\n\n<code>checked</code> modifier with <code>true</code> value defines checkbox as checked.\n\n<code>checked</code> modifier can be used for all checkboxes within the group.\n\n<!-- bem-example: touch-phone.examples/checkbox/QcTYyDncRH6DrvinlVti5iujuxU -->\n\n<!-- bem-example: touch-phone.examples/checkbox/9OMss9AsUlfFVAPsG8SlTTcVlLI -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p><code>box</code> element is used to draw the checkbox. Native checkbox is hidden.</p>\n<p><code>box</code> element is added to the block on template engine level.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p><code>control</code> element is used to provide native control checkbox functionality.</p>\n<p><code>control</code> element is added to the block on template engine level.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"checkbox-module\">checkbox Module</h1>\n<h2 id=\"checkbox-block\">checkbox Block</h2>\n<p>Aughtments {control}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "checkbox-group",
                    "jsdoc": "<h1 id=\"checkbox-group-module\">checkbox-group Module</h1>\n<h2 id=\"checkbox-group-block\">checkbox-group Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"setval-val-data-checkbox-group-\">setVal ( val, [data] ) → {checkbox-group}</h4>\n<p>Sets control value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {[object Object]}<br/>\nvalue</li>\n<li>[data] {Object}<br/>\nadditional data</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{checkbox-group}</p>\n<p>this</p>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getcheckboxes-object-object-\">getCheckboxes () → {[object Object]}</h4>\n<p>Returns checkboxes</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{[object Object]}</p>\n<h1 id=\"checkbox-module\">checkbox Module</h1>\n<h2 id=\"checkbox-block\">checkbox Block</h2>\n<p>Aughtments {control}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n",
                    "data": {
                        "ru": {
                            "name": "checkbox-group",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/checkbox-group/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/checkbox-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"checkbox-group\">checkbox-group</h1>\n<p>Блок <code>checkbox-group</code> служит для отображения группы однотипных переключателей – чекбоксов (блоков <code>checkbox</code>). Любой из переключателей группы может быть либо активен, либо нет вне зависимости от состояния других переключателей.</p>\n<p>Блок позволяет управлять внешним видом и состоянием вложенных переключателей. </p>\n<p>В результате BEMHTML-преобразований блок <code>checkbox-group</code> становится HTML-элементом с тегом <code>&lt;span&gt;</code> – контейнером, содержащим группу чекбоксов и подписи к ним.</p>\n<h2 id=\"-\">Допустимые параметры блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td><code>String</code></td>\n        <td>Имя группы чекбоксов. Преобразуется в HTML-атрибут <code>name</code> вложенного блока <code>input</code>.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td><code>Array</code></td>\n        <td>Массив хешей. Каждый хеш соответствует одному переключателю группы чекбоксов и содержит набор его параметров.</td>\n    </tr><br></table>\n\n<p>Среди параметров, передаваемых для переключателя в массиве хешей <code>option</code>, обязательными являются:</p>\n<ul>\n<li><code>val</code> (<code>String</code>|<code>Number</code>) – значение, возвращаемое выбранным чекбоксом (элемент <code>checkbox__control</code>);</li>\n<li><code>text</code>  (<code>String</code>) – подпись, отображаемая для текущего переключателя. </li>\n</ul>\n<p>Помимо обязательных параметров в массиве <code>option</code> могут быть переданы любые параметры, допустимые для блока <code>checkbox</code>, например, модификаторы <code>_checked</code> или <code>_disabled</code>.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>). </p>\n<p>Наглядно показано на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/checkbox-group/tnfPsUBEHfiKv4Ay-bSkmy06NTs -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/checkbox-group/E4bazg4TDlm1W1tmOFMVgeAT1k0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/checkbox-group/uf6KFu6RRJ3CJRzlZj5THp-53ss -->\n\n\n\n<h3 id=\"-_size-\">Размер переключателей <code>_size</code></h3>\n<p>Обязательный модификатор. Модификатор <code>_size</code> устанавливает размер переключателей для всех типов групп чекбоксов.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>В зависимости от значения модификатора <code>_type</code> доступны следующие размеры реализации блока:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Обычная группа чекбоксов и <code>_type_line</code></th>\n        <th>Кнопочная группа чекбоксов (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n<p>Размеры на примере темы <em>normal</em> с модификатором <code>_type_button</code>:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;s&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;xl&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-_type-\">Тип группы чекбоксов <code>_type</code></h3>\n<p>Доступны следующие значения модификатор <code>_type</code>:</p>\n<ul>\n<li>Модификатор <code>_type</code> со значением <code>button</code>. Используется для создания кнопочной группы чекбоксов – блока из кнопок-переключателей. </li>\n<li>Модификатор <code>_type</code> со значением <code>line</code> используется для создания группы чекбоксов с выравниванием в строку. После каждого переключателя группы, кроме последнего, автоматически добавляется отступ справа. Размер отступа зависит от значения модификатора <code>_size</code>. Реализован только в теме <em>normal</em>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычная группа чекбоксов</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;checkbox-normal&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Кнопочная группа чекбоксов (<code>_type_button</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Строчная группа чекбоксов (<code>_type_line</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;line&#39; \n    },\n    name : &#39;checkbox-line&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h3 id=\"-_disabled-\">Неактивна <code>_disabled</code></h3>\n<p>В состоянии &quot;неактивна&quot; группа чекбоксов отображается, но недоступна для действий пользователя.  </p>\n<p>Такая группа чекбоксов не будет получать фокус (модификатор <code>_focused</code>).</p>\n<p>При установке модификатора <code>_disabled</code> для группы всем переключателям группы также устанавливается модификатор <code>_disabled</code>. Как следствие, для них не будут:</p>\n<ul>\n<li>устанавливаться модификаторы состояния <code>_hovered</code>, <code>_pressed</code> и <code>_focused</code>;</li>\n<li>изменяться значения модификатора <code>_checked</code>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/checkbox-group/0fQuAArjlUOj9blciZz3wIEpK-4 -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>_focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда один из его элементов находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/checkbox-group/sXOo9d9aGajzFuorGRIhhEViolU -->\n\n\n<h2 id=\"-\">Зависимости блока</h2>\n<p>Блок <code>checkbox-group</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>checkbox</code></li>\n<li><code>jquery</code></li>\n</ul>\n\n<h1 id=\"checkbox\">checkbox</h1>\n<p>Блок <code>checkbox</code> («чекбокс») позволяет управлять параметром выбора с двумя состояниями – включено и выключено. Используется, когда необходимо выбрать более одного варианта из предложенных.</p>\n<p>Блок создает контейнер, содержащий нативный контрол чекбокс (элемент <code>control</code>) <code>&lt;input class=&quot;checkbox__control&quot; type=&quot;checkbox&quot;&gt;</code>, который скрывается при использовании модификатора <code>theme</code>.</p>\n<p>Атрибут <code>autocomplete</code> принудительно переведен в состояние <code>off</code> для обеспечения корректной работы блока.</p>\n<!-- bem-example: touch-phone.examples/checkbox-group/XI4uPzI90-UiMiWRig9noeu3mrg -->\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение текстовой строке чекбокса.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя чекбокса. Обязательный атрибут. Является частью пары имя / значение (name / value), используемой с целью отправки формы.</td>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение чекбокса. Является частью пары имя / значение (name / value), используемой с целью отправки формы.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Иконка, которая отображается с помощью блока <code>icon</code>.</td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/checkbox-group/sae-WwdkdYcrwwgUC5hw2NDih4 -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/checkbox-group/SojNrUmXHg8qOEVNxLMELyPxf1I -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/checkbox-group/Sgn48vD0-J9Y9jIc1geFcHu6qVA -->\n\n<h3 id=\"-_size-\">Размер <code>_size</code></h3>\n<p>Задает размер шрифта.</p>\n<p>Обязательный модификатор. Реализован только в теме <em>normal</em>.</p>\n<p>Доступно два размера реализации блока: <strong>M</strong>, <strong>L</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>блока</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота строки<br>элемента <code>__box</code></th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;\n    },\n    text : &#39;Размер M&#39;,\n    name: &#39;name2&#39;,\n    val: &#39;2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>17px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;\n    },\n    text : &#39;Размер L&#39;,\n    name: &#39;name3&#39;,\n    val: &#39;3&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Тип <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки (модификатор <code>type</code> в значении <code>button</code>). В таком случае выбор элемента происходит нажатием на кнопку.</p>\n<!-- bem-example: touch-phone.examples/checkbox-group/GSqTjc8TX7KG5JpqDbcpS1N0CZM -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> чекбокс всегда находится в фокусе. Если блок представлен в виде кнопки, она приобретает желтую тень. Нажатие по чекбоксу можно выполнить клавишей <code>Space</code> или <code>Enter</code>. Переход по контролам формы осуществляется клавишей <code>Tab</code>.</p>\n<!-- bem-example: touch-phone.examples/checkbox-group/79qZiqVxBY5r5ZaX_gUFH7MMT5Y -->\n\n<!-- bem-example: touch-phone.examples/checkbox-group/tU4ymq_plszDwGgrM91feVLkv6s -->\n\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии «неактивен» чекбокс виден, но недоступен для действий пользователя.</p>\n<p>Такой чекбос не может получить фокус путем нажатия на клавишу <code>Tab</code> мышью или другими способами.</p>\n<!-- bem-example: touch-phone.examples/checkbox-group/GiSyOjElYwkWa_mbNQ4LvfexC8o -->\n\n<!-- bem-example: touch-phone.examples/checkbox-group/MiwyveGqb-Q3hDh6b5dvanmXUc0 -->\n\n<h4 id=\"-_checked-\">Отмечен <code>_checked</code></h4>\n<p>Модификатор <code>checked</code> в значении <code>true</code> определяет, что чекбокс отмечен (выбран).</p>\n<p>Модификатор <code>checked</code> может быть применен ко всем чекбоксам в группе.</p>\n<!-- bem-example: touch-phone.examples/checkbox-group/IMYtMHFDZhN_agFpLXmNIDTAK4Q -->\n\n<!-- bem-example: touch-phone.examples/checkbox-group/ZWO500NSNVuNcdNcItDCWIHDH3o -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>Элемент <code>box</code> служит для отрисовки чекбокса, нативный чекбокс скрыт.</p>\n<p>Добавляется блоку на уровне шаблонизатора.</p>\n<h3 id=\"-__control-\">Контрол <code>__control</code></h3>\n<p>Элемент <code>control</code> служит для использования функциональности нативного контрола чекбокса.</p>\n<p>Добавляется блоку на уровне шаблонизатора.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "checkbox-group",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/checkbox-group/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/checkbox-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"checkbox-group\">checkbox-group</h1>\n<p>A <code>checkbox-group</code> block is a set of independed switches – checkboxes (a <code>checkbox</code> block). Any of group&#39;s switches can be either active or not regardless of other switches state.</p>\n<p>The block allows to manage the appearance and state of a nested switches.</p>\n<p>On a web page <code>checkbox-group</code> block will be rendered to <code>&lt;span&gt;</code> HTML element, with a nested set of checkboxes and their labels.</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified in the corresponding fields of block BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td><code>String</code></td>\n        <td>The checkbox group name. Renders to nested <code>input</code> block&#39;s <code>name</code> HTML attribute.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td><code>Array</code></td>\n        <td>The option objects array. Each object within the array corresponds to one switch and contains it&#39;s attributes set.</td>\n    </tr><br></table>\n\n<p>Following attributes should be passed in an <code>option</code> field for each switch:</p>\n<ul>\n<li><code>val</code> (<code>String</code> | <code>Number</code>) – value returned by selected switcher (a &#39;checkbox__control&#39; element);</li>\n<li><code>text</code> (<code>String</code>) – a text label for the current switch.</li>\n</ul>\n<p>In an <code>options</code> array any valid <code>checkbox</code> block attributes can be passed. For example, a <code>_checked</code> or <code>_disabled</code> modifiers can be set for the <code>checkbox</code>.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/checkbox-group/tnfPsUBEHfiKv4Ay-bSkmy06NTs -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/checkbox-group/E4bazg4TDlm1W1tmOFMVgeAT1k0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/checkbox-group/uf6KFu6RRJ3CJRzlZj5THp-53ss -->\n\n\n<h3 id=\"the-sizes-_size-\">The sizes <code>_size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides all types of checkbox groups with the size value.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Depending on a <code>_type</code> modifier value following sizes are available:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Normal checkbox group and <code>_type_line</code></th>\n        <th>Button checkbox group (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<p>Here are some examples with <em>normal</em> theme and the <code>_type_button</code> modifier is set:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;s&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;xl&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"checkbox-group-type-_type-\">Checkbox group type <code>_type</code></h3>\n<p>A <code>_type</code> modifier can have following values:</p>\n<ul>\n<li><code>button</code>. It is used for creation of button checkbox group – a block of button switches;</li>\n<li><code>line</code>. It is used for line-aligned checkbox group creation. Right gap is automatically added after each switch of the group except the last one. Available only for <em>normal</em> theme.</li>\n</ul>\n<p>Modifier is available for all block themes.</p>\n<table>\n    <tr>\n        <th>Type</th>\n\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Normal checkbox group</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;checkbox-normal&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Button checkbox group</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;checkbox-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Line-aligned checkbox group (<code>_type_line</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;line&#39; \n    },\n    name : &#39;checkbox-line&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive menu item. Inactive menu item is displayed, but not available for user actions.</p>\n<p>Such a group will not obtain a focus (<code>_focused</code> modifier will not be toggled).</p>\n<p>When a <code>_disabled</code> modifier is set for the group, all it&#39;s switches also will be disabled. As a result, the following will not be performed on switches:</p>\n<ul>\n<li>state modifiers <code>_hovered</code>, <code>_pressed</code> and <code>_focused</code> toggling;</li>\n<li>switching between <code>_checked</code> modifier&#39;s values.</li>\n</ul>\n<p>Modifier is available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/checkbox-group/0fQuAArjlUOj9blciZz3wIEpK-4 -->\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"-_focused-\"><code>_focused</code></h4>\n<p>A <code>_focused</code> \n_focused modifier is automatically toggled when one of the block&#39;s elements is in focus. For example, on mouse click or by <code>Tab</code> key press. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/checkbox-group/sXOo9d9aGajzFuorGRIhhEViolU -->\n\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>checkbox</code></li>\n<li><code>jquery</code></li>\n</ul>\n\n<h1 id=\"checkbox\">checkbox</h1>\n<p>Block <code>checkbox</code> is a graphical user interface element that allows user to make a binary choice. The block is used when more then one case should be selected.</p>\n<p>Block creates a container that includes a native checkbox control (<code>control</code> element) <code>&lt;input class=&quot;checkbox__control&quot; type=&quot;checkbox&quot; attributes&gt;</code> that is hidden if a <code>theme</code> modifier is specified.</p>\n<p><code>autocomplete</code> attribute is forced to <code>off</code> state to provide correct behavior of the block.</p>\n<!-- bem-example: touch-phone.examples/checkbox-group/XI4uPzI90-UiMiWRig9noeu3mrg -->\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified within the corresponding fields of the block BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies text string value of a checkbox.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies a checkbox name. A mandatory attribute. The name part of the name/val pair associated with this element for form&#39;s submission purposes.</td>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies a checkbox value. Value part of the name/val pair associated with this element for the form&#39;s submission purposes.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>An icon that is rendered using an <code>icon</code> block.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Block supports following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>See the following examples for demonstration:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/checkbox-group/sae-WwdkdYcrwwgUC5hw2NDih4 -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/checkbox-group/SojNrUmXHg8qOEVNxLMELyPxf1I -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/checkbox-group/Sgn48vD0-J9Y9jIc1geFcHu6qVA -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier for <em>normal</em> theme only.\nProvides checkbox text elements with font size value.</p>\n<p>There are two sizes available: <strong>M</strong>, <strong>L</strong>.</p>\n<p>See the following examples for demonstration:</p>\n<table>\n    <tr>\n        <th>Block size</th>\n        <th>Font size</th>\n        <th>String height<br>of <code>__box</code></th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;\n    },\n    text : &#39;Size M&#39;,\n    name: &#39;name2&#39;,\n    val: &#39;2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>17px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;checkbox&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;\n    },\n    text : &#39;Size L&#39;,\n    name: &#39;name3&#39;,\n    val: &#39;3&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The <code>checkbox</code> block can be rendered as a button. If needed, use <code>type</code> modifier with <code>button</code> value. In this case <code>checked</code> state of a checkbox is defined by clicking the button.</p>\n<!-- bem-example: touch-phone.examples/checkbox-group/jnUIxNLmi2Ktczi3mi_QWJt7-cc -->\n\n<h3 id=\"states-of-a-checkbox\">States of a checkbox</h3>\n<h4 id=\"_focused\">_focused</h4>\n<p>Checkbox is focused if block has <code>focused</code> modifier with <code>true</code> value. If block is designed as a button, in <code>focused</code> state it has a yellow shadow.</p>\n<p>You can tick off the focused checkbox using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: touch-phone.examples/checkbox-group/dOZ5XkX9ojCi2r9kiY4DJa4YWvA -->\n\n<!-- bem-example: touch-phone.examples/checkbox-group/v-9BRGnxLdDNcDKCfuStYG9PRYU -->\n\n<h4 id=\"-_disabled-\"><code>_disabled</code></h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, the checkbox is visible but not available for user&#39;s action.</p>\n<p>Disabled checkbox cannot be focused by pressing <code>Tab</code> or on mouse click.</p>\n<!-- bem-example: touch-phone.examples/checkbox-group/Dz3sVcJ6LQvatoLktNJM35QPIso -->\n\n<!-- bem-example: touch-phone.examples/checkbox-group/Lc_qQBikKsf-9GuBeR0FLc4-3k0 -->\n#### <code>_checked</code>\n\n<code>checked</code> modifier with <code>true</code> value defines checkbox as checked.\n\n<code>checked</code> modifier can be used for all checkboxes within the group.\n\n<!-- bem-example: touch-phone.examples/checkbox-group/QcTYyDncRH6DrvinlVti5iujuxU -->\n\n<!-- bem-example: touch-phone.examples/checkbox-group/9OMss9AsUlfFVAPsG8SlTTcVlLI -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p><code>box</code> element is used to draw the checkbox. Native checkbox is hidden.</p>\n<p><code>box</code> element is added to the block on template engine level.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p><code>control</code> element is used to provide native control checkbox functionality.</p>\n<p><code>control</code> element is added to the block on template engine level.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    }
                },
                {
                    "name": "control",
                    "data": {
                        "ru": {
                            "name": "control",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/control-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "control",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/control-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "control-group",
                    "data": {
                        "ru": {
                            "name": "control-group",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/control-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"control-group\">control-group</h1>\n<p>Блок <code>control-group</code> – это обертка, предназначенная для визуальной группировки других блоков. Группируемые блоки помещаются в поле <code>content</code> BEMJSON декларации.</p>\n<p>Блок реализован в технологии CSS и не вводит никакой дополнительной логики. Для вложенных блоков должна быть установлена тема <em>normal</em>.</p>\n<p>В результате применения шаблонов, блок <code>control-group</code> становится на странице HTML-элементом с тегом <code>&lt;div&gt;</code>.</p>\n<h2 id=\"-\">Варианты использования</h2>\n<p>Блок позволяет визуально группировать следующие блоки:</p>\n<ul>\n<li><code>input</code> – поле ввода;</li>\n<li><code>button</code> – кнопка.</li>\n</ul>\n<p>Например:</p>\n<!-- bem-example: touch-phone.examples/control-group/fejhOE157s9FNaOpEk9kSMdri-o -->\n\n\n<p>Кроме того, можно группировать блоки, использующие <code>input</code> или <code>button</code>, как один из компонентов. Например, в группу можно включить блок <code>select</code>, управляющим компонентом для которого служит блок <code>button</code>: </p>\n<!-- bem-example: touch-phone.examples/control-group/lHp4oG073ZGY5eBJUg8oGuaTzJY -->\n\n<p>Могут быть сгруппированы следующие блоки, использующие в качестве компонента блок <code>button</code>:</p>\n<ul>\n<li><code>select</code>;</li>\n<li><code>dropdown</code> (с модификатором <code>dropdown_switcher_button</code>);</li>\n<li><code>checkbox</code> (с модификатором <code>checkbox_type_button</code>);</li>\n<li><code>radio</code> (с модификатором <code>radio_type_button</code>).</li>\n</ul>\n<h2 id=\"-\">Влияние группировки на блоки</h2>\n<h3 id=\"-input-\"><code>input</code></h3>\n<p>Для всех сгруппированных блоков <code>input</code>, кроме последнего, не отображается правая граница (CSS свойство <code>right</code> устанавливается равным нулю для псевдоэлемента <code>:before</code>). Для последнего блока группы толщина правой границы равна 1px.</p>\n<p>Например:</p>\n<!-- bem-example: touch-phone.examples/control-group/Vn0lE-sI73yNqDW_-Ki-KHmd-HE -->\n\n\n<h3 id=\"-button-\"><code>button</code></h3>\n<p>Для блоков <code>button</code> группировка влияет на скругление углов и наличие правой границы. Внешний вид зависит от положения блока <code>button</code> внутри группы – первый и последний элементы группы визуально отличаются от прочих:</p>\n<table>\n    <tr>\n        <th>Положение в группе</th>\n        <th>Скругление углов</th>\n        <th>Правый отступ</th>\n    </tr>\n    <tr>\n        <td>Первый</td>\n        <td>Скруглены левые углы, верхний и нижний</td>\n        <td>-</td>\n    </tr>\n    <tr>\n        <td>Последний</td>\n        <td>Скруглены правые углы, верхний и нижний</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <td>Не из крайних</td>\n        <td>Без скругления углов</td>\n        <td>-</td>\n    </tr><br></table>\n\n<p>Например:</p>\n<!-- bem-example: touch-phone.examples/control-group/1bLuZM-NN_21QWtOqEuefvxxCuE -->\n"
                        },
                        "en": {
                            "name": "control-group",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/control-group/simple"
                                }
                            ],
                            "description": ""
                        }
                    },
                    "jsdoc": ""
                },
                {
                    "name": "dropdown",
                    "jsdoc": "<h1 id=\"dropdown-module\">dropdown Module</h1>\n<h2 id=\"dropdown-block\">dropdown Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getpopup-popup-\">getPopup () → {popup}</h4>\n<p>Returns popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<h4 id=\"getswitcher-i-bem__dom-\">getSwitcher () → {i-bem__dom}</h4>\n<p>Returns switcher</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{i-bem__dom}</p>\n<h3 id=\"static-methods\">Static methods</h3>\n<h4 id=\"onswitcherclick-e-protected\">onSwitcherClick ( e )  protected</h4>\n<p>On BEM click event handler</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>e {events:Event}</li>\n</ul>\n<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup_autoclosable_true\">popup_autoclosable_true</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup_autoclosable_true\">popup_autoclosable_true</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n",
                    "data": {
                        "ru": {
                            "name": "dropdown",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/dropdown/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/dropdown/simple"
                                }
                            ],
                            "description": "<h1 id=\"dropdown\">dropdown</h1>\n<p>Блок <code>dropdown</code> используется для создания выпадающих элементов и позволяет изменять их состояние, поведение и внешний вид. Блок состоит из двух компонентов – управляющего компонента и попапа (блок <code>popup</code>), который отображается поверх остальных элементов страницы.</p>\n<p>Управляющий компонент при щелчке мышью вызывает попап (устанавливает для блока <code>popup</code> модификатор <code>_visible</code>).</p>\n<p>В зависимости от значения модификатора <code>_switcher</code> управляющим компонентом может служить ссылка, псевдоссылка или кнопка.</p>\n<h2 id=\"-\">Допустимые параметры блока</h2>\n<p>Допустимые параметры блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>switcher</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Текст управляющего компонента. Может содержать фрагмент BEMJSON, например, если нужно обернуть управляющий компонент в другой блок или передать ему дополнительные параметры. </td>\n    </tr>\n    <tr>\n        <td>popup</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Текст или фрагмент BEMJSON, отображаемый во всплывающем окне <code>popup</code>. BEMJSON при этом будет преобразован в HTML.</td>\n    </tr>\n</table>\n\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Наглядно показано на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/dropdown/WcgFmT2l-N83y2w6hRJ-qqSpzkY -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/dropdown/3LxBJkGCYdsRIM3jgENaGnBRRuI -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/dropdown/7xwP-2BJ2nd_leTd5MyNfCK8-wA -->\n\n\n\n<h3 id=\"-_switcher-\">Управляющий компонент <code>_switcher</code></h3>\n<p>Обязательный модификатор.</p>\n<p>Модификатор отвечает за то, какой блок будет использоваться в качестве управляющего компонента:</p>\n<ul>\n<li><code>_switcher_link</code> - ссылка. В качестве управляющего компонента используется блок <code>link</code>.</li>\n<li><code>_switcher_button</code> - кнопка. В качестве управляющего компонента используется блок <code>button</code>.</li>\n</ul>\n<p>Реализован во всех темах.</p>\n<!-- bem-example: touch-phone.examples/dropdown/TZQCpS37p6PxRpc44EhMDX395AA -->\n\n\n<h3 id=\"-_disabled-\">Неактивен <code>_disabled</code></h3>\n<p>В состоянии &quot;неактивен&quot; дропдаун отображается, но недоступен для действий пользователя.</p>\n<p>Для такого блока не будет устанавливаться состояние <code>_opened</code> при щелчке мышью по управляющему компоненту.</p>\n<p>При установке для блока модификатора <code>_disabled</code> для компонентов блока не будут производиться следующие действия:</p>\n<ul>\n<li>Блок </code>popup – установка модификатора <code>_visible</code>;</li>\n<li>Управляющий компонент <code>link</code> – установка состояния <code>_focused</code>. Ссылка не получает фокус по щелчку мышью или по нажатию клавиши <code>Tab</code>;</li>\n<li>Управляющий компонент <code>button</code>:<ul>\n<li>установка состояния <code>_focused</code>. Кнопка не получает фокус по щелчку мышью или по нажатию клавиши <code>Tab</code>;</li>\n<li>установка состояния <code>_hovered</code> при наведении указателем мыши.</li>\n</ul>\n</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/dropdown/T2LPHF5xz8GwGt4VOGdjyOJF_lA -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_opened-\">Открыт <code>_opened</code></h4>\n<p>Модификатор <code>_opened</code> в значении <code>true</code> автоматически выставляется блоку при щелчке мышью по управляющему компоненту блока.</p>\n<!-- bem-example: touch-phone.examples/dropdown/ZBE6qMuVVtpA4JVJk1Z0eHxMx2Y -->\n\n\n<p>Модификатор снимается при повторном щелчке мышью по управляющему компоненту или за пределами попапа (зависит от наличия модификатора <code>_autoclosable</code> блока <code>popup</code>).</p>\n<h2 id=\"bemjson-switcher-popup-\">BEMJSON в атрибутах <code>switcher</code> и <code>popup</code></h2>\n<p>Атрибуты управляющего компонента и попапа могут содержать фрагмент БЭМ-дерева, например, если нужно обернуть управляющий компонент в другой блок или передать ему дополнительные параметры.</p>\n<p>Например, можно сделать кнопку управляющего компонента &quot;залипающей&quot;:</p>\n<!-- bem-example: touch-phone.examples/dropdown/8Fm0DE_2FJy1NDrA8TqWefQAcRg -->\n\n\n<p>Или создать на основе блока выпадающий селект:</p>\n<!-- bem-example: touch-phone.examples/dropdown/vkuviqNPhqQ2uV_ZhFfhVegfskc -->\n\n\n<h2 id=\"-\">Зависимости блока</h2>\n<p>Блок <code>dropdown</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>dom</code></li>\n<li><code>popup</code></li>\n<li><code>button</code>/<code>link</code> (в зависимости от управляющего компонента <code>_switcher</code>)</li>\n</ul>\n\n<h1 id=\"popup\">popup</h1>\n<p>Блок <code>popup</code> используется для создания выпадающих элементов и позволяет изменять их состояние, поведение и внешний вид. Блок отображается поверх остальных элементов страницы.</p>\n<p>Попап может быть вызван различными элементами страницы, например, кнопками или псевдоссылками.</p>\n<p>В момент первого показа (установка модификатора <code>_visible</code>) DOM-элемент блока создается в конце <code>&lt;body&gt;</code>.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/dropdown/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/dropdown/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/dropdown/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n\n<h3 id=\"-_visible-\">Видимый <code>_visible</code></h3>\n<p>Модификатор, отвечающий за видимость блока. При значении модификатора <code>false</code> блок не отображается.</p>\n<!-- bem-example: touch-phone.examples/dropdown/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"-_direction-\">Расположение относительно родителя <code>_direction</code></h3>\n<p>Модификатор управляет положением попапа на странице относительно вызвавшего его блока. Расположение блока определяется автоматически, исходя из массива допустимых расположений и положения родителя на странице.</p>\n<p>Выбранное расположение влияет на направление анимации раскрытия.</p>\n<p>По умолчанию используется следующий массив допустимых расположений:</p>\n<table>\n    <tr>\n        <th> Направление раскрытия </td>\n        <th> Индекс в массиве </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>Чтобы управлять расположением попапа, можно ограничить массив расположений, оставив только требуемые. Пользовательский массив нужно передать в качестве JS-параметра с ключом <code>directions</code>. При этом из значений массива будет выбрано наиболее подходящее, исходя из положения родителя на странице.</p>\n<p>Например, если требуется, чтобы попап раскрывался над родителем:</p>\n<!-- bem-example: touch-phone.examples/dropdown/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Или разместить попап справа по центру:</p>\n<!-- bem-example: touch-phone.examples/dropdown/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"-_autoclosable-\">Автоматическое скрытие <code>_autoclosable</code></h3>\n<p>Модификатор отвечает за автоматическое скрытие попапа при клике вне блока. При установке модификатора <code>_autoclosable</code> в значении <code>_true</code> блок будет скрываться при щелчке за его пределами (будет снят модификатор <code>_visible</code>).</p>\n<!-- bem-example: touch-phone.examples/dropdown/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"-popup-\">Взаимосвязи между popup&#39;ами</h2>\n<p>Так как попап выносит себя в конец <code>&lt;body&gt;</code>, чтобы перекрывать другие элементы страницы, возникает необходимость в построении взаимосвязей. Блок умеет выстраивать связи Parent → [ Child, Child, ... ]. Для этого он выполняет проверку, вложен ли блок, вызывающий попап в другой <code>popup</code>. Потомки знают о наличии родителя.\nЕсли бы этих взаимосвязей не было, то родительский попап (при наличии модификатора <code>autoclosable</code> со значением <code>true</code>) закрылся бы при клике внутри дочернего.</p>\n<p>Другими словами модификатор <code>autoclosable</code> со значением <code>true</code> означает, что попап закроется сам и закроет свои дочерние блоки при клике за пределами его самого и дочерних попапов.</p>\n<p>Дочерние блоки popup можно рассматривать в виде цепочки 1 → 2 → 3 → 4. При клике на втором попапе – закрываются третий и четвертый. При клике в первом – закрываются второй, третий, четвертый. При клике за пределами любого попапа из цепочки – закроются все.</p>\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>popup</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "dropdown",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/dropdown/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/dropdown/simple"
                                }
                            ],
                            "description": "<h1 id=\"dropdown\">dropdown</h1>\n<p>A <code>dropdown</code> block is used to create different types of dropdowns.  It allows to manage state, behavior and appearance of dropdowns. Block consist of two components – the control component and the popup window (<code>popup</code> block). Popup window is displayed in front of all other page elements.</p>\n<p>On mouse click over control component it shows the popup window (toggles <code>_visible</code> modifier for the <code>popup</code> block).</p>\n<p>Depending on a <code>_switcher</code> modifier value, either link, pseudo link or button can be used as a control component.</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in a corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>switcher</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Label for the control component. May contain a string with the text label or BEMJSON notation of nested BEM-entities. For example, it allows to wrap the control component with other block or pass it an additional attribute values.</td>\n    </tr>\n       <tr>\n        <td>popup</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Text value or BEMJSON description of popup window content. In runtime BEMJSON entities will be rendered into HTML.</td>\n    </tr>\n</table>\n\n<p>Also, BEMJSON declaration can contain an arbitrary fields used for templating.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to block.</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/dropdown/WcgFmT2l-N83y2w6hRJ-qqSpzkY -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/dropdown/3LxBJkGCYdsRIM3jgENaGnBRRuI -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/dropdown/7xwP-2BJ2nd_leTd5MyNfCK8-wA -->\n\n\n<h3 id=\"control-component-type-_switcher-\">Control component type <code>_switcher</code></h3>\n<p>Mandatory modifier. It specifies which block to use as a control component. Next types are available:</p>\n<ul>\n<li><code>_switcher_link</code> - the pseudo link. <code>link</code> block is used as a base of the control component. </li>\n<li><code>_switcher_button</code> - the button. <code>button</code> block is used as a base of the control component. </li>\n</ul>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/dropdown/TZQCpS37p6PxRpc44EhMDX395AA -->\n\n\n<h3 id=\"-_disabled-\"><code>_disabled</code></h3>\n<p>If a <code>_disabled</code> modifier is set, the dropdown is displayed but not available for user&#39;s actions.</p>\n<p>For such disabled block an <code>_opened</code> state will not be toggled on mouse click.</p>\n<p>If a <code>_disabled</code> modifier set, it prevents the block components from the following actions:</p>\n<ul>\n<li><code>popup</code> block – <code>_visible</code> modifier toggle;</li>\n<li><code>link</code> control component – <code>_focused</code> state toggle. Link does not obtain focus on mouse click or by <code>Tab</code> key press;</li>\n<li><code>button</code> control component:<ul>\n<li><code>_focused</code> state toggle. Button will not obtain focus on mouse click or by <code>Tab</code> key press;</li>\n<li><code>_hovered</code> state toggle on mouse pointer hover.</li>\n</ul>\n</li>\n</ul>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/dropdown/T2LPHF5xz8GwGt4VOGdjyOJF_lA -->\n\n\n<h3 id=\"dropdown-s-states\">dropdown&#39;s states</h3>\n<h4 id=\"-_opened-\"><code>_opened</code></h4>\n<p><code>_opened</code> modifier toggles automatically on mouse click on the control component.</p>\n<!-- bem-example: touch-phone.examples/dropdown/ZBE6qMuVVtpA4JVJk1Z0eHxMx2Y -->\n\n\n<p>Modifier can be removed by re-clicking on the control component or outside popup&#39;s window (in case of <code>_autoclosable</code> modifier availability for <code>popup</code> block).</p>\n<h2 id=\"bemjson-value-of-switcher-and-popup-attributes\">BEMJSON value of <code>switcher</code> and <code>popup</code> attributes</h2>\n<p>As the control component and the popup attributes can contain BEM-entities it can be used for different purposes such as:</p>\n<ul>\n<li>control component warping or modifying;</li>\n<li>passing additional attribute values to control component;</li>\n<li>creating nested content in popup window.</li>\n</ul>\n<p>For example, you can make a control component&#39;s button toggleable:</p>\n<!-- bem-example: touch-phone.examples/dropdown/8Fm0DE_2FJy1NDrA8TqWefQAcRg -->\n\n\n<p>Or make dropdown list selector based on block:</p>\n<!-- bem-example: touch-phone.examples/dropdown/vkuviqNPhqQ2uV_ZhFfhVegfskc -->\n\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The <code>dropdown</code> block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>dom</code></li>\n<li><code>popup</code></li>\n<li><code>button</code>/<code>link</code> (depending on <code>_switcher</code> control component type)</li>\n</ul>\n\n<h1 id=\"popup\">popup</h1>\n<p>A <code>popup</code> block is used for popups creation. It allows to manage state, behavior and appearance of popups. Block is displayed in front of all other page elements.</p>\n<p>Popup can be displayed by different page elements like pseudo links or buttons.</p>\n<p>At the moment of first display (<code>_visible</code> modifier toggle) block&#39;s DOM element is created in the end of document <code>&lt;body&gt;</code>.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to block.</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/dropdown/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/dropdown/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/dropdown/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n<h3 id=\"visibility-_visible-\">Visibility <code>_visible</code></h3>\n<p>A <code>_visible</code> modifier allow to control block visibility. If it&#39;s not set, block will not be displayed.</p>\n<!-- bem-example: touch-phone.examples/dropdown/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"alignment-respect-to-its-parent-_direction-\">Alignment respect to its parent <code>_direction</code></h3>\n<p>Modifier controls the position of popup window relative to the block which opened it – popup&#39;s alignment. Popup window&#39;s position is detected automatically basing on the admissible directions array and the parent block&#39;s position.</p>\n<p>Chosen alignment will affect the opening animation direction.</p>\n<p>By default following admissible directions array is used:</p>\n<table>\n    <tr>\n        <th> Direction </td>\n        <th> Index in array </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>To control the popup window position you can provide directions array with desired directions set only. According to parent block&#39;s position on a page the most suitable directions will be chosen among the provided values.</p>\n<p>For example, if the popup window should be opened at the top of the parent block:</p>\n<!-- bem-example: touch-phone.examples/dropdown/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Or if it should be opened strictly at the center-right position:</p>\n<!-- bem-example: touch-phone.examples/dropdown/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"automatic-closure-_autoclosable-\">Automatic closure  <code>_autoclosable</code></h3>\n<p>With <code>_autoclosable</code> modifier toggled block will automatically hide away on mouse click outside popup window (<code>_visible</code> modifier will be removed).</p>\n<!-- bem-example: touch-phone.examples/dropdown/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"relations-between-popup-s\">Relations between popup&#39;s</h2>\n<p>As long as popup&#39;s parent block itself can be nested in another popup block there is a need in a popup&#39;s relations handling. Block can handle Parent → [ Child, Child, ... ] relations by checking if the parent block is nested in another popup block. So, the children knows about the parent blocks existence.</p>\n<p>If there were no such relations, the parent popup block will be closed on mouse click on the child block regardless of the fact that <code>_autoclosable</code> modifier is set to <code>true</code>.</p>\n<p>This means that with <code>autoclosable</code> modifier toggled block will close itself and close all of it children on mouse click outside block&#39;s window or it child&#39;s window.</p>\n<p>Child popup blocks can be regarded as a chain of 1 → 2 → 3 → 4. By clicking on the second element of chain, third and forth will be closed. By clicking on first, the second, third and forth will be closed. On click outside of any popup window of the chain element all popups will be closed.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        }
                    }
                },
                {
                    "name": "icon",
                    "jsdoc": "",
                    "data": {
                        "ru": {
                            "name": "icon",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/icon/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/icon/simple"
                                }
                            ],
                            "description": "<h1 id=\"icon\">icon</h1>\n<p>Блок <code>icon</code> используется в качестве графического элемента в других блоках. В HTML представлен тегом <code>&lt;i&gt;</code>. Иконка задается через свойство <code>background</code> и, соответственно, не имеет возможности фоллбека.</p>\n<p>Иконку можно передать как через модификатор, так и через поле <code>url</code>:</p>\n<!-- bem-example: touch-phone.examples/icon/b2PchFG0vbxDCGt-_1VzrN-GK0 -->\n\n<!-- bem-example: touch-phone.examples/icon/bek_pi0vSgei-mm8QD-H3qy_E0c -->\n\n<!-- bem-example: touch-phone.examples/icon/bqsLdaiup-wWnOz-fYrlos47T_c -->\n\n<!-- bem-example: touch-phone.examples/icon/w_tWuwVyYuwv7N6i7jChuJOj8Vc -->\n"
                        },
                        "en": {
                            "name": "icon",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/icon/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/icon/simple"
                                }
                            ],
                            "description": "<h1 id=\"icon\">icon</h1>\n<p><code>&lt;i&gt;</code>-based block for using as a graphical element in other blocks, not for independent usage. Icon is set as <code>background</code> property and unables to fallback.</p>\n<p>In BEMJSON you can use both the modifier and the <code>url</code> field for an icon representation:\n<!-- bem-example: touch-phone.examples/icon/b2PchFG0vbxDCGt-_1VzrN-GK0 --></p>\n<!-- bem-example: touch-phone.examples/icon/bek_pi0vSgei-mm8QD-H3qy_E0c -->\n\n<!-- bem-example: touch-phone.examples/icon/ozTrvWSbAw8rmCSYD_YNMb4uO80 -->\n\n<!-- bem-example: touch-phone.examples/icon/w_tWuwVyYuwv7N6i7jChuJOj8Vc -->\n"
                        }
                    }
                },
                {
                    "name": "image",
                    "data": {
                        "ru": {
                            "name": "image",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/image/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/image/simple"
                                }
                            ],
                            "description": "<h1 id=\"image\">image</h1>\n<p>Блок <code>image</code> используется для вставки картинок.</p>\n<p>В HTML представлен тегом <code>&lt;img&gt;</code>.</p>\n<!-- bem-example: touch-phone.examples/image/lC8WanGqU6n--Ri8zFvBCOidyB8 -->\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>title</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя картинки.</td>\n    </tr>\n    <tr>\n        <td>alt</td>\n        <td>\n            <code>String</code></td>\n        <td>Обязательный атрибут. Устанавливает альтернативный текст для изображений. Такой текст позволяет получить текстовую информацию о картинке при отключенной в браузере загрузке изображений. <br>Блок распознается программами чтения с экрана для альтернативного воспроизведения.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Адрес ссылки, по которой подгружается картинка.</td>\n    </tr>\n    <tr>\n        <td>width, height</td>\n        <td>\n            <code>Number</code>\n        </td>\n        <td>Значения, которые будут переданы в одноименные атрибуты картинки.</td>\n    </tr>\n</table>\n\n"
                        },
                        "en": {
                            "name": "image",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/image/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/image/simple"
                                }
                            ],
                            "description": "<h1 id=\"image\">image</h1>\n<p><code>&lt;img&gt;</code>-based block is designed for images pasting, using as a content (logo, for example).</p>\n<!-- bem-example: touch-phone.examples/image/lC8WanGqU6n--Ri8zFvBCOidyB8 -->\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified within corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>title</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies icon name.</td>\n    </tr>\n    <tr>\n        <td>alt</td>\n        <td>\n            <code>String</code></td>\n        <td>A mandatory attribute. Specifies an alternate text for images. This text type allows user to obtain text information about an image when it is impossible to download. <br> This block is recognized by screen readers for alternative playback.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>An url address to open image.</td>\n    </tr>\n    <tr>\n        <td>width, height</td>\n        <td>\n            <code>Number</code>\n        </td>\n        <td>Values ​​that will be transferred to image&#39;s attributes with same names.</td>\n    </tr>\n</table>\n\n<p>Other valid block&#39;s attributes could be specified in <code>attrs</code> field in BEMJSON.</p>\n"
                        }
                    },
                    "jsdoc": ""
                },
                {
                    "name": "input",
                    "jsdoc": "<h1 id=\"input-module\">input Module</h1>\n<h2 id=\"input-block\">input Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"setval-val-data-input-\">setVal ( val, [data] ) → {input}</h4>\n<p>Sets control value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {String}<br/>\nvalue</li>\n<li>[data] {Object}<br/>\nadditional data</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{input}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n",
                    "data": {
                        "ru": {
                            "name": "input",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/input/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/input/simple"
                                }
                            ],
                            "description": "<h1 id=\"input\">input</h1>\n<p>Блок <code>input</code> служит для создания различных типов текстовых полей:</p>\n<ul>\n<li>поле ввода (значение по умолчанию);</li>\n<li>текстовая область;</li>\n<li>поле с паролем;</li>\n<li>поисковая форма.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON-блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Значение, отправляемое на сервер. По умолчанию пустое.</td>\n    </tr>\n    <tr>\n        <td>placeholder</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Подсказка в поле ввода.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Уникальный идентификатор блока. По умолчанию генерируется случайным образом, если явно не задан в BEMJSON.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя полю ввода.</td>\n    </tr>\n    <tr>\n        <td>maxLength</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет максимальное количество вводимых символов.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет последовательность перехода между полями ввода при нажатии на <code>Tab</code>.</td>\n    </tr>\n</table>\n\n\n<p>Другие допустимые атрибуты блока могут быть заданы в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/input/hwtIQVRUxvCPVxAJgWKBqBRt6Is -->\n<strong>simple</strong>\n\n<!-- bem-example: touch-phone.examples/input/yAehEbulTw29FYJa_ye7ntQkTkU -->\n<strong>normal</strong>\n\n<!-- bem-example: touch-phone.examples/input/m1GvVMb4ZI4DvaKjyQWVNZLyquA -->\n\n<h3 id=\"-_size-\">Размеры <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам текстовых полей.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота<br>строки</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;s&#39; },\n    placeholder : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39; },\n    placeholder : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;l&#39; },\n    placeholder : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;xl&#39; },\n    placeholder : &#39;X-Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Типы <code>_type</code></h3>\n<p>Блок представлен следующими типами:</p>\n<ul>\n<li>текстовая область (<code>input_type_textarea</code>)</li>\n<li>поле с паролем (<code>input_type_password</code>)</li>\n<li>поисковая форма (<code>input_type_search</code>)</li>\n</ul>\n<p>Без указания типа поля блок <code>input</code> по умолчанию получает значение <code>&lt;input type=&quot;text&quot;/&gt;</code>.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Реализация</th>\n    </tr>\n    <tr>\n        <td>\n            <code>_textarea</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;textarea&#39; },\n    placeholder : &#39;Тексторвая область&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_password</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39;, type : &#39;password&#39; },\n    placeholder : &#39;Поле с паролем&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_search</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;search&#39; },\n    placeholder : &#39;Поисковая форма&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии блока «неактивен» поле ввода и все его элементы становятся недоступными для действий пользователя.</p>\n<p>Если модификатор <code>disabled</code> не установлен, инпут по умолчанию активен.</p>\n<!-- bem-example: touch-phone.examples/input/_rQiPCz_bRgjryQQWFEhXhyJnyM -->\n\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> поле ввода находится в фокусе.</p>\n<!-- bem-example: touch-phone.examples/input/4hhBI_vwtFJlpwXu8DnFh6HdrYY -->\n\n<h3 id=\"-_has-clear-\">Очистка содержимого <code>_has-clear</code></h3>\n<p>Модификатор <code>has-clear</code> в значении <code>true</code> отображает в инпуте крестик для очистки содержимого (элемент <code>clear</code>).</p>\n<!-- bem-example: touch-phone.examples/input/JCaTuV74Ua-xND0IW39wBPdvHBI -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<p>Визуально представлен следующими элементами:</p>\n<h3 id=\"__box\">__box</h3>\n<p>Обязательный элемент.</p>\n<p>Элемент, группирующий нативный контрол <code>&lt;input&gt;</code> и дополнительные элементы (например, <code>__clear</code>).</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>Кнопка очистки содержимого инпута («крестик»).</p>\n<p>По умолчанию модификатор <code>has-clear</code> имеет значение <code>false</code>, при котором крестик не отображается. Для отображения крестика нужно установить модификатор в значение <code>true</code>.</p>\n<!-- bem-example: touch-phone.examples/input/SwtjmJjtMXak9KKSsPMLXihNiQI -->\n\n<h3 id=\"__control\">__control</h3>\n<p>Обязательный элемент.</p>\n<p>BEMHTML- или BH-шаблоном преобразуется в нативный контрол <code>&lt;input&gt;</code> или <code>&lt;textarea&gt;</code>.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "input",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/input/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/input/simple"
                                }
                            ],
                            "description": "<h1 id=\"input\">input</h1>\n<p><code>input</code> block is designed to create different types of text fields:</p>\n<ul>\n<li>input field (default value);</li>\n<li>text area;</li>\n<li>password field;</li>\n<li>search form.</li>\n</ul>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified within corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attribute</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Value to be sent to server. It is empty by default.</td>\n    </tr>\n    <tr>\n        <td>placeholder</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>A short hint that describes expected value of an input field.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Unique block identifier. The value is generated randomly by default. Could be specified manually in BEMJSON file.</td>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Defines name of an input field.</td>\n    </tr>\n    <tr>\n        <td>maxLength</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies maximum number of characters allowed in input field.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Specifies the position of current <code>input</code> block in the tabbing order for current page.</td>\n    </tr>\n</table>\n\n<p>Other valid block&#39;s attributes could be specified in <code>attrs</code> field in BEMJSON.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Block supports following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, native representation (<em>default</em>) of a control is available.</p>\n<p>See the following examples for demonstration:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/input/hwtIQVRUxvCPVxAJgWKBqBRt6Is -->\n<strong>simple</strong>\n\n<!-- bem-example: touch-phone.examples/input/yAehEbulTw29FYJa_ye7ntQkTkU -->\n<strong>normal</strong>\n\n<!-- bem-example: touch-phone.examples/input/m1GvVMb4ZI4DvaKjyQWVNZLyquA -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.</p>\n<p>Provides size values to all types of text fields.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>See the following examples for demonstration:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Font size</th>\n        <th>String height</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;s&#39; },\n    placeholder : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39; },\n    placeholder : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;l&#39; },\n    placeholder : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;xl&#39; },\n    placeholder : &#39;X-Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>Following types of <code>input</code> block are available:</p>\n<ul>\n<li>text area (use <code>textarea</code> modifier);</li>\n<li>password field (use <code>password</code> modifier);</li>\n<li>search form (use <code>search</code> modifier).</li>\n</ul>\n<p>If a <code>type</code> modifier is not specified, the <code>input</code> block obtains <code>&lt;input type=&quot;text&quot;/&gt;</code> value by default.</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>\n            <code>_textarea</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;textarea&#39; },\n    placeholder : &#39;Text area&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_password</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size: &#39;m&#39;, type : &#39;password&#39; },\n    placeholder : &#39;Password field&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <code>_search</code>\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;input&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;search&#39; },\n    placeholder : &#39;Search form&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"block-s-state\">Block&#39;s state</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If block is disabled, all its elements become unavailable for user&#39;s action.</p>\n<p><code>input</code> block is active by default even if <code>disabled</code> modifier is not specified.</p>\n<!-- bem-example: touch-phone.examples/input/K-P-esXffR8hGOoR7jna6S2YiJQ -->\n\n<h4 id=\"_focused\">_focused</h4>\n<p>An input field is focused if a block has a <code>focused</code> modifier with <code>true</code> value.</p>\n<!-- bem-example: touch-phone.examples/input/qCSnME17SEWdiXIYzAUquHUowlo -->\n\n<h3 id=\"_has-clear\">_has-clear</h3>\n<p><code>clear</code> cross element (<code>clear</code>) appears in input field if a block has <code>has-clear</code> modifier with <code>true</code> value.</p>\n<!-- bem-example: touch-phone.examples/input/_9h_vL43Yf85tOZ7QzUlcBNd-PE -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<p>The following elements provide visual representation of <code>input</code> block:</p>\n<h3 id=\"__box\">__box</h3>\n<p>An element for grouping native <code>&lt;input&gt;</code> field and additional elements (e.g <code>__clear</code>).</p>\n<h3 id=\"__clear\">__clear</h3>\n<p>A button (cross element) intended to clear an <code>input</code> field content.</p>\n<p>To add a cross element into an <code>input</code> field specify <code>has-clear</code> modifier with <code>true</code> value in BEMJSON file.</p>\n<p>Cross element is unavailable if block has not <code>has-clear</code> modifier or if <code>has-clear</code> modifier has <code>false</code> value.</p>\n<!-- bem-example: touch-phone.examples/input/oL605Mco7dZbQOD7Rga3BNjDmUY -->\n\n<h3 id=\"__control\">__control</h3>\n<p>Mandatory element.</p>\n<p>This element is processed by BEMHTML or BH template engine to native <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code> control.</p>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    }
                },
                {
                    "name": "link",
                    "data": {
                        "ru": {
                            "name": "link",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/link/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/link/simple"
                                }
                            ],
                            "description": "<h1 id=\"link\">link</h1>\n<p>Блок <code>link</code> используется для создания различных типов ссылок и предоставляет возможность изменять их состояние, внешний вид и поведение.</p>\n<h2 id=\"-\">Варианты использования ссылок</h2>\n<p>Блок <strong>link</strong> служит для создания следующих типов ссылок:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычная ссылка</td>\n        <td>Применяется для любых ссылок веб-интерфейса. Используется по умолчанию.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;link&#39;,\n    url : &#39; #&#39;,\n    content : &#39;link&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Псевдоссылка</td>\n        <td>Разновидность ссылки, для которой не производится переход на новую страницу по щелчку мыши. Применяется для вызова сценариев.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;link&#39;,\n    mods : { pseudo : true, theme: &#39;normal&#39; },\n    content : &#39;pseudo&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Допустимые параметры блока</h2>\n<p>Допустимые параметры блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Адрес ссылки. Если указан, значение <code>url</code> становится атрибутом <code>href</code>. Обязательный параметр для обычной ссылки. Если в качестве значения передан BEMJSON, он будет обработан и вернет строку.</td>\n    </tr>\n    <tr>\n        <td>title</td>\n        <td><code>String</code></td>\n        <td>Текст всплывающей подсказки</td>\n    </tr>\n    <tr>\n        <td>target</td>\n        <td><code>String</code></td>\n        <td>Целевое окно. Обычно атрибут указывается со значением <code>_blank</code>, чтобы открыть адрес ссылки в новом окне.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td><code>Number</code></td>\n        <td> Индекс, задающий последовательность перехода между ссылками при нажатии на клавишу <code>Tab</code>. Атрибут преобразуется в нативный атрибут <code>tabindex</code>.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Например:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/link/Y3yr9bNzwYkA9sSkV8EkqO30JYI -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/link/rVrcuNJ0PMv5S2Q4KNH4HsM6Zds -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/link/v4bNHfaIobOFWcneUxLQDbb4T9g -->\n\n<h3 id=\"-_pseudo-\">Псевдоссылка <code>_pseudo</code></h3>\n<!-- bem-example: touch-phone.examples/link/chWrNSQqHxfoi-xep8pjJQnF124 -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>_focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью. Нажатие по ней можно выполнить клавишей <code>Enter</code>.</p>\n<pre><code>{\n    block : &#39;link&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        focused : true\n    },\n    url : &#39;#&#39;,\n    content : &#39;_focused&#39;\n}\n</code></pre><h4 id=\"-_disabled-\">Неактивна <code>_disabled</code></h4>\n<p>В состоянии &quot;не активна&quot; ссылка отображается, но недоступна для действий пользователя.</p>\n<p>Для такой ссылки не будет:</p>\n<ul>\n<li>устанавливаться модификатор <code>_focused</code> в момент получения фокуса;</li>\n<li>осуществляться переход, если задан атрибут <code>url</code>;</li>\n<li>генерироваться БЭМ-событие <code>click</code>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/link/MlN17lxDfpZbuzsh5l2N1VNo16U -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>link</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>control</code></li>\n<li><code>i-bem__dom</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "link",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/link/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/link/simple"
                                }
                            ],
                            "description": "<h1 id=\"link\">link</h1>\n<p>A <code>link</code> block is used for a various types of links creation. It allows to manage state, behaviour and appearance of a links.</p>\n<h2 id=\"link-use-cases\">link use cases</h2>\n<p>The block is used for creation of following link types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Basic link</td>\n        <td>Is used to set up various kinds of links. A default type.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;link&#39;,\n    url : &#39; #&#39;,\n    content : &#39;link&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Pseudo link</td>\n        <td>The variation of link that will not be followed by a browser on click. Used mainly for scripts invocation.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;link&#39;,\n    mods : { pseudo : true, theme: &#39;normal&#39; },\n    content : &#39;pseudo&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td><code>String|BEMJSON</code></td>\n        <td>Link&#39;s URL. If presented an <code>url</code> value, will renders to <code>href</code> HTML attribute. Is mandatory for a normal link. If BEMJSON is passed as the value, it will be processed and will return the string.</td>\n    </tr>\n    <tr>\n        <td>title</td>\n        <td><code>String</code></td>\n        <td>Popup label&#39;s text.</td>\n    </tr><br>    <tr>\n        <td>target</td>\n        <td><code>String</code></td>\n        <td>Target window. Mainly used with a <code>_blank</code> value to open the link in new window.</td>\n    </tr>\n    <tr>\n        <td>tabIndex</td>\n        <td><code>Number</code></td>\n        <td>Index to define an order of links focusing on <code>Tab</code> key press. Will be rendered to native <code>tabindex</code> HTML attribute.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/link/Y3yr9bNzwYkA9sSkV8EkqO30JYI -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/link/rVrcuNJ0PMv5S2Q4KNH4HsM6Zds -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/link/v4bNHfaIobOFWcneUxLQDbb4T9g -->\n\n\n<h3 id=\"pseudo-link-_pseudo-\">Pseudo link <code>_pseudo</code></h3>\n<!-- bem-example: touch-phone.examples/link/chWrNSQqHxfoi-xep8pjJQnF124 -->\n\n\n<h3 id=\"link-s-states\">Link&#39;s states</h3>\n<h4 id=\"in-focus-_focused-\">In focus <code>_focused</code></h4>\n<p>A <code>_focused</code> modifier is automaticly toggles to the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press. Focused link can be followed by Enter key press.</p>\n<p>Available for all block themes.</p>\n<pre><code>{\n    block : &#39;link&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        focused : true\n    },\n    url : &#39;#&#39;,\n    content : &#39;_focused&#39;\n}\n</code></pre><h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive link. Inactive link is displayed but not available for user actions.  </p>\n<p>For such a link will not be performed:</p>\n<ul>\n<li><code>_focused</code> state modifier toggling, when in focus;</li>\n<li>redirection to the link address if an <code>url</code> attribute is provided;</li>\n<li><code>click</code> BEM event emiting.</li>\n</ul>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/link/MlN17lxDfpZbuzsh5l2N1VNo16U -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>control</code></li>\n<li><code>i-bem__dom</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"link-module\">link Module</h1>\n<h2 id=\"undefined\">undefined</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"geturl-string-\">getUrl () → {String}</h4>\n<p>Returns url</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"seturl-url-link-\">setUrl ( url ) → {link}</h4>\n<p>Sets url</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>url {String}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{link}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "menu",
                    "data": {
                        "ru": {
                            "name": "menu",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/menu/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/menu/simple"
                                }
                            ],
                            "description": "<h1 id=\"menu\">menu</h1>\n<p>Блок <code>menu</code> используется для создания различных типов меню и селектов.</p>\n<p>Он предоставляет возможность изменять размер и внешний вид блоков меню, управлять поведением вложенных блоков – пунктов меню или селекта.</p>\n<p>В результате BEMHTML-преобразований на странице блок становится HTML-элементом с тегом <code>&lt;div&gt;</code> и свойством <code>role=&quot;menu&quot;</code>. HTML-элементом, содащим набор переключателей – пунктов меню (блок <code>menu-item</code>).</p>\n<h2 id=\"-\">Варианты использования меню</h2>\n<p>Блок <code>menu</code> служит для создания различных типов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Меню-переключатель</td>\n        <td>Применяется для создания меню или селектов, позволяющих только одиночный выбор.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;, \n        mode : &#39;radio&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Селект с множественным выбором (<code>_mode_check</code>)</td>\n        <td>При щелчке мышью по пункту меню его состояние меняется на противоположное. Если пункт был активен – он деактивируется и наоборот.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n<tr>\n        <td>Простой список (без модификатора <code>_mode</code>)</td>\n        <td>При щелчке мышью по пункту меню его состояние не меняется. Модификатор <code>_cheked</code> не устанавливается.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/menu/vAAUvyJpkNyuM0yEru7LP3dZ7xE -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/menu/JgK_lg3CEjumbM6ThTKEOcNpfH0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/menu/MGiZ5_2bYS32yaxnY5iD9OevjVk -->\n\n\n<h3 id=\"-_size-\">Размеры меню <code>_size</code></h3>\n<p>Задает размер всем типам меню. Обязательный модификатор.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер/Параметры</th>\n        <th>Размер шрифта</th>\n        <th>Высота строки <code>line-heigh</code></th>\n        <th>Левый отступ <code>padding-left</code></th>\n        <th>Отступ <code>padding</code></th>\n        <th>Размер &quot;галочки&quot; для темы normal</code></th>\n    </tr>\n    <tr>\n        <td>s</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;s&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>m</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;m&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>l</td>\n        <td>15px</td>\n        <td>28px</td>\n        <td>34px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;l&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>xl</td>\n        <td>15px</td>\n        <td>32px</td>\n        <td>40px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;xl&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-_mode-\">Способ выбора пунктов <code>_mode</code></h3>\n<p>Модификатор <code>_mode</code> управляет поведением пунктов меню при щелчке по ним мышью, например, возможностью множественного выбора пунктов меню.</p>\n<p>Доступны следующие значения модификатора:</p>\n<ul>\n<li><code>check</code> – селект. Пункт, по которому был произведен щелчек мышью, изменит состояние на противоположное и будет менять состояние при повторных щелчках. Доступна возможность множественного выбора пунктов;</li>\n<li><code>radio</code> – переключатель. При щелчке мышью будет производиться переключение активных пунктов меню. При повторном щелчке пункт, по которому он был произведен, останется <strong>активным</strong>. Множественный выбор недоступен;</li>\n<li><code>radio-check</code> – переключатель. При щелчке мышью будет производиться переключение активных пунктов меню. При повторном щелчке пункт, по которому он был произведен, станет <strong>неактивным</strong>. Множественный выбор недоступен.</li>\n</ul>\n<p>Реализован во всех темах блока.</p>\n<table>\n    <tr>\n        <th>Выбор пунктов</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Только один (<code>_mode_radio</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Множественный выбор или ни одного (<code>_mode_check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Один или ни одного (<code>_mode_radio-check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio-check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>_focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/menu/lFNP7KamARohsQ5DCX0QQZU1ACQ -->\n\n\n<h2 id=\"-\">Элементы блока</h2>\n<p>Визуально представлен следующими элементами:</p>\n<h3 id=\"__group\">__group</h3>\n<p>Элемент <code>__group</code> служит для группировки пунктов меню. Пункты, которые нужно сгруппировать, помещаются в поле <code>content</code> элемента. Группы визуально отделяются серой чертой.</p>\n<p>Например:</p>\n<!-- bem-example: touch-phone.examples/menu/WSrgcU6mXH0StKcrKnckCnH3lrc -->\n\n\n<h3 id=\"__group-title\">__group-title</h3>\n<p>Элемент позволяет задать заголовок для группы пунктов меню, создаваемой с помощью элемента <code>__group</code>.</p>\n<p>Например:</p>\n<!-- bem-example: touch-phone.examples/menu/yGGZayW6DClbboVCxBRriqv3YcU -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>menu-item</code></li>\n<li><code>dom</code></li>\n<li><code>keyboard</code></li>\n<li><code>control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n\n<h1 id=\"menu-item\">menu-item</h1>\n<p>Блок <code>menu-item</code> служит для создания пунктов меню или селекта. Используется внутри блока <code>menu</code>. Блок <code>menu-item</code> предоставляет возможность изменять состояние, содержимое и тип пунктов меню.</p>\n<p>Блок <code>menu-item</code> в результате BEMHTML-преобразований на странице становится HTML-элементом с тегом <code>&lt;div&gt;</code> со свойством <code>role=&quot;menuitem&quot;</code>.</p>\n<h2 id=\"-\">Варианты использования пунктов меню</h2>\n<p>Блок <code>menu-item</code> служит для создания различных типов пунктов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Переключатель</td>\n        <td>Применяется для любых выпадающих списков, табов, пунктов меню и селектов и т.п. Используется по умолчанию.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Ссылка</td>\n        <td>Элемент меню со ссылкой. Блок <code>link</code> помещается в поле <code>content</code> BEMJSON-декларации блока. Так же требуется установить блоку модификатор <code>type</code> в значение <code>link</code>.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое пунктом меню, если он выбран.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/menu/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/menu/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/menu/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"-_type-\">Типы блока <code>_type</code></h3>\n<p>Модификатор <code>_type</code> в значении <code>_link</code> позволяет создавать пункт меню-ссылку. Блок <code>link</code> при этом помещается в поле <code>content</code> BEMJSON-декларации блока. Если модификатор <code>_type_link</code> не установлен, вложенная ссылка будет доступна для действий пользователя при установленном модификаторе <code>_disabled</code>.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/menu/47lHiiyDspaBs5AiC22G42Y-N_o -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии &quot;неактивен&quot; пункт меню отображается, но недоступен для действий пользователя.  </p>\n<p>Такой пункт меню не изменяет состояние при щелчке мышью. Если для блока установлен модификатор <code>_type_link</code>, переход по ссылке не осуществляется. </p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/menu/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие &quot;наведение курсором&quot; на пункт меню.</p>\n<p>Реализован во всех темах блока.</p>\n<p>Автоматически выставляется при наведении указателем мыши на пункт меню.</p>\n<!-- bem-example: touch-phone.examples/menu/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"-_checked-\">Выбранный пункт меню <code>_checked</code></h4>\n<p>Модификатор задает выбранный пункт меню.</p>\n<!-- bem-example: touch-phone.examples/menu/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>В блоке <code>menu</code> модификатор <code>_checked</code> устанавливается для пункта при щелчке мышью:</p>\n<!-- bem-example: touch-phone.examples/menu/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu-item</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "menu",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/menu/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/menu/simple"
                                }
                            ],
                            "description": "<h1 id=\"menu\">menu</h1>\n<p>A <code>menu</code> block is used for creation of various types of menus and lists. It allows to manage state, behavior and appearance of menus.</p>\n<p>As a result of BEMHTML transformations, a block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menu&quot;</code> attribute set. The block&#39;s HTML element contains a set of switches – the <code>menu-item</code> blocks.</p>\n<p>It allow to manage the appearance, state and size of a menu blocks as well as manage the nested <code>menu-items</code> block&#39;s appearance.</p>\n<h2 id=\"menu-use-cases\">menu use cases</h2>\n<p>A <code>menu</code> block is used for creation of following menu types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Switch menu</td>\n        <td>Used for creation of lists with a single selectable item.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;, \n        mode : &#39;radio&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A multi selectable list. (<code>_mode_check</code>)</td>\n        <td>Clicking on a list items will perform item&#39;s state switching to opposite. If an item was active it will be deactivated, and vice versa.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n<tr>\n        <td>Basic list (with <code>_mode</code> modifier is unset)</td>\n        <td>Menu item&#39;s state will not change on mouse click. A <code>_cheked</code> state modifier will not be toggled.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/menu/vAAUvyJpkNyuM0yEru7LP3dZ7xE -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/menu/JgK_lg3CEjumbM6ThTKEOcNpfH0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/menu/MGiZ5_2bYS32yaxnY5iD9OevjVk -->\n\n<h3 id=\"the-sizes-_size-\">The sizes <code>_size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides a size value to all types of radio groups.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<table>\n    <tr>\n        <th>A <code>_size</code> value</th>\n        <th>Font size</th>\n        <th>Line height <code>line-heigh</code></th>\n        <th>Left padding <code>padding-left</code></th>\n        <th>Global <code>padding</code></th>\n        <th>The tick&#39;s icon size for normal theme</code></th>\n    </tr>\n    <tr>\n        <td>s</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;s&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>m</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;m&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>l</td>\n        <td>15px</td>\n        <td>28px</td>\n        <td>34px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;l&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>xl</td>\n        <td>15px</td>\n        <td>32px</td>\n        <td>40px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;xl&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"menu-item-selection-options-_mode-\">Menu item selection options <code>_mode</code></h3>\n<p>A <code>_mode</code> modifier defines a menu item&#39;s reaction on mouse click. For example, it controls multiple items selectability.</p>\n<p>Following modifier values are available:</p>\n<ul>\n<li><code>check</code> – a selectable list. A menu item will change it&#39;s state to opposite on each mouse click. An active item will become inactive and vice versa. Multiple choice is available;</li>\n<li><code>radio</code> – a switcher. Inactive menu item will be activated on mouse click. On re-clicking the menu item will remain <strong>active</strong>. Multiple choice not available;</li>\n<li><code>radio-check</code> – a switcher. Inactive menu item will be activated on mouse click. On re-clicking the active menu item will become <strong>inactive</strong>. Multiple choice not available.</li>\n</ul>\n<p>Available for all block themes.</p>\n<table>\n    <tr>\n        <th>List items selectability</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Only one (<code>_mode_radio</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Plural selection or none (<code>_mode_check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>One or none (<code>_mode_radio-check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio-check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"in-focus-_focused-\">In focus <code>_focused</code></h4>\n<p>A <code>_focused</code> modifier is automatically toggles for the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/menu/2y_zCWFJ78bAFa8UEqIdsRPc3qM -->\n\n<h2 id=\"the-block-s-elements\">The block&#39;s elements</h2>\n<p>The <code>menu</code> block is visually represented by following elements:</p>\n<h3 id=\"__group\">__group</h3>\n<p>A <code>__group</code> element is used for menu items grouping. An Items that needed grouping should be placed to the element BEMJSON declaration&#39;s <code>content</code> field. The group elements are visually separated by a gray line.</p>\n<p>For example:</p>\n<!-- bem-example: touch-phone.examples/menu/WSrgcU6mXH0StKcrKnckCnH3lrc -->\n\n\n<h3 id=\"__group-title\">__group-title</h3>\n<p>This element allows to create a title for a menu items group, created using a <code>_group</code> element.</p>\n<p>For example:</p>\n<!-- bem-example: touch-phone.examples/menu/8LCJ2Asb6uR2ZHALf5iscb_n2RU -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>menu-item</code></li>\n<li><code>dom</code></li>\n<li><code>keyboard</code></li>\n<li><code>control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n\n<h1 id=\"menu-item\">menu item</h1>\n<p>A <code>menu-item</code> block is used for creation of various types of menu and list items. It is used inside a <code>menu</code> block. The <code>menu-item</code> block allows to manage state, content and type of menu items.</p>\n<p>As a result of BEMHTML transformations block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menuitem&quot;</code> attribute set.</p>\n<h2 id=\"menu-item-use-cases\">menu item use cases</h2>\n<p>The block helps to create following menu item types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>An example</th>\n    </tr>\n    <tr>\n        <td>A switch element</td>\n        <td>Is used to set up a dropdowns, tab menus, lists and menu items, etc.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A link element (<code>_type_link</code>)</td>\n        <td>An element with nested depended link. A <code>link</code> block should be placed into block&#39;s BEMJSON declaration <code>content</code> field. The <code>_type_link</code> modifier is required.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>A value returned by menu item if selected.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/menu/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/menu/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/menu/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive menu item. Inactive menu item is displayed, but not available for user actions.  </p>\n<p>If a <code>_type_link</code> modifier is set for the block with a nested link, the link will not be followed on mouse click.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/menu/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"mouse-over-_hovered-\">Mouse over <code>_hovered</code></h4>\n<p>This modifier is automatically toggled when the mouse pointer is over the block. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/menu/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"selected-menu-item-_checked-\">Selected menu item <code>_checked</code></h4>\n<p>Modifier defines the selected menu item.</p>\n<!-- bem-example: touch-phone.examples/menu/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>For the <code>menu-item</code> blocks nested in a <code>menu</code> block <code>_checked</code> state toggles automatically on mouse click. </p>\n<!-- bem-example: touch-phone.examples/menu/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"menu-module\">menu Module</h1>\n<h2 id=\"menu-block\">menu Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getitems-menu-item-\">getItems () → {menu-item}</h4>\n<p>Returns items</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{menu-item}</p>\n<h4 id=\"setcontent-content-menu-\">setContent ( content ) → {menu}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{menu}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"menu-item-module\">menu-item Module</h1>\n<h2 id=\"menu-item-block\">menu-item Block</h2>\n<h3 id=\"block-parameters-\">Block parameters:</h3>\n<ul>\n<li>val {*}<br/>\nValue of item</li>\n</ul>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"isvaleq-val-boolean-\">isValEq ( val ) → {Boolean}</h4>\n<p>Checks whether given value is equal to current value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {*}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getval-\">getVal () → {*}</h4>\n<p>Returns item value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{*}</p>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns item text</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "menu-item",
                    "data": {
                        "ru": {
                            "name": "menu-item",
                            "examples": [],
                            "description": "<h1 id=\"menu-item\">menu-item</h1>\n<p>Блок <code>menu-item</code> служит для создания пунктов меню или селекта. Используется внутри блока <code>menu</code>. Блок <code>menu-item</code> предоставляет возможность изменять состояние, содержимое и тип пунктов меню.</p>\n<p>Блок <code>menu-item</code> в результате BEMHTML-преобразований на странице становится HTML-элементом с тегом <code>&lt;div&gt;</code> со свойством <code>role=&quot;menuitem&quot;</code>.</p>\n<h2 id=\"-\">Варианты использования пунктов меню</h2>\n<p>Блок <code>menu-item</code> служит для создания различных типов пунктов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Переключатель</td>\n        <td>Применяется для любых выпадающих списков, табов, пунктов меню и селектов и т.п. Используется по умолчанию.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Ссылка</td>\n        <td>Элемент меню со ссылкой. Блок <code>link</code> помещается в поле <code>content</code> BEMJSON-декларации блока. Так же требуется установить блоку модификатор <code>type</code> в значение <code>link</code>.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое пунктом меню, если он выбран.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/menu-item/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/menu-item/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/menu-item/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"-_type-\">Типы блока <code>_type</code></h3>\n<p>Модификатор <code>_type</code> в значении <code>_link</code> позволяет создавать пункт меню-ссылку. Блок <code>link</code> при этом помещается в поле <code>content</code> BEMJSON-декларации блока. Если модификатор <code>_type_link</code> не установлен, вложенная ссылка будет доступна для действий пользователя при установленном модификаторе <code>_disabled</code>.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/menu-item/47lHiiyDspaBs5AiC22G42Y-N_o -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии &quot;неактивен&quot; пункт меню отображается, но недоступен для действий пользователя.  </p>\n<p>Такой пункт меню не изменяет состояние при щелчке мышью. Если для блока установлен модификатор <code>_type_link</code>, переход по ссылке не осуществляется. </p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/menu-item/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие &quot;наведение курсором&quot; на пункт меню.</p>\n<p>Реализован во всех темах блока.</p>\n<p>Автоматически выставляется при наведении указателем мыши на пункт меню.</p>\n<!-- bem-example: touch-phone.examples/menu-item/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"-_checked-\">Выбранный пункт меню <code>_checked</code></h4>\n<p>Модификатор задает выбранный пункт меню.</p>\n<!-- bem-example: touch-phone.examples/menu-item/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>В блоке <code>menu</code> модификатор <code>_checked</code> устанавливается для пункта при щелчке мышью:</p>\n<!-- bem-example: touch-phone.examples/menu-item/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu-item</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "menu-item",
                            "examples": [],
                            "description": "<h1 id=\"menu-item\">menu item</h1>\n<p>A <code>menu-item</code> block is used for creation of various types of menu and list items. It is used inside a <code>menu</code> block. The <code>menu-item</code> block allows to manage state, content and type of menu items.</p>\n<p>As a result of BEMHTML transformations block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menuitem&quot;</code> attribute set.</p>\n<h2 id=\"menu-item-use-cases\">menu item use cases</h2>\n<p>The block helps to create following menu item types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>An example</th>\n    </tr>\n    <tr>\n        <td>A switch element</td>\n        <td>Is used to set up a dropdowns, tab menus, lists and menu items, etc.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A link element (<code>_type_link</code>)</td>\n        <td>An element with nested depended link. A <code>link</code> block should be placed into block&#39;s BEMJSON declaration <code>content</code> field. The <code>_type_link</code> modifier is required.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>A value returned by menu item if selected.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/menu-item/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/menu-item/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/menu-item/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive menu item. Inactive menu item is displayed, but not available for user actions.  </p>\n<p>If a <code>_type_link</code> modifier is set for the block with a nested link, the link will not be followed on mouse click.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/menu-item/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"mouse-over-_hovered-\">Mouse over <code>_hovered</code></h4>\n<p>This modifier is automatically toggled when the mouse pointer is over the block. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/menu-item/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"selected-menu-item-_checked-\">Selected menu item <code>_checked</code></h4>\n<p>Modifier defines the selected menu item.</p>\n<!-- bem-example: touch-phone.examples/menu-item/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>For the <code>menu-item</code> blocks nested in a <code>menu</code> block <code>_checked</code> state toggles automatically on mouse click. </p>\n<!-- bem-example: touch-phone.examples/menu-item/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"menu-item-module\">menu-item Module</h1>\n<h2 id=\"menu-item-block\">menu-item Block</h2>\n<h3 id=\"block-parameters-\">Block parameters:</h3>\n<ul>\n<li>val {*}<br/>\nValue of item</li>\n</ul>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"isvaleq-val-boolean-\">isValEq ( val ) → {Boolean}</h4>\n<p>Checks whether given value is equal to current value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {*}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getval-\">getVal () → {*}</h4>\n<p>Returns item value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{*}</p>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns item text</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "popup",
                    "data": {
                        "ru": {
                            "name": "popup",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/popup/destruct"
                                },
                                {
                                    "url": "touch-phone.tests/popup/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/popup/horiz-scroll"
                                },
                                {
                                    "url": "touch-phone.tests/popup/nested"
                                },
                                {
                                    "url": "touch-phone.tests/popup/simple"
                                },
                                {
                                    "url": "touch-phone.tests/popup/vert-scroll"
                                }
                            ],
                            "description": "<h1 id=\"popup\">popup</h1>\n<p>Блок <code>popup</code> используется для создания выпадающих элементов и позволяет изменять их состояние, поведение и внешний вид. Блок отображается поверх остальных элементов страницы.</p>\n<p>Попап может быть вызван различными элементами страницы, например, кнопками или псевдоссылками.</p>\n<p>В момент первого показа (установка модификатора <code>_visible</code>) DOM-элемент блока создается в конце <code>&lt;body&gt;</code>.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/popup/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/popup/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/popup/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n\n<h3 id=\"-_visible-\">Видимый <code>_visible</code></h3>\n<p>Модификатор, отвечающий за видимость блока. При значении модификатора <code>false</code> блок не отображается.</p>\n<!-- bem-example: touch-phone.examples/popup/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"-_direction-\">Расположение относительно родителя <code>_direction</code></h3>\n<p>Модификатор управляет положением попапа на странице относительно вызвавшего его блока. Расположение блока определяется автоматически, исходя из массива допустимых расположений и положения родителя на странице.</p>\n<p>Выбранное расположение влияет на направление анимации раскрытия.</p>\n<p>По умолчанию используется следующий массив допустимых расположений:</p>\n<table>\n    <tr>\n        <th> Направление раскрытия </td>\n        <th> Индекс в массиве </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>Чтобы управлять расположением попапа, можно ограничить массив расположений, оставив только требуемые. Пользовательский массив нужно передать в качестве JS-параметра с ключом <code>directions</code>. При этом из значений массива будет выбрано наиболее подходящее, исходя из положения родителя на странице.</p>\n<p>Например, если требуется, чтобы попап раскрывался над родителем:</p>\n<!-- bem-example: touch-phone.examples/popup/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Или разместить попап справа по центру:</p>\n<!-- bem-example: touch-phone.examples/popup/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"-_autoclosable-\">Автоматическое скрытие <code>_autoclosable</code></h3>\n<p>Модификатор отвечает за автоматическое скрытие попапа при клике вне блока. При установке модификатора <code>_autoclosable</code> в значении <code>_true</code> блок будет скрываться при щелчке за его пределами (будет снят модификатор <code>_visible</code>).</p>\n<!-- bem-example: touch-phone.examples/popup/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"-popup-\">Взаимосвязи между popup&#39;ами</h2>\n<p>Так как попап выносит себя в конец <code>&lt;body&gt;</code>, чтобы перекрывать другие элементы страницы, возникает необходимость в построении взаимосвязей. Блок умеет выстраивать связи Parent → [ Child, Child, ... ]. Для этого он выполняет проверку, вложен ли блок, вызывающий попап в другой <code>popup</code>. Потомки знают о наличии родителя.\nЕсли бы этих взаимосвязей не было, то родительский попап (при наличии модификатора <code>autoclosable</code> со значением <code>true</code>) закрылся бы при клике внутри дочернего.</p>\n<p>Другими словами модификатор <code>autoclosable</code> со значением <code>true</code> означает, что попап закроется сам и закроет свои дочерние блоки при клике за пределами его самого и дочерних попапов.</p>\n<p>Дочерние блоки popup можно рассматривать в виде цепочки 1 → 2 → 3 → 4. При клике на втором попапе – закрываются третий и четвертый. При клике в первом – закрываются второй, третий, четвертый. При клике за пределами любого попапа из цепочки – закроются все.</p>\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>popup</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "popup",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/popup/destruct"
                                },
                                {
                                    "url": "touch-phone.tests/popup/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/popup/horiz-scroll"
                                },
                                {
                                    "url": "touch-phone.tests/popup/nested"
                                },
                                {
                                    "url": "touch-phone.tests/popup/simple"
                                },
                                {
                                    "url": "touch-phone.tests/popup/vert-scroll"
                                }
                            ],
                            "description": "<h1 id=\"popup\">popup</h1>\n<p>A <code>popup</code> block is used for popups creation. It allows to manage state, behavior and appearance of popups. Block is displayed in front of all other page elements.</p>\n<p>Popup can be displayed by different page elements like pseudo links or buttons.</p>\n<p>At the moment of first display (<code>_visible</code> modifier toggle) block&#39;s DOM element is created in the end of document <code>&lt;body&gt;</code>.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to block.</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/popup/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/popup/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/popup/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n<h3 id=\"visibility-_visible-\">Visibility <code>_visible</code></h3>\n<p>A <code>_visible</code> modifier allow to control block visibility. If it&#39;s not set, block will not be displayed.</p>\n<!-- bem-example: touch-phone.examples/popup/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"alignment-respect-to-its-parent-_direction-\">Alignment respect to its parent <code>_direction</code></h3>\n<p>Modifier controls the position of popup window relative to the block which opened it – popup&#39;s alignment. Popup window&#39;s position is detected automatically basing on the admissible directions array and the parent block&#39;s position.</p>\n<p>Chosen alignment will affect the opening animation direction.</p>\n<p>By default following admissible directions array is used:</p>\n<table>\n    <tr>\n        <th> Direction </td>\n        <th> Index in array </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>To control the popup window position you can provide directions array with desired directions set only. According to parent block&#39;s position on a page the most suitable directions will be chosen among the provided values.</p>\n<p>For example, if the popup window should be opened at the top of the parent block:</p>\n<!-- bem-example: touch-phone.examples/popup/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Or if it should be opened strictly at the center-right position:</p>\n<!-- bem-example: touch-phone.examples/popup/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"automatic-closure-_autoclosable-\">Automatic closure  <code>_autoclosable</code></h3>\n<p>With <code>_autoclosable</code> modifier toggled block will automatically hide away on mouse click outside popup window (<code>_visible</code> modifier will be removed).</p>\n<!-- bem-example: touch-phone.examples/popup/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"relations-between-popup-s\">Relations between popup&#39;s</h2>\n<p>As long as popup&#39;s parent block itself can be nested in another popup block there is a need in a popup&#39;s relations handling. Block can handle Parent → [ Child, Child, ... ] relations by checking if the parent block is nested in another popup block. So, the children knows about the parent blocks existence.</p>\n<p>If there were no such relations, the parent popup block will be closed on mouse click on the child block regardless of the fact that <code>_autoclosable</code> modifier is set to <code>true</code>.</p>\n<p>This means that with <code>autoclosable</code> modifier toggled block will close itself and close all of it children on mouse click outside block&#39;s window or it child&#39;s window.</p>\n<p>Child popup blocks can be regarded as a chain of 1 → 2 → 3 → 4. By clicking on the second element of chain, third and forth will be closed. By clicking on first, the second, third and forth will be closed. On click outside of any popup window of the chain element all popups will be closed.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup-block\">popup Block</h2>\n<h3 id=\"block-parameters-\">Block parameters:</h3>\n<ul>\n<li>[mainOffset=0] {Number}<br/>\noffset along the main direction</li>\n<li>[secondaryOffset=0] {Number}<br/>\noffset along the secondary direction</li>\n<li>[viewportOffset=0] {Number}<br/>\noffset from the viewport (window)</li>\n<li>[directions] {[object Object]}<br/>\nallowed directions</li>\n</ul>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n"
                },
                {
                    "name": "radio",
                    "data": {
                        "ru": {
                            "name": "radio",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/radio-group/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/radio-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"radio\">radio</h1>\n<p>Блок <code>radio</code> – «радиопереключатель», «радиокнопка». Используется для создания одиночных радиобоксов.</p>\n<p>В реализации блока используется функциональность нативного контрола <code>input</code> с атрибутом <code>type=&quot;radio&quot;</code> – <code>&lt;input name=&quot;name&quot; type=&quot;radio&quot;&gt;</code>, который скрывается при использовании модификатора <code>theme</code>.</p>\n<p>В результате применения шаблонов блок <code>radio</code> отображается на странице как HTML-тег <code>&lt;label&gt;</code> – контейнер, содержащий:</p>\n<ul>\n<li>элемент <code>radio__box</code>, содержащий скрытый контрол <code>input</code> (элемент <code>__control</code>);</li>\n<li>подпись к радиокнопке, если задан BEMJSON-параметр <code>text</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON-блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td><code>name</code></td>\n        <td><code>String|Number</code></td>\n        <td>Имя радиокнопки. Преобразуется в HTML-атрибут <code>name</code> вложенного блока <code>input</code>.</td>\n    </tr>\n    <tr>\n        <td><code>text</code></td>\n        <td><code>String|Number</code></td>\n        <td>Подпись, отображаемая для радиокнопки.</td>\n    </tr>\n    <tr>\n        <td><code>val</code></td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое контролом радиопереключателя <code>radio__control</code>, если выбрана текущая радиокнопка. Преобразуется в HTML-атрибут <code>value</code> вложенного блока <code>input</code>.</td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-theme-\">Темы <code>theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/radio/xr-zTTUYS3DD_e4xJV6Yn3a3BPI -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/radio/pPPjX0UcGCQBYmUNCpE27JADBCU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/radio/L98T9NertqtVCJpvDLdlKg6huWI -->\n\n<h3 id=\"-size-\">Размеры радиопереключателя <code>size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам радиопереключателей.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>В зависимости от значения модификатора <code>type</code> доступны следующие размеры реализации блока:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Обычный радиопереключатель</th>\n        <th>Кнопочный радиопереключатель (<code>radio_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<h3 id=\"-type-\">Тип радиопереключателя <code>type</code></h3>\n<p>Модификатор <code>type</code> со значением <code>button</code> используется для создания кнопочного радиопереключателя – кнопки (блок <code>button</code>) с установленным модификатором <code>button_togglable_radio</code>.</p>\n<p>При этом к блоку <code>button</code> примешивается блок <code>radio</code>, а контентом кнопки становится <code>radio__control</code>.</p>\n<p>Кроме того, при установленном модификаторе <code>radio_type_button</code> для блока задается HTML-атрибут <code>role=&quot;button&quot;</code>.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычный радиопереключатель</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Кнопочный радиопереключатель</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;,\n        type : &#39;button&#39;\n    },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-disabled-\">Неактивен <code>disabled</code></h3>\n<p>В состоянии «неактивен» радиопереключатель отображается, но недоступен для действий пользователя.</p>\n<p>Такой радиопереключатель не будет получать фокус (модификатор <code>focused</code>).</p>\n<p>При установке модификатора <code>disabled</code> для радиопереключателя не будут:</p>\n<ul>\n<li>устанавливаться модификаторы состояния <code>hovered</code>, <code>pressed</code> и <code>focused</code>;</li>\n<li>изменяться значение модификатора <code>checked</code>.</li>\n</ul>\n<!-- bem-example: touch-phone.examples/radio/RBPWsSDN_yrB6HXtmtrnXB3WSMY -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-focused-\">В фокусе <code>focused</code></h4>\n<p>Модификатор <code>focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<!-- bem-example: touch-phone.examples/radio/wEYcA7ioT134yNzBSljZyhtiyg8 -->\n\n<h4 id=\"-checked-\">Выбран <code>checked</code></h4>\n<p>Модификатор <code>checked</code> указывает на то, что радиопереключатель выбран (отмечен).</p>\n<p>Модификатор устанавливается по:</p>\n<ul>\n<li>щелчку мыши по блоку (при повторных щелчках модификатор сохраняется);</li>\n<li>нажатию клавиш <code>Enter</code> или <code>Space</code> (возможность использования клавиши <code>Enter</code> зависит от браузера), если радиопереключатель находится в фокусе (модификатор <code>focused</code>);</li>\n<li>нажатию клавиш стрелок, если фокус установлен на соседний радиопереключатель в радиогруппе или в блоке, содержащем несколько блоков <code>radio</code>.</li>\n</ul>\n<!-- bem-example: touch-phone.examples/radio/TLM9QTv-Pjlfq-MNpduxyTgw0cg -->\n\n<h4 id=\"-radio_type_button-\">Состояния, доступные с модификатором <code>radio_type_button</code></h4>\n<p>При установленном модификаторе <code>radio_type_button</code> к блоку <code>button</code> примешивается блок <code>radio</code>. Как следствие, для блока с модификатором <code>radio_type_button</code> доступны состояния блока <code>button</code>:</p>\n<ul>\n<li><code>hovered</code> – под курсором;</li>\n<li><code>pressed</code> – кнопка нажата.</li>\n</ul>\n<h2 id=\"-\">Элементы</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>Элемент <code>__box</code> используется в стандартной реализации блока как контейнер, содержащий контрол радиокнопки (элемент <code>__control</code>). В результате BEMHTML-преобразований становится HTML-элементом <code>&lt;span&gt;</code>.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p>Элемент <code>__control</code> – контрол радиокнопки. В результате BEMHTML-преобразований становится HTML-элементом <code>&lt;input&gt;</code> с атрибутом <code>type=&quot;radio&quot;</code>. По умолчанию элемент скрыт. В блоке используется только его функциональность.</p>\n<h2 id=\"-\">Зависимости</h2>\n<p>Блок <code>radio</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>control</code></li>\n<li><code>jquery__event</code></li>\n<li><code>__box</code></li>\n<li><code>__control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "radio",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/radio-group/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/radio-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"radio\">radio</h1>\n<p>A <code>radio</code> block is used for creating of a single radio switch. A switch can be represented by the radio switch or by the button. The <code>radio</code> block allows to manage state, content and type of a radio switches.</p>\n<p>The <code>radio</code> blocks are used inside a <code>radio-group</code> block as a group elements.</p>\n<p>As a result of block&#39;s template application, it will be rendered to a <code>&lt;label&gt;</code> HTML element, with following set of nested items:</p>\n<ul>\n<li>a <code>radio__box</code> element with hidden nested <code>input</code> HTML element (a <code>__control</code> element);</li>\n<li>a radio switch label, if the <code>text</code> BEMJSON attribute is passed.</li>\n</ul>\n<p>Block&#39;s implementation use the logic of a native <code>input</code> HTML element with set <code>radio</code> control type: <code>&lt;input name=&quot;name&quot; type=&quot;radio&quot;&gt;</code>. If a <code>theme</code> modifier is set, the <code>input</code> element is hidden by default.</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td><code>name</code></td>\n        <td><code>String|Number</code></td>\n        <td>Radio switch name. Renders to a nested <code>input</code> block&#39;s <code>name</code> HTML attribute.</td>\n    </tr>\n    <tr>\n        <td><code>text</code></td>\n        <td><code>String|Number</code></td>\n        <td>A label for the radio switch.</td>\n    </tr>\n    <tr>\n        <td><code>val</code></td>\n        <td><code>String|Number</code></td>\n        <td>A value which the selected radio switch will return. Renders to a nested <code>input</code> block&#39;s <code>value</code> HTML attribute.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-theme-\">The themes <code>theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/radio/xr-zTTUYS3DD_e4xJV6Yn3a3BPI -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/radio/pPPjX0UcGCQBYmUNCpE27JADBCU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/radio/L98T9NertqtVCJpvDLdlKg6huWI -->\n\n<h3 id=\"the-sizes-size-\">The sizes <code>size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides all types of radio switches with the size value.</p>\n<p>The set of available sizes depends on a <code>type</code> modifier&#39;s value. Following sizes are available:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Default radio switch</th>\n        <th>Button radio switch (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n<h3 id=\"radio-switch-type-type-\">Radio switch type <code>type</code></h3>\n<p>A <code>type</code> modifier can be set to a <code>button</code> state for creating a button radio switch – the <code>button</code> block with a <code>button_togglable_radio</code> modifier set.</p>\n<p>The <code>radio</code> block is mixed up to the <code>button</code> block with nested <code>radio__control</code> element.</p>\n<p>In addition a <code>role=&quot;button&quot;</code> HTML attribute is set for the block.</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Default radio switch</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Button radio switch</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;,\n        type : &#39;button&#39;\n    },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"inactive-disabled-\">Inactive <code>disabled</code></h4>\n<p>A <code>disabled</code> modifier is used for an inactive radio switch creation. An inactive radio switch is displayed but not available for user actions.  </p>\n<p>Inactive radio switch will not obtain focus (a <code>focused</code> modifier toggle) on mouse click or by <code>Tab</code> key press.</p>\n<p>For such a inactive block will not be performed:</p>\n<ul>\n<li><code>hovered</code>, <code>pressed</code> and <code>focused</code> state modifier toggling;</li>\n<li><code>checked</code> modifier value changing.</li>\n</ul>\n<!-- bem-example: touch-phone.examples/radio/RBPWsSDN_yrB6HXtmtrnXB3WSMY -->\n\n\n<h4 id=\"in-focus-focused-\">In focus <code>focused</code></h4>\n<p>A <code>focused</code> modifier is automatically toggled to the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/radio/wEYcA7ioT134yNzBSljZyhtiyg8 -->\n\n\n<h4 id=\"selected-radio-switch-checked-\">Selected radio switch <code>checked</code></h4>\n<p>Modifier defines the selected radio switch.</p>\n<p>The modifier is toggling on:</p>\n<ul>\n<li>mouse click (on re-clicking modifier state remains);</li>\n<li><code>Enter</code> and <code>Space</code> key press (an option of <code>Enter</code> usage depends on a browser), if radio switch is in focus (a <code>focused</code> modifier is toggled);</li>\n<li>arrow key press, if one of the neighbour <code>radio</code> switches is in focus. Neighbour switch can be either a part of the same radio group or independent switch nested in the same block.</li>\n</ul>\n<!-- bem-example: touch-phone.examples/radio/yLi2X_E9s0cnYS8x7h0IvQ3Jmhw -->\n\n\n<h4 id=\"states-available-with-a-radio_type_button-modifier\">States available with a <code>radio_type_button</code> modifier</h4>\n<p>If a <code>radio_type_button</code> modifier is set, a <code>radio</code> block is mixed up to a <code>button</code> block. As a result, for the <code>radio</code> block with the <code>radio_type_button</code> modifier are available following <code>button</code> block&#39;s states:</p>\n<ul>\n<li><code>hovered</code> – mouse pointer over the block;</li>\n<li><code>pressed</code> – button is pressed.</li>\n</ul>\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>A <code>__box</code> element is used in basic block&#39;s implementation as a container with nested control element (a <code>__control</code> element). It renders to a <code>&lt;span&gt;</code> HTML element.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p>A <code>__control</code> element is a radio switch controller. It renders to an <code>&lt;input&gt;</code> HTML element with the <code>type=&quot;radio&quot;</code> attribute is set. In all block themes it is hidden by default. Block uses only the control&#39;s logic.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>control</code></li>\n<li><code>jquery__event</code></li>\n<li><code>__box</code></li>\n<li><code>__control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    },
                    "jsdoc": "<h1 id=\"radio-module\">radio Module</h1>\n<h2 id=\"radio-block\">radio Block</h2>\n<p>Aughtments {control}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n"
                },
                {
                    "name": "radio-group",
                    "jsdoc": "<h1 id=\"radio-group-module\">radio-group Module</h1>\n<h2 id=\"radio-group-block\">radio-group Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"setval-val-data-radio-group-\">setVal ( val, [data] ) → {radio-group}</h4>\n<p>Sets control value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {String}<br/>\nvalue</li>\n<li>[data] {Object}<br/>\nadditional data</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{radio-group}</p>\n<p>this</p>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getradios-radio-\">getRadios () → {radio}</h4>\n<p>Returns options</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{radio}</p>\n<h1 id=\"radio-module\">radio Module</h1>\n<h2 id=\"radio-block\">radio Block</h2>\n<p>Aughtments {control}</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n",
                    "data": {
                        "ru": {
                            "name": "radio-group",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/radio-group/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/radio-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"radio-group\">radio-group</h1>\n<p>Блок <code>radio-group</code> – «радиогруппа», состоящая из набора зависимых переключателей «радиокнопок» (блоков <code>radio</code>). Радиогруппа используется для выбора единственного варианта из списка. </p>\n<p>Блок <code>radio-group</code> в результате BEMHTML-преобразований на странице становится HTML-элементом с тегом <code>&lt;span&gt;</code> – контейнером, содержащим группу переключателей (радиокнопок).</p>\n<h2 id=\"-\">Допустимые параметры блока</h2>\n<p>Допустимые параметры блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td><code>String</code></td>\n        <td>Имя радиогруппы. Преобразуется в HTML-атрибут <code>name</code> вложенного блока <code>input</code>.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td><code>Array</code></td>\n        <td>Массив хешей. Каждый хеш соответствует одному переключателю и содержит набор его параметров. </td>\n    </tr><br></table>\n\n<p>Среди параметров, передаваемых в атрибуте <code>option</code> для переключателя, обязательными являются:</p>\n<ul>\n<li><code>val</code> (<code>String</code> | <code>Number</code>) – значение, возвращаемое выбранным переключателем (элементом <code>radio__control</code>);</li>\n<li><code>text</code> (<code>String</code>) – подпись, отображаемая для текущего переключателя. </li>\n</ul>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-theme-\">Темы блока <code>theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером. </p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/radio-group/7DyHwAbpYHpT5TcturqqL57OMbA -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/radio-group/3eOE97EmaqvVB-6XycKG7cpGY5Y -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/radio-group/3iTePRGPbj1_dKvtQGd2bMai-Ac -->\n\n\n\n<h3 id=\"-size-\">Размеры переключателей группы <code>size</code></h3>\n<p>Задает размер переключателей для всех типов радиогрупп. Обязательный модификатор. </p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>В зависимости от значения модификатора <code>type</code> доступны следующие размеры реализации блока:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Обычная радиогруппа</th>\n        <th>Кнопочная радиогруппа (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<p>Размеры на примере темы <em>normal</em> с модификатором <code>radio-group_type_button</code>:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;s&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-S&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-M&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-L&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;xl&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-XL&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-type-\">Тип радиогруппы <code>type</code></h3>\n<p>Модификатор <code>type</code> может иметь следующие значения:</p>\n<ul>\n<li><code>button</code>. Используется для создания кнопочной радиогруппы – блока кнопок-переключателей;</li>\n<li><code>line</code>. Используется для создания радиогруппы с выравниванием в строку. После каждого переключателя группы кроме последнего автоматически добавляется отступ справа. Размер отступа зависит от значения модификатора <code>size</code>. Реализован только в теме <em>normal</em>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычная радиогруппа</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Кнопочная радиогруппа</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Строчная радиогруппа (<code>_type_line</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;line&#39; \n    },\n    name : &#39;radio-line&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h3 id=\"-disabled-\">Неактивна <code>disabled</code></h3>\n<p>В состоянии &quot;неактивна&quot; радиогруппа отображается, но недоступна для действий пользователя.  </p>\n<p>Такая радиогруппа не будет получать фокус (модификатор <code>focused</code>).</p>\n<p>При установке модификатора <code>disabled</code> для радиогруппы всем ее переключателям также устанавливается модификатор <code>disabled</code>. Как следствие для них не будут:</p>\n<ul>\n<li>устанавливаться модификаторы состояния <code>hovered</code>, <code>pressed</code> и <code>focused</code>;</li>\n<li>изменяться значения модификатора <code>checked</code>.</li>\n</ul>\n<p>Модификатор реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/radio-group/z74-X9bjA8-9fMUlFI8AH9R8Dfo -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-focused-\">В фокусе <code>focused</code></h4>\n<p>Модификатор <code>focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда один из его элементов находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/radio-group/8YPfPGsfRbco7RPs63oF47Bj5d8 -->\n\n<h2 id=\"-\">Зависимости блока</h2>\n<p>Блок <code>radio-group</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>radio</code></li>\n<li><code>jquery</code></li>\n<li><code>radio-group_type_button</code> (у которого в зависимостях есть блок <code>button</code>)</li>\n</ul>\n\n<h1 id=\"radio\">radio</h1>\n<p>Блок <code>radio</code> – «радиопереключатель», «радиокнопка». Используется для создания одиночных радиобоксов.</p>\n<p>В реализации блока используется функциональность нативного контрола <code>input</code> с атрибутом <code>type=&quot;radio&quot;</code> – <code>&lt;input name=&quot;name&quot; type=&quot;radio&quot;&gt;</code>, который скрывается при использовании модификатора <code>theme</code>.</p>\n<p>В результате применения шаблонов блок <code>radio</code> отображается на странице как HTML-тег <code>&lt;label&gt;</code> – контейнер, содержащий:</p>\n<ul>\n<li>элемент <code>radio__box</code>, содержащий скрытый контрол <code>input</code> (элемент <code>__control</code>);</li>\n<li>подпись к радиокнопке, если задан BEMJSON-параметр <code>text</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON-блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td><code>name</code></td>\n        <td><code>String|Number</code></td>\n        <td>Имя радиокнопки. Преобразуется в HTML-атрибут <code>name</code> вложенного блока <code>input</code>.</td>\n    </tr>\n    <tr>\n        <td><code>text</code></td>\n        <td><code>String|Number</code></td>\n        <td>Подпись, отображаемая для радиокнопки.</td>\n    </tr>\n    <tr>\n        <td><code>val</code></td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое контролом радиопереключателя <code>radio__control</code>, если выбрана текущая радиокнопка. Преобразуется в HTML-атрибут <code>value</code> вложенного блока <code>input</code>.</td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-theme-\">Темы <code>theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/radio-group/xr-zTTUYS3DD_e4xJV6Yn3a3BPI -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/radio-group/pPPjX0UcGCQBYmUNCpE27JADBCU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/radio-group/L98T9NertqtVCJpvDLdlKg6huWI -->\n\n<h3 id=\"-size-\">Размеры радиопереключателя <code>size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам радиопереключателей.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>В зависимости от значения модификатора <code>type</code> доступны следующие размеры реализации блока:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Обычный радиопереключатель</th>\n        <th>Кнопочный радиопереключатель (<code>radio_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<h3 id=\"-type-\">Тип радиопереключателя <code>type</code></h3>\n<p>Модификатор <code>type</code> со значением <code>button</code> используется для создания кнопочного радиопереключателя – кнопки (блок <code>button</code>) с установленным модификатором <code>button_togglable_radio</code>.</p>\n<p>При этом к блоку <code>button</code> примешивается блок <code>radio</code>, а контентом кнопки становится <code>radio__control</code>.</p>\n<p>Кроме того, при установленном модификаторе <code>radio_type_button</code> для блока задается HTML-атрибут <code>role=&quot;button&quot;</code>.</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Обычный радиопереключатель</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Кнопочный радиопереключатель</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;,\n        type : &#39;button&#39;\n    },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-disabled-\">Неактивен <code>disabled</code></h3>\n<p>В состоянии «неактивен» радиопереключатель отображается, но недоступен для действий пользователя.</p>\n<p>Такой радиопереключатель не будет получать фокус (модификатор <code>focused</code>).</p>\n<p>При установке модификатора <code>disabled</code> для радиопереключателя не будут:</p>\n<ul>\n<li>устанавливаться модификаторы состояния <code>hovered</code>, <code>pressed</code> и <code>focused</code>;</li>\n<li>изменяться значение модификатора <code>checked</code>.</li>\n</ul>\n<!-- bem-example: touch-phone.examples/radio-group/RBPWsSDN_yrB6HXtmtrnXB3WSMY -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-focused-\">В фокусе <code>focused</code></h4>\n<p>Модификатор <code>focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<!-- bem-example: touch-phone.examples/radio-group/wEYcA7ioT134yNzBSljZyhtiyg8 -->\n\n<h4 id=\"-checked-\">Выбран <code>checked</code></h4>\n<p>Модификатор <code>checked</code> указывает на то, что радиопереключатель выбран (отмечен).</p>\n<p>Модификатор устанавливается по:</p>\n<ul>\n<li>щелчку мыши по блоку (при повторных щелчках модификатор сохраняется);</li>\n<li>нажатию клавиш <code>Enter</code> или <code>Space</code> (возможность использования клавиши <code>Enter</code> зависит от браузера), если радиопереключатель находится в фокусе (модификатор <code>focused</code>);</li>\n<li>нажатию клавиш стрелок, если фокус установлен на соседний радиопереключатель в радиогруппе или в блоке, содержащем несколько блоков <code>radio</code>.</li>\n</ul>\n<!-- bem-example: touch-phone.examples/radio-group/TLM9QTv-Pjlfq-MNpduxyTgw0cg -->\n\n<h4 id=\"-radio_type_button-\">Состояния, доступные с модификатором <code>radio_type_button</code></h4>\n<p>При установленном модификаторе <code>radio_type_button</code> к блоку <code>button</code> примешивается блок <code>radio</code>. Как следствие, для блока с модификатором <code>radio_type_button</code> доступны состояния блока <code>button</code>:</p>\n<ul>\n<li><code>hovered</code> – под курсором;</li>\n<li><code>pressed</code> – кнопка нажата.</li>\n</ul>\n<h2 id=\"-\">Элементы</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>Элемент <code>__box</code> используется в стандартной реализации блока как контейнер, содержащий контрол радиокнопки (элемент <code>__control</code>). В результате BEMHTML-преобразований становится HTML-элементом <code>&lt;span&gt;</code>.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p>Элемент <code>__control</code> – контрол радиокнопки. В результате BEMHTML-преобразований становится HTML-элементом <code>&lt;input&gt;</code> с атрибутом <code>type=&quot;radio&quot;</code>. По умолчанию элемент скрыт. В блоке используется только его функциональность.</p>\n<h2 id=\"-\">Зависимости</h2>\n<p>Блок <code>radio</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>control</code></li>\n<li><code>jquery__event</code></li>\n<li><code>__box</code></li>\n<li><code>__control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n"
                        },
                        "en": {
                            "name": "radio-group",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/radio-group/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/radio-group/simple"
                                }
                            ],
                            "description": "<h1 id=\"radio-group\">radio-group</h1>\n<p>A <code>radio-group</code> block is a set of dependent switches – radio buttons (a <code>radio</code> block). It is used for a single option selection from the list of options. </p>\n<p>On a web page, a <code>radio-group</code> block will be rendered to a <code>&lt;span&gt;</code> HTML element, with nested set of a switches (radio buttons).</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td><code>String</code></td>\n        <td>Radio button group&#39;s name. Renders to the nested <code>input</code> block&#39;s <code>name</code> HTML attribute.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td><code>Array</code></td>\n        <td>Option objects array. Each object in the array are corresponds to one switch and contains it&#39;s attributes set.</td>\n    </tr><br></table>\n\n<p>Among the attributes passing to an <code>option</code> field for the switch the following are mandatory:</p>\n<ul>\n<li><code>val</code> (<code>String</code> | <code>Number</code>) – value returned by selected switcher (a &#39;radio__control&#39; element);</li>\n<li><code>text</code> (<code>String</code>) – a text label for the current switch.</li>\n</ul>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-theme-\">The themes <code>theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/radio-group/7DyHwAbpYHpT5TcturqqL57OMbA -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/radio-group/3eOE97EmaqvVB-6XycKG7cpGY5Y -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/radio-group/3iTePRGPbj1_dKvtQGd2bMai-Ac -->\n\n\n<h3 id=\"the-sizes-size-\">The sizes <code>size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides the size value to all types of radio groups.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Depending on a <code>type</code> modifier value following sizes are available:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Normal radio group</th>\n        <th>Button radio group (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n\n<p>Here are some examples with <em>normal</em> theme and and with set <code>radio-group_type_button</code> modifier:</p>\n<table>\n    <tr>\n        <th>Размер</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;s&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-S&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-M&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-L&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;xl&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-XL&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"radio-group-type-type-\">Radio group type <code>type</code></h3>\n<p>A <code>type</code> modifier can have following values:</p>\n<ul>\n<li><code>button</code>. It is used for creation of a button radio group – a block of button switcher;</li>\n<li><code>line</code>. Is used for a line-aligned radio group creation. Right gap is automatically added after each switch of the group except the last one. Available only for <em>normal</em> theme.</li>\n</ul>\n<table>\n    <tr>\n        <th>Type</th>\n\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Normal radio group</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Button radio group</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;button&#39; \n    },\n    name : &#39;radio-button&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Line-aligned radio group (<code>_type_line</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio-group&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        type : &#39;line&#39; \n    },\n    name : &#39;radio-line&#39;,\n    options : [\n        { val : 1, text : &#39;first&#39; },\n        { val : 2, text : &#39;second&#39; }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h3 id=\"inactive-disabled-\">Inactive <code>disabled</code></h3>\n<p>A <code>radio-group_disabled</code> modifier is used for an inactive radio group creation. An inactive group is displayed but not available for user actions.  </p>\n<p>Such a group will not obtain focus (<code>radio-group_focused</code> modifier will not be toggled).</p>\n<p>When a <code>disabled</code> modifier is set to the group all it&#39;s switches will also be disabled. As a result, for the group&#39;s switches will not be performed:</p>\n<ul>\n<li>state modifiers <code>hovered</code>, <code>pressed</code> and <code>focused</code> toggling;</li>\n<li>switching between <code>checked</code> modifier&#39;s values.</li>\n</ul>\n<p>Modifier is available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/radio-group/z74-X9bjA8-9fMUlFI8AH9R8Dfo -->\n\n\n<h3 id=\"radio-group-s-states\">Radio group&#39;s states</h3>\n<h4 id=\"-focused-\"><code>focused</code></h4>\n<p>A <code>radio-group_focused</code> modifier is automaticly toggles when one of the block elements is in focus. For example, on mouse click or by <code>Tab</code> key press. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/radio-group/8YPfPGsfRbco7RPs63oF47Bj5d8 -->\n\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>radio</code></li>\n<li><code>jquery</code></li>\n<li><code>radio-group_type_button</code> (which is depends on <code>button</code> block)</li>\n</ul>\n\n<h1 id=\"radio\">radio</h1>\n<p>A <code>radio</code> block is used for creating of a single radio switch. A switch can be represented by the radio switch or by the button. The <code>radio</code> block allows to manage state, content and type of a radio switches.</p>\n<p>The <code>radio</code> blocks are used inside a <code>radio-group</code> block as a group elements.</p>\n<p>As a result of block&#39;s template application, it will be rendered to a <code>&lt;label&gt;</code> HTML element, with following set of nested items:</p>\n<ul>\n<li>a <code>radio__box</code> element with hidden nested <code>input</code> HTML element (a <code>__control</code> element);</li>\n<li>a radio switch label, if the <code>text</code> BEMJSON attribute is passed.</li>\n</ul>\n<p>Block&#39;s implementation use the logic of a native <code>input</code> HTML element with set <code>radio</code> control type: <code>&lt;input name=&quot;name&quot; type=&quot;radio&quot;&gt;</code>. If a <code>theme</code> modifier is set, the <code>input</code> element is hidden by default.</p>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td><code>name</code></td>\n        <td><code>String|Number</code></td>\n        <td>Radio switch name. Renders to a nested <code>input</code> block&#39;s <code>name</code> HTML attribute.</td>\n    </tr>\n    <tr>\n        <td><code>text</code></td>\n        <td><code>String|Number</code></td>\n        <td>A label for the radio switch.</td>\n    </tr>\n    <tr>\n        <td><code>val</code></td>\n        <td><code>String|Number</code></td>\n        <td>A value which the selected radio switch will return. Renders to a nested <code>input</code> block&#39;s <code>value</code> HTML attribute.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-theme-\">The themes <code>theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/radio-group/xr-zTTUYS3DD_e4xJV6Yn3a3BPI -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/radio-group/pPPjX0UcGCQBYmUNCpE27JADBCU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/radio-group/L98T9NertqtVCJpvDLdlKg6huWI -->\n\n<h3 id=\"the-sizes-size-\">The sizes <code>size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides all types of radio switches with the size value.</p>\n<p>The set of available sizes depends on a <code>type</code> modifier&#39;s value. Following sizes are available:</p>\n<table>\n    <tr>\n        <th>Size</th>\n        <th>Default radio switch</th>\n        <th>Button radio switch (<code>_type_button</code>)</th>\n    </tr>\n    <tr>\n        <th>s</th>\n        <td>–</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>m</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>l</th>\n        <td>+</td>\n        <td>+</td>\n    </tr>\n    <tr>\n        <th>xl</th>\n        <td>–</td>\n        <td>+</td>\n</table>\n\n<h3 id=\"radio-switch-type-type-\">Radio switch type <code>type</code></h3>\n<p>A <code>type</code> modifier can be set to a <code>button</code> state for creating a button radio switch – the <code>button</code> block with a <code>button_togglable_radio</code> modifier set.</p>\n<p>The <code>radio</code> block is mixed up to the <code>button</code> block with nested <code>radio__control</code> element.</p>\n<p>In addition a <code>role=&quot;button&quot;</code> HTML attribute is set for the block.</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Default radio switch</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Button radio switch</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;radio&#39;,\n    mods : {\n        theme : &#39;normal&#39;,\n        size : &#39;l&#39;,\n        type : &#39;button&#39;\n    },\n    name : &#39;radio-normal&#39;,\n    text : &#39;Lonely switch2&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"inactive-disabled-\">Inactive <code>disabled</code></h4>\n<p>A <code>disabled</code> modifier is used for an inactive radio switch creation. An inactive radio switch is displayed but not available for user actions.  </p>\n<p>Inactive radio switch will not obtain focus (a <code>focused</code> modifier toggle) on mouse click or by <code>Tab</code> key press.</p>\n<p>For such a inactive block will not be performed:</p>\n<ul>\n<li><code>hovered</code>, <code>pressed</code> and <code>focused</code> state modifier toggling;</li>\n<li><code>checked</code> modifier value changing.</li>\n</ul>\n<!-- bem-example: touch-phone.examples/radio-group/RBPWsSDN_yrB6HXtmtrnXB3WSMY -->\n\n\n<h4 id=\"in-focus-focused-\">In focus <code>focused</code></h4>\n<p>A <code>focused</code> modifier is automatically toggled to the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/radio-group/wEYcA7ioT134yNzBSljZyhtiyg8 -->\n\n\n<h4 id=\"selected-radio-switch-checked-\">Selected radio switch <code>checked</code></h4>\n<p>Modifier defines the selected radio switch.</p>\n<p>The modifier is toggling on:</p>\n<ul>\n<li>mouse click (on re-clicking modifier state remains);</li>\n<li><code>Enter</code> and <code>Space</code> key press (an option of <code>Enter</code> usage depends on a browser), if radio switch is in focus (a <code>focused</code> modifier is toggled);</li>\n<li>arrow key press, if one of the neighbour <code>radio</code> switches is in focus. Neighbour switch can be either a part of the same radio group or independent switch nested in the same block.</li>\n</ul>\n<!-- bem-example: touch-phone.examples/radio-group/yLi2X_E9s0cnYS8x7h0IvQ3Jmhw -->\n\n\n<h4 id=\"states-available-with-a-radio_type_button-modifier\">States available with a <code>radio_type_button</code> modifier</h4>\n<p>If a <code>radio_type_button</code> modifier is set, a <code>radio</code> block is mixed up to a <code>button</code> block. As a result, for the <code>radio</code> block with the <code>radio_type_button</code> modifier are available following <code>button</code> block&#39;s states:</p>\n<ul>\n<li><code>hovered</code> – mouse pointer over the block;</li>\n<li><code>pressed</code> – button is pressed.</li>\n</ul>\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"-__box-\"><code>__box</code></h3>\n<p>A <code>__box</code> element is used in basic block&#39;s implementation as a container with nested control element (a <code>__control</code> element). It renders to a <code>&lt;span&gt;</code> HTML element.</p>\n<h3 id=\"-__control-\"><code>__control</code></h3>\n<p>A <code>__control</code> element is a radio switch controller. It renders to an <code>&lt;input&gt;</code> HTML element with the <code>type=&quot;radio&quot;</code> attribute is set. In all block themes it is hidden by default. Block uses only the control&#39;s logic.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>control</code></li>\n<li><code>jquery__event</code></li>\n<li><code>__box</code></li>\n<li><code>__control</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n"
                        }
                    }
                },
                {
                    "name": "select",
                    "jsdoc": "<h1 id=\"select-module\">select Module</h1>\n<h2 id=\"select-block\">select Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getval-\">getVal () → {*}</h4>\n<p>Get value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{*}</p>\n<h4 id=\"setval-val-select-\">setVal ( val ) → {select}</h4>\n<p>Set value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {*}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{select}</p>\n<p>this</p>\n<h1 id=\"button-module\">button Module</h1>\n<h2 id=\"button-block\">button Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns text of the button</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"settext-text-button-\">setText ( text ) → {button}</h4>\n<p>Sets text to the button</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>text {String}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{button}</p>\n<p>this</p>\n<h1 id=\"control-module\">control Module</h1>\n<h2 id=\"control-block\">control Block</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getname-string-\">getName () → {String}</h4>\n<p>Returns name of control</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h4 id=\"getval-string-\">getVal () → {String}</h4>\n<p>Returns control value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"menu-module\">menu Module</h1>\n<h2 id=\"menu-block\">menu Block</h2>\n<p>Aughtments {control}</p>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"getitems-menu-item-\">getItems () → {menu-item}</h4>\n<p>Returns items</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{menu-item}</p>\n<h4 id=\"setcontent-content-menu-\">setContent ( content ) → {menu}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{menu}</p>\n<p>this</p>\n<h1 id=\"menu-item-module\">menu-item Module</h1>\n<h2 id=\"menu-item-block\">menu-item Block</h2>\n<h3 id=\"block-parameters-\">Block parameters:</h3>\n<ul>\n<li>val {*}<br/>\nValue of item</li>\n</ul>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"isvaleq-val-boolean-\">isValEq ( val ) → {Boolean}</h4>\n<p>Checks whether given value is equal to current value</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>val {*}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Boolean}</p>\n<h4 id=\"getval-\">getVal () → {*}</h4>\n<p>Returns item value</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{*}</p>\n<h4 id=\"gettext-string-\">getText () → {String}</h4>\n<p>Returns item text</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{String}</p>\n<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup_autoclosable_true\">popup_autoclosable_true</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n<h1 id=\"popup-module\">popup Module</h1>\n<h2 id=\"popup_autoclosable_true\">popup_autoclosable_true</h2>\n<h3 id=\"instance-methods\">Instance methods</h3>\n<h4 id=\"settarget-left-top-popup-\">setTarget ( left, [top] ) → {popup}</h4>\n<p>Sets target</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>left {Number | jQuery | BEMDOM}<br/>\nx-coordinate or owner DOM elem or owner BEMDOM block</li>\n<li>[top] {Number}<br/>\ny-coordinate</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"setcontent-content-popup-\">setContent ( content ) → {popup}</h4>\n<p>Sets content</p>\n<h5 id=\"parameters-\">Parameters:</h5>\n<ul>\n<li>content {String | jQuery}</li>\n</ul>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"redraw-popup-\">redraw () → {popup}</h4>\n<p>Redraws popup</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{popup}</p>\n<p>this</p>\n<h4 id=\"calcpossibledrawingparams-array-\">calcPossibleDrawingParams () → {Array}</h4>\n<p>Returns possible directions to draw with max available width and height.</p>\n<h5 id=\"returns-\">Returns:</h5>\n<p>{Array}</p>\n",
                    "data": {
                        "ru": {
                            "name": "select",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/select/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/select/simple"
                                }
                            ],
                            "description": "<h1 id=\"select\">select</h1>\n<p>Блок <code>select</code> («селект») – раскрывающийся список выбора. Реализация блока основана на блоках <code>button</code>, <code>popup</code>, <code>menu</code> и <code>menu-item</code>. Визуально представлен кнопкой и выпадающим списком с элементами меню. Щелчок по кнопке раскрывает выпадающий список под или над кнопкой в зависимости от ее положения на странице (<code>{ directions : [&#39;bottom-left&#39;, &#39;bottom-right&#39;, &#39;top-left&#39;, &#39;top-right&#39;] }</code>). Щелчок вне зоны попапа автоматически скрывает его (<code>{ autoclosable : true }</code>).</p>\n<p>Раскрывающийся список имеет всего один уровень вложенности и позволяет выбрать:</p>\n<ul>\n<li>только один элемент из списка (<code>select_mode_radio</code>);</li>\n<li>один, несколько или ни одного элемента из списка (<code>select_mode_check</code>);</li>\n<li>один или ни одного элемента из списка (<code>select_mode_radio-check</code>).</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON-блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>name</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает имя выпадающего списка.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает уникальный идентификатор селекта.</td>\n    </tr>\n    <tr>\n        <td>options</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Задает массив пунктов списка. Каждый пункт имеет обязательный атрибут <code>val</code>, реализованный скрытым элементом <code>control</code>.</td>\n    </tr>\n    <tr>\n        <td>textMaxWidth</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Устанавливает максимальную ширину кнопки селекта. Ширина раскрывающегося списка при этом вычисляется в зависимости от ширины пунктов.</td>\n    </tr>\n    <tr>\n        <td>optionsMaxHeight</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Устанавливает максимальную высоту выпадающего списка.<br>Если все пункты списка не вмещаются, появляется скролл.<br> Если значение не указано, высота выпадающего списка по умолчанию будет вычисляться в зависимости от количества пунктов.</td>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает значение раскрывающегося списка выбора в случае, если ни один из пунктов не отмечен.<br> Применяется только для селектов с установленным модификатором <code>mode</code> в значении <code>check</code> или <code>radio-check</code>.</td>\n    </tr>\n</table>\n\n<p>Другие допустимые атрибуты блока могут задаваться в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Если модификатор темы не указан, отображается кастомная реализация контрола без применения стилей.</p>\n<p>Наглядно показано на примерах ниже:</p>\n<!-- bem-example: touch-phone.examples/select/KnPV22VFNtI4S-O8Wpqq1LxdReY -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/select/Cm3ZrvxjfRMKNGE1uZyeeDtczwo -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/select/walnTtaHw3moIy8I9-6eOB25lMw -->\n\n<h3 id=\"-_mode-\">Типы <code>_mode</code></h3>\n<p>Обязательный модификатор.</p>\n<p>Блок представлен следующими типами:</p>\n<ul>\n<li>селект с множественным выбором, который позволяет оставить список без выбранных элементов (<code>select_mode_check</code>). При щелчке мышью по пункту списка, его состояние меняется на противоположное. Если пункт был активен – он деактивируется, и наоборот.</li>\n</ul>\n<!-- bem-example: touch-phone.examples/select/hpUbeKC_5hYtmemMemDzuUiqED8 -->\n\n<ul>\n<li>меню-переключатель (<code>select_mode_radio</code>). Применяется для создания селектов, позволяющих только одиночный выбор.\nДля этого типа селекта текст в кнопке устанавливается в зависимости от выбранного элемента. Если элемент не выбран, то по умолчанию выбирается первый пункт из списка.</li>\n</ul>\n<!-- bem-example: touch-phone.examples/select/zeJPZbtVz42oYU7GxOeTA7fv-ag -->\n\n<ul>\n<li>селект с одиночным выбором, который позволяет оставить список без выбранных элементов (<code>select_mode_radio-check</code>). При щелчке мышью по пункту списка, его состояние меняется на противоположное. Если пункт был активен – он деактивируется, и наоборот.</li>\n</ul>\n<!-- bem-example: touch-phone.examples/select/ilW6j3BEgfKcwzfrYVtoANn-atA -->\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<h4 id=\"-_width-\">Ширина кнопки селекта <code>_width</code></h4>\n<p>Модификатор <code>width</code> в значении <code>available</code> растягивает кнопку селекта по ширине в зависимости от длины выбранного пункта.</p>\n<!-- bem-example: touch-phone.examples/select/JkxdmzpYd197HKLlAB6yPUU4Vgg -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"-__button-\">Кнопка <code>__button</code></h3>\n<p>Селект визуально представлен кнопкой (элемент <code>button</code>), которая содержит иконку <code>&lt;i&gt;</code>, реализованную блоком <a href=\"../icon/icon.ru.md\">icon</a> с примиксованным элементом <code>tick</code>. Так как иконка является частью кнопки селекта, ее размер устанавливается размером кнопки. Щелчок по кнопке раскрывает список выбора.</p>\n<p>Так как селект реализован с помощью блока <a href=\"../button/button.ru.md\">button</a>, ему можно задавать следующие модификаторы:</p>\n<ul>\n<li><code>theme</code></li>\n<li><code>size</code></li>\n<li><code>focused</code></li>\n<li><code>checked</code></li>\n<li><code>disabled</code></li>\n</ul>\n<h2 id=\"-__control-\">Контрол <code>__control</code></h2>\n<p>Вспомогательный скрытый элемент, который отвечает за формирование элементов списка выбора.</p>\n<h2 id=\"-__menu-\">Меню <code>__menu</code></h2>\n<p>Элемент <code>menu</code> позволяет управлять пунктами списка выбора:</p>\n<ul>\n<li><code>val</code> – значение, возвращаемое пунктом из списка, если он выбран. Обязательный атрибут. Может содержать уникальный идентификатор <code>{ val : { id : 1 } }</code>.</li>\n<li><code>text</code> – название пункта в списке.</li>\n<li><code>checked</code> – присваивается пункту из списка, если он выбран. <code>{ checked : true }</code> – пункт выбран.</li>\n<li><code>checkedText</code> – задает значение, отображаемое в кнопке селекта, для выбранного пункта. Задается только для блока <code>select</code> с модификатором <code>mode</code> в значении <code>check</code>.</li>\n<li><code>icon</code> – графический элемент (иконка)</li>\n</ul>\n<!-- bem-example: touch-phone.examples/select/TUaceOlKTkiAy0Ojt7LQba4Yc_A -->\n\n<p>Элементы списка могут быть объединены в группы. Для группировки пунктов выбора служит элемент <code>group</code>, в который вкладываются необходимые элементы списка. Название группы задается через атрибут <code>title</code>.</p>\n<!-- bem-example: touch-phone.examples/select/CAWbbXgQYp4XtKAtpvG9UGnGOFU -->\n\n<h1 id=\"button\">button</h1>\n<p>Блок <code>button</code> используется для создания различных типов кнопок и предоставляет возможность изменять их размер, состояние, содержимое и внешний вид.</p>\n<h2 id=\"-\">Варианты использования кнопок</h2>\n<ul>\n<li>Обычная кнопка – применяется для любых кнопок веб-интерфейса. Используется по умолчанию.</li>\n<li>Кнопка-ссылка – применяется для перехода по ссылке. Задается модификатором <code>type</code> со значением <code>link</code>.</li>\n<li>Кнопка отправки формы – предназначена для отправки данных формы на сервер (submit). Задается модификатором <code>type</code> со значением <code>submit</code>.</li>\n</ul>\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Задает текст кнопки.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code></td>\n        <td>Кнопка с иконкой, которая формируется блоком <code>icon</code>.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Адрес ссылки. Применяется только при наличии модификатора блока <code>button_type_link</code>. Кнопка становится ссылкой, а значение <code>url</code> – атрибутом <code>href</code>.</td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Уникальный идентификатор кнопки.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Определяет последовательность перехода между кнопками при нажатии на <code>Tab</code>.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Значение, отправляемое на сервер. По умолчанию пустое.</td>\n    </tr>\n</table>\n\n<p>Другие допустимые атрибуты блока могут задаваться в зарезервированном поле <code>attrs</code> в BEMJSON.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания модификатора темы отображается нативный вид контрола (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/select/pxTNfkqsHxpJmDhwS0QK2QBs3ZY -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/select/KtCevfKa_rzm7MTQMzA65Z0ZREU -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/select/Rb77AVqNcSM2UUBxbCkUkHULKWc -->\n\n<h3 id=\"-_size-\">Размеры кнопок <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер всем типам кнопок.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>кнопки</th>\n        <th>Размер<br>шрифта</th>\n        <th>Высота<br>кнопки</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_type-\">Типы кнопок <code>_type</code></h3>\n<p>Блок может быть представлен в виде кнопки-ссылки (<code>_type_link</code>) и кнопки отправки формы (<code>_type_submit</code>).\nВ случак кнопки-ссылки, дополнительно во входных данных необходимо указать обязательный атрибут <code>url</code>. В таком случае кнопка получает тег <code>&lt;a&gt;</code>, а значение <code>url</code> становится атрибутом <code>href</code>.</p>\n<p><strong>Кнопка-ссылка</strong></p>\n<!-- bem-example: touch-phone.examples/select/El0pc_bZgByjhimDRiJmaUa0ubw -->\n\n<p><strong>Кнопка отправки формы</strong></p>\n<!-- bem-example: touch-phone.examples/select/gtF_RY9_ivjSx1sADQLwlLOSzmo -->\n\n<h3 id=\"-\">Состояния</h3>\n<h4 id=\"-_disabled-\">Неактивна <code>_disabled</code></h4>\n<p>В состоянии «неактивна» кнопка видна, но недоступна для действий пользователя.</p>\n<p>Такая кнопка не может получить фокус путем нажатия на клавишу <code>Tab</code>, мышью или другими способами.</p>\n<!-- bem-example: touch-phone.examples/select/VrNTsucLZEWlatBulG8rqd0wHxQ -->\n\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>В состоянии блока <code>focused</code> со значением <code>true</code> кнопка всегда находится в фокусе. Нажатие по ней можно выполнить клавишей <code>Space</code> или <code>Enter</code>.</p>\n<!-- bem-example: touch-phone.examples/select/ByAZ1dHx4rZKUf9zbxuHmfOmGNs -->\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие «наведение курсором» на кнопку.</p>\n<h4 id=\"-_pressed-\">Нажатие <code>_pressed</code></h4>\n<p>Определяет состояние «нажатие на кнопку» (действие).</p>\n<h4 id=\"-_togglable-\">Залипание <code>_togglable</code></h4>\n<p>Позволяет реализовать залипание кнопки. Допустимые значения: <code>check</code> и <code>radio</code>.</p>\n<!-- bem-example: touch-phone.examples/select/NYbJzppv5-r9T8LQ0_-SaNLJWds -->\n\n<h4 id=\"-_action-\">Визуальное выделение <code>_action</code></h4>\n<p>Визуально выделяет кнопку на странице.</p>\n<!-- bem-example: touch-phone.examples/select/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"-_pseudo-\">Псевдокнопка <code>_pseudo</code></h4>\n<p>При выборе модификатора <code>pseudo</code> со значением <code>true</code>, кнопка получает прозрачный фон.</p>\n<!-- bem-example: touch-phone.examples/select/h_ijyu_mqbPaJBB22OxZERaFyZA -->\n\n<p>В неактивном состоянии границы псевдокнопки исчезают и она сливается со страницей.</p>\n<!-- bem-example: touch-phone.examples/select/igxPz7KCvCVG6TTxlXRYzE2_5pI -->\n\n<h2 id=\"-\">Элементы блока</h2>\n<h3 id=\"__text\">__text</h3>\n<p>Технический элемент. Обрамляет текст кнопки.\nНужен для позиционирования текста внутри кнопки, в том числе для случаев использования вместе с иконкой.</p>\n<!-- bem-example: touch-phone.examples/select/RQ8YcvhxhqjSwO3I3VjLBOanRns -->\n\n<h1 id=\"control\">control</h1>\n<p>Вспомогательный блок. Используется для работы большинства блоков библиотеки <a href=\"https://github.com/bem/bem-components\">bem-components</a>:</p>\n<ul>\n<li><a href=\"../attach/attach.ru.md\">attach</a></li>\n<li><a href=\"../button/button.ru.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.ru.md\">checkbox</a></li>\n<li><a href=\"../input/input.ru.md\">input</a></li>\n<li><a href=\"../link/link.ru.md\">link</a></li>\n<li><a href=\"../menu/menu.ru.md\">menu</a></li>\n<li><a href=\"../radio/radio.ru.md\">radio</a></li>\n</ul>\n<p>Предназначен для реализации общей функциональности данных блоков, предоставляющей состояния <code>focused</code> и <code>disabled</code>.\nСледит за значением атрибута <code>tabIndex</code> в зависимости от текущего состояния блока.</p>\n<p>Блок использует следующие методы:</p>\n<table>\n    <tr>\n        <th>Метод</td>\n        <th>Описание</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Возвращает имя контрола при его наличии. В обратном случае должен вернуть пустую строку.</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Возвращает значение контрола.</td>\n    </tr>\n</table>\n\n<h1 id=\"menu\">menu</h1>\n<p>Блок <code>menu</code> используется для создания различных типов меню и селектов.</p>\n<p>Он предоставляет возможность изменять размер и внешний вид блоков меню, управлять поведением вложенных блоков – пунктов меню или селекта.</p>\n<p>В результате BEMHTML-преобразований на странице блок становится HTML-элементом с тегом <code>&lt;div&gt;</code> и свойством <code>role=&quot;menu&quot;</code>. HTML-элементом, содащим набор переключателей – пунктов меню (блок <code>menu-item</code>).</p>\n<h2 id=\"-\">Варианты использования меню</h2>\n<p>Блок <code>menu</code> служит для создания различных типов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Меню-переключатель</td>\n        <td>Применяется для создания меню или селектов, позволяющих только одиночный выбор.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;, \n        mode : &#39;radio&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Селект с множественным выбором (<code>_mode_check</code>)</td>\n        <td>При щелчке мышью по пункту меню его состояние меняется на противоположное. Если пункт был активен – он деактивируется и наоборот.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n<tr>\n        <td>Простой список (без модификатора <code>_mode</code>)</td>\n        <td>При щелчке мышью по пункту меню его состояние не меняется. Модификатор <code>_cheked</code> не устанавливается.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr><br></table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно показано на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/select/vAAUvyJpkNyuM0yEru7LP3dZ7xE -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/select/JgK_lg3CEjumbM6ThTKEOcNpfH0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/select/MGiZ5_2bYS32yaxnY5iD9OevjVk -->\n\n\n<h3 id=\"-_size-\">Размеры меню <code>_size</code></h3>\n<p>Задает размер всем типам меню. Обязательный модификатор.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно четыре размера реализации блока: <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер/Параметры</th>\n        <th>Размер шрифта</th>\n        <th>Высота строки <code>line-heigh</code></th>\n        <th>Левый отступ <code>padding-left</code></th>\n        <th>Отступ <code>padding</code></th>\n        <th>Размер &quot;галочки&quot; для темы normal</code></th>\n    </tr>\n    <tr>\n        <td>s</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;s&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>m</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;m&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>l</td>\n        <td>15px</td>\n        <td>28px</td>\n        <td>34px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;l&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>xl</td>\n        <td>15px</td>\n        <td>32px</td>\n        <td>40px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;,\n        size : &#39;xl&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-_mode-\">Способ выбора пунктов <code>_mode</code></h3>\n<p>Модификатор <code>_mode</code> управляет поведением пунктов меню при щелчке по ним мышью, например, возможностью множественного выбора пунктов меню.</p>\n<p>Доступны следующие значения модификатора:</p>\n<ul>\n<li><code>check</code> – селект. Пункт, по которому был произведен щелчек мышью, изменит состояние на противоположное и будет менять состояние при повторных щелчках. Доступна возможность множественного выбора пунктов;</li>\n<li><code>radio</code> – переключатель. При щелчке мышью будет производиться переключение активных пунктов меню. При повторном щелчке пункт, по которому он был произведен, останется <strong>активным</strong>. Множественный выбор недоступен;</li>\n<li><code>radio-check</code> – переключатель. При щелчке мышью будет производиться переключение активных пунктов меню. При повторном щелчке пункт, по которому он был произведен, станет <strong>неактивным</strong>. Множественный выбор недоступен.</li>\n</ul>\n<p>Реализован во всех темах блока.</p>\n<table>\n    <tr>\n        <th>Выбор пунктов</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Только один (<code>_mode_radio</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Множественный выбор или ни одного (<code>_mode_check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Один или ни одного (<code>_mode_radio-check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio-check&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_focused-\">В фокусе <code>_focused</code></h4>\n<p>Модификатор <code>_focused</code> в значении <code>true</code> автоматически выставляется блоку в момент, когда он находится в фокусе. Например, по нажатию клавиши <code>Tab</code> или при щелчке мышью.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/select/lFNP7KamARohsQ5DCX0QQZU1ACQ -->\n\n\n<h2 id=\"-\">Элементы блока</h2>\n<p>Визуально представлен следующими элементами:</p>\n<h3 id=\"__group\">__group</h3>\n<p>Элемент <code>__group</code> служит для группировки пунктов меню. Пункты, которые нужно сгруппировать, помещаются в поле <code>content</code> элемента. Группы визуально отделяются серой чертой.</p>\n<p>Например:</p>\n<!-- bem-example: touch-phone.examples/select/WSrgcU6mXH0StKcrKnckCnH3lrc -->\n\n\n<h3 id=\"__group-title\">__group-title</h3>\n<p>Элемент позволяет задать заголовок для группы пунктов меню, создаваемой с помощью элемента <code>__group</code>.</p>\n<p>Например:</p>\n<!-- bem-example: touch-phone.examples/select/yGGZayW6DClbboVCxBRriqv3YcU -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>menu-item</code></li>\n<li><code>dom</code></li>\n<li><code>keyboard</code></li>\n<li><code>control</code></li>\n</ul>\n\n<h1 id=\"menu-item\">menu-item</h1>\n<p>Блок <code>menu-item</code> служит для создания пунктов меню или селекта. Используется внутри блока <code>menu</code>. Блок <code>menu-item</code> предоставляет возможность изменять состояние, содержимое и тип пунктов меню.</p>\n<p>Блок <code>menu-item</code> в результате BEMHTML-преобразований на странице становится HTML-элементом с тегом <code>&lt;div&gt;</code> со свойством <code>role=&quot;menuitem&quot;</code>.</p>\n<h2 id=\"-\">Варианты использования пунктов меню</h2>\n<p>Блок <code>menu-item</code> служит для создания различных типов пунктов меню:</p>\n<table>\n    <tr>\n        <th>Тип</th>\n        <th>Описание</th>\n        <th>Пример</th>\n    </tr>\n    <tr>\n        <td>Переключатель</td>\n        <td>Применяется для любых выпадающих списков, табов, пунктов меню и селектов и т.п. Используется по умолчанию.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>Ссылка</td>\n        <td>Элемент меню со ссылкой. Блок <code>link</code> помещается в поле <code>content</code> BEMJSON-декларации блока. Так же требуется установить блоку модификатор <code>type</code> в значение <code>link</code>.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"-\">Допустимые атрибуты блока</h2>\n<p>Допустимые атрибуты блока задаются в одноименных полях входного BEMJSON блока:</p>\n<table>\n    <tr>\n        <th>Атрибут</th>\n        <th>Тип</th>\n        <th>Описание</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>Значение, возвращаемое пунктом меню, если он выбран.</td>\n    </tr>\n</table>\n\n\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<ul>\n<li>simple   </li>\n<li>normal  </li>\n</ul>\n<p>Без указания темы к блоку применяются значения, установленные браузером по умолчанию (<em>default</em>).</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/select/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/select/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/select/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"-_type-\">Типы блока <code>_type</code></h3>\n<p>Модификатор <code>_type</code> в значении <code>_link</code> позволяет создавать пункт меню-ссылку. Блок <code>link</code> при этом помещается в поле <code>content</code> BEMJSON-декларации блока. Если модификатор <code>_type_link</code> не установлен, вложенная ссылка будет доступна для действий пользователя при установленном модификаторе <code>_disabled</code>.</p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/select/47lHiiyDspaBs5AiC22G42Y-N_o -->\n\n\n<h3 id=\"-\">Состояния блока</h3>\n<h4 id=\"-_disabled-\">Неактивен <code>_disabled</code></h4>\n<p>В состоянии &quot;неактивен&quot; пункт меню отображается, но недоступен для действий пользователя.  </p>\n<p>Такой пункт меню не изменяет состояние при щелчке мышью. Если для блока установлен модификатор <code>_type_link</code>, переход по ссылке не осуществляется. </p>\n<p>Реализован во всех темах блока.</p>\n<!-- bem-example: touch-phone.examples/select/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"-_hovered-\">Наведение курсором <code>_hovered</code></h4>\n<p>Определяет действие &quot;наведение курсором&quot; на пункт меню.</p>\n<p>Реализован во всех темах блока.</p>\n<p>Автоматически выставляется при наведении указателем мыши на пункт меню.</p>\n<!-- bem-example: touch-phone.examples/select/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"-_checked-\">Выбранный пункт меню <code>_checked</code></h4>\n<p>Модификатор задает выбранный пункт меню.</p>\n<!-- bem-example: touch-phone.examples/select/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>В блоке <code>menu</code> модификатор <code>_checked</code> устанавливается для пункта при щелчке мышью:</p>\n<!-- bem-example: touch-phone.examples/select/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>menu-item</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n\n<h1 id=\"popup\">popup</h1>\n<p>Блок <code>popup</code> используется для создания выпадающих элементов и позволяет изменять их состояние, поведение и внешний вид. Блок отображается поверх остальных элементов страницы.</p>\n<p>Попап может быть вызван различными элементами страницы, например, кнопками или псевдоссылками.</p>\n<p>В момент первого показа (установка модификатора <code>_visible</code>) DOM-элемент блока создается в конце <code>&lt;body&gt;</code>.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы блока <code>_theme</code></h3>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Без указания темы к блоку применяются значения по умолчанию (<em>default</em>), установленные браузером.</p>\n<p>Наглядно видно на примерах ниже:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/select/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/select/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/select/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n\n<h3 id=\"-_visible-\">Видимый <code>_visible</code></h3>\n<p>Модификатор, отвечающий за видимость блока. При значении модификатора <code>false</code> блок не отображается.</p>\n<!-- bem-example: touch-phone.examples/select/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"-_direction-\">Расположение относительно родителя <code>_direction</code></h3>\n<p>Модификатор управляет положением попапа на странице относительно вызвавшего его блока. Расположение блока определяется автоматически, исходя из массива допустимых расположений и положения родителя на странице.</p>\n<p>Выбранное расположение влияет на направление анимации раскрытия.</p>\n<p>По умолчанию используется следующий массив допустимых расположений:</p>\n<table>\n    <tr>\n        <th> Направление раскрытия </td>\n        <th> Индекс в массиве </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>Чтобы управлять расположением попапа, можно ограничить массив расположений, оставив только требуемые. Пользовательский массив нужно передать в качестве JS-параметра с ключом <code>directions</code>. При этом из значений массива будет выбрано наиболее подходящее, исходя из положения родителя на странице.</p>\n<p>Например, если требуется, чтобы попап раскрывался над родителем:</p>\n<!-- bem-example: touch-phone.examples/select/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Или разместить попап справа по центру:</p>\n<!-- bem-example: touch-phone.examples/select/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"-_autoclosable-\">Автоматическое скрытие <code>_autoclosable</code></h3>\n<p>Модификатор отвечает за автоматическое скрытие попапа при клике вне блока. При установке модификатора <code>_autoclosable</code> в значении <code>_true</code> блок будет скрываться при щелчке за его пределами (будет снят модификатор <code>_visible</code>).</p>\n<!-- bem-example: touch-phone.examples/select/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"-popup-\">Взаимосвязи между popup&#39;ами</h2>\n<p>Так как попап выносит себя в конец <code>&lt;body&gt;</code>, чтобы перекрывать другие элементы страницы, возникает необходимость в построении взаимосвязей. Блок умеет выстраивать связи Parent → [ Child, Child, ... ]. Для этого он выполняет проверку, вложен ли блок, вызывающий попап в другой <code>popup</code>. Потомки знают о наличии родителя.\nЕсли бы этих взаимосвязей не было, то родительский попап (при наличии модификатора <code>autoclosable</code> со значением <code>true</code>) закрылся бы при клике внутри дочернего.</p>\n<p>Другими словами модификатор <code>autoclosable</code> со значением <code>true</code> означает, что попап закроется сам и закроет свои дочерние блоки при клике за пределами его самого и дочерних попапов.</p>\n<p>Дочерние блоки popup можно рассматривать в виде цепочки 1 → 2 → 3 → 4. При клике на втором попапе – закрываются третий и четвертый. При клике в первом – закрываются второй, третий, четвертый. При клике за пределами любого попапа из цепочки – закроются все.</p>\n<h3 id=\"-\">Зависимости блока</h3>\n<p>Блок <code>popup</code> зависит от следующего набора блоков и элементов:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        },
                        "en": {
                            "name": "select",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/select/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/select/simple"
                                }
                            ],
                            "description": "<h1 id=\"button\">button</h1>\n<p>The <code>button</code> block is used for different types of buttons creation. It allows you to manage size, sate, content and appearance of a button.</p>\n<h2 id=\"button-use-cases\">Button use cases</h2>\n<ul>\n<li>button – is used to create the majority of web inteface buttons. Used by default.</li>\n<li>link-button – a button that provides link functionality. Must have a mandatory modifier <code>type</code> with <code>link</code> value.</li>\n<li>action button – a button designed to send data to the server (submit). Must be always located inside a form. Sets <code>type</code> modifier with <code>submit</code> value in BEMJSON to create an action button.</li>\n</ul>\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes could be specified in corresponding fields of block&#39;s BEMJSON file:</p>\n<table>\n    <tr>\n        <th>Attributes</th>\n        <th>Type</th>\n        <th>Description</th>\n    </tr>\n    <tr>\n        <td>text</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Text of a button.</td>\n    </tr>\n    <tr>\n        <td>icon</td>\n        <td>\n            <code>BEMJSON</code>\n        </td>\n        <td>Button with an icon provided by an <code>icon</code> block.</td>\n    </tr>\n    <tr>\n        <td>url</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>URL address. It is used only if <code>button_type_link</code> modifier is specified. In this case a button\n            acts as a link and <code>url</code> value is represented as a <code>href</code> attribute.\n        </td>\n    </tr>\n    <tr>\n        <td>id</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Unique identifier of a button.</td>\n    </tr>\n    <tr>\n        <td>tabindex</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Defines tab order between the buttons.</td>\n    </tr>\n    <tr>\n        <td>value</td>\n        <td>\n            <code>String</code>\n        </td>\n        <td>Value to be sent to a server. It is empty by default.</td>\n    </tr>\n</table>\n\n<p>The other valid block&#39;s attributes could be specified in the <code>attrs</code> field in BEMJSON.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>The block supports the following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>theme</code> modifier is not specified, the native representation (<em>default</em>) of a control is available.</p>\n<p>Following examples demonstrate this:</p>\n<p><strong>default</strong></p>\n<!-- bem-example: touch-phone.examples/select/b7paW80CenjDPGtPNxSCdPuUKqg -->\n\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/select/8MGVemijL_tqZt4Z3DsedAxNwDo -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/select/u1hTHzxMhorqFlZaZXNkPIBN4WU -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier that is available for <em>normal</em> theme only.</p>\n<p>Provides all types of buttons with the <code>size</code> value.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Following examples demonstrate this:</p>\n<table>\n  <tr>\n    <th>Size</th>\n    <th>Font size</th>\n    <th>Button height</th>\n    <th>Example</th>\n  </tr>\n  <tr>\n        <th>S</th>\n        <td>13px</td>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39; },\n    text : &#39;Small&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>13px</td>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39; },\n    text : &#39;Medium&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>15px</td>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39; },\n    text : &#39;Large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>18px</td>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39; },\n    text : &#39;X-large&#39;\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_type\">_type</h3>\n<p>The block could be represented as a <code>link-button</code> (<code>button_type_link</code>).</p>\n<p>This button type has mandatory attribute <code>url</code> that should be specified in BEMJSON input data. A link-button has an <code>&lt;a&gt;</code> attribute. <code>url</code> value becomes <code>href</code> attribute.</p>\n<pre><code>{\n    block : &#39;button&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, type : &#39;link&#39; },\n    url : &#39;#&#39;,\n    text : &#39;Link-button&#39;\n}\n</code></pre><h3 id=\"button-s-states\">Button&#39;s states</h3>\n<h4 id=\"_disabled\">_disabled</h4>\n<p>If <code>disabled</code> modifier has <code>true</code> value, button is visible but not available for user action.</p>\n<p>Disabled button cannot be focused by pressing a <code>Tab</code> or on mouse click.</p>\n<pre><code class=\"lang-bemjsom\">{\n    block : &#39;button&#39;,\n    text : &#39;Disabled&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, disabled : true }\n}\n</code></pre>\n<h4 id=\"_focused\">_focused</h4>\n<p>If <code>focused</code> modifier has <code>true</code> value, the button is always focused. You can click the focused button using <code>Space</code> or <code>Enter</code> button on your keyboard. To switch between controls use a <code>Tab</code> button.</p>\n<!-- bem-example: touch-phone.examples/select/UkvwYMbpDOkZaq5dm0uIlVbQ9GA -->\n\n<h4 id=\"_hovered\">_hovered</h4>\n<p>Defines &quot;hover&quot; action.</p>\n<h4 id=\"_pressed\">_pressed</h4>\n<p>Defines &quot;pressed&quot; state of a button.</p>\n<h4 id=\"_togglable\">_togglable</h4>\n<p>Defines a state of the pressed button when the first click presses the button, and the second returns it to its original state.</p>\n<!-- bem-example: touch-phone.examples/select/xAkZMTZIyMq8S8Cc5mWrpqEj5Cc -->\n\n<h4 id=\"_action\">_action</h4>\n<p>Visually highlights a button on a page.</p>\n<!-- bem-example: touch-phone.examples/select/X1_VUgD2DCMkTeRUN6Vd4diR7Yk -->\n\n<h4 id=\"_pseudo\">_pseudo</h4>\n<p>If <code>pseudo</code> modifier has <code>true</code> value, the button background becomes transparent.</p>\n<!-- bem-example: touch-phone.examples/select/GVMyNpdJjINIl0Ab_qhtsWRf_YA -->\nIf pseudo button is disabled, its boarders disappear.\n\n<!-- bem-example: touch-phone.examples/select/fc2vxXBIzzk2stACB-J9vRKlYQ4 -->\n\n<h2 id=\"block-s-elements\">Block&#39;s elements</h2>\n<h3 id=\"__text\">__text</h3>\n<p>This auxiliary element sets a text position inside the button.</p>\n<!-- bem-example: touch-phone.examples/select/t_3HDmaOrqYMmf-3NPSa4KJZWBY -->\n\n<h2 id=\"block-s-dependencies\">Block&#39;s dependencies</h2>\n<ul>\n<li><code>control</code>, that provides public API for the controls</li>\n<li><code>i-bem__dom</code></li>\n<li><code>keyboard</code></li>\n</ul>\n\n<h1 id=\"control\">control</h1>\n<p>Auxiliary block designed for common functionality implementation to provide the most blocks of <a href=\"https://github.com/bem/bem-components\">bem-components</a> library with <code>focused</code> and <code>disabled</code> states:</p>\n<ul>\n<li><a href=\"../attach/attach.en.md\">attach</a></li>\n<li><a href=\"../button/button.en.md\">button</a></li>\n<li><a href=\"../checkbox/checkbox.en.md\">checkbox</a></li>\n<li><a href=\"../input/input.en.md\">input</a></li>\n<li><a href=\"../link/link.en.md\">link</a></li>\n<li><a href=\"../menu/menu.en.md\">menu</a></li>\n<li><a href=\"../radio/radio.en.md\">radio</a></li>\n</ul>\n<p>The <code>control</code> block provides valid <code>tabIndex</code> attribute value depending on the current state of a block.</p>\n<p>The block uses following methods:</p>\n<table>\n    <tr>\n        <th>Method</td>\n        <th>Description</td>\n    </tr>\n    <tr>\n        <td><code>getVal</code></td>\n        <td>Returns a control&#39;s value.</td>\n    </tr>\n    <tr>\n        <td><code>getName</code></td>\n        <td>Returns the name of the control (if available). If control name is not available, returns an empty string.</td>\n    </tr>\n</table>\n\n<h1 id=\"menu\">menu</h1>\n<p>A <code>menu</code> block is used for creation of various types of menus and lists. It allows to manage state, behavior and appearance of menus.</p>\n<p>As a result of BEMHTML transformations, a block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menu&quot;</code> attribute set. The block&#39;s HTML element contains a set of switches – the <code>menu-item</code> blocks.</p>\n<p>It allow to manage the appearance, state and size of a menu blocks as well as manage the nested <code>menu-items</code> block&#39;s appearance.</p>\n<h2 id=\"menu-use-cases\">menu use cases</h2>\n<p>A <code>menu</code> block is used for creation of following menu types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Switch menu</td>\n        <td>Used for creation of lists with a single selectable item.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;,\n        size : &#39;m&#39;, \n        mode : &#39;radio&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A multi selectable list. (<code>_mode_check</code>)</td>\n        <td>Clicking on a list items will perform item&#39;s state switching to opposite. If an item was active it will be deactivated, and vice versa.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;,\n        mode : &#39;check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n<tr>\n        <td>Basic list (with <code>_mode</code> modifier is unset)</td>\n        <td>Menu item&#39;s state will not change on mouse click. A <code>_cheked</code> state modifier will not be toggled.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;m&#39;\n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/select/vAAUvyJpkNyuM0yEru7LP3dZ7xE -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/select/JgK_lg3CEjumbM6ThTKEOcNpfH0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/select/MGiZ5_2bYS32yaxnY5iD9OevjVk -->\n\n<h3 id=\"the-sizes-_size-\">The sizes <code>_size</code></h3>\n<p>Mandatory modifier. Available for <em>normal</em> theme only.\nProvides a size value to all types of radio groups.</p>\n<p>There are four sizes available: <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<table>\n    <tr>\n        <th>A <code>_size</code> value</th>\n        <th>Font size</th>\n        <th>Line height <code>line-heigh</code></th>\n        <th>Left padding <code>padding-left</code></th>\n        <th>Global <code>padding</code></th>\n        <th>The tick&#39;s icon size for normal theme</code></th>\n    </tr>\n    <tr>\n        <td>s</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;s&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>m</td>\n        <td>13px</td>\n        <td>24px</td>\n        <td>30px</td>\n        <td>14px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;m&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>l</td>\n        <td>15px</td>\n        <td>28px</td>\n        <td>34px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;l&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>xl</td>\n        <td>15px</td>\n        <td>32px</td>\n        <td>40px</td>\n        <td>15px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        mode : &#39;check&#39;, \n        size : &#39;xl&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"menu-item-selection-options-_mode-\">Menu item selection options <code>_mode</code></h3>\n<p>A <code>_mode</code> modifier defines a menu item&#39;s reaction on mouse click. For example, it controls multiple items selectability.</p>\n<p>Following modifier values are available:</p>\n<ul>\n<li><code>check</code> – a selectable list. A menu item will change it&#39;s state to opposite on each mouse click. An active item will become inactive and vice versa. Multiple choice is available;</li>\n<li><code>radio</code> – a switcher. Inactive menu item will be activated on mouse click. On re-clicking the menu item will remain <strong>active</strong>. Multiple choice not available;</li>\n<li><code>radio-check</code> – a switcher. Inactive menu item will be activated on mouse click. On re-clicking the active menu item will become <strong>inactive</strong>. Multiple choice not available.</li>\n</ul>\n<p>Available for all block themes.</p>\n<table>\n    <tr>\n        <th>List items selectability</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td>Only one (<code>_mode_radio</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>Plural selection or none (<code>_mode_check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <td>One or none (<code>_mode_radio-check</code>)</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu&#39;,\n    mods : { \n        theme : &#39;normal&#39;, \n        size : &#39;l&#39;, \n        mode : &#39;radio-check&#39; \n    },\n    content : [\n        {\n            block : &#39;menu-item&#39;,\n            val : 1,\n            content : &#39;First item&#39;\n        },\n        {\n            block : &#39;menu-item&#39;,\n            mods : { checked : true },\n            val : 2,\n            content : &#39;Second item&#39;\n        }\n    ]\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h4 id=\"in-focus-_focused-\">In focus <code>_focused</code></h4>\n<p>A <code>_focused</code> modifier is automatically toggles for the block when it is in focus. For example, on mouse click or by <code>Tab</code> key press.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/select/2y_zCWFJ78bAFa8UEqIdsRPc3qM -->\n\n<h2 id=\"the-block-s-elements\">The block&#39;s elements</h2>\n<p>The <code>menu</code> block is visually represented by following elements:</p>\n<h3 id=\"__group\">__group</h3>\n<p>A <code>__group</code> element is used for menu items grouping. An Items that needed grouping should be placed to the element BEMJSON declaration&#39;s <code>content</code> field. The group elements are visually separated by a gray line.</p>\n<p>For example:</p>\n<!-- bem-example: touch-phone.examples/select/WSrgcU6mXH0StKcrKnckCnH3lrc -->\n\n\n<h3 id=\"__group-title\">__group-title</h3>\n<p>This element allows to create a title for a menu items group, created using a <code>_group</code> element.</p>\n<p>For example:</p>\n<!-- bem-example: touch-phone.examples/select/8LCJ2Asb6uR2ZHALf5iscb_n2RU -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>menu-item</code></li>\n<li><code>dom</code></li>\n<li><code>keyboard</code></li>\n<li><code>control</code></li>\n</ul>\n\n<h1 id=\"menu-item\">menu item</h1>\n<p>A <code>menu-item</code> block is used for creation of various types of menu and list items. It is used inside a <code>menu</code> block. The <code>menu-item</code> block allows to manage state, content and type of menu items.</p>\n<p>As a result of BEMHTML transformations block will be rendered to a <code>&lt;div&gt;</code> HTML element, with <code>role=&quot;menuitem&quot;</code> attribute set.</p>\n<h2 id=\"menu-item-use-cases\">menu item use cases</h2>\n<p>The block helps to create following menu item types:</p>\n<table>\n    <tr>\n        <th>Type</th>\n        <th>Description</th>\n        <th>An example</th>\n    </tr>\n    <tr>\n        <td>A switch element</td>\n        <td>Is used to set up a dropdowns, tab menus, lists and menu items, etc.</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    val : 1,\n    content : &#39;Selector value&#39;\n}\n            </code></pre>\n        </td>\n    <tr>\n        <td>A link element (<code>_type_link</code>)</td>\n        <td>An element with nested depended link. A <code>link</code> block should be placed into block&#39;s BEMJSON declaration <code>content</code> field. The <code>_type_link</code> modifier is required.\n        </td>\n        <td>\n            <pre><code>\n{\n    block : &#39;menu-item&#39;,\n    mods : { type : &#39;link&#39; },\n    val : 2,\n    content : {\n        block : &#39;link&#39;,\n        url : &#39;#&#39;,\n        content : &#39;Link 1&#39;\n    }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n\n<h2 id=\"valid-block-s-attributes\">Valid block&#39;s attributes</h2>\n<p>Valid block&#39;s attributes can be specified in the corresponding fields of block&#39;s BEMJSON declaration:</p>\n<table>\n    <tr>\n        <th align=\"center\">Attributes</th>\n        <th align=\"center\">Type</th>\n        <th align=\"center\">Description</th>\n    </tr>\n    <tr>\n        <td>val</td>\n        <td><code>String|Number</code></td>\n        <td>A value returned by menu item if selected.</td>\n    </tr>\n</table>\n\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, the browser defaults (<code>default</code>) will be applied to the block.</p>\n<p>For example:</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/select/eV0q9qK02nCPsMxztjMtbDnRz7U -->\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/select/BxhdTuPatcCVRdT_1B8cW6OHGQ0 -->\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/select/snjxOm4SOT8_nFgCXdf2BKaL_Xs -->\n\n\n<h3 id=\"block-s-states\">Block&#39;s states</h3>\n<h3 id=\"inactive-_disabled-\">Inactive <code>_disabled</code></h3>\n<p>A <code>_disabled</code> modifier helps to create an inactive menu item. Inactive menu item is displayed, but not available for user actions.  </p>\n<p>If a <code>_type_link</code> modifier is set for the block with a nested link, the link will not be followed on mouse click.</p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/select/00ejmLqt61w5ksAsfBl7KgE4dBE -->\n\n\n<h4 id=\"mouse-over-_hovered-\">Mouse over <code>_hovered</code></h4>\n<p>This modifier is automatically toggled when the mouse pointer is over the block. </p>\n<p>Available for all block themes.</p>\n<!-- bem-example: touch-phone.examples/select/Sgw4iIN4STar-QE05xyBmgntftw -->\n\n\n<h4 id=\"selected-menu-item-_checked-\">Selected menu item <code>_checked</code></h4>\n<p>Modifier defines the selected menu item.</p>\n<!-- bem-example: touch-phone.examples/select/T77G-B0x1-Z9ZaPqpW_TAskNFI8 -->\n\n\n<p>For the <code>menu-item</code> blocks nested in a <code>menu</code> block <code>_checked</code> state toggles automatically on mouse click. </p>\n<!-- bem-example: touch-phone.examples/select/sURVY49aNm3TBC1XVeOG1Q5_vi8 -->\n\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n</ul>\n\n<h1 id=\"popup\">popup</h1>\n<p>A <code>popup</code> block is used for popups creation. It allows to manage state, behavior and appearance of popups. Block is displayed in front of all other page elements.</p>\n<p>Popup can be displayed by different page elements like pseudo links or buttons.</p>\n<p>At the moment of first display (<code>_visible</code> modifier toggle) block&#39;s DOM element is created in the end of document <code>&lt;body&gt;</code>.</p>\n<h2 id=\"block-s-modifiers\">Block&#39;s modifiers</h2>\n<h3 id=\"the-themes-_theme-\">The themes <code>_theme</code></h3>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>If a <code>_theme</code> modifier is not set, browser defaults (<code>default</code>) will be applied to block.</p>\n<h4 id=\"default\">default</h4>\n<!-- bem-example: touch-phone.examples/select/Uhdsvnf2MsxKNrQy7w6uLKTxdek -->\n\n\n<h4 id=\"simple\">simple</h4>\n<!-- bem-example: touch-phone.examples/select/7PzT7oA6awlAKgFGXccAdhfz0n0 -->\n\n\n<h4 id=\"normal\">normal</h4>\n<!-- bem-example: touch-phone.examples/select/L1MMDUGHLM4djlDaj5mhiKHvDH8 -->\n\n<h3 id=\"visibility-_visible-\">Visibility <code>_visible</code></h3>\n<p>A <code>_visible</code> modifier allow to control block visibility. If it&#39;s not set, block will not be displayed.</p>\n<!-- bem-example: touch-phone.examples/select/m6WdfiXJP4RkxnBzEuzumr9C4w0 -->\n\n\n<h3 id=\"alignment-respect-to-its-parent-_direction-\">Alignment respect to its parent <code>_direction</code></h3>\n<p>Modifier controls the position of popup window relative to the block which opened it – popup&#39;s alignment. Popup window&#39;s position is detected automatically basing on the admissible directions array and the parent block&#39;s position.</p>\n<p>Chosen alignment will affect the opening animation direction.</p>\n<p>By default following admissible directions array is used:</p>\n<table>\n    <tr>\n        <th> Direction </td>\n        <th> Index in array </td>\n    </tr>\n        <td> bottom-left </td>\n        <td> 0 </td>\n    </tr>\n    <tr>\n        <td> bottom-center </td>\n       <td> 1 </td>\n   </tr>\n    <tr>\n        <td> bottom-right</td>\n        <td> 2 </td>\n    </tr>\n    <tr>\n        <td> top-left </td>\n        <td> 3 </td>\n    </tr>\n    <tr>\n        <td> top-center </td>\n        <td> 4 </td>\n    </tr>\n    <tr>\n        <td> top-right </td>\n        <td> 5 </td>\n    </tr>\n    <tr>\n        <td> right-top </td>\n        <td> 6 </td>\n    </tr>\n    <tr>\n        <td> right-center </td>\n        <td> 7 </td>\n    </tr>\n    <tr>\n        <td> right-bottom </td>\n        <td> 8 </td>\n    </tr>\n    <tr>\n        <td> left-top </td>\n        <td> 9 </td>\n    </tr>\n    <tr>\n        <td> left-center </td>\n        <td> 10 </td>\n    </tr>\n    <tr>\n        <td> left-bottom </td>\n        <td> 11 </td>\n    </tr>\n</table>\n\n<p>To control the popup window position you can provide directions array with desired directions set only. According to parent block&#39;s position on a page the most suitable directions will be chosen among the provided values.</p>\n<p>For example, if the popup window should be opened at the top of the parent block:</p>\n<!-- bem-example: touch-phone.examples/select/ROJZHxrl71CFbWiWU5Ry_Q0Jbhw -->\n\n\n<p>Or if it should be opened strictly at the center-right position:</p>\n<!-- bem-example: touch-phone.examples/select/VE0JWgs-I2gVU8suKC3_eTK29EE -->\n\n\n<h3 id=\"automatic-closure-_autoclosable-\">Automatic closure  <code>_autoclosable</code></h3>\n<p>With <code>_autoclosable</code> modifier toggled block will automatically hide away on mouse click outside popup window (<code>_visible</code> modifier will be removed).</p>\n<!-- bem-example: touch-phone.examples/select/M1T2dIuSVeBoluZEMgCmA90Stgc -->\n\n\n<h2 id=\"relations-between-popup-s\">Relations between popup&#39;s</h2>\n<p>As long as popup&#39;s parent block itself can be nested in another popup block there is a need in a popup&#39;s relations handling. Block can handle Parent → [ Child, Child, ... ] relations by checking if the parent block is nested in another popup block. So, the children knows about the parent blocks existence.</p>\n<p>If there were no such relations, the parent popup block will be closed on mouse click on the child block regardless of the fact that <code>_autoclosable</code> modifier is set to <code>true</code>.</p>\n<p>This means that with <code>autoclosable</code> modifier toggled block will close itself and close all of it children on mouse click outside block&#39;s window or it child&#39;s window.</p>\n<p>Child popup blocks can be regarded as a chain of 1 → 2 → 3 → 4. By clicking on the second element of chain, third and forth will be closed. By clicking on first, the second, third and forth will be closed. On click outside of any popup window of the chain element all popups will be closed.</p>\n<h2 id=\"dependencies\">Dependencies</h2>\n<p>The block depends on:</p>\n<ul>\n<li><code>i-bem__dom</code></li>\n<li><code>jquery</code></li>\n<li><code>dom</code></li>\n<li><code>objects</code></li>\n<li><code>functions__throttle</code></li>\n<li><code>keyboard</code></li>\n<li><code>ua</code></li>\n<li><code>jquery__event_pointer</code></li>\n</ul>\n"
                        }
                    }
                },
                {
                    "name": "spin",
                    "data": {
                        "ru": {
                            "name": "spin",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/spin/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/spin/simple"
                                }
                            ],
                            "description": "<h1 id=\"spin\">spin</h1>\n<p>Блок <code>spin</code> визуально иллюстрирует ход выполнения какого-либо процесса. Например, загрузки сайта или медиа-файла.</p>\n<p>Вращается прелоадер при помощи только CSS3-анимации.</p>\n<h2 id=\"-\">Модификаторы блока</h2>\n<h3 id=\"-_theme-\">Темы оформления <code>_theme</code></h3>\n<p>Обязательный модификатор, так как блок не имеет нативного состояния контрола.</p>\n<p>Блок представлен в следующих темах:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/spin/8nRZMnjcoWEtDxk8S584ZVjCjgM -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/spin/dw4UDnC7PHm5UQ_f-yKnadONEQ4 -->\n\n<h3 id=\"-_size-\">Размеры <code>_size</code></h3>\n<p>Обязательный модификатор. Задает размер блоку <code>spin</code>.</p>\n<p>Реализован только в теме <em>normal</em>.</p>\n<p>Доступно пять размеров реализации блока: <strong>xs</strong>, <strong>s</strong>, <strong>m</strong>, <strong>l</strong>, <strong>xl</strong>.</p>\n<table>\n    <tr>\n        <th>Размер<br>блока</th>\n        <th>Размер, px</th>\n        <th>Реализация</th>\n    </tr>\n    <tr>\n        <th>XS</th>\n        <td>16px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xs&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"-_progress-\">Вращение прелоадера <code>_progress</code></h3>\n<p>Модификатор <code>progress</code> в значении <code>true</code> задает вращение прелоадера и показывает его на странице. Когда прелоадер виден, он крутится.</p>\n<p>Модификатор <code>progress</code> в значении <code>false</code> останавливает прелоадер и скрывает его со страницы.</p>\n"
                        },
                        "en": {
                            "name": "spin",
                            "examples": [
                                {
                                    "url": "touch-phone.tests/spin/gemini"
                                },
                                {
                                    "url": "touch-phone.tests/spin/simple"
                                }
                            ],
                            "description": "<h1 id=\"spin\">spin</h1>\n<p>This block indicates the progress of some process (e.g. site page or some media file loading).</p>\n<p>Rotation of the <code>spin</code> block is implemented by CSS3 animation.</p>\n<h2 id=\"block-modifiers\">Block Modifiers</h2>\n<h3 id=\"_theme\">_theme</h3>\n<p>Mandatory modifier. The <code>spin</code> block doesn&#39;t have native control representation (<em>default</em>).</p>\n<p>This block supports following themes:</p>\n<ul>\n<li>simple</li>\n<li>normal</li>\n</ul>\n<p>Following examples demonstrate this:</p>\n<p><strong>simple</strong></p>\n<!-- bem-example: touch-phone.examples/spin/8nRZMnjcoWEtDxk8S584ZVjCjgM -->\n\n<p><strong>normal</strong></p>\n<!-- bem-example: touch-phone.examples/spin/dw4UDnC7PHm5UQ_f-yKnadONEQ4 -->\n\n<h3 id=\"_size\">_size</h3>\n<p>Mandatory modifier.</p>\n<p>There are five sizes available: <strong>XS</strong>, <strong>S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>XL</strong>.</p>\n<p>Following examples demonstrate this:</p>\n<table>\n    <tr>\n        <th>Block&#39;s size</th>\n        <th>Size, px</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <th>XS</th>\n        <td>16px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xs&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>S</th>\n        <td>24px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;s&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>M</th>\n        <td>28px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;m&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>L</th>\n        <td>32px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;l&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n    <tr>\n        <th>XL</th>\n        <td>38px</td>\n        <td>\n            <pre><code>\n{\n    block : &#39;spin&#39;,\n    mods : { theme : &#39;normal&#39;, size : &#39;xl&#39;, progress : true }\n}\n            </code></pre>\n        </td>\n    </tr>\n</table>\n\n<h3 id=\"_progress\">_progress</h3>\n<p><code>progress</code> modifier with <code>true</code> value activates the spin. <code>spin</code> block rotates only in visible state.</p>\n<p><code>progress</code> modifies with <code>false</code> value paused rotation of <code>spin</code> block and hides it from the page.</p>\n"
                        }
                    },
                    "jsdoc": ""
                }
            ]
        }
    ]
}